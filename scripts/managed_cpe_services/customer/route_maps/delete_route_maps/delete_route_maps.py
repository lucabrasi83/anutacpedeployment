#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        managed-cpe-services
                            |
                            customer
                                    |
                                    route-maps
                                              |
                                              delete-route-maps
                                                               
Schema Representation:

/services/managed-cpe-services/customer/route-maps/delete-route-maps
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from cpedeployment.cpedeployment_lib import getLocalObject
from cpedeployment.cpedeployment_lib import getDeviceObject
from cpedeployment.cpedeployment_lib import getCurrentObjectConfig
from cpedeployment.cpedeployment_lib import ServiceModelContext
from cpedeployment.cpedeployment_lib import getParentObject
from cpedeployment.cpedeployment_lib import log


import service_customization

class DeleteRouteMaps(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'delete_route_maps')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        devbindobjs={}
        inputdict = {}

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['id'] = config.get_field_value('id')
        inputdict['update_profile'] = config.get_field_value('update_profile')
        inputdict['apply_to_sites'] = config.get_field_value('apply_to_sites')
        inputdict['apply_to_device_group'] = config.get_field_value('apply_to_device_group')
        inputdict['device_group'] = config.get_field_value('device_group')
        inputdict['route_map_name'] = config.get_field_value('route_map_name')
        inputdict['sequence_number'] = config.get_field_value('sequence_number')
        inputdict['action'] = config.get_field_value('action')
        inputdict['entry'] = config.get_field_value('entry')
        inputdict['condition_type'] = config.get_field_value('condition_type')
        inputdict['value'] = config.get_field_value('value')
        inputdict['set_type'] = config.get_field_value('set_type')
        inputdict['ip'] = config.get_field_value('ip')
        inputdict['set_value'] = config.get_field_value('set_value')
        inputdict['single_cpe_site'] = config.get_field_value('single_cpe_site')
        inputdict['single_cpe_sites'] = config.get_field_value('single_cpe_sites')
        if inputdict.get('single_cpe_sites') is None:
          inputdict['single_cpe_sites'] = '[]'
        inputdict['dual_cpe_site'] = config.get_field_value('dual_cpe_site')
        inputdict['dual_cpe_sites'] = config.get_field_value('dual_cpe_sites')
        if inputdict.get('dual_cpe_sites') is None:
          inputdict['dual_cpe_sites'] = '[]'
        inputdict['single_cpe_dual_wan_site'] = config.get_field_value('single_cpe_dual_wan_site')
        inputdict['single_cpe_dual_wan_sites'] = config.get_field_value('single_cpe_dual_wan_sites')
        if inputdict.get('single_cpe_dual_wan_sites') is None:
          inputdict['single_cpe_dual_wan_sites'] = '[]'
        inputdict['triple_cpe_site'] = config.get_field_value('triple_cpe_site')
        inputdict['triple_cpe_sites'] = config.get_field_value('triple_cpe_sites')
        if inputdict.get('triple_cpe_sites') is None:
            inputdict['triple_cpe_sites'] = '[]'
        inputdict['dual_cpe_dual_wan_site'] = config.get_field_value('dual_cpe_dual_wan_site')
        inputdict['dual_cpe_dual_wan_sites'] = config.get_field_value('dual_cpe_dual_wan_sites')
        if inputdict.get('dual_cpe_dual_wan_sites') is None:
            inputdict['dual_cpe_dual_wan_sites'] = '[]'
        # END OF FETCHING THE LEAF PARAMETERS

        inputkeydict = {}
        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['managed_cpe_services_customer_name'] = sdata.getRcPath().split('/')[-3].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, device=dev, parentobj=parentobj, inputdict=inputdict, config=config)

        #Start of Device binding with python bindings
        #End of Device binding

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'delete_route_maps')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, dev=dev, parentobj=parentobj, config=config)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'delete_route_maps')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, dev=dev, parentobj=parentobj, config=config)

    @staticmethod
    def getInstance():
        if(DeleteRouteMaps._instance == None):
            DeleteRouteMaps._instance = DeleteRouteMaps()
        return DeleteRouteMaps._instance

    #def rollbackCreate(self, id, sdata):
        #        log('rollback: id = %s, sdata = %s' % (id, sdata))
        #        self.delete(id,sdata)
