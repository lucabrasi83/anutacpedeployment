#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        managed-cpe-services
                            |
                            customer
                                    |
                                    dmvpn-tunnel-profiles
                                                         |
                                                         update-dmvpn-tunnel-profile
                                                                                    
Schema Representation:

/services/managed-cpe-services/customer/dmvpn-tunnel-profiles/update-dmvpn-tunnel-profile
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from cpedeployment.cpedeployment_lib import getLocalObject
from cpedeployment.cpedeployment_lib import getDeviceObject
from cpedeployment.cpedeployment_lib import getCurrentObjectConfig
from cpedeployment.cpedeployment_lib import ServiceModelContext
from cpedeployment.cpedeployment_lib import getParentObject
from cpedeployment.cpedeployment_lib import log


import service_customization


class UpdateDmvpnTunnelProfile(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'update_dmvpn_tunnel_profile')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['id'] = config.get_field_value('id')
        inputdict['tunnel_id'] = config.get_field_value('tunnel_id')
        inputdict['operation'] = config.get_field_value('operation')
        inputdict['nhrp_nw_id'] = config.get_field_value('nhrp_nw_id')
        inputdict['tunnel_key'] = config.get_field_value('tunnel_key')
        inputdict['nhrp_authentication_key'] = config.get_field_value('nhrp_authentication_key')
        inputdict['wan_tunnel_ip'] = config.get_field_value('wan_tunnel_ip')
        inputdict['wan_public_ip'] = config.get_field_value('wan_public_ip')
        inputdict['mtu'] = config.get_field_value('mtu')
        inputdict['tcp_adjust_mss'] = config.get_field_value('tcp_adjust_mss')
        inputdict['tunnel_bandwidth'] = config.get_field_value('tunnel_bandwidth')
        inputdict['fvrf'] = config.get_field_value('fvrf')
        inputdict['ipsec_profile'] = config.get_field_value('ipsec_profile')
        inputdict['single_cpe_site'] = config.get_field_value('single_cpe_site')
        inputdict['single_cpe_sites'] = config.get_field_value('single_cpe_sites')
        if inputdict.get('single_cpe_sites') is None:
            inputdict['single_cpe_sites'] = '[]'
        inputdict['dual_cpe_site'] = config.get_field_value('dual_cpe_site')
        inputdict['dual_cpe_sites'] = config.get_field_value('dual_cpe_sites')
        if inputdict.get('dual_cpe_sites') is None:
            inputdict['dual_cpe_sites'] = '[]'
        inputdict['single_cpe_dual_wan_site'] = config.get_field_value('single_cpe_dual_wan_site')
        inputdict['single_cpe_dual_wan_sites'] = config.get_field_value('single_cpe_dual_wan_sites')
        if inputdict.get('single_cpe_dual_wan_sites') is None:
            inputdict['single_cpe_dual_wan_sites'] = '[]'
        inputdict['triple_cpe_site'] = config.get_field_value('triple_cpe_site')
        inputdict['triple_cpe_sites'] = config.get_field_value('triple_cpe_sites')
        if inputdict.get('triple_cpe_sites') is None:
            inputdict['triple_cpe_sites'] = '[]'
        inputdict['dual_cpe_dual_wan_site'] = config.get_field_value('dual_cpe_dual_wan_site')
        inputdict['dual_cpe_dual_wan_sites'] = config.get_field_value('dual_cpe_dual_wan_sites')
        if inputdict.get('dual_cpe_dual_wan_sites') is None:
            inputdict['dual_cpe_dual_wan_sites'] = '[]'
        # END OF FETCHING THE LEAF PARAMETERS

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['managed_cpe_services_customer_name'] = sdata.getRcPath().split('/')[-3].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        #End of Device binding
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'update_dmvpn_tunnel_profile')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['id'] = config.get_field_value('id')
        inputdict['tunnel_id'] = config.get_field_value('tunnel_id')
        inputdict['operation'] = config.get_field_value('operation')
        inputdict['nhrp_nw_id'] = config.get_field_value('nhrp_nw_id')
        inputdict['tunnel_key'] = config.get_field_value('tunnel_key')
        inputdict['nhrp_authentication_key'] = config.get_field_value('nhrp_authentication_key')
        inputdict['wan_tunnel_ip'] = config.get_field_value('wan_tunnel_ip')
        inputdict['wan_public_ip'] = config.get_field_value('wan_public_ip')
        inputdict['mtu'] = config.get_field_value('mtu')
        inputdict['tcp_adjust_mss'] = config.get_field_value('tcp_adjust_mss')
        inputdict['tunnel_bandwidth'] = config.get_field_value('tunnel_bandwidth')
        inputdict['fvrf'] = config.get_field_value('fvrf')
        inputdict['ipsec_profile'] = config.get_field_value('ipsec_profile')
        # END OF FETCHING THE LEAF PARAMETERS
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'update_dmvpn_tunnel_profile')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['id'] = config.get_field_value('id')
        inputdict['tunnel_id'] = config.get_field_value('tunnel_id')
        inputdict['operation'] = config.get_field_value('operation')
        inputdict['nhrp_nw_id'] = config.get_field_value('nhrp_nw_id')
        inputdict['tunnel_key'] = config.get_field_value('tunnel_key')
        inputdict['nhrp_authentication_key'] = config.get_field_value('nhrp_authentication_key')
        inputdict['wan_tunnel_ip'] = config.get_field_value('wan_tunnel_ip')
        inputdict['wan_public_ip'] = config.get_field_value('wan_public_ip')
        inputdict['mtu'] = config.get_field_value('mtu')
        inputdict['tcp_adjust_mss'] = config.get_field_value('tcp_adjust_mss')
        inputdict['tunnel_bandwidth'] = config.get_field_value('tunnel_bandwidth')
        inputdict['fvrf'] = config.get_field_value('fvrf')
        inputdict['ipsec_profile'] = config.get_field_value('ipsec_profile')
        # END OF FETCHING THE LEAF PARAMETERS
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(UpdateDmvpnTunnelProfile._instance == None):
            UpdateDmvpnTunnelProfile._instance = UpdateDmvpnTunnelProfile()
        return UpdateDmvpnTunnelProfile._instance

    #def rollbackCreate(self, id, sdata):
        #        log('rollback: id = %s, sdata = %s' % (id, sdata))
        #        self.delete(id,sdata)

if __name__ == 'update_dmvpn_tunnel_profile':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = UpdateDmvpnTunnelProfile().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
