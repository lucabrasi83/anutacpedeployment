#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2016-2017 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        managed-cpe-services
                            |
                            customer
                                    |
                                    adaptive-dps
                                                |
                                                adaptive-dps
                                                            |
                                                            actions
                                                                   |
                                                                   action
                                                                         
Schema Representation:

/services/managed-cpe-services/customer/adaptive-dps/adaptive-dps/actions/action
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from cpedeployment.cpedeployment_lib import getLocalObject
from cpedeployment.cpedeployment_lib import getDeviceObject
from cpedeployment.cpedeployment_lib import getCurrentObjectConfig
from cpedeployment.cpedeployment_lib import ServiceModelContext
from cpedeployment.cpedeployment_lib import getParentObject
from cpedeployment.cpedeployment_lib import log

import service_customization


class Action(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'action')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['label'] = config.get_field_value('label')
        inputdict['action_statement'] = config.get_field_value('action_statement')
        inputdict['cli_type'] = config.get_field_value('cli_type')
        inputdict['cli_string'] = config.get_field_value('cli_string')
        inputdict['regex_pattern'] = config.get_field_value('regex_pattern')
        inputdict['input_string'] = config.get_field_value('input_string')
        inputdict['syslog'] = config.get_field_value('syslog')
        inputdict['syslog_priority'] = config.get_field_value('syslog_priority')
        inputdict['syslog_msg'] = config.get_field_value('syslog_msg')
        inputdict['first_operand'] = config.get_field_value('first_operand')
        inputdict['compare'] = config.get_field_value('compare')
        inputdict['second_operand'] = config.get_field_value('second_operand')
        inputdict['exit_result'] = config.get_field_value('exit_result')
        inputdict['comment_string'] = config.get_field_value('comment_string')
        inputdict['handle_error_type'] = config.get_field_value('handle_error_type')
        # END OF FETCHING THE LEAF PARAMETERS

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['managed_cpe_services_customer_adaptive_dps_adaptive_dps_applet_name'] = sdata.getRcPath().split('/')[-3].split('=')[1]
        inputkeydict['managed_cpe_services_customer_name'] = sdata.getRcPath().split('/')[-5].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'action')
        #pconfig = getPreviousObjectConfig(id, sdata, 'action')
        pconfig = config
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['label'] = config.get_field_value('label')
        inputdict['action_statement'] = config.get_field_value('action_statement')
        inputdict['cli_type'] = config.get_field_value('cli_type')
        inputdict['cli_string'] = config.get_field_value('cli_string')
        inputdict['regex_pattern'] = config.get_field_value('regex_pattern')
        inputdict['input_string'] = config.get_field_value('input_string')
        inputdict['syslog'] = config.get_field_value('syslog')
        inputdict['syslog_priority'] = config.get_field_value('syslog_priority')
        inputdict['syslog_msg'] = config.get_field_value('syslog_msg')
        inputdict['first_operand'] = config.get_field_value('first_operand')
        inputdict['compare'] = config.get_field_value('compare')
        inputdict['second_operand'] = config.get_field_value('second_operand')
        inputdict['exit_result'] = config.get_field_value('exit_result')
        inputdict['comment_string'] = config.get_field_value('comment_string')
        inputdict['handle_error_type'] = config.get_field_value('handle_error_type')
        # END OF FETCHING THE LEAF PARAMETERS

        pinputdict = {}

        # START OF FETCHING THE PREVIOUS LEAF PARAMETERS
        pinputdict['label'] = pconfig.get_field_value('label')
        pinputdict['action_statement'] = pconfig.get_field_value('action_statement')
        pinputdict['cli_type'] = pconfig.get_field_value('cli_type')
        pinputdict['cli_string'] = pconfig.get_field_value('cli_string')
        pinputdict['regex_pattern'] = pconfig.get_field_value('regex_pattern')
        pinputdict['input_string'] = pconfig.get_field_value('input_string')
        pinputdict['syslog'] = pconfig.get_field_value('syslog')
        pinputdict['syslog_priority'] = pconfig.get_field_value('syslog_priority')
        pinputdict['syslog_msg'] = pconfig.get_field_value('syslog_msg')
        pinputdict['first_operand'] = pconfig.get_field_value('first_operand')
        pinputdict['compare'] = pconfig.get_field_value('compare')
        pinputdict['second_operand'] = pconfig.get_field_value('second_operand')
        pinputdict['exit_result'] = pconfig.get_field_value('exit_result')
        pinputdict['comment_string'] = pconfig.get_field_value('comment_string')
        pinputdict['handle_error_type'] = pconfig.get_field_value('handle_error_type')
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, parentobj=parentobj, config=config, pconfig=pconfig, hopaque=opaque_args, inputdict=inputdict, pinputdict=pinputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'action')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = None

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['label'] = config.get_field_value('label')
        inputdict['action_statement'] = config.get_field_value('action_statement')
        inputdict['cli_type'] = config.get_field_value('cli_type')
        inputdict['cli_string'] = config.get_field_value('cli_string')
        inputdict['regex_pattern'] = config.get_field_value('regex_pattern')
        inputdict['input_string'] = config.get_field_value('input_string')
        inputdict['syslog'] = config.get_field_value('syslog')
        inputdict['syslog_priority'] = config.get_field_value('syslog_priority')
        inputdict['syslog_msg'] = config.get_field_value('syslog_msg')
        inputdict['first_operand'] = config.get_field_value('first_operand')
        inputdict['compare'] = config.get_field_value('compare')
        inputdict['second_operand'] = config.get_field_value('second_operand')
        inputdict['exit_result'] = config.get_field_value('exit_result')
        inputdict['comment_string'] = config.get_field_value('comment_string')
        inputdict['handle_error_type'] = config.get_field_value('handle_error_type')
        # END OF FETCHING THE LEAF PARAMETERS

        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(Action._instance == None):
            Action._instance = Action()
        return Action._instance
