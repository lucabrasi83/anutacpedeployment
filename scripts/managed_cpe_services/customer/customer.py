#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        managed-cpe-services
                            |
                            customer
                                    
Schema Representation:

/services/managed-cpe-services/customer
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from cpedeployment.cpedeployment_lib import getLocalObject
from cpedeployment.cpedeployment_lib import getDeviceObject
from cpedeployment.cpedeployment_lib import getCurrentObjectConfig
from cpedeployment.cpedeployment_lib import ServiceModelContext
from cpedeployment.cpedeployment_lib import getParentObject
from cpedeployment.cpedeployment_lib import log


import service_customization

class Customer(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'customer')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = None
        devbindobjs={}
        inputdict = {}

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['name'] = config.get_field_value('name')
        inputdict['description'] = config.get_field_value('description')
        inputdict['resource_pool'] = config.get_field_value('resource_pool')
        # END OF FETCHING THE LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, parentobj=parentobj, inputdict=inputdict, config=config)

        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, inputdict=inputdict, parentobj=parentobj, config=config, devbindobjs=devbindobjs)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'customer')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)
        dev = None
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, dev=dev, parentobj=parentobj, config=config)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'customer')

        #Fetch Service Model Context Object
        smodelctx = None
        rcpath = sdata.getRcPath() + '/'
        print 'rcpath = %s' % (rcpath)
        pattern = '/controller:services'
        idx = rcpath.find(pattern)
        if idx < 0:
            print 'cant find pattern in rcpath = %s' % (rcpath)
            return rcpath
        idx = rcpath.find('customer', idx)
        if idx < 0:
            print 'cant find pattern in rcpath = %s' % (rcpath)
            return rcpath
        idx = rcpath.find('/', idx)
        print 'idx = %d' % (idx)
        if idx < 0:
            print 'cant find / in rcpath = %s, idx = %d' % (rcpath, idx)
            return rcpath
        print 'rcpath = %s, new = %s' % (rcpath, rcpath[:idx])
        rcpath = rcpath[:idx]

        print 'setting rcpath= %s' % (rcpath)

        xml_output = yang.Sdk.getData(rcpath, '', sdata.getTaskId())
        obj = util.parseXmlString(xml_output)

        if hasattr(obj.customer,'single_cpe_site'):
            if hasattr(obj.customer.single_cpe_site,'single_cpe_site_services') and obj.customer.single_cpe_site.single_cpe_site_services is not None:
                raise Exception("Should not delete the customer without deleting single-cpe-site-services")
        if hasattr(obj.customer,'dual_cpe_site'):
            if hasattr(obj.customer.dual_cpe_site,'dual_cpe_site_services') and obj.customer.dual_cpe_site.dual_cpe_site_services is not None:
                raise Exception("Should not delete the customer without deleting dual-cpe-site-services")
        if hasattr(obj.customer,'single_cpe_dual_wan_site'):
            if hasattr(obj.customer.single_cpe_dual_wan_site,'single_cpe_dual_wan_site_services') and obj.customer.single_cpe_dual_wan_site.single_cpe_dual_wan_site_services is not None:
                raise Exception("Should not delete the customer without deleting single-cpe-dual-wan-site-services")
        if hasattr(obj.customer,'dual_cpe_dual_wan_site'):
            if hasattr(obj.customer.dual_cpe_dual_wan_site,'dual_cpe_dual_wan_site_services') and obj.customer.dual_cpe_dual_wan_site.dual_cpe_dual_wan_site_services is not None:
                raise Exception("Should not delete the customer without deleting dual-cpe-dual-wan-site-services")
        if hasattr(obj.customer,'triple_cpe_site'):
            if hasattr(obj.customer.triple_cpe_site,'triple_cpe_site_services') and obj.customer.triple_cpe_site.triple_cpe_site_services is not None:
                raise Exception("Should not delete the customer without deleting triple-cpe-site-services")

        #Fetch Parent Object
        parentobj = getParentObject(sdata)
        dev = None
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, dev=dev, parentobj=parentobj, config=config)

    @staticmethod
    def getInstance():
        if(Customer._instance == None):
            Customer._instance = Customer()
        return Customer._instance

    #def rollbackCreate(self, id, sdata):
        #        log('rollback: id = %s, sdata = %s' % (id, sdata))
        #        self.delete(id,sdata)
