#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2016-2017 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#ALL THE CUSTOMIZATIONS REGARDING DATAPROCESSING SHOULD BE WRITTEN INTO service_customization.py FILE
#
"""
Tree Structure of Handled XPATH:

services
        |
        managed-cpe-services
                            |
                            customer
                                    |
                                    triple-cpe-site
                                                   |
                                                   triple-cpe-site-services
                                                                           |
                                                                           cpe-lan
                                                                                  |
                                                                                  lan-profile
                                                                                             
Schema Representation:

/services/managed-cpe-services/customer/triple-cpe-site/triple-cpe-site-services/cpe-lan/lan-profile
"""

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr

from cpedeployment.cpedeployment_lib import getLocalObject
from cpedeployment.cpedeployment_lib import getDeviceObject
from cpedeployment.cpedeployment_lib import getCurrentObjectConfig
from cpedeployment.cpedeployment_lib import ServiceModelContext
from cpedeployment.cpedeployment_lib import getParentObject
from cpedeployment.cpedeployment_lib import log


import service_customization


class LanProfile(yang.AbstractYangServiceHandler):
    _instance = None

    def __init__(self):
        self.delete_pre_processor = service_customization.DeletePreProcessor()
        self.create_pre_processor = service_customization.CreatePreProcessor()
        self.opaque_args = {}

    def create(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.create_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'lan_profile')

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['profile_name'] = config.get_field_value('profile_name')
        inputdict['cidr'] = config.get_field_value('cidr')
        inputdict['inbound_policy'] = config.get_field_value('inbound_policy')
        inputdict['hierarchical_inbound_policy'] = config.get_field_value('hierarchical_inbound_policy')
        inputdict['hierarchical_policy'] = config.get_field_value('hierarchical_policy')
        inputdict['auto_negotiation'] = config.get_field_value('auto_negotiation')
        if inputdict.get('auto_negotiation') is None:
          inputdict['auto_negotiation'] = 'False'
        inputdict['speed'] = config.get_field_value('speed')
        inputdict['duplex'] = config.get_field_value('duplex')
        inputdict['load_interval'] = config.get_field_value('load_interval')
        inputdict['load_interval_delay'] = config.get_field_value('load_interval_delay')
        inputdict['hold_queue_in'] = config.get_field_value('hold_queue_in')
        inputdict['in_queue_length'] = config.get_field_value('in_queue_length')
        inputdict['hold_queue_out'] = config.get_field_value('hold_queue_out')
        inputdict['out_queue_length'] = config.get_field_value('out_queue_length')
        inputdict['hsrp_version'] = config.get_field_value('hsrp_version')
        if inputdict.get('hsrp_version') is None:
          inputdict['hsrp_version'] = '2'
        inputdict['hsrp_standby_ip'] = config.get_field_value('hsrp_standby_ip')
        inputdict['hsrp_group'] = config.get_field_value('hsrp_group')
        inputdict['hsrp_preempt'] = config.get_field_value('hsrp_preempt')
        inputdict['hsrp_preempt_reload_delay'] = config.get_field_value('hsrp_preempt_reload_delay')
        inputdict['auth_type'] = config.get_field_value('auth_type')
        inputdict['auth_password'] = config.get_field_value('auth_password')
        inputdict['hsrp_timers'] = config.get_field_value('hsrp_timers')
        inputdict['hello_interval_sec'] = config.get_field_value('hello_interval_sec')
        inputdict['hello_interval_msec'] = config.get_field_value('hello_interval_msec')
        if inputdict.get('hello_interval_msec') is None:
          inputdict['hello_interval_msec'] = '250'
        inputdict['hold_time_sec'] = config.get_field_value('hold_time_sec')
        if inputdict.get('hold_time_sec') is None:
          inputdict['hold_time_sec'] = '1'
        inputdict['hold_time_msec'] = config.get_field_value('hold_time_msec')
        # END OF FETCHING THE LEAF PARAMETERS

        # START OF FETCHING THE PARENT KEY LEAF PARAMETERS
        inputkeydict['managed_cpe_services_customer_triple_cpe_site_triple_cpe_site_services_site_name'] = sdata.getRcPath().split('/')[-3].split('=')[1]
        inputkeydict['managed_cpe_services_customer_name'] = sdata.getRcPath().split('/')[-5].split('=')[1]
        # END OF FETCHING THE PARENT KEY LEAF PARAMETERS

        #Use the custom methods to process the data
        service_customization.ServiceDataCustomization.process_service_create_data(smodelctx, sdata, dev, id=id, device=dev, parentobj=parentobj, inputdict=inputdict, inputkeydict=inputkeydict, config=config, hopaque=opaque_args)

        #Start of Device binding with python bindings
        #End of Device binding
        #Use the custom method to process/create payload
        service_customization.ServiceDataCustomization.process_service_device_bindings(smodelctx, sdata, dev, id=id, device=dev, inputdict=inputdict, inputkeydict=inputkeydict, parentobj=parentobj, config=config, devbindobjs=devbindobjs, hopaque=opaque_args)

    def update(self, id, sdata):
        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'lan_profile')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['profile_name'] = config.get_field_value('profile_name')
        inputdict['cidr'] = config.get_field_value('cidr')
        inputdict['inbound_policy'] = config.get_field_value('inbound_policy')
        inputdict['hierarchical_inbound_policy'] = config.get_field_value('hierarchical_inbound_policy')
        inputdict['hierarchical_policy'] = config.get_field_value('hierarchical_policy')
        inputdict['auto_negotiation'] = config.get_field_value('auto_negotiation')
        if inputdict.get('auto_negotiation') is None:
          inputdict['auto_negotiation'] = 'False'
        inputdict['speed'] = config.get_field_value('speed')
        inputdict['duplex'] = config.get_field_value('duplex')
        inputdict['load_interval'] = config.get_field_value('load_interval')
        inputdict['load_interval_delay'] = config.get_field_value('load_interval_delay')
        inputdict['hold_queue_in'] = config.get_field_value('hold_queue_in')
        inputdict['in_queue_length'] = config.get_field_value('in_queue_length')
        inputdict['hold_queue_out'] = config.get_field_value('hold_queue_out')
        inputdict['out_queue_length'] = config.get_field_value('out_queue_length')
        inputdict['hsrp_version'] = config.get_field_value('hsrp_version')
        if inputdict.get('hsrp_version') is None:
          inputdict['hsrp_version'] = '2'
        inputdict['hsrp_standby_ip'] = config.get_field_value('hsrp_standby_ip')
        inputdict['hsrp_group'] = config.get_field_value('hsrp_group')
        inputdict['hsrp_preempt'] = config.get_field_value('hsrp_preempt')
        inputdict['hsrp_preempt_reload_delay'] = config.get_field_value('hsrp_preempt_reload_delay')
        inputdict['auth_type'] = config.get_field_value('auth_type')
        inputdict['auth_password'] = config.get_field_value('auth_password')
        inputdict['hsrp_timers'] = config.get_field_value('hsrp_timers')
        inputdict['hello_interval_sec'] = config.get_field_value('hello_interval_sec')
        inputdict['hello_interval_msec'] = config.get_field_value('hello_interval_msec')
        if inputdict.get('hello_interval_msec') is None:
          inputdict['hello_interval_msec'] = '250'
        inputdict['hold_time_sec'] = config.get_field_value('hold_time_sec')
        if inputdict.get('hold_time_sec') is None:
          inputdict['hold_time_sec'] = '1'
        inputdict['hold_time_msec'] = config.get_field_value('hold_time_msec')
        # END OF FETCHING THE LEAF PARAMETERS
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_update_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    def delete(self, id, sdata):
        sdata.getSession().addYangSessionPreReserveProcessor(self.delete_pre_processor)

        #Fetch Local Config Object
        config = getCurrentObjectConfig(id, sdata, 'lan_profile')
        opaque_args = self.opaque_args

        #Fetch Service Model Context Object
        smodelctx = None

        #Fetch Parent Object
        parentobj = getParentObject(sdata)

        dev = []
        inputkeydict = {}
        devbindobjs={}
        inputdict = {}
        opaque_args = self.opaque_args

        # START OF FETCHING THE LEAF PARAMETERS
        inputdict['profile_name'] = config.get_field_value('profile_name')
        inputdict['cidr'] = config.get_field_value('cidr')
        inputdict['inbound_policy'] = config.get_field_value('inbound_policy')
        inputdict['hierarchical_inbound_policy'] = config.get_field_value('hierarchical_inbound_policy')
        inputdict['hierarchical_policy'] = config.get_field_value('hierarchical_policy')
        inputdict['auto_negotiation'] = config.get_field_value('auto_negotiation')
        if inputdict.get('auto_negotiation') is None:
          inputdict['auto_negotiation'] = 'False'
        inputdict['speed'] = config.get_field_value('speed')
        inputdict['duplex'] = config.get_field_value('duplex')
        inputdict['load_interval'] = config.get_field_value('load_interval')
        inputdict['load_interval_delay'] = config.get_field_value('load_interval_delay')
        inputdict['hold_queue_in'] = config.get_field_value('hold_queue_in')
        inputdict['in_queue_length'] = config.get_field_value('in_queue_length')
        inputdict['hold_queue_out'] = config.get_field_value('hold_queue_out')
        inputdict['out_queue_length'] = config.get_field_value('out_queue_length')
        inputdict['hsrp_version'] = config.get_field_value('hsrp_version')
        if inputdict.get('hsrp_version') is None:
          inputdict['hsrp_version'] = '2'
        inputdict['hsrp_standby_ip'] = config.get_field_value('hsrp_standby_ip')
        inputdict['hsrp_group'] = config.get_field_value('hsrp_group')
        inputdict['hsrp_preempt'] = config.get_field_value('hsrp_preempt')
        inputdict['hsrp_preempt_reload_delay'] = config.get_field_value('hsrp_preempt_reload_delay')
        inputdict['auth_type'] = config.get_field_value('auth_type')
        inputdict['auth_password'] = config.get_field_value('auth_password')
        inputdict['hsrp_timers'] = config.get_field_value('hsrp_timers')
        inputdict['hello_interval_sec'] = config.get_field_value('hello_interval_sec')
        inputdict['hello_interval_msec'] = config.get_field_value('hello_interval_msec')
        if inputdict.get('hello_interval_msec') is None:
          inputdict['hello_interval_msec'] = '250'
        inputdict['hold_time_sec'] = config.get_field_value('hold_time_sec')
        if inputdict.get('hold_time_sec') is None:
          inputdict['hold_time_sec'] = '1'
        inputdict['hold_time_msec'] = config.get_field_value('hold_time_msec')
        # END OF FETCHING THE LEAF PARAMETERS
        dev = []
        #Use the custom method to process the data
        service_customization.ServiceDataCustomization.process_service_delete_data(smodelctx, sdata, id=id, dev=dev, parentobj=parentobj, config=config, hopaque=opaque_args, inputdict=inputdict)

    @staticmethod
    def getInstance():
        if(LanProfile._instance == None):
            LanProfile._instance = LanProfile()
        return LanProfile._instance

    #def rollbackCreate(self, id, sdata):
        #        log('rollback: id = %s, sdata = %s' % (id, sdata))
        #        self.delete(id,sdata)

if __name__ == 'lan_profile':
  from servicemodel.yang import YangServiceData
  sdata = YangServiceData()
  instance = LanProfile().getInstance()
  instance.create(None, sdata)
  instance.delete(None, sdata)
  instance.update(None, sdata)
