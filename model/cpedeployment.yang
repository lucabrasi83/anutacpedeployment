module cpedeployment {
  yang-version 1.1;
  namespace "http://anutanetworks.com/cpedeployment";
  prefix cpedeployment;

  import controller {
    prefix ac;
  }
  import device {
    prefix dev;
  }
  import interface {
    prefix if;
  }
  import ipam {
    prefix ip;
  }
  import resourcepool {
    prefix rp;
  }
  import service-manager {
    prefix sm;
  }
  import vrouter-feature {
    prefix vrf;
  }
  import interconnect-feature {
    prefix ic;
  }
  import virtual-network-feature {
    prefix vnf;
  }
  import external-network-feature {
    prefix enf;
  }
  import ncx-extensions {
    prefix n-ext;
  }
  import ncx-ui-extensions {
    prefix n-ext-ui;
  }
  import ietf-inet-types {
    prefix inet;
  }
  import hsrp {
    prefix hsrp;
  }
  import l3features {
    prefix l3;
  }
  import qos {
    prefix qos;
  }
  import dmvpn {
    prefix dmvpn;
  }

  organization
    "Anuta Networks";
  description
    "This module contains a collection of YANG definitions for
      TATA Communications CPE Service ";

  revision 2016-06-30 {
    description
      "Initial revision";
  }

  typedef interface-type {
    type enumeration {
      enum "Physical";
      enum "SVI";
      enum "Sub-Interface";
    }
  }

  typedef interface-type1 {
    type enumeration {
      enum "Physical";
      enum "SVI";
      enum "Sub-Interface";
      enum "Tunnel";
    }
  }

  typedef condition-type {
    type enumeration {
      enum "permit";
      enum "deny";
    }
  }

  typedef community-list-entry-type {
    type enumeration {
      enum "standard";
      enum "expanded";
    }
  }

  typedef access-list-entry-type {
    type enumeration {
      enum "extended";
    }
  }

  typedef route-map-condition-types {
    type enumeration {
      enum "interface";
      enum "tag";
      enum "acl";
      enum "prefix-list";
      enum "route-source";
      enum "source-protocol";
      enum "community";
      enum "metric";
      enum "as-path";
      enum "next-hop";
      enum "address";
      enum "extcommunity";
    }
  }

  typedef access-id {
    type enumeration {
      enum "ro";
      enum "rw";
    }
  }

  typedef route-update {
    type enumeration {
      enum "in";
      enum "out";
    }
  }

  typedef default-inf-key {
    type enumeration {
      enum "metric";
      enum "metric-type";
      enum "route-map";
    }
  }

  typedef key {
    type enumeration {
      enum "metric";
      enum "metric-type";
    }
  }

  typedef ospf-protocol {
    type enumeration {
      enum "bgp";
      enum "ospf";
    }
  }

  typedef route-map-set-types {
    type enumeration {
      enum "local-preference";
      enum "metric";
      enum "metric-type";
      enum "as-path";
      enum "tag";
      enum "community";
      enum "next-hop";
      enum "as-path prepend";
      enum "vrf";
      enum "ip";
      enum "origin";
      enum "weight";
      enum "comm-list";
    }
  }

  typedef ip-types {
    type enumeration {
      enum "precedence";
      enum "next-hop";
      enum "df";
      enum "qos-group";
    }
  }

  typedef precedence-type {
    type enumeration {
      enum "routine";
      enum "priority";
      enum "immediate";
      enum "flash";
      enum "flash-override";
      enum "critical";
      enum "internet";
      enum "network";
    }
  }

  typedef match-packets-type {
    type enumeration {
      enum "precedence";
      enum "dscp";
    }
  }

  typedef set-values {
    type union {
      type string;
      type precedence-type;
    }
  }

  typedef action-type {
    type enumeration {
      enum "permit";
      enum "deny";
    }
  }

  typedef match-type-def {
    type enumeration {
      enum "match-all";
      enum "match-any";
    }
  }

  typedef matching-prefix-type {
    type string {
      pattern "^(([0-9])|([1-2][0-9])|(3[0-2]))$";
    }
  }

  typedef crypto-version {
    type enumeration {
      enum "IKEV1";
      enum "IKEV2";
    }
  }

  typedef encryption {
    type enumeration {
      enum "DES";
      enum "3DES";
      enum "AES128";
      enum "AES192";
      enum "AES256";
    }
  }

  typedef encryption_transform {
    type enumeration {
      enum "esp-aes";
      enum "esp-3des";
      enum "esp-des";
      enum "esp-aes 128";
      enum "esp-aes 192";
      enum "esp-aes 256";
    }
  }

  typedef authentication {
    type enumeration {
      enum "MD5";
      enum "SHA1";
      enum "SHA256";
      enum "SHA384";
      enum "SHA512";
    }
  }

  typedef authentication_transform {
    type enumeration {
      enum "esp-md5-hmac";
      enum "esp-sha-hmac";
      enum "esp-sha256-hmac";
      enum "esp-sha384-hmac";
      enum "esp-sha512-hmac";
    }
  }

  typedef ipsec-mode {
    type enumeration {
      enum "transport";
      enum "tunnel";
    }
  }

  typedef operation-def {
    type enumeration {
      enum "CREATE";
      enum "DELETE";
    }
  }

  typedef table-def {
    type enumeration {
      enum "multicast";
      enum "unicast";
    }
  }

  typedef auth-mode {
    type enumeration {
      enum "pre-share";
      enum "rsa-sig";
    }
  }

  typedef dscp-values-type {
    description
      "dscp-code-all-values-type";
    type union {
      /*type uint8 {
        range "0..63";
      }*/
      type enumeration {
        enum "af11" {
          description
            "DSCP 10";
        }
        enum "af12" {
          description
            "DSCP 12";
        }
        enum "af13" {
          description
            "DSCP 14";
        }
        enum "af21" {
          description
            "DSCP 18";
        }
        enum "af22" {
          description
            "DSCP 20";
        }
        enum "af23" {
          description
            "DSCP 22";
        }
        enum "af31" {
          description
            "DSCP 26";
        }
        enum "af32" {
          description
            "DSCP 28";
        }
        enum "af33" {
          description
            "DSCP 30";
        }
        enum "af41" {
          description
            "DSCP 34";
        }
        enum "af42" {
          description
            "DSCP 36";
        }
        enum "af43" {
          description
            "DSCP 38";
        }
        enum "cs0" {
          description
            "Class selector 000 000 (0)";
        }
        enum "cs1" {
          description
            "Class Selector 001 000 (8)";
        }
        enum "cs2" {
          description
            "Class Selector 010 000 (16)";
        }
        enum "cs3" {
          description
            "Class Selector 011 000 (24)";
        }
        enum "cs4" {
          description
            "Class Selector 100 000 (32)";
        }
        enum "cs5" {
          description
            "Class Selector 101 000 (40)";
        }
        enum "cs6" {
          description
            "Class Selector 110 000 (48)";
        }
        enum "cs7" {
          description
            "Class Selector 111 000 (56)";
        }
        enum "default" {
          description
            "Default forwarding 000 000 (0)";
        }
        enum "ef" {
          description
            "Expedited forwarding 101 110 (46)";
        }
        enum "all" {
          description
            "All classes";
        }
      }
    }
  }

  typedef random-detect-def {
    type enumeration {
      enum "dscp-based";
      enum "discard-class-based";
      enum "precedence-based";
      enum "default";
      enum "none";
    }
  }

  typedef priority-level-def {
    type uint32 {
      range "1..2";
    }
  }

  typedef percentage-def {
    type uint8 {
      range "1..100";
    }
    units "percent";
    description
      "percentage";
  }

  typedef protocol-def {
    type enumeration {
      enum "ftp";
      enum "http";
      enum "https";
      enum "ntp";
      enum "bgp";
      enum "ospf";
      enum "netflow";
      enum "snmp";
      enum "ssh";
      enum "syslog";
      enum "tacacs";
      enum "exchange";
      enum "http url";
      enum "lotus-notes";
      enum "dropbox";
      enum "cifs";
      enum "tftp";
      enum "sftp";
      enum "sip";
      enum "h323";
      enum "ms-lync";
      enum "ms-lync-audio";
      enum "ms-lync-video";
      enum "rtp";
      enum "rtp video";
      enum "rtp audio";
      enum "ms-update";
      enum "ms-office-365";
      enum "sap";
      enum "active-directory";
      enum "salesforce";
      enum "share-point";
      enum "citrix";
      enum "citrix-audio";
      enum "citrix-static";
      enum "teamviewer";
      enum "lwapp";
      enum "telnet";
    }
  }

  typedef traffic-class-def {
    type enumeration {
      enum "broadcast-video" {
        description
          "Broadcast TV, live events, video surveillance";
      }
      enum "bulk-data" {
        description
          "Non-interactive data applications";
      }
      enum "multimedia-conferencing" {
        description
          "Desktop software multimedia collaboration applications";
      }
      enum "multimedia-streaming" {
        description
          "Video-on-Demand (VoD) streaming video";
      }
      enum "network-control" {
        description
          "Network control plane traffic";
      }
      enum "ops-admin-mgmt" {
        description
          "Network operations, administration, and management traffic";
      }
      enum "real-time-interactive" {
        description
          "High-definition interactive video applications";
      }
      enum "signaling" {
        description
          "Signaling traffic that supports IP voice and video telephony";
      }
      enum "transactional-data" {
        description
          "Interactive data applications";
      }
      enum "voip-telephony" {
        description
          "VoIP telephony (bearer-only) traffic";
      }
    }
  }

  grouping policy-bit-rate-def {
    description
      "policy-bit-rate-def";
    leaf bit-rate {
      type uint64 {
        range "8000..10000000000";
      }
      description
        "bit-rate 8000-10000000000";
    }
    leaf bit-rate-percent {
      type uint8 {
        range "0..100";
      }
      description
        "bit-rate-percent";
    }
  }

  grouping marking-priority-def {
    description
      "marking-priority-def";
    choice marking-priority {
      description
        "mark-priority";
      case drop-precedence {
        leaf drop-precedence {
          type union {
            type uint8 {
              range "1..7";
            }
            type enumeration {
              enum "ignore" {
                description
                  "ignore";
              }
            }
          }
          description
            "drop-precedence";
        }
      }
      case af-drop {
        leaf af-drop {
          type uint8 {
            range "1..3";
          }
          description
            "af-drop";
        }
      }
    }
  }

  grouping rate-option-def {
    description
      "rate-option-def";
    choice burst-option {
      description
        "burst-option";
      case burst {
        leaf burst {
          type uint32 {
            range "1..4250000000";
          }
          units "byte";
          description
            "burst";
        }
      }
      case time-burst {
        leaf time-burst {
          type uint32 {
            range "1..10000";
          }
          units "millisecond";
          description
            "time-burst";
        }
      }
    }
    choice excess-burst-option {
      description
        "excess-burst-option";
      case excess-burst {
        leaf excess-burst {
          type uint32 {
            range "1..4250000000";
          }
          units "byte";
          description
            "excess-burst";
        }
      }
      case time-excess-burst {
        leaf time-excess-burst {
          type uint32 {
            range "1..10000";
          }
          description
            "time-excess-burst";
        }
      }
    }
  }

  grouping rate-percentage-def {
    description
      "rate-percentage-def";
    leaf percentage {
      type uint8 {
        range "1..100";
      }
      units "percent";
      description
        "percentage";
    }
  }

  grouping bridge-def {
    leaf enable-vcaas-bridge {
      type boolean;
      description
        "enable-vcaas-bridge: True/False";
    }
    leaf interface-bridge-group {
      type uint8;
      description
        "0..255";
      when " ../enable-vcaas-bridge = 'true' ";
    }
    leaf interface-mac-acl {
      type uint16;
      description
        "0..65535";
      when " ../create-bvi-interface = 'true' ";
    }
    leaf create-bvi-interface {
      type boolean;
      description
        "create-bvi-interface: True/False";
    }
    leaf bvi-interface-number {
      type uint8;
      description
        "0..255";
      when " ../create-bvi-interface = 'true' ";
    }
    leaf bvi-interface-ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      when " ../create-bvi-interface = 'true' ";
    }
    leaf bvi-interface-mask {
      type string;
      description
        "string";
      when " ../create-bvi-interface = 'true' ";
    }
  }

  grouping mac-acl-def {
    leaf acl-number {
      type uint16;
      description
        "0..65535";
    }
    list access-list-rules {
      key "name action source-mac";
      leaf name {
        type string;
        description
          "string";
      }
      leaf action {
        type enumeration {
          enum "permit";
          enum "deny";
        }
        description
          "permit
           deny
          ";
      }
      leaf source-mac {
        type string;
        description
          "string";
      }
      leaf destination-mac {
        type string;
        description
          "string";
      }
    }
  }

  grouping rate-conform-def {
    description
      "rate-conform-def";
    container conform-handling {
      description
        "conform-handling";
      choice options {
        description
          "options";
        case mark-packet {
          uses marking-def;
        }
        case no-action {
          leaf no-action {
            type empty;
            description
              "no-action";
          }
        }
      }
    }
  }

  grouping marking-def {
    description
      "marking-def";
    choice marking {
      description
        "marking";
      case dscp {
        leaf mark-dscp {
          type dscp-values-type;
          description
            "mark-dscp";
        }
      }
      case precedence {
        leaf mark-precedence {
          type uint8 {
            range "1..3";
          }
          description
            "mark-precedence";
        }
      }
      case priority {
        leaf mark-priority {
          type union {
            type uint8 {
              range "1..7";
            }
            type enumeration {
              enum "ignore" {
                description
                  "ignore";
              }
            }
          }
          description
            "mark-priority";
        }
        uses marking-priority-def;
      }
    }
  }

  grouping rate-violate-def {
    description
      "rate-violate-def";
    container violate-handling {
      description
        "violate-handling";
      choice options {
        description
          "options";
        case drop-packet {
          leaf drop-packet {
            type empty;
            description
              "drop-packet";
          }
        }
        case mark-packet {
          uses marking-def;
        }
        case no-action {
          leaf no-action {
            type empty;
            description
              "no-action";
          }
        }
      }
    }
  }

  grouping rate-exceed-def {
    description
      "rate-exceed-def";
    container exceed-handling {
      description
        "exceed-handling";
      choice options {
        description
          "options";
        case drop-packet {
          leaf drop-packet {
            type empty;
            description
              "drop-packet";
          }
        }
        case mark-packet {
          uses marking-def;
        }
        case no-action {
          leaf no-action {
            type empty;
            description
              "no-action";
          }
        }
      }
    }
  }

  grouping bandwidth-rate-def {
    leaf bandwidth-rate {
      type int32 {
        range "1..2000000";
      }
      description
        "1..2000000";
      units "KBps";
    }
  }

  grouping rate-spec-packet-handling-def {
    description
      "rate-spec-packet-handling-def";
    choice rate-specifications {
      description
        "rate-specifications";
      case mark-dscp {
        leaf mark-dscp {
          type dscp-values-type;
          description
            "mark-dscp";
        }
      }
      case mark-precedence {
        leaf mark-precedence {
          type uint8 {
            range "1..3";
          }
          description
            "mark-precedence";
        }
      }
      case mark-priority {
        leaf mark-priority {
          type union {
            type uint8 {
              range "1..7";
            }
            type enumeration {
              enum "ignore" {
                description
                  "ignore";
              }
            }
          }
          description
            "mark-priority";
        }
        uses marking-priority-def;
      }
      case rate-limiting {
        container rate {
          description
            "Specify rate limits inline";
          uses rate-option-def;
          uses policy-bit-rate-def;
          container actions {
            description
              "actions";
            uses rate-conform-def;
            uses rate-exceed-def;
            uses rate-violate-def;
          }
        }
      }
    }
  }

  grouping policy-packet-handling-def {
    description
      "policy-packet-handling-def";
    container remarking {
      choice remarking-type {
        case mark-dscp {
          leaf mark-dscp {
            type dscp-values-type;
            description
              "mark-dscp";
            //            n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/class-entry/dscp-value";
          }
          leaf dscp-tunnel {
            type boolean;
            description
              "dscp-tunnel";
            //            n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/class-entry/is-dscp-tunnel";
          }
        }
        case mark-precedence {
          leaf mark-precedence {
            type uint8 {
              range "1..3";
            }
            description
              "mark-precedence";
            //n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/class-entry/precedence";
          }
        }
        case mark-priority {
          leaf mark-priority {
            type union {
              type uint8 {
                range "1..7";
              }
              type enumeration {
                enum "ignore" {
                  description
                    "ignore";
                }
              }
            }
            description
              "mark-priority";
            //n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/class-entry/priority-value";
          }
          uses marking-priority-def;
        }
      }
    }
    choice policy-packet-handling {
      description
        "policy-packet-handling";
      case policing {
        choice police-type {
          description
            "police-type";
          case bit-police-type {
            container police {
              description
                "police";
              uses rate-option-def;
              uses rate-spec-packet-handling-def;
              uses policy-bit-rate-def;
              leaf police-cir-percentage {
                type uint8;
                description
                  "0..255";
              }
              container actions {
                description
                  "actions";
                uses rate-conform-def;
                uses rate-exceed-def;
              }
            }
          }
        }
        container priority {
          description
            "priority";
          choice priority-type {
            case priority-percent {
              uses rate-percentage-def;
            }
            case priority-level {
              leaf priority-level {
                type priority-level-def;
                description
                  "1..2";
              }
            }
            case priority-value {
              uses bandwidth-rate-def;
            }
          }
        }
      }
      case metering {
        container bandwidth {
          description
            "bandwidth";
          choice bandwidth-type {
            case percent {
              uses rate-percentage-def;
            }
            case remaining-percent {
              leaf rate-percentage {
                type percentage-def;
                description
                  "1..100";
              }
            }
            case bandwidth-rate {
              uses bandwidth-rate-def;
            }
            case bandwidth-remaining-ratio {
              leaf bandwidth-remaining-ratio {
                type uint32;
                description
                  "0..4294967295";
              }
            }
          }
          container random-detect {
            leaf random-detect {
              type random-detect-def;
              description
                "dscp-based
                 discard-class-based
                 precedence-based
                 default
                 none
                ";
            }
          }
        }
      }
    }
  }

  grouping hierarchical-policy-group-def {
    list policy {
      key "name";
      leaf name {
        type string;
        description
          "name";
      }
      list classes {
        key "class-name";
        leaf class-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/class-maps/class-map/name";
          }
          description
            "name";
        }
        leaf child-qos-policy {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/policies/policy/name";
          }
          description
            "name";
        }
      }
    }
  }

  grouping policy-group-def {
    description
      "policy-group-def";
    list policy {
      key "name";
      leaf name {
        type string;
        description
          "name";
        //n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/name";
      }
      leaf description {
        type string;
        description
          "description";
        //n-ext:maps-to "/ac:devices/ac:device/qos:policy-maps/policy-map/description";
      }
      container classes {
        description
          "classes";
        list class-name {
          key "name";
          /*max-elements "8";*/
          description
            "class";
          leaf name {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../name]/qos-service/class-maps/class-map/name";
            }
            description
              "name";
          }
          container packet-handling {
            description
              "packet-handling";
            leaf parent-class {
              type string;
              description
                "parent-class";
            }
            uses policy-packet-handling-def;
          }
          container queue-limit {
            description
              "queue-limit";
            leaf queue-limit {
              type uint32;
              description
                "0..4294967295";
            }
            leaf packets {
              type boolean;
              description
                "packets: True/False";
            }
          }
          container qos-group {
            leaf qos-group {
              type uint16 {
                range "0..1023";
              }
              description
                "0..1023";
            }
          }
        }
      }
    }
  }

  grouping qos-def {
    container qos-service {
      container class-maps {
        list class-map {
          key "name";
          leaf name {
            type string;
            description
              "class-map name";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/name";
          }
          leaf description {
            type string {
              length "1..200";
            }
            description
              "Max Length 200 character";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/description";
          }
          leaf dps {
            type boolean;
            description
              "dps: True/False";
          }
          uses class-map-def;
        }
      }
      container policies {
        description
          "policies";
        uses policy-group-def;
      }
      container hierarchical-policy {
        description
          "hierarchical-policy";
        uses hierarchical-policy-group-def;
      }
      container policy-update {
        list update-policy {
          key "name";
          leaf name {
            type string;
            description
              "string";
          }
          leaf policy-name {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy/name";
            }
            description
              "policy-name";
            mandatory true;
          }
          leaf packet-handling {
            type enumeration {
              enum "bandwidth";
              enum "priority";
            }
            description
              "bandwidth
               priority
              ";
            mandatory true;
          }
          leaf-list class {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy[name=current()/../policy-name]/classes/class-name/name";
            }
            description
              "class";
            config false;
          }
          leaf-list percentage {
            type string;
            description
              "string";
            config false;
          }
          list classes {
            key "class";
            leaf class {
              type leafref {
                path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/policies/policy[name=current()/../../policy-name]/classes/class-name/name";
              }
              description
                "class";
            }
            leaf percentage {
              type uint16 {
                range "0..100";
              }
              description
                "0..100";
              mandatory true;
            }
          }
          leaf single-cpe-site {
            type boolean;
            description
              "single-cpe-site: True/False";
          }
          leaf-list single-cpe-sites {
            type leafref {
              path "../../../../single-cpe-site/single-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-site = 'true' ";
          }
          leaf dual-cpe-site {
            type boolean;
            description
              "dual-cpe-site: True/False";
          }
          leaf-list dual-cpe-sites {
            type leafref {
              path "../../../../dual-cpe-site/dual-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-site = 'true' ";
          }
          leaf single-cpe-dual-wan-site {
            type boolean;
            description
              "single-cpe-dual-wan-site: True/False";
          }
          leaf-list single-cpe-dual-wan-sites {
            type leafref {
              path "../../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-dual-wan-site = 'true' ";
          }
          leaf dual-cpe-dual-wan-site {
            type boolean;
            description
              "dual-cpe-dual-wan-site: True/False";
          }
          leaf-list dual-cpe-dual-wan-sites {
            type leafref {
              path "../../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-dual-wan-site = 'true' ";
          }
          leaf triple-cpe-site {
            type boolean;
            description
              "triple-cpe-site: True/False";
          }
          leaf-list triple-cpe-sites {
            type leafref {
              path "../../../../triple-cpe-site/triple-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../triple-cpe-site = 'true' ";
          }
        }
      }
      container class-maps-update {
        list create-class-map {
          key "name";
          leaf name {
            type string;
            description
              "class-map name";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/name";
          }
          leaf description {
            type string {
              length "1..200";
            }
            description
              "Max Length 200 character";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/description";
          }
          uses class-map-def;
          leaf single-cpe-site {
            type boolean;
            description
              "single-cpe-site: True/False";
          }
          leaf-list single-cpe-sites {
            type leafref {
              path "../../../../single-cpe-site/single-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-site = 'true' ";
          }
          leaf dual-cpe-site {
            type boolean;
            description
              "dual-cpe-site: True/False";
          }
          leaf-list dual-cpe-sites {
            type leafref {
              path "../../../../dual-cpe-site/dual-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-site = 'true' ";
          }
          leaf single-cpe-dual-wan-site {
            type boolean;
            description
              "single-cpe-dual-wan-site: True/False";
          }
          leaf-list single-cpe-dual-wan-sites {
            type leafref {
              path "../../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-dual-wan-site = 'true' ";
          }
          leaf dual-cpe-dual-wan-site {
            type boolean;
            description
              "dual-cpe-dual-wan-site: True/False";
          }
          leaf-list dual-cpe-dual-wan-sites {
            type leafref {
              path "../../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-dual-wan-site = 'true' ";
          }
          leaf triple-cpe-site {
            type boolean;
            description
              "triple-cpe-site: True/False";
          }
          leaf-list triple-cpe-sites {
            type leafref {
              path "../../../../triple-cpe-site/triple-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../triple-cpe-site = 'true' ";
          }
        }
        list update-class-map {
          key "id";
          leaf id {
            type string;
            description
              "string";
          }
          leaf name {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/class-maps/class-map/name";
            }
            description
              "class-map name";
          }
          leaf description {
            type string {
              length "1..200";
            }
            description
              "Max Length 200 character";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/description";
            config false;
          }
          uses class-map-def {
            refine "match-type" {
              config false;
            }
          }
          leaf single-cpe-site {
            type boolean;
            description
              "single-cpe-site: True/False";
          }
          leaf-list single-cpe-sites {
            type leafref {
              path "../../../../single-cpe-site/single-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-site = 'true' ";
          }
          leaf dual-cpe-site {
            type boolean;
            description
              "dual-cpe-site: True/False";
          }
          leaf-list dual-cpe-sites {
            type leafref {
              path "../../../../dual-cpe-site/dual-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-site = 'true' ";
          }
          leaf single-cpe-dual-wan-site {
            type boolean;
            description
              "single-cpe-dual-wan-site: True/False";
          }
          leaf-list single-cpe-dual-wan-sites {
            type leafref {
              path "../../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-dual-wan-site = 'true' ";
          }
          leaf dual-cpe-dual-wan-site {
            type boolean;
            description
              "dual-cpe-dual-wan-site: True/False";
          }
          leaf-list dual-cpe-dual-wan-sites {
            type leafref {
              path "../../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-dual-wan-site = 'true' ";
          }
          leaf triple-cpe-site {
            type boolean;
            description
              "triple-cpe-site: True/False";
          }
          leaf-list triple-cpe-sites {
            type leafref {
              path "../../../../triple-cpe-site/triple-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../triple-cpe-site = 'true' ";
          }
        }
        list delete-class-map {
          key "id";
          leaf id {
            type string;
            description
              "string";
          }
          leaf name {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/class-maps/class-map/name";
            }
            description
              "class-map name";
          }
          leaf description {
            type string {
              length "1..200";
            }
            description
              "Max Length 200 character";
            //n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/description";
            config false;
          }
          uses class-map-def {
            refine "match-type" {
              config false;
            }
          }
          leaf single-cpe-site {
            type boolean;
            description
              "single-cpe-site: True/False";
          }
          leaf-list single-cpe-sites {
            type leafref {
              path "../../../../single-cpe-site/single-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-site = 'true' ";
          }
          leaf dual-cpe-site {
            type boolean;
            description
              "dual-cpe-site: True/False";
          }
          leaf-list dual-cpe-sites {
            type leafref {
              path "../../../../dual-cpe-site/dual-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-site = 'true' ";
          }
          leaf single-cpe-dual-wan-site {
            type boolean;
            description
              "single-cpe-dual-wan-site: True/False";
          }
          leaf-list single-cpe-dual-wan-sites {
            type leafref {
              path "../../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-dual-wan-site = 'true' ";
          }
          leaf dual-cpe-dual-wan-site {
            type boolean;
            description
              "dual-cpe-dual-wan-site: True/False";
          }
          leaf-list dual-cpe-dual-wan-sites {
            type leafref {
              path "../../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-dual-wan-site = 'true' ";
          }
          leaf triple-cpe-site {
            type boolean;
            description
              "triple-cpe-site: True/False";
          }
          leaf-list triple-cpe-sites {
            type leafref {
              path "../../../../triple-cpe-site/triple-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../triple-cpe-site = 'true' ";
          }
        }
      }
      container policy-class-map-update {
        list update-policy-class-map {
          key "name";
          leaf name {
            type string;
            description
              "string";
          }
          leaf policy-name {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy/name";
            }
            description
              "policy-name";
            mandatory true;
          }
          leaf class {
            type leafref {
              //path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy[name=current()/../policy-name]/classes/class-name/name";
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/class-maps-update/create-class-map/name";
            }
            description
              "class";
            mandatory true;
          }
          leaf packet-handling {
            type enumeration {
              enum "bandwidth";
              enum "priority";
            }
            description
              "bandwidth
               priority
              ";
            mandatory true;
          }
          leaf percentage {
            type uint16 {
              range "0..100";
            }
            description
              "0..100";
            mandatory true;
          }
          leaf queue-limit {
            type uint32;
            description
              "0..4294967295";
          }
          leaf packets {
            type boolean;
            description
              "packets: True/False";
          }
          leaf qos-group {
            type uint16 {
              range "0..1023";
            }
            description
              "0..1023";
          }
          leaf single-cpe-site {
            type boolean;
            description
              "single-cpe-site: True/False";
          }
          leaf-list single-cpe-sites {
            type leafref {
              path "../../../../single-cpe-site/single-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-site = 'true' ";
          }
          leaf dual-cpe-site {
            type boolean;
            description
              "dual-cpe-site: True/False";
          }
          leaf-list dual-cpe-sites {
            type leafref {
              path "../../../../dual-cpe-site/dual-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-site = 'true' ";
          }
          leaf single-cpe-dual-wan-site {
            type boolean;
            description
              "single-cpe-dual-wan-site: True/False";
          }
          leaf-list single-cpe-dual-wan-sites {
            type leafref {
              path "../../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../single-cpe-dual-wan-site = 'true' ";
          }
          leaf dual-cpe-dual-wan-site {
            type boolean;
            description
              "dual-cpe-dual-wan-site: True/False";
          }
          leaf-list dual-cpe-dual-wan-sites {
            type leafref {
              path "../../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
              require-instance false;
            }
            description
              "dual-sites";
            when " ../dual-cpe-dual-wan-site = 'true' ";
          }
          leaf triple-cpe-site {
            type boolean;
            description
              "triple-cpe-site: True/False";
          }
          leaf-list triple-cpe-sites {
            type leafref {
              path "../../../../triple-cpe-site/triple-cpe-site-services/site-name";
              require-instance false;
            }
            description
              "single-sites";
            when " ../triple-cpe-site = 'true' ";
          }
        }
      }
    }
  }

  grouping class-map-def {
    description
      "class-map grouping";
    leaf match-type {
      type match-type-def;
      description
        "match-all
         match-any
        ";
      default "match-any";
      //      n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/match-type";
      //      n-ext:maps-to "/ac:devices/device/qos:class-maps/class-map/class-match-condition/match-type";
    }
    leaf-list dscp {
      type dscp-values-type;
      description
        "Union Input types:
         enumeration
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/qos:class-maps/class-map/class-match-condition/match-value";
    }
    leaf-list access-group {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/access-lists/access-list/name";
      }
      description
        "access-group";
    }
    leaf qos-group {
      type uint8 {
        range "0..99";
      }
      description
        "0..99";
    }
    leaf-list protocol {
      type protocol-def;
      description
        "ftp
         http
         https
         ntp
         bgp
         ospf
         netflow
        ";
    }
    leaf-list http-url {
      type string;
      description
        "string";
    }
    /*leaf traffic-class {
      type boolean;
      description
        "traffic-class: True/False";
    }
    leaf protocol-attribute {
      type traffic-class-def;
      description
        "broadcast-video
         bulk-data
         multimedia-conferencing
         multimedia-streaming
         network-control
         ops-admin-mgmt
         real-time-interactive
         signaling
         transactional-data
         voip-telephony
        ";
      when " ../traffic-class = 'true' ";
    }
    leaf business-relevance {
      type boolean;
      description
        "business-relevance: True/False";
      default "true";
      when " ../traffic-class = 'true' ";
    }
    leaf pre-configured {
      type boolean;
      description
        "pre-configured: True/False";
    }*/
  }

  grouping route-maps-def-list {
    list route-map {
      key "route-map-name";
      leaf route-map-name {
        /*type string;*/
        description
          "route-map-name";
        type leafref {
          path "../../../../../../route-maps/route-map/route-map-name";
        }
      }
      leaf sequence-number {
        type string;
        default "12";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping community-lists-ref-def {
    list community-list {
      key "community-list-name";
      leaf community-list-name {
        /*type string;*/
        description
          "community-list-name";
        type leafref {
          path "../../../../../../community-lists/community-list/community-list-name";
        }
      }
      leaf sequence-number {
        type string;
        default "14";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping extcommunity-lists-ref-def {
    list extcommunity-list {
      key "extcommunity-list-name";
      leaf extcommunity-list-name {
        type string;
        description
          "extcommunity-list-name";
        //type leafref {
        //  path "../../../../../../extcommunity-lists/extcommunity-list/extcommunity-list-name";
        //}
      }
      leaf sequence-number {
        type string;
        default "5";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping vrf-list-def {
    //leaf sequence-number {
    //  type string;
    //  default "4";
    //  description
    //    "sequence-number";
    //  config false;
    //}   
    list vrf {
      key "name";
      leaf sequence-number {
        type string;
        default "3";
        description
          "sequence-number";
        config false;
      }
      leaf name {
        type string;
        description
          "string";
      }
      leaf vrf-name {
        description
          "name";
        type leafref {
          path "../../../../../../vrfs/vrf/vrf-name";
        }
      }
      leaf bgp-router-id {
        type string;
        description
          "string";
      }
      leaf bgp-address-family {
        type enumeration {
          enum "ipv4";
          enum "ipv4-vpn4";
          enum "vpnv4";
          enum "ipv6";
        }
        description
          "ipv4
           ipv4-vpn4
           vpnv4
           ipv6
          ";
      }
      leaf default-information-originate {
        type boolean;
        description
          "default-information-originate: True/False";
      }
      leaf bgp-keepalive-timer {
        type uint16 {
          range "0..65535";
        }
        description
          "0..65535";
      }
      leaf bgp-holdtime-timer {
        type uint16 {
          range "0..65535";
        }
        description
          "0..65535";
      }
      uses bgp-def;
      leaf redistribute-connected {
        type boolean;
        description
          "redistribute-connected: True/False";
        default "true";
      }
      leaf redistribute-connected-route-policy {
        type leafref {
          path "../../../../../../route-maps/route-map/route-map-name";
        }
        description
          "redistribute-connected-route-policy";
        when " ../redistribute-connected = 'true' ";
      }
      leaf redistribute-static {
        type boolean;
        description
          "redistribute-static: True/False";
      }
      leaf redistribute-static-route-policy {
        type leafref {
          path "../../../../../../route-maps/route-map/route-map-name";
        }
        description
          "redistribute-static-route-policy";
        when " ../redistribute-static = 'true' ";
      }
      leaf aggregate-summary-networks {
        type boolean;
        description
          "aggregate-summary-networks: True/False";
      }
      leaf summary-networks {
        type string;
        description
          "string";
        when " ../aggregate-summary-networks = 'true' ";
        //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/aggregate-summary-network/network";
      }
      list interface {
        key "interface-name sequence-number";
        leaf sequence-number {
          type uint8 {
            range "101..120";
          }
          default "101";
          description
            "sequence-number: This is NCX internal reference. By default 101 is the value, in case if any key issues value can be changed";
        }
        leaf entry-sequence-number {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../../name]/route-maps/route-map[route-map-name=current()/../../redistribute-connected-route-policy]/route-map-entries/sequence-number";
          }
          description
            "string";
        }
        leaf interface-name {
          type union {
            type leafref {
              path "/ac:devices/ac:device[ac:id=current()/../../../../device-ip]/if:interfaces/if:interface/if:name";
              require-instance false;
            }
            type string;
          }
          description
            "interface-name";
        }
      }
    }
  }

  grouping class-maps-def-list {
    list class-map {
      key "name";
      leaf name {
        /*type string;*/
        description
          "name";
        type leafref {
          path "../../../../../../qos-service/class-maps/class-map/name";
        }
        mandatory true;
      }
      leaf-list access-list {
        //type leafref {
        //  path "../../../access-lists/access-list/name";
        //}
        type string;
        description
          "access-list";
        //mandatory true;
      }
      leaf sequence-number {
        type string;
        default "25";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping prefix-lists-def-list {
    list prefix-list {
      key "prefix-list-name";
      leaf prefix-list-name {
        /*type string;*/
        description
          "prefix-list-name";
        type leafref {
          path "../../../../../../prefix-lists/prefix-list/prefix-list-name";
        }
      }
      leaf sequence-number {
        type string;
        default "16";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping route-maps-def {
    container route-maps {
      list route-map {
        key "route-map-name";
        leaf route-map-name {
          type string;
          description
            "string";
          //n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/name";
        }
        leaf description {
          type string;
          description
            "string";
        }
        list route-map-entries {
          key "sequence-number";
          leaf sequence-number {
            type uint16 {
              range "0..65535";
            }
            description
              "0..65535";
            //n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/seq";
          }
          leaf description {
            type string;
            description
              "string";
          }
          leaf action {
            type action-type;
            description
              "permit
               deny
              ";
            //          n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/action";
          }
          leaf continue {
            type uint16 {
              range "0..65535";
            }
            description
              "0..65535";
          }
          list match-condition {
            key "condition-type value";
            leaf condition-type {
              type route-map-condition-types;
              description
                "interface
                 tag
                 acl
                 prefix-list
                 source-protocol
                 community
                 metric
                 as-path
                 next-hop
                ";
              //            n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/match-condition/condition-type";
            }
            leaf value {
              type string;
              description
                "string";
              //n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/match-condition/value";
            }
          }
          list set-action {
            key "set-type value";
            leaf set-type {
              type route-map-set-types;
              description
                "local-preference
                 metric
                 as-path
                 tag
                 community
                 next-hop
                 as-path prepend
                ";
              //            n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/set-action/set-type";
            }
            leaf ip {
              type ip-types;
              description
                "precedence
                 next-hop
                 df
                ";
              when " ../set-type = 'ip' ";
            }
            leaf value {
              type string;
              description
                "string";
              //n-ext:maps-to "/ac:devices/ac:device/l3:route-maps/route-map/route-map-entries/set-action/value";
            }
          }
        }
      }
      list update-route-maps {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf route-map-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map/route-map-name";
          }
          description
            "route-map-name";
          mandatory true;
        }
        leaf sequence-number {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map[route-map-name=current()/../route-map-name]/route-map-entries/sequence-number";
          }
          description
            "sequence-number";
          mandatory true;
        }
        leaf action {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map[route-map-name=current()/../route-map-name]/route-map-entries[sequence-number=current()/../sequence-number]/action";
          }
          description
            "action";
          mandatory true;
        }
        leaf entry {
          type enumeration {
            enum "match-condition";
            enum "set-action";
          }
          description
            "match-condition
             set-action
            ";
          mandatory true;
        }
        leaf condition-type {
          type route-map-condition-types;
          description
            "interface
             tag
             acl
             prefix-list
             source-protocol
             community
             metric
             as-path
             next-hop
             address
            ";
          when " ../entry = 'match-condition' ";
        }
        leaf value {
          type string;
          description
            "string";
          when " ../entry = 'match-condition' ";
        }
        leaf set-type {
          type route-map-set-types;
          description
            "local-preference
             metric
             as-path
             tag
             community
             next-hop
             as-path prepend
             vrf
             ip
            ";
          when " ../entry = 'set-action' ";
        }
        leaf ip {
          type ip-types;
          description
            "precedence
             next-hop
             df
            ";
          when " ../set-type = 'ip' and ../entry = 'set-action'";
        }
        leaf set-value {
          type string;
          description
            "string";
          when " ../entry = 'set-action' ";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
      list delete-route-maps {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf route-map-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map/route-map-name";
          }
          description
            "route-map-name";
          mandatory true;
        }
        leaf sequence-number {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map[route-map-name=current()/../route-map-name]/route-map-entries/sequence-number";
          }
          description
            "sequence-number";
          mandatory true;
        }
        leaf action {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/route-maps/route-map[route-map-name=current()/../route-map-name]/route-map-entries[sequence-number=current()/../sequence-number]/action";
          }
          description
            "action";
          mandatory true;
        }
        leaf entry {
          type enumeration {
            enum "match-condition";
            enum "set-action";
          }
          description
            "match-condition
             set-action
            ";
          mandatory true;
        }
        leaf condition-type {
          type route-map-condition-types;
          description
            "interface
             tag
             acl
             prefix-list
             source-protocol
             community
             metric
             as-path
             next-hop
             address
            ";
          when " ../entry = 'match-condition' ";
        }
        leaf value {
          type string;
          description
            "string";
          when " ../entry = 'match-condition' ";
        }
        leaf set-type {
          type route-map-set-types;
          description
            "local-preference
             metric
             as-path
             tag
             community
             next-hop
             as-path prepend
             vrf
             ip
            ";
          when " ../entry = 'set-action' ";
        }
        leaf ip {
          type ip-types;
          description
            "precedence
             next-hop
             df
            ";
          when " ../set-type = 'ip' and ../entry = 'set-action'";
        }
        leaf set-value {
          type string;
          description
            "string";
          when " ../entry = 'set-action' ";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
    }
  }

  grouping prefix-list-def {
    leaf prefix-list-name {
      type string;
      description
        "string";
      /*n-ext:maps-to "/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/name";*/
    }
    list prefix {
      key "rule-num";
      leaf prefix-name {
        type string;
        description
          "string";
        /*n-ext:maps-to "/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry/prefix-name";*/
      }
      leaf rule-num {
        type uint32 {
          range "1..4294967294";
        }
        description
          "1..4294967294";
        /*n-ext:maps-to "/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry/rule-num";*/
      }
      leaf ipv4-prefix {
        type inet:ipv4-prefix;
        description
          "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
        /*n-ext:maps-to "/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry/subnet";*/
      }
      leaf condition {
        type enumeration {
          enum "permit";
          enum "deny";
        }
        description
          "permit
           deny
          ";
        /*n-ext:maps-to "/controller:devices/device/l3features:ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry/condition";*/
      }
      leaf exact-matching-prefix-length {
        type matching-prefix-type;
        description
          "string";
      }
      leaf minimum-matching-prefix-length {
        type matching-prefix-type;
        description
          "string";
      }
      leaf maximum-matching-prefix-length {
        type matching-prefix-type;
        description
          "string";
      }
    }
  }

  grouping advertise-network-def {
    leaf name {
      type string;
      description
        "string";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
    leaf prefix {
      type inet:ipv4-prefix;
      description
        "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
      mandatory true;
    }
    leaf route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "route-map";
    }
    leaf sequence-number {
      type string;
      default "18";
      description
        "sequence-number";
      config false;
    }
  }

  grouping community-list-def {
    leaf extcommunity {
      type boolean;
      description
        "extcommunity: True/False";
    }
    leaf community-list-entry {
      type community-list-entry-type;
      description
        "standard
         expanded
        ";
      default "standard";
    }
    leaf community-list-name {
      type string;
      description
        "string";
    }
    leaf condition {
      type condition-type;
      description
        "permit
         deny
        ";
    }
    leaf value {
      type string;
      description
        "string";
    }
    leaf extcomm {
      type enumeration {
        enum "rt";
        enum "soo";
        enum "vpn-distinguisher";
      }
      description
        "rt
         soo
         vpn-distinguisher
        ";
      when " ../community-list-entry = 'standard' and ../extcommunity = 'true'";
    }
  }

  grouping extcommunity-list-def {
    leaf extcommunity-list-entry {
      type community-list-entry-type;
      description
        "standard
         expanded
        ";
      default "standard";
    }
    leaf extcommunity-list-name {
      type string;
      description
        "string";
    }
    leaf condition {
      type condition-type;
      description
        "permit
         deny
        ";
    }
    leaf extcomm {
      type enumeration {
        enum "rt";
        enum "soo";
        enum "vpn-distinguisher";
      }
      description
        "rt
         soo
         vpn-distinguisher
        ";
      when " ../extcommunity-list-entry = 'standard' ";
    }
    leaf value {
      type string;
      description
        "string";
    }
  }

  grouping sla-def {
    leaf entry-number {
      type uint32 {
        range "1..2147483647";
      }
      description
        "Enter number with in the range: 1..2147483647";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
    leaf operation-type {
      type enumeration {
        enum "dhcp";
        enum "dns";
        enum "ethernet";
        enum "exit";
        enum "ftp";
        enum "http";
        enum "icmp-echo";
        enum "icmp-jitter";
        enum "mpls";
        enum "path-echo";
        enum "path-jitter";
        enum "tcp-connect";
        enum "udp-echo";
        enum "udp-jitter";
        enum "voip";
      }
      description
        "Select one of the operttion-type from list:
         dhcp
         dns
         ethernet
         exit
         ftp
         http
         icmp-echo
         icmp-jitter
         mpls
         path-echo
         path-jitter
         tcp-connect
         udp-echo
         udp-jitter
         voip
        ";
      mandatory true;
    }
    leaf http-request-type {
      type enumeration {
        enum "raw";
        enum "get";
      }
      description
        "raw
         get
        ";
      when " ../operation-type = 'http' ";
    }
    leaf http-url {
      type string;
      description
        "string";
      when " ../operation-type = 'http' ";
    }
    leaf http-raw-request {
      type string;
      description
        "string";
      when " ../operation-type = 'http' ";
    }
    leaf destination {
      type string;
      description
        "Hostname or A.B.C.D Destination IP address or hostname";
      //mandatory true;
    }
    leaf source {
      type enumeration {
        enum "source-interface";
        enum "source-ip";
      }
      description
        "source-interface
         source-ip
        ";
      mandatory true;
    }
    leaf source-interface-name {
      type string;
      description
        "string";
      when "../source = 'source-interface' ";
    }
    leaf source-interface-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
      when "../source = 'source-ip' ";
    }
    leaf data-size {
      type uint32 {
        range "0..16384";
      }
      description
        "<0-16384>  Data Size in bytes ";
    }
    leaf frequency {
      type uint32 {
        range "1..604800";
      }
      description
        "<1-604800> Frequency in seconds";
    }
    leaf timeout {
      type uint32 {
        range "0..604800000";
      }
      description
        "<0-604800000> Timeout in milliseconds";
    }
    leaf threshold {
      type uint32;
      description
        "<0-60000> Threshold in milliseconds";
    }
    leaf track-number {
      type uint16 {
        range "0..1000";
      }
      description
        "Enter number with in the range: 0..1000";
    }
    leaf sequence-number {
      type string;
      default "20";
      description
        "sequence-number";
      config false;
    }
    leaf response-data-size {
      type uint32 {
        range "20..17512";
      }
      description
        "<20-17512>  Data Size in bytes ";
      when "../operation-type = 'udp-jitter' ";
    }
    leaf destination-port {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
    }
    leaf source-port {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
    }
    leaf interval {
      type uint16 {
        range "4..60000";
      }
      description
        "4..60000";
    }
    leaf tos {
      type uint8 {
        range "0..255";
      }
      description
        "0..255";
    }
    leaf tag {
      type string;
      description
        "string";
    }
    leaf history-interval {
      type uint16 {
        range "1..3600";
      }
      description
        "1..3600";
    }
    leaf buckets-size {
      type uint8 {
        range "1..100";
      }
      description
        "1..100";
    }
    leaf num-packets {
      type uint16 {
        range "1..60000";
      }
      description
        "1..60000";
    }
  }

  grouping bgp-adv-props {
    description
      "BGP advertisement properties";
    leaf redistribute-connected {
      type boolean;
      description
        "redistribute-connected: True/False";
      default "true";
      config false;
    }
    leaf redistribute-connected-route-policy {
      type leafref {
        path "../../../../route-maps/route-map/route-map-name";
      }
      description
        "redistribute-connected-route-policy";
      when " ../redistribute-connected = 'true' ";
      config false;
    }
    leaf interface-name {
      type leafref {
        path "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
      }
      description
        "interface-name";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/name";
      when " ../redistribute-connected = 'true' ";
      config false;
    }
    leaf redistribute-static {
      type boolean;
      description
        "redistribute-static: True/False";
      config false;
    }
    leaf redistribute-static-route-policy {
      type leafref {
        path "../../../../route-maps/route-map/route-map-name";
      }
      description
        "redistribute-static-route-policy";
      when " ../redistribute-static = 'true' ";
      config false;
    }
    leaf aggregate-summary-networks {
      type boolean;
      description
        "aggregate-summary-networks: True/False";
      config false;
    }
    leaf summary-networks {
      type string;
      description
        "string";
      when " ../aggregate-summary-networks = 'true' ";
      //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/aggregate-summary-network/network";
      config false;
    }
  }

  grouping bgp-def {
    leaf bgp-community-new {
      type boolean;
      description
        "bgp-community-new: True/False";
    }
    leaf peer-group {
      type leafref {
        path "../../../../../../bgp-peer-groups/bgp-peer-group/peer-group";
      }
      description
        "string";
    }
    leaf listen-cidr {
      type inet:ipv4-prefix;
      description
        "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
    }
    //leaf sequence-number {
    //  type string;
    //  default "4";
    //  description
    //    "sequence-number";
    //  config false;
    //}
  }

  grouping vrouter-local-def {
    description
      "Routing specific properties which are applicable for this service";
    leaf bgp-router-id {
      type string;
      description
        "string";
      config false;
      //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/router-id";
    }
    container vrfs {
      leaf sequence-number {
        type string;
        default "2";
        description
          "sequence-number";
        config false;
      }
      uses vrf-list-def;
    }
    container nat {
      leaf sequence-number {
        type string;
        default "8";
        description
          "sequence-number";
        config false;
      }
      uses nat-list-def;
    }
    container route-maps {
      leaf sequence-number {
        type string;
        default "11";
        description
          "sequence-number";
        config false;
      }
      uses route-maps-def-list;
    }
    container community-lists {
      leaf sequence-number {
        type string;
        default "13";
        description
          "sequence-number";
        config false;
      }
      uses community-lists-ref-def;
    }
    //container extcommunity-lists {
    //  leaf sequence-number {
    //    type string;
    //    default "4";
    //    description
    //      "sequence-number";
    //    config false;
    //  }
    //  uses extcommunity-lists-ref-def;
    //}
    container prefix-lists {
      leaf sequence-number {
        type string;
        default "15";
        description
          "sequence-number";
        config false;
      }
      uses prefix-lists-def-list;
    }
    container advertise-networks {
      leaf sequence-number {
        type string;
        default "17";
        description
          "sequence-number";
        config false;
      }
      list advertise-network {
        key "name";
        uses advertise-network-def;
      }
    }
    container ip-sla {
      leaf sequence-number {
        type string;
        default "19";
        description
          "sequence-number";
        config false;
      }
      list sla {
        key "entry-number";
        uses sla-def;
      }
    }
    container access-lists {
      leaf sequence-number {
        type string;
        default "21";
        description
          "sequence-number";
        config false;
      }
      list access-list {
        key "name";
        uses feature-acl-def;
      }
    }
    container class-maps {
      leaf sequence-number {
        type string;
        default "24";
        description
          "sequence-number";
        config false;
      }
      uses class-maps-def-list;
    }
    container ospfs {
      leaf sequence-number {
        type string;
        default "26";
        description
          "sequence-number";
        config false;
      }
      list router-ospf {
        key "process-id";
        uses ospf-def;
      }
    }
    container eigrp {
      leaf sequence-number {
        type string;
        default "30";
        description
          "sequence-number";
        config false;
      }
      list router-eigrp {
        key "process-id";
        uses eigrp-def;
      }
    }
    container loopback {
      leaf sequence-number {
        type string;
        default "5";
        description
          "sequence-number";
        config false;
      }
      list loopback {
        key "loopback-interface-id";
        uses loopback-def;
      }
    }
    container bridge {
      uses bridge-def;
    }
    container mac-acl {
      uses mac-acl-def;
    }
    uses bgp-adv-props;
  }

  grouping eigrp-def {
    leaf sequence-number {
      type string;
      default "31";
      description
        "sequence-number";
      config false;
    }
    leaf process-id {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
    leaf eigrp-stub {
      type enumeration {
        enum "receive-only";
        enum "connected";
        enum "static";
        enum "summary";
      }
      description
        "receive-only
         connected
         static
         summary
        ";
    }
    leaf ip-address {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      config false;
    }
    leaf wildcard {
      type string;
      description
        "string";
      config false;
    }
    list network {
      key "prefix";
      leaf sequence-number {
        type string;
        default "32";
        description
          "sequence-number";
        config false;
      }
      leaf prefix {
        type inet:ipv4-prefix;
        description
          "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
      }
    }
    container redistribute {
      leaf sequence-number {
        type string;
        default "33";
        description
          "sequence-number";
        config false;
      }
      leaf redistribute-eigrp-on-bgp {
        type boolean;
        description
          "redistribute-eigrp-on-bgp: True/False";
      }
      leaf route-map {
        type leafref {
          path "../../../../../../../route-maps/route-map/route-map-name";
        }
        description
          "route-map";
        when "../redistribute-eigrp-on-bgp = 'true'";
      }
    }
  }

  grouping nat-list-def {
    list pool {
      key "pool-name";
      leaf sequence-number {
        type string;
        default "9";
        description
          "sequence-number";
        config false;
      }
      uses pool-def;
    }
    list address-translation {
      key "list value";
      leaf sequence-number {
        type string;
        default "10";
        description
          "sequence-number";
        config false;
      }
      uses address-translation-def;
    }
  }

  grouping pool-def {
    leaf pool-name {
      type string;
      description
        "string";
    }
    leaf start-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
    }
    leaf end-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
    }
    leaf mask {
      type enumeration {
        enum "netmask";
        enum "prefix-length";
      }
      description
        "netmask
         prefix-length
        ";
    }
    leaf netmask {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
      when " ../mask = 'netmask' ";
    }
    leaf prefix-length {
      type uint8;
      description
        "0..255";
      when " ../mask = 'prefix-length' ";
    }
    leaf pool-type {
      type enumeration {
        enum "match-host";
        enum "rotary";
      }
      description
        "match-host
         rotary
        ";
    }
  }

  grouping address-translation-def {
    leaf side {
      type enumeration {
        enum "inside";
      }
      description
        "inside\n";
    }
    leaf address-translation {
      type enumeration {
        enum "source";
      }
      description
        "source\n";
    }
    leaf list {
      type enumeration {
        enum "list";
      }
      description
        "list\n";
    }
    leaf value {
      type string;
      description
        "string";
    }
    list pool {
      key "pool-name";
      leaf sequence-number {
        type string;
        default "7";
        description
          "sequence-number";
        config false;
      }
      leaf pool-name {
        type string;
        description
          "string";
      }
      leaf vrf {
        type string;
        description
          "string";
      }
      leaf overload {
        type boolean;
        description
          "overload: True/False";
      }
    }
    list interface {
      key "interface-name";
      leaf sequence-number {
        type string;
        default "8";
        description
          "sequence-number";
        config false;
      }
      leaf interface-name {
        type string;
        description
          "string";
      }
      leaf vrf {
        type string;
        description
          "string";
      }
      leaf overload {
        type boolean;
        description
          "overload: True/False";
      }
    }
  }

  grouping loopback-def {
    leaf sequence-number {
      type string;
      default "6";
      description
        "sequence-number";
      config false;
    }
    leaf loopback-interface-id {
      type uint8;
      description
        "Loopback Interface id";
    }
    leaf cidr {
      type leafref {
        path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
      }
      description
        "cidr-loopback";
    }
    leaf ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
    }
    leaf vrf {
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
      description
        "Name of Vrf";
      //mandatory true;
    }
  }

  grouping ospf-def {
    leaf sequence-number {
      type string;
      default "27";
      description
        "sequence-number";
      config false;
    }
    leaf process-id {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
    leaf router-id {
      type string;
      description
        "string";
    }
    leaf reference-bandwidth {
      type uint32 {
        range "1..4294967";
      }
      description
        "1..4294967";
      default "1000";
    }
    leaf snmp {
      type boolean;
      description
        "snmp: True/False";
    }
    leaf context {
      type string;
      description
        "string";
      when "../snmp = 'true'";
    }
    leaf community {
      type string;
      description
        "string";
      when "../snmp = 'true'";
    }
    leaf access {
      type access-id;
      description
        "ro
         rw
        ";
      when "../snmp = 'true'";
    }
    leaf global-acl-name {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-acl-name";
      when "../snmp = 'true'";
    }
    leaf site-acl-name {
      type string;
      description
        "string";
      when "../snmp = 'true'";
    }
    leaf maximum-paths {
      type uint16 {
        range "1..32";
      }
      description
        "1..32";
      default "1";
    }
    leaf default-information {
      type boolean;
      description
        "default-information: True/False";
    }
    leaf default-inf-key1 {
      type default-inf-key;
      description
        "metric
         metric-type
         route-map
        ";
      when "../default-information = 'true'";
      config false;
    }
    leaf default-inf-key2 {
      type default-inf-key;
      description
        "metric
         metric-type
         route-map
        ";
      when "../default-information = 'true'";
      config false;
    }
    leaf default-inf-key3 {
      type default-inf-key;
      description
        "metric
         metric-type
         route-map
        ";
      when "../default-information = 'true'";
      config false;
    }
    leaf default-inf-metric {
      type uint32 {
        range "0..16777214";
      }
      description
        "0..16777214";
      default "500";
      when "../default-information = 'true'";
    }
    leaf default-inf-metric-type {
      type uint8 {
        range "1..2";
      }
      description
        "1..2";
      default "1";
      when "../default-information = 'true'";
    }
    leaf default-inf-route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "default-inf-route-map";
      when "../default-information = 'true'";
    }
    leaf distribute-list {
      type boolean;
      description
        "distribute-list: True/False";
    }
    leaf dis-list-route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "dis-list-route-map";
      when "../distribute-list = 'true'";
    }
    leaf dis-list-route-update {
      type route-update;
      description
        "in
         out
        ";
      when "../distribute-list = 'true'";
    }
    container redistribute {
      list redistribute-on-ospf {
        key "protocol";
        uses ospf-redistribute;
      }
      leaf sequence-number {
        type string;
        default "28";
        description
          "sequence-number";
        config false;
      }
      leaf redistribute-ospf-on-bgp {
        type boolean;
        description
          "redistribute-ospf-on-bgp: True/False";
      }
      leaf ospf-internal {
        type boolean;
        description
          "ospf-internal: True/False";
        when "../redistribute-ospf-on-bgp = 'true'";
      }
      leaf ospf-external1 {
        type boolean;
        description
          "ospf-external1: True/False";
        when "../redistribute-ospf-on-bgp = 'true'";
      }
      leaf ospf-external2 {
        type boolean;
        description
          "ospf-external2: True/False";
        when "../redistribute-ospf-on-bgp = 'true'";
      }
      leaf route-map {
        type leafref {
          path "../../../../../../../route-maps/route-map/route-map-name";
        }
        description
          "route-map";
        when "../redistribute-ospf-on-bgp = 'true'";
      }
    }
  }

  grouping ospf-redistribute {
    leaf sequence-number {
      type string;
      default "29";
      description
        "sequence-number";
      config false;
    }
    leaf protocol {
      type ospf-protocol;
      description
        "bgp
         ospf
        ";
      mandatory true;
    }
    leaf process-id {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
      when "../protocol = 'ospf'";
    }
    leaf route-map {
      type leafref {
        path "../../../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "route-map";
    }
    leaf key1 {
      type key;
      description
        "string";
      config false;
    }
    leaf key2 {
      type key;
      description
        "string";
      config false;
    }
    leaf metric {
      type uint32 {
        range "0..16777214";
      }
      description
        "0..16777214";
    }
    leaf metric-type {
      type string;
      description
        "string";
    }
    leaf tag {
      type uint32 {
        range "0..4294967295";
      }
      description
        "0..4294967295";
    }
  }

  grouping community-lists-def {
    container community-lists {
      list community-list {
        key "community-list-name value";
        uses community-list-def;
      }
      list update-community-list {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf community-list-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/community-lists/community-list/community-list-name";
          }
          description
            "community-list-name";
          mandatory true;
        }
        leaf operation {
          type operation-def;
          description
            "CREATE
             DELETE
            ";
        }
        leaf extcommunity {
          type boolean;
          description
            "extcommunity: True/False";
        }
        leaf community-list-entry {
          type community-list-entry-type;
          description
            "standard
             expanded
            ";
          default "standard";
          when "../operation = 'CREATE'";
        }
        leaf condition {
          type condition-type;
          description
            "permit
             deny
            ";
          when "../operation = 'CREATE'";
        }
        leaf value {
          type string;
          description
            "string";
          mandatory true;
        }
        leaf extcomm {
          type enumeration {
            enum "rt";
            enum "soo";
            enum "vpn-distinguisher";
          }
          description
            "rt
             soo
             vpn-distinguisher
            ";
          when " ../community-list-entry = 'standard' and ../extcommunity = 'true'";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
    }
  }

  grouping extcommunity-lists-def {
    container extcommunity-lists {
      list extcommunity-list {
        key "extcommunity-list-name value";
        uses extcommunity-list-def;
      }
    }
  }

  grouping bgp-peer-props {
    description
      "Properties relating to the BGP route selection process";
    leaf BGP-peer-name {
      type string;
      description
        "string";
    }
    //leaf peer {
    //  type enumeration {
    //    enum "peer-ip";
    //    enum "peer-group";
    //  }
    //  description
    //    "peer-ip
    //     peer-group
    //    ";
    //mandatory true;
    //}
    leaf peer-ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      mandatory true;
      //when " ../peer = 'peer-ip' ";
      //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/ip-address";
    }
    leaf peer-description {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/description";
    }
    leaf remote-as {
      type string;
      //mandatory true;
      description
        "string";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/as-number";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/remote-as";
    }
    leaf password {
      type string;
      description
        "string";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/password";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/password";
    }
    leaf import-route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "import-route-map";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/inbound-routepolicy";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/in-route-map";
    }
    leaf export-route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "export-route-map";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/outbound-routepolicy";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/out-route-map";
    }
    leaf peer-group {
      type leafref {
        path "../../../../../../bgp-peer-groups/bgp-peer-group/peer-group";
      }
      description
        "peer-group";
    }
    leaf next-hop-self {
      type boolean;
      description
        "next-hop-self: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/next-hop-self";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/next-hop-self";
    }
    leaf soft-reconfiguration {
      type boolean;
      description
        "soft-reconfiguration: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/soft-reconfiguration";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/soft-reconfiguration";
    }
    leaf default-originate {
      type boolean;
      description
        "default-originate: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/default-originate";
      //    n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/default-originate";
    }
    leaf default-originate-route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "default-originate-route-map";
      when "../default-originate = 'true'";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/def-originate-route-map";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/def-originate-route-map";
    }
    leaf send-community {
      type boolean;
      description
        "send-community: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/send-community";
      //    n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/send-community";
    }
    leaf encrypted-password {
      type boolean;
      description
        "encrypted-password: True/False";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/encryption";
      config false;
    }
    leaf advertisement-interval {
      type boolean;
      description
        "advertisement-interval: True/False";
    }
    leaf time-in-sec {
      type uint16 {
        range "0..600";
      }
      description
        "0..600";
      default "5";
      when "../advertisement-interval = 'true'";
    }
    leaf timers {
      type boolean;
      description
        "timers: True/False";
    }
    leaf keepalive-interval {
      type uint16 {
        range "0..65535";
      }
      description
        "0..65535";
      default "10";
      when "../timers = 'true'";
    }
    leaf holdtime {
      type uint16 {
        range "0..65535";
      }
      description
        "0..65535";
      default "30";
      when "../timers = 'true'";
    }
  }

  grouping bgp-peer-props1 {
    description
      "Properties relating to the BGP route selection process";
    leaf peer-group {
      type string;
      description
        "peer-group";
    }
    leaf peer-description {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/description";
    }
    leaf remote-as {
      type string;
      //mandatory true;
      description
        "string";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/as-number";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/remote-as";
    }
    leaf password {
      type string;
      description
        "string";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/password";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/password";
    }
    leaf import-route-map {
      type leafref {
        path "../../../route-maps/route-map/route-map-name";
      }
      description
        "import-route-map";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/inbound-routepolicy";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/in-route-map";
    }
    leaf export-route-map {
      type leafref {
        path "../../../route-maps/route-map/route-map-name";
      }
      description
        "export-route-map";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/outbound-routepolicy";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/out-route-map";
    }
    leaf next-hop-self {
      type boolean;
      description
        "next-hop-self: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/next-hop-self";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/next-hop-self";
    }
    leaf soft-reconfiguration {
      type boolean;
      description
        "soft-reconfiguration: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/soft-reconfiguration";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/soft-reconfiguration";
    }
    leaf default-originate {
      type boolean;
      description
        "default-originate: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/default-originate";
      //    n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/default-originate";
    }
    leaf default-originate-route-map {
      type leafref {
        path "../../../route-maps/route-map/route-map-name";
      }
      description
        "default-originate-route-map";
      when "../default-originate = 'true'";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/def-originate-route-map";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/def-originate-route-map";
    }
    leaf send-community {
      type boolean;
      description
        "send-community: True/False";
      //      n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/send-community";
      //    n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/peer-group/send-community";
    }
    leaf encrypted-password {
      type boolean;
      description
        "encrypted-password: True/False";
      //     n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/neighbor/encryption";
      config false;
    }
    leaf advertisement-interval {
      type boolean;
      description
        "advertisement-interval: True/False";
    }
    leaf time-in-sec {
      type uint16 {
        range "0..600";
      }
      description
        "0..600";
      default "5";
      when "../advertisement-interval = 'true'";
    }
    leaf timers {
      type boolean;
      description
        "timers: True/False";
    }
    leaf keepalive-interval {
      type uint16 {
        range "0..65535";
      }
      description
        "0..65535";
      default "10";
      when "../timers = 'true'";
    }
    leaf holdtime {
      type uint16 {
        range "0..65535";
      }
      description
        "0..65535";
      default "30";
      when "../timers = 'true'";
    }
  }

  grouping end-point-props {
    leaf endpoint-name {
      type string;
      description
        "string";
    }
    leaf device-ip {
      type leafref {
        path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../../resource-pool]/rp:device/rp:id";
      }
      description
        "device-ip";
      mandatory true;
    }
    leaf vrf {
      description
        "vrf";
      type leafref {
        path "../../../../../vrfs/vrf/vrf-name";
      }
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf interface-type {
      type interface-type;
      description
        "Physical
         Sub-Interface
        ";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/mode";
      mandatory true;
    }
    leaf interface-name {
      type leafref {
        path "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
      }
      description
        "interface-name";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/name";
      //mandatory true;
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf vlan-id {
      type uint32 {
        range "1..4096";
      }
      description
        "1..4096";
      when "../interface-type =  'Sub-Interface' or ../interface-type =  'SVI'";
    }
    leaf interface-ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      //mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/ip-address";
    }
    leaf interface-description {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/description";
    }
    leaf pbr-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/route-maps/route-map/route-map-name";
      }
      description
        "pbr-policy";
    }
    leaf dps {
      type boolean;
      description
        "dps: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf ospf {
      type boolean;
      description
        "ospf: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf priority {
      type uint32 {
        range "0..255";
      }
      description
        "0..255";
      when "../ospf = 'true'";
    }
    leaf cost {
      type uint32 {
        range "1..65535";
      }
      description
        "1..65535";
      when "../ospf = 'true'";
    }
    leaf fast-hello {
      type boolean;
      description
        "fast-hello: True/False";
      when "../ospf = 'true'";
    }
    leaf hello-multiplier {
      type uint8 {
        range "3..20";
      }
      description
        "3..20";
      when "../ospf = 'true' and ../fast-hello = 'true'";
    }
    leaf hello-interval {
      type uint32 {
        range "1..65535";
      }
      description
        "1..65535";
      when "../ospf = 'true' and ../fast-hello = 'false'";
    }
    leaf dead-interval {
      type uint32 {
        range "1..65535";
      }
      description
        "1..65535";
      when "../ospf = 'true' and ../fast-hello = 'false'";
    }
    leaf ospf-id {
      type uint16;
      description
        "0..65535";
      when "../ospf = 'true'";
    }
    leaf area {
      type uint8;
      description
        "0..255";
      when "../ospf = 'true'";
    }
    leaf inbound-acl {
      type boolean;
      description
        "inbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-inbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-inbound-acl";
      when "../inbound-acl = 'true'";
    }
    leaf site-inbound-acl {
      type string;
      description
        "string";
      when "../inbound-acl = 'true'";
    }
    leaf outbound-acl {
      type boolean;
      description
        "outbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-outbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-outbound-acl";
      when "../outbound-acl = 'true'";
    }
    leaf site-outbound-acl {
      type string;
      description
        "string";
      when "../outbound-acl = 'true'";
    }
    leaf nat-inside {
      type boolean;
      description
        "nat-inside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf nat-outside {
      type boolean;
      description
        "nat-outside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
  }

  grouping end-point-props2 {
    leaf endpoint-name {
      type string;
      description
        "string";
    }
    leaf device-ip {
      type leafref {
        path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../../resource-pool]/rp:device/rp:id";
      }
      description
        "device-ip";
      mandatory true;
    }
    leaf vrf {
      description
        "vrf";
      type leafref {
        path "../../../../../vrfs/vrf/vrf-name";
      }
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf interface-type {
      type interface-type;
      description
        "Physical
         Sub-Interface
        ";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/mode";
      mandatory true;
    }
    leaf interface-name {
      type leafref {
        path "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
      }
      description
        "interface-name";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/name";
      //mandatory true;
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf vlan-id {
      type uint32 {
        range "1..4096";
      }
      description
        "1..4096";
      when "../interface-type =  'Sub-Interface' or ../interface-type =  'SVI'";
    }
    leaf interface-ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/ip-address";
    }
    leaf interface-description {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/description";
    }
    leaf inbound-acl {
      type boolean;
      description
        "inbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-inbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-inbound-acl";
      when "../inbound-acl = 'true'";
    }
    leaf site-inbound-acl {
      type string;
      description
        "string";
      when "../inbound-acl = 'true'";
    }
    leaf outbound-acl {
      type boolean;
      description
        "outbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-outbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-outbound-acl";
      when "../outbound-acl = 'true'";
    }
    leaf site-outbound-acl {
      type string;
      description
        "string";
      when "../outbound-acl = 'true'";
    }
    leaf nat-inside {
      type boolean;
      description
        "nat-inside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf nat-outside {
      type boolean;
      description
        "nat-outside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
  }

  grouping end-point-props1 {
    leaf endpoint-name {
      type string;
      description
        "string";
    }
    leaf device-ip {
      type leafref {
        path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../../resource-pool]/rp:device/rp:id";
      }
      description
        "device-ip";
      mandatory true;
    }
    leaf fvrf {
      type union {
        type leafref {
          path "../../../../../vrfs/vrf/vrf-name";
          require-instance false;
        }
        type string;
      }
      description
        "vrf";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/l3:vrf";
      when "../interface-type =  'Tunnel'";
    }
    leaf ivrf {
      type leafref {
        path "../../../../../vrfs/vrf/vrf-name";
      }
      description
        "vrf";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/l3:vrf";
      when "../interface-type =  'Tunnel'";
    }
    leaf vrf {
      description
        "vrf";
      type leafref {
        path "../../../../../vrfs/vrf/vrf-name";
      }
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf interface-type {
      type interface-type1;
      description
        "Physical
         Sub-Interface
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/mode";
      mandatory true;
    }
    leaf interface-name {
      type leafref {
        path "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
      }
      description
        "interface-name";
      //      n-ext:maps-to "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
      //mandatory true;
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf vlan-id {
      type uint32 {
        range "1..4096";
      }
      description
        "1..4096";
      when "../interface-type =  'Sub-Interface' or ../interface-type =  'SVI'";
    }
    leaf interface-ip {
      type inet:ipv4-address;
      description
        "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
      config false;
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/ip-address";
    }
    leaf interface-description {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/description";
    }
    leaf inbound-acl {
      type boolean;
      description
        "inbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-inbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-inbound-acl";
      when "../inbound-acl = 'true'";
    }
    leaf site-inbound-acl {
      type string;
      description
        "string";
      when "../inbound-acl = 'true'";
    }
    leaf outbound-acl {
      type boolean;
      description
        "outbound-acl: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface'";
    }
    leaf global-outbound-acl {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/access-lists/access-list/name";
      }
      description
        "global-outbound-acl";
      when "../outbound-acl = 'true'";
    }
    leaf site-outbound-acl {
      type string;
      description
        "string";
      when "../outbound-acl = 'true'";
    }
    leaf nat-inside {
      type boolean;
      description
        "nat-inside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface' or ../interface-type =  'Tunnel'";
    }
    leaf nat-outside {
      type boolean;
      description
        "nat-outside: True/False";
      when "../interface-type =  'Physical' or ../interface-type =  'Sub-Interface' or ../interface-type =  'Tunnel'";
    }
  }

  grouping ic-local-props {
    description
      "subnetwork properties";
    leaf cidr {
      type inet:ipv4-prefix;
      //type leafref {
      //  path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:cidr";
      //}
      description
        "cidr";
      mandatory true;
    }
    leaf inbound-policy {
      type leafref {
        //path "../../../../../qos-service/policies/policy/name";
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy/name";
      }
      description
        "inbound-policy";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/inbound-qos";
    }
    leaf hierarchical-outbound-policy {
      type boolean;
      description
        "hierarchical-outbound-policy: True/False";
    }
    leaf outbound-policy {
      type leafref {
        //path "../../../../../qos-service/policies/policy/name";
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy/name";
      }
      description
        "outbound-policy";
      when "../hierarchical-outbound-policy = 'false'";
      //      n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/outbound-qos";
    }
    leaf policy-name {
      type string;
      description
        "string";
      when "../hierarchical-outbound-policy = 'true'";
    }
    leaf shape-average {
      type uint64 {
        range "8000..10000000000";
      }
      description
        "8000..10000000000";
      when "../hierarchical-outbound-policy = 'true'";
    }
    leaf child-qos-policy {
      type leafref {
        //path "../../../../../qos-service/policies/policy/name";
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/policies/policy/name";
      }
      description
        "child-qos-policy";
      when "../hierarchical-outbound-policy = 'true'";
    }
    leaf class-entry {
      type boolean;
      description
        "class-entry: True/False";
      when "../hierarchical-outbound-policy = 'true'";
      config false;
    }
    leaf hierarchical-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/qos-service/hierarchical-policy/policy/name";
      }
      description
        "hierarchical-policy";
      when "../hierarchical-outbound-policy = 'true' and ../class-entry = 'true'";
      config false;
    }
    leaf auto-negotiation {
      type boolean;
      description
        "auto-negotiation: True/False";
      default "false";
    }
    leaf speed {
      type enumeration {
        enum "10";
        enum "100";
        enum "1000";
        enum "10000";
      }
      description
        "Speed in Mbps, Example: 10, 100, 1000, auto";
      when "../auto-negotiation = 'false'";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/speed";
    }
    leaf duplex {
      type enumeration {
        enum "half";
        enum "full";
        enum "auto";
      }
      description
        "Duplex options, 'auto' or 'full' or 'half' ";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/duplex";
    }
    leaf load-interval {
      type boolean;
      description
        "load-interval: True/False";
    }
    leaf load-interval-delay {
      type uint16 {
        range "30 | 60 | 90 | 120 | 150 | 180 | 210 | 240 | 270 | 300 | 330 | 360 | 390 | 420 | 450 | 480 | 510 | 540 | 570 | 600";
      }
      description
        "Range in between 30 to 600 and Load interval must be in increments of 30 seconds";
      when "../load-interval = 'true'";
    }
    leaf hold-queue-in {
      type boolean;
      description
        "hold-queue-in: True/False";
    }
    leaf in-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-in = 'true'";
    }
    leaf hold-queue-out {
      type boolean;
      description
        "hold-queue-out: True/False";
    }
    leaf out-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-out = 'true'";
    }
  }

  grouping ic-local1 {
    description
      "subnetwork properties";
    leaf cidr {
      type leafref {
        path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
      }
      description
        "cidr";
      mandatory true;
    }
    leaf inbound-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/policies/policy/name";
      }
      description
        "inbound-policy";
      when "../hierarchical-inbound-policy = 'false'";
    }
    leaf hierarchical-inbound-policy {
      type boolean;
      description
        "hierarchical-inbound-policy: True/False";
    }
    leaf hierarchical-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/hierarchical-policy/policy/name";
      }
      description
        "hierarchical-policy";
      when "../hierarchical-inbound-policy = 'true'";
    }
    leaf auto-negotiation {
      type boolean;
      description
        "auto-negotiation: True/False";
      default "false";
    }
    leaf speed {
      type enumeration {
        enum "10";
        enum "100";
        enum "1000";
        enum "10000";
      }
      description
        "Speed in Mbps, Example: 10, 100, 1000, auto";
      when "../auto-negotiation = 'false'";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/speed";
    }
    leaf duplex {
      type enumeration {
        enum "half";
        enum "full";
        enum "auto";
      }
      description
        "Duplex options, 'auto' or 'full' or 'half' ";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/duplex";
    }
    leaf load-interval {
      type boolean;
      description
        "load-interval: True/False";
    }
    leaf load-interval-delay {
      type uint16 {
        range "30 | 60 | 90 | 120 | 150 | 180 | 210 | 240 | 270 | 300 | 330 | 360 | 390 | 420 | 450 | 480 | 510 | 540 | 570 | 600";
      }
      description
        "Range in between 30 to 600 and Load interval must be in increments of 30 seconds";
      when "../load-interval = 'true'";
    }
    leaf hold-queue-in {
      type boolean;
      description
        "hold-queue-in: True/False";
    }
    leaf in-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-in = 'true'";
    }
    leaf hold-queue-out {
      type boolean;
      description
        "hold-queue-out: True/False";
    }
    leaf out-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-out = 'true'";
    }
  }

  grouping ic-local {
    description
      "subnetwork properties";
    leaf cidr {
      type inet:ipv4-prefix;
      description
        "cidr";
      mandatory true;
    }
    leaf inbound-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/policies/policy/name";
      }
      description
        "inbound-policy";
      when "../hierarchical-inbound-policy = 'false'";
    }
    leaf hierarchical-inbound-policy {
      type boolean;
      description
        "hierarchical-inbound-policy: True/False";
    }
    leaf hierarchical-policy {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../name]/qos-service/hierarchical-policy/policy/name";
      }
      description
        "hierarchical-policy";
      when "../hierarchical-inbound-policy = 'true'";
    }
    leaf auto-negotiation {
      type boolean;
      description
        "auto-negotiation: True/False";
      default "false";
    }
    leaf speed {
      type enumeration {
        enum "10";
        enum "100";
        enum "1000";
        enum "10000";
      }
      description
        "Speed in Mbps, Example: 10, 100, 1000, auto";
      when "../auto-negotiation = 'false'";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/speed";
    }
    leaf duplex {
      type enumeration {
        enum "half";
        enum "full";
        enum "auto";
      }
      description
        "Duplex options, 'auto' or 'full' or 'half' ";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/duplex";
    }
    leaf load-interval {
      type boolean;
      description
        "load-interval: True/False";
    }
    leaf load-interval-delay {
      type uint16 {
        range "30 | 60 | 90 | 120 | 150 | 180 | 210 | 240 | 270 | 300 | 330 | 360 | 390 | 420 | 450 | 480 | 510 | 540 | 570 | 600";
      }
      description
        "Range in between 30 to 600 and Load interval must be in increments of 30 seconds";
      when "../load-interval = 'true'";
    }
    leaf hold-queue-in {
      type boolean;
      description
        "hold-queue-in: True/False";
    }
    leaf in-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-in = 'true'";
    }
    leaf hold-queue-out {
      type boolean;
      description
        "hold-queue-out: True/False";
    }
    leaf out-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-out = 'true'";
    }
  }

  grouping ic-local-props1 {
    description
      "subnetwork properties";
    leaf cidr {
      type leafref {
        path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
      }
      description
        "cidr";
      mandatory true;
    }
    leaf auto-negotiation {
      type boolean;
      description
        "auto-negotiation: True/False";
      default "false";
    }
    leaf speed {
      type enumeration {
        enum "10";
        enum "100";
        enum "1000";
        enum "10000";
      }
      description
        "Speed in Mbps, Example: 10, 100, 1000, auto";
      when "../auto-negotiation = 'false'";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/speed";
    }
    leaf duplex {
      type enumeration {
        enum "half";
        enum "full";
        enum "auto";
      }
      description
        "Duplex options, 'auto' or 'full' or 'half' ";
      //      n-ext:maps-to "/ac:devices/ac:device/InfSpeedAndDuplex/duplex";
    }
    leaf load-interval {
      type boolean;
      description
        "load-interval: True/False";
    }
    leaf load-interval-delay {
      type uint16 {
        range "30 | 60 | 90 | 120 | 150 | 180 | 210 | 240 | 270 | 300 | 330 | 360 | 390 | 420 | 450 | 480 | 510 | 540 | 570 | 600";
      }
      description
        "Range in between 30 to 600 and Load interval must be in increments of 30 seconds";
      when "../load-interval = 'true'";
    }
    leaf hold-queue-in {
      type boolean;
      description
        "hold-queue-in: True/False";
    }
    leaf in-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-in = 'true'";
    }
    leaf hold-queue-out {
      type boolean;
      description
        "hold-queue-out: True/False";
    }
    leaf out-queue-length {
      type uint32 {
        range "0..240000";
      }
      description
        "0..240000";
      when "../hold-queue-out = 'true'";
    }
  }

  grouping wan-interface-def {
    leaf gateway-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
    }
  }

  grouping cpe-deployment-policy-def {
    uses sm:service-def {
      refine "name" {
        config false;
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        n-ext-ui:ncx-ext-allowed-vals "/rp:resource-pools/rp:resource-pool[rp:parent-resource-pool=current()/../../../resource-pool]/rp:name";
        mandatory true;
      }
    }
    container cpe-primary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-primary";
          config false;
        }
        refine "name" {
          default "cpe-primary";
        }
        refine "deploy-on" {
          config false;
        }
        refine "vrf-name" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-secondary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-secondary";
          config false;
        }
        refine "name" {
          default "cpe-secondary";
        }
        refine "vrf-name" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-primary-cpe-secondary-ic {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-cpe-secondary-ic";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-cpe-secondary-ic";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "34";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props1;
      list end-points {
        leaf sequence-number {
          type string;
          default "35";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        uses end-point-props2;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "36";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props {
            refine "next-hop-self" {
              default "true";
            }
            refine "send-community" {
              default "true";
            }
          }
        }
      }
    }
    container primary-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-wan";
          config false;
        }
        refine "sequence-number" {
          default "37";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-primary-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "38";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "39";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "40";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-wan";
          config false;
        }
        refine "sequence-number" {
          default "41";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-secondary-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "42";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "43";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "44";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container lan {
      uses vnf:virtual-network-def {
        refine "internal-id" {
          default "Cust-LAN";
          config false;
        }
        refine "sequence-number" {
          default "45";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "lan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "3";
        config false;
      }
    }
    container cpe-lan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-lan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-lan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "46";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      leaf endpoint3 {
        n-ext:end-point;
        type leafref {
          path "../../lan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "Cust-LAN";
        config false;
      }
      uses ic-local-props {
        refine "hierarchical-outbound-policy" {
          config false;
        }
        refine "outbound-policy" {
          config false;
        }
        refine "policy-name" {
          config false;
        }
        refine "shape-average" {
          config false;
        }
        refine "child-qos-policy" {
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "auto-negotiation" {
          config false;
        }
        refine "speed" {
          config false;
        }
        refine "duplex" {
          config false;
        }
        refine "load-interval" {
          config false;
        }
        refine "hold-queue-in" {
          config false;
        }
        refine "hold-queue-out" {
          config false;
        }
      }
      leaf hsrp-version {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
      leaf hsrp-standby-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
        //mandatory true;
      }
      leaf hsrp-group {
        type uint16 {
          range "0..4095";
        }
        description
          "0..4095";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
        //mandatory true;
      }
      leaf hsrp-preempt {
        type boolean;
        description
          "hsrp-preempt: True/False";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
      }
      leaf hsrp-preempt-reload-delay {
        description
          "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
        type uint16 {
          range "0..3600";
        }
        when "../hsrp-preempt = 'true' ";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
      }
      leaf auth-type {
        type enumeration {
          enum "md5-key-chain";
          enum "md5-key-string";
          enum "text";
          enum "key-string";
        }
        description
          "md5-key-chain
           md5-key-string
           text
           key-string
          ";
        config false;
      }
      leaf auth-password {
        type string {
          length "1..8";
        }
        description
          "string";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
      }
      leaf hsrp-timers {
        type boolean;
        description
          "hsrp-timers: True/False";
        config false;
      }
      leaf hello-interval-sec {
        type uint16 {
          range "1..254";
        }
        description
          "1..254";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hello-interval-msec {
        type uint16 {
          range "15..999";
        }
        description
          "15..999";
        default "250";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-sec {
        type uint16 {
          range "1..255";
        }
        description
          "1..255";
        default "1";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-msec {
        type uint16 {
          range "50..3000";
        }
        description
          "50..3000";
        when "../hsrp-timers = 'true'";
        config false;
      }
      list lan-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local {
          refine "cidr" {
            mandatory false;
          }
        }
        leaf hsrp-version {
          type uint8;
          description
            "0..255";
          default "2";
        }
        leaf hsrp-standby-ip {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
          //mandatory true;
        }
        leaf hsrp-group {
          type uint16 {
            range "0..4095";
          }
          description
            "0..4095";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
          //mandatory true;
        }
        leaf hsrp-preempt {
          type boolean;
          description
            "hsrp-preempt: True/False";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
        }
        leaf hsrp-preempt-reload-delay {
          description
            "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
          type uint16 {
            range "0..3600";
          }
          when "../hsrp-preempt = 'true' ";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
        }
        leaf auth-type {
          type enumeration {
            enum "md5-key-chain";
            enum "md5-key-string";
            enum "text";
            enum "key-string";
          }
          description
            "md5-key-chain
             md5-key-string
             text
             key-string
            ";
        }
        leaf auth-password {
          type string {
            length "1..8";
          }
          description
            "string";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
        }
        leaf hsrp-timers {
          type boolean;
          description
            "hsrp-timers: True/False";
        }
        leaf hello-interval-sec {
          type uint16 {
            range "1..254";
          }
          description
            "1..254";
          when "../hsrp-timers = 'true'";
        }
        leaf hello-interval-msec {
          type uint16 {
            range "15..999";
          }
          description
            "15..999";
          default "250";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-sec {
          type uint16 {
            range "1..255";
          }
          description
            "1..255";
          default "1";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-msec {
          type uint16 {
            range "50..3000";
          }
          description
            "50..3000";
          when "../hsrp-timers = 'true'";
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "47";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          //mandatory true;
        }
        uses end-point-props;
        leaf hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
          //mandatory true;
        }
        leaf track {
          type uint8;
          description
            "0..255";
        }
        leaf decrement {
          type uint8;
          description
            "0..255";
          //default "120";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "48";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    uses service-validations-def;
  }

  grouping service-validations-def {
    container service-validations {
      leaf sequence-number {
        type string;
        default "71";
        description
          "sequence-number";
        config false;
      }
      list ping {
        description
          "ping-service";
        key "device-ip destination-ip";
        leaf device-ip {
          type leafref {
            path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../../resource-pool]/rp:device/rp:id";
          }
          description
            "device-ip";
        }
        leaf sequence-number {
          type string;
          default "72";
          description
            "sequence-number";
          config false;
        }
        leaf destination-ip {
          type inet:ip-address;
          description
            "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
        }
        leaf vrf {
          type string;
          description
            "string";
        }
        leaf result {
          type enumeration {
            enum "pass";
            enum "fail";
          }
          description
            "pass
             fail
            ";
        }
      }
      list interface-status {
        description
          "interface-status";
        key "device-ip interface-name";
        leaf device-ip {
          type leafref {
            path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../../resource-pool]/rp:device/rp:id";
          }
          description
            "device-ip";
        }
        leaf sequence-number {
          type string;
          default "73";
          description
            "sequence-number";
          config false;
        }
        leaf interface-name {
          type leafref {
            path "/ac:devices/ac:device[ac:id=current()/../device-ip]/if:interfaces/if:interface/if:name";
          }
          description
            "interface-name";
        }
        leaf result {
          type string;
          description
            "string";
        }
      }
    }
  }

  grouping cpe-deployment-def {
    container dual-cpe-site {
      list dual-cpe-site-services {
        n-ext:ncx-service;
        key "site-name";
        leaf site-name {
          type string;
          description
            "string";
        }
        leaf bgp-as {
          type inet:as-number;
          description
            "0..4294967295";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/as-number";
        }
        leaf zero-touch-prov {
          type boolean;
          description
            "zero-touch-prov: True/False";
        }
        leaf show-topology {
          type boolean;
          description
            "show-topology: True/False";
          config false;
          default "true";
        }
        uses cpe-deployment-policy-def;
        uses associated-service-def;
      }
    }
  }

  grouping cpe-tertiary-def {
    container triple-cpe-site {
      list triple-cpe-site-services {
        n-ext:ncx-service;
        key "site-name";
        leaf site-name {
          type string;
          description
            "string";
        }
        leaf bgp-as {
          type inet:as-number;
          description
            "0..4294967295";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/as-number";
        }
        leaf zero-touch-prov {
          type boolean;
          description
            "zero-touch-prov: True/False";
        }
        leaf show-topology {
          type boolean;
          description
            "show-topology: True/False";
          config false;
          default "true";
        }
        uses cpe-tertiary-policy-def;
        uses associated-service-tertiary-def;
      }
    }
  }

  grouping associated-service-tertiary-def {
    container policy-update-services {
      leaf sequence-number {
        type string;
        default "75";
        description
          "sequence-number";
        config false;
      }
      leaf rtt-trigger {
        type string;
        default "false";
        description
          "naas event trap flag";
      }
      list cpe-primary-mpls {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-primary-mpls-wan/end-points/endpoint-name";
          }
          description
            "primary-mpls-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "76";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-primary-inet {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-primary-inet-wan/end-points/endpoint-name";
          }
          description
            "primary-inet-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "77";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-secondary-mpls {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-secondary-mpls-wan/end-points/endpoint-name";
          }
          description
            "secondary-mpls-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "78";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-secondary-inet {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-secondary-inet-wan/end-points/endpoint-name";
          }
          description
            "secondary-inet-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "79";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-tertiary-mpls {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-tertiary-mpls-wan/end-points/endpoint-name";
          }
          description
            "tertiary-mpls-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "80";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-tertiary-inet {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-tertiary-inet-wan/end-points/endpoint-name";
          }
          description
            "tertiary-inet-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "81";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      container hsrp-update-service {
        leaf sequence-number {
          type string;
          default "82";
          description
            "sequence-number";
          config false;
        }
        leaf cpe-primary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
        leaf cpe-secondary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
        leaf cpe-tertiary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
      }
    }
  }

  grouping cpe-tertiary-policy-def {
    uses sm:service-def {
      refine "name" {
        config false;
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        n-ext-ui:ncx-ext-allowed-vals "/rp:resource-pools/rp:resource-pool[rp:parent-resource-pool=current()/../../../resource-pool]/rp:name";
        mandatory true;
      }
    }
    container cpe-primary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-primary";
          config false;
        }
        refine "name" {
          default "cpe-primary";
        }
        refine "deploy-on" {
          config false;
        }
        refine "vrf-name" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-secondary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-secondary";
          config false;
        }
        refine "name" {
          default "cpe-secondary";
        }
        refine "vrf-name" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-tertiary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-tertiary";
          config false;
        }
        refine "name" {
          default "cpe-tertiary";
        }
        refine "vrf-name" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-primary-cpe-secondary-ic {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-cpe-secondary-ic";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-cpe-secondary-ic";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "34";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      list ic-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local1 {
          refine "inbound-policy" {
            config false;
          }
          refine "hierarchical-inbound-policy" {
            config false;
          }
          refine "hierarchical-policy" {
            config false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "35";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          mandatory true;
        }
        uses end-point-props2;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "36";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props {
            refine "next-hop-self" {
              default "true";
            }
            refine "send-community" {
              default "true";
            }
          }
        }
      }
    }
    container cpe-secondary-cpe-tertiary-ic {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-cpe-tertiary-ic";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-cpe-tertiary-ic";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "37";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-tertiary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-tertiary";
        config false;
      }
      list ic-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local1 {
          refine "inbound-policy" {
            config false;
          }
          refine "hierarchical-inbound-policy" {
            config false;
          }
          refine "hierarchical-policy" {
            config false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "38";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          mandatory true;
        }
        uses end-point-props2;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "39";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props {
            refine "next-hop-self" {
              default "true";
            }
            refine "send-community" {
              default "true";
            }
          }
        }
      }
    }
    container cpe-tertiary-cpe-primary-ic {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-tertiary-cpe-primary-ic";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-tertiary-cpe-primary-ic";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "40";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-tertiary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-tertiary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      list ic-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local1 {
          refine "inbound-policy" {
            config false;
          }
          refine "hierarchical-inbound-policy" {
            config false;
          }
          refine "hierarchical-policy" {
            config false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "41";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          mandatory true;
        }
        uses end-point-props2;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "42";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props {
            refine "next-hop-self" {
              default "true";
            }
            refine "send-community" {
              default "true";
            }
          }
        }
      }
    }
    container primary-mpls-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-mpls-wan";
          config false;
        }
        refine "sequence-number" {
          default "43";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-mpls-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-mpls-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-primary-mpls-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-mpls-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-mpls-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "44";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-mpls-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-mpls-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "45";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "46";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container primary-inet-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-inet-wan";
          config false;
        }
        refine "sequence-number" {
          default "47";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-inet-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-inet-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "INET";
      }
    }
    container cpe-primary-inet-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-inet-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-inet-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "48";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-inet-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-inet-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "49";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "50";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-mpls-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-mpls-wan";
          config false;
        }
        refine "sequence-number" {
          default "51";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-mpls-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-mpls-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-secondary-mpls-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-mpls-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-mpls-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "52";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-mpls-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-mpls-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "53";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "54";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-inet-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-inet-wan";
          config false;
        }
        refine "sequence-number" {
          default "55";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-inet-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-inet-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "INET";
      }
    }
    container cpe-secondary-inet-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-inet-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-inet-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "56";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-inet-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-inet-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "57";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "58";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container tertiary-mpls-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "tertiary-mpls-wan";
          config false;
        }
        refine "sequence-number" {
          default "59";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "tertiary-mpls-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf tertiary-mpls-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-tertiary-mpls-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-tertiary-mpls-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-tertiary-mpls-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "60";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../tertiary-mpls-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "tertiary-mpls-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-tertiary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-tertiary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "61";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "62";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container tertiary-inet-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "tertiary-inet-wan";
          config false;
        }
        refine "sequence-number" {
          default "63";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "tertiary-inet-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf tertiary-inet-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "INET";
      }
    }
    container cpe-tertiary-inet-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-tertiary-inet-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-tertiary-inet-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "64";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../tertiary-inet-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "tertiary-inet-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-tertiary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-tertiary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "65";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "66";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container lan {
      uses vnf:virtual-network-def {
        refine "internal-id" {
          default "Cust-LAN";
          config false;
        }
        refine "sequence-number" {
          default "67";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "lan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "3";
        config false;
      }
    }
    container cpe-lan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-lan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-lan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "68";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      leaf endpoint3 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-tertiary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-tertiary";
        config false;
      }
      leaf endpoint4 {
        n-ext:end-point;
        type leafref {
          path "../../lan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "Cust-LAN";
        config false;
      }
      uses ic-local-props {
        refine "hierarchical-outbound-policy" {
          config false;
        }
        refine "outbound-policy" {
          config false;
        }
        refine "policy-name" {
          config false;
        }
        refine "shape-average" {
          config false;
        }
        refine "child-qos-policy" {
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "auto-negotiation" {
          config false;
        }
        refine "speed" {
          config false;
        }
        refine "duplex" {
          config false;
        }
        refine "load-interval" {
          config false;
        }
        refine "hold-queue-in" {
          config false;
        }
        refine "hold-queue-out" {
          config false;
        }
      }
      leaf hsrp-version {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
      leaf hsrp-standby-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
        //mandatory true;
      }
      leaf hsrp-group {
        type uint16 {
          range "0..4095";
        }
        description
          "0..4095";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
        //mandatory true;
      }
      leaf hsrp-preempt {
        type boolean;
        description
          "hsrp-preempt: True/False";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
      }
      leaf hsrp-preempt-reload-delay {
        description
          "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
        type uint16 {
          range "0..3600";
        }
        when "../hsrp-preempt = 'true' ";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
      }
      leaf auth-type {
        type enumeration {
          enum "md5-key-chain";
          enum "md5-key-string";
          enum "text";
          enum "key-string";
        }
        description
          "md5-key-chain
           md5-key-string
           text
           key-string
          ";
        config false;
      }
      leaf auth-password {
        type string {
          length "1..8";
        }
        description
          "string";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
      }
      leaf hsrp-timers {
        type boolean;
        description
          "hsrp-timers: True/False";
        config false;
      }
      leaf hello-interval-sec {
        type uint16 {
          range "1..254";
        }
        description
          "1..254";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hello-interval-msec {
        type uint16 {
          range "15..999";
        }
        description
          "15..999";
        default "250";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-sec {
        type uint16 {
          range "1..255";
        }
        description
          "1..255";
        default "1";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-msec {
        type uint16 {
          range "50..3000";
        }
        description
          "50..3000";
        when "../hsrp-timers = 'true'";
        config false;
      }
      list lan-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local {
          refine "cidr" {
            mandatory false;
          }
        }
        leaf hsrp-version {
          type uint8;
          description
            "0..255";
          default "2";
        }
        leaf hsrp-standby-ip {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
          //mandatory true;
        }
        leaf hsrp-group {
          type uint16 {
            range "0..4095";
          }
          description
            "0..4095";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
          //mandatory true;
        }
        leaf hsrp-preempt {
          type boolean;
          description
            "hsrp-preempt: True/False";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
        }
        leaf hsrp-preempt-reload-delay {
          description
            "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
          type uint16 {
            range "0..3600";
          }
          when "../hsrp-preempt = 'true' ";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
        }
        leaf auth-type {
          type enumeration {
            enum "md5-key-chain";
            enum "md5-key-string";
            enum "text";
            enum "key-string";
          }
          description
            "md5-key-chain
             md5-key-string
             text
             key-string
            ";
        }
        leaf auth-password {
          type string {
            length "1..8";
          }
          description
            "string";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
        }
        leaf hsrp-timers {
          type boolean;
          description
            "hsrp-timers: True/False";
        }
        leaf hello-interval-sec {
          type uint16 {
            range "1..254";
          }
          description
            "1..254";
          when "../hsrp-timers = 'true'";
        }
        leaf hello-interval-msec {
          type uint16 {
            range "15..999";
          }
          description
            "15..999";
          default "250";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-sec {
          type uint16 {
            range "1..255";
          }
          description
            "1..255";
          default "1";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-msec {
          type uint16 {
            range "50..3000";
          }
          description
            "50..3000";
          when "../hsrp-timers = 'true'";
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "69";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          //mandatory true;
        }
        uses end-point-props;
        leaf hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
          //mandatory true;
        }
        leaf track {
          type uint8;
          description
            "0..255";
        }
        leaf decrement {
          type uint8;
          description
            "0..255";
          //default "120";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "70";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    uses service-validations-def;
  }

  grouping cpe-deployment-def-dual {
    container dual-cpe-dual-wan-site {
      list dual-cpe-dual-wan-site-services {
        n-ext:ncx-service;
        key "site-name";
        leaf site-name {
          type string;
          description
            "string";
        }
        leaf bgp-as {
          type inet:as-number;
          description
            "0..4294967295";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/as-number";
        }
        leaf zero-touch-prov {
          type boolean;
          description
            "zero-touch-prov: True/False";
        }
        leaf show-topology {
          type boolean;
          description
            "show-topology: True/False";
          config false;
          default "true";
        }
        uses cpe-deployment-policy-dual-def;
        uses associated-service-dual-wan-def;
      }
    }
  }

  grouping associated-service-dual-wan-def {
    container policy-update-services {
      leaf sequence-number {
        type string;
        default "63";
        description
          "sequence-number";
        config false;
      }
      leaf rtt-trigger {
        type string;
        default "false";
        description
          "naas event trap flag";
      }
      list cpe-primary-mpls {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-primary-mpls-wan/end-points/endpoint-name";
          }
          description
            "primary-mpls-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "64";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-primary-inet {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-primary-inet-wan/end-points/endpoint-name";
          }
          description
            "primary-inet-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "65";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-secondary-mpls {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-secondary-mpls-wan/end-points/endpoint-name";
          }
          description
            "secondary-mpls-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "66";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-secondary-inet {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-secondary-inet-wan/end-points/endpoint-name";
          }
          description
            "secondary-inet-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "67";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      container hsrp-update-service {
        leaf sequence-number {
          type string;
          default "68";
          description
            "sequence-number";
          config false;
        }
        leaf cpe-primary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
        leaf cpe-secondary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
      }
    }
  }

  grouping cpe-deployment-policy-dual-def {
    uses sm:service-def {
      refine "name" {
        config false;
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        n-ext-ui:ncx-ext-allowed-vals "/rp:resource-pools/rp:resource-pool[rp:parent-resource-pool=current()/../../../resource-pool]/rp:name";
        mandatory true;
      }
    }
    container cpe-primary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-primary";
          config false;
        }
        refine "name" {
          default "cpe-primary";
        }
        refine "deploy-on" {
          config false;
        }
        refine "vrf-name" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-secondary {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe-secondary";
          config false;
        }
        refine "name" {
          default "cpe-secondary";
        }
        refine "vrf-name" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container cpe-primary-cpe-secondary-ic {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-cpe-secondary-ic";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-cpe-secondary-ic";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "34";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      list ic-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local1 {
          refine "inbound-policy" {
            config false;
          }
          refine "hierarchical-inbound-policy" {
            config false;
          }
          refine "hierarchical-policy" {
            config false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "35";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          mandatory true;
        }
        uses end-point-props2;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "36";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props {
            refine "next-hop-self" {
              default "true";
            }
            refine "send-community" {
              default "true";
            }
          }
        }
      }
    }
    container primary-mpls-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-mpls-wan";
          config false;
        }
        refine "sequence-number" {
          default "37";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-mpls-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-mpls-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-primary-mpls-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-mpls-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-mpls-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "38";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-mpls-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-mpls-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "39";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "40";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container primary-inet-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-inet-wan";
          config false;
        }
        refine "sequence-number" {
          default "41";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-inet-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-inet-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "INET";
      }
    }
    container cpe-primary-inet-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-inet-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-inet-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "42";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-inet-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-inet-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "43";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "44";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-mpls-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-mpls-wan";
          config false;
        }
        refine "sequence-number" {
          default "45";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-mpls-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-mpls-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-secondary-mpls-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-mpls-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-mpls-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "46";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-mpls-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-mpls-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "47";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "48";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-inet-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-inet-wan";
          config false;
        }
        refine "sequence-number" {
          default "49";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-inet-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-inet-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "INET";
      }
    }
    container cpe-secondary-inet-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-inet-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-inet-wan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "50";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-inet-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-inet-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "51";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "52";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container lan {
      uses vnf:virtual-network-def {
        refine "internal-id" {
          default "Cust-LAN";
          config false;
        }
        refine "sequence-number" {
          default "53";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "lan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "3";
        config false;
      }
    }
    container cpe-lan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-lan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-lan";
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "54";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-primary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-primary";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe-secondary/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe-secondary";
        config false;
      }
      leaf endpoint3 {
        n-ext:end-point;
        type leafref {
          path "../../lan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "Cust-LAN";
        config false;
      }
      uses ic-local-props {
        refine "hierarchical-outbound-policy" {
          config false;
        }
        refine "outbound-policy" {
          config false;
        }
        refine "policy-name" {
          config false;
        }
        refine "shape-average" {
          config false;
        }
        refine "child-qos-policy" {
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "auto-negotiation" {
          config false;
        }
        refine "speed" {
          config false;
        }
        refine "duplex" {
          config false;
        }
        refine "load-interval" {
          config false;
        }
        refine "hold-queue-in" {
          config false;
        }
        refine "hold-queue-out" {
          config false;
        }
      }
      leaf hsrp-version {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
      leaf hsrp-standby-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
        //mandatory true;
      }
      leaf hsrp-group {
        type uint16 {
          range "0..4095";
        }
        description
          "0..4095";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
        //mandatory true;
      }
      leaf hsrp-preempt {
        type boolean;
        description
          "hsrp-preempt: True/False";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
      }
      leaf hsrp-preempt-reload-delay {
        description
          "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
        type uint16 {
          range "0..3600";
        }
        when "../hsrp-preempt = 'true' ";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
      }
      leaf auth-type {
        type enumeration {
          enum "md5-key-chain";
          enum "md5-key-string";
          enum "text";
          enum "key-string";
        }
        description
          "md5-key-chain
           md5-key-string
           text
           key-string
          ";
        config false;
      }
      leaf auth-password {
        type string {
          length "1..8";
        }
        description
          "string";
        config false;
        //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
      }
      leaf hsrp-timers {
        type boolean;
        description
          "hsrp-timers: True/False";
        config false;
      }
      leaf hello-interval-sec {
        type uint16 {
          range "1..254";
        }
        description
          "1..254";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hello-interval-msec {
        type uint16 {
          range "15..999";
        }
        description
          "15..999";
        default "250";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-sec {
        type uint16 {
          range "1..255";
        }
        description
          "1..255";
        default "1";
        when "../hsrp-timers = 'true'";
        config false;
      }
      leaf hold-time-msec {
        type uint16 {
          range "50..3000";
        }
        description
          "50..3000";
        when "../hsrp-timers = 'true'";
        config false;
      }
      list lan-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local {
          refine "cidr" {
            mandatory false;
          }
        }
        leaf hsrp-version {
          type uint8;
          description
            "0..255";
          default "2";
        }
        leaf hsrp-standby-ip {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/ip-address";
          //mandatory true;
        }
        leaf hsrp-group {
          type uint16 {
            range "0..4095";
          }
          description
            "0..4095";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/group";
          //mandatory true;
        }
        leaf hsrp-preempt {
          type boolean;
          description
            "hsrp-preempt: True/False";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/hsrp-preempt";
        }
        leaf hsrp-preempt-reload-delay {
          description
            "Enter the HSRP preempt delay in taking over active role in the range 0 to 3600 seconds";
          type uint16 {
            range "0..3600";
          }
          when "../hsrp-preempt = 'true' ";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/preempt-reload";
        }
        leaf auth-type {
          type enumeration {
            enum "md5-key-chain";
            enum "md5-key-string";
            enum "text";
            enum "key-string";
          }
          description
            "md5-key-chain
             md5-key-string
             text
             key-string
            ";
        }
        leaf auth-password {
          type string {
            length "1..8";
          }
          description
            "string";
          //n-ext:maps-to "/ac:devices/ac:device/if:interfaces/interface/hsrp:hsrp/auth-key";
        }
        leaf hsrp-timers {
          type boolean;
          description
            "hsrp-timers: True/False";
        }
        leaf hello-interval-sec {
          type uint16 {
            range "1..254";
          }
          description
            "1..254";
          when "../hsrp-timers = 'true'";
        }
        leaf hello-interval-msec {
          type uint16 {
            range "15..999";
          }
          description
            "15..999";
          default "250";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-sec {
          type uint16 {
            range "1..255";
          }
          description
            "1..255";
          default "1";
          when "../hsrp-timers = 'true'";
        }
        leaf hold-time-msec {
          type uint16 {
            range "50..3000";
          }
          description
            "50..3000";
          when "../hsrp-timers = 'true'";
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "55";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          //mandatory true;
        }
        uses end-point-props;
        leaf hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
          //mandatory true;
        }
        leaf track {
          type uint8;
          description
            "0..255";
        }
        leaf decrement {
          type uint8;
          description
            "0..255";
          //default "120";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "56";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    uses service-validations-def;
  }

  grouping dc-domain-def {
    uses sm:service-def {
      refine "name" {
        config false;
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        n-ext-ui:ncx-ext-allowed-vals "/rp:resource-pools/rp:resource-pool[rp:parent-resource-pool=current()/../../../resource-pool]/rp:name";
        mandatory true;
      }
    }
    container cpe {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe";
          config false;
        }
        refine "name" {
          default "cpe";
        }
        refine "vrf-name" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "wan";
          config false;
        }
        refine "sequence-number" {
          default "34";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-wan";
        }
        refine "sequence-number" {
          default "35";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe";
        config false;
      }
      uses ic-local-props {
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "36";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "37";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container lan {
      uses vnf:virtual-network-def {
        refine "internal-id" {
          default "lan";
          config false;
        }
        refine "sequence-number" {
          default "38";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "lan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "4";
        config false;
      }
    }
    container cpe-lan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-lan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-lan";
        }
        refine "sequence-number" {
          default "39";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../lan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "lan";
        config false;
      }
      uses ic-local-props {
        refine "hierarchical-outbound-policy" {
          config false;
        }
        refine "outbound-policy" {
          config false;
        }
        refine "policy-name" {
          config false;
        }
        refine "shape-average" {
          config false;
        }
        refine "child-qos-policy" {
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "auto-negotiation" {
          config false;
        }
        refine "speed" {
          config false;
        }
        refine "duplex" {
          config false;
        }
        refine "load-interval" {
          config false;
        }
        refine "hold-queue-in" {
          config false;
        }
        refine "hold-queue-out" {
          config false;
        }
      }
      list lan-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local {
          refine "cidr" {
            mandatory false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "40";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          //mandatory true;
        }
        uses end-point-props;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "41";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    uses service-validations-def;
  }

  grouping dc-domain-dual-def {
    uses sm:service-def {
      refine "name" {
        config false;
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        n-ext-ui:ncx-ext-allowed-vals "/rp:resource-pools/rp:resource-pool[rp:parent-resource-pool=current()/../../../resource-pool]/rp:name";
        mandatory true;
      }
    }
    container cpe {
      uses vrf:vrouter-def {
        refine "internal-id" {
          default "cpe";
          config false;
        }
        refine "name" {
          default "cpe";
        }
        refine "vrf-name" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "sequence-number" {
          default "1";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
      }
      leaf rd {
        type string;
        description
          "string";
        config false;
      }
      leaf device-ip {
        type leafref {
          path "/rp:resource-pools/rp:resource-pool[rp:name=current()/../../resource-pool]/rp:device/rp:id";
        }
        description
          "device-ip";
        mandatory true;
      }
      uses vrouter-local-def;
      leaf level {
        type uint8;
        description
          "0..255";
        default "2";
        config false;
      }
    }
    container primary-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "primary-wan";
          config false;
        }
        refine "sequence-number" {
          default "34";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "primary-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf primary-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-primary-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-primary-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-primary-wan";
        }
        refine "sequence-number" {
          default "35";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../primary-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "primary-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe";
        config false;
      }
      uses ic-local-props {
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "36";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf primary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "37";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container secondary-wan {
      uses enf:external-network-def {
        refine "internal-id" {
          default "secondary-wan";
          config false;
        }
        refine "sequence-number" {
          default "38";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "secondary-wan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "1";
        config false;
      }
      leaf secondary-wan-connectivity {
        type enumeration {
          enum "MPLS";
          enum "INET";
        }
        description
          "MPLS
           INET
          ";
        default "MPLS";
      }
    }
    container cpe-secondary-wan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-secondary-wan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-secondary-wan";
        }
        refine "sequence-number" {
          default "39";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../secondary-wan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "secondary-wan";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../cpe/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe";
        config false;
      }
      uses ic-local-props {
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "40";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        //leaf secondary-wan-connectivity {
        //  type enumeration {
        //    enum "MPLS";
        //    enum "INET";
        //  }
        //  description
        //    "MPLS
        //     INET
        //    ";
        //  default "MPLS";
        //  when "../interface-type = 'Tunnel'";
        //}
        uses end-point-props1;
        leaf dmvpn-profile {
          type leafref {
            path "../../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
          }
          description
            "dmvpn-profile";
          when "../interface-type = 'Tunnel'";
        }
        leaf p2p {
          type boolean;
          description
            "p2p: True/False";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-ip-address {
          type inet:ipv4-address;
          description
            "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-mask {
          type string;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-destination {
          type inet:ipv4-address;
          description
            "Valid IPv4 Mask";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-interface-id {
          type uint32;
          description
            "Valid Tunnel ID";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-source {
          type string;
          description
            "string";
          when "../interface-type = 'Tunnel'";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          units "Mbps";
          when "../interface-type = 'Tunnel'";
        }
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "41";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    container lan {
      uses vnf:virtual-network-def {
        refine "internal-id" {
          default "lan";
          config false;
        }
        refine "sequence-number" {
          default "42";
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "name" {
          default "lan";
        }
      }
      leaf level {
        type uint8;
        description
          "0..255";
        default "4";
        config false;
      }
    }
    container cpe-lan {
      uses ic:interconnect-def {
        refine "name" {
          default "cpe-lan";
          config false;
        }
        refine "deploy-on" {
          config false;
        }
        refine "resource-id" {
          config false;
        }
        refine "interconnect-name" {
          default "cpe-lan";
        }
        refine "sequence-number" {
          default "43";
          config false;
        }
        refine "internal-id" {
          config false;
        }
        refine "type" {
          config false;
        }
      }
      leaf endpoint1 {
        n-ext:end-point;
        type leafref {
          path "../../cpe/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "cpe";
        config false;
      }
      leaf endpoint2 {
        n-ext:end-point;
        type leafref {
          path "../../lan/internal-id";
        }
        description
          "Reference to the endpoint of the interconnect";
        default "lan";
        config false;
      }
      uses ic-local-props {
        refine "hierarchical-outbound-policy" {
          config false;
        }
        refine "outbound-policy" {
          config false;
        }
        refine "policy-name" {
          config false;
        }
        refine "shape-average" {
          config false;
        }
        refine "child-qos-policy" {
          config false;
        }
        refine "inbound-policy" {
          config false;
        }
        refine "cidr" {
          mandatory false;
          config false;
        }
        refine "auto-negotiation" {
          config false;
        }
        refine "speed" {
          config false;
        }
        refine "duplex" {
          config false;
        }
        refine "load-interval" {
          config false;
        }
        refine "hold-queue-in" {
          config false;
        }
        refine "hold-queue-out" {
          config false;
        }
      }
      list lan-profile {
        key "profile-name";
        leaf profile-name {
          type string;
          description
            "string";
        }
        uses ic-local {
          refine "cidr" {
            mandatory false;
          }
        }
      }
      list end-points {
        leaf sequence-number {
          type string;
          default "44";
          description
            "sequence-number";
          config false;
        }
        key "endpoint-name";
        leaf profile-name {
          type string;
          description
            "string";
          //mandatory true;
        }
        uses end-point-props;
        list bgp-peers {
          leaf sequence-number {
            type string;
            default "45";
            description
              "sequence-number";
            config false;
          }
          key "BGP-peer-name";
          uses bgp-peer-props;
        }
      }
    }
    uses service-validations-def;
  }

  grouping dc-def-dual {
    container single-cpe-dual-wan-site {
      list single-cpe-dual-wan-site-services {
        n-ext:ncx-service;
        key "site-name";
        leaf site-name {
          type string;
          description
            "string";
        }
        leaf bgp-as {
          type inet:as-number;
          description
            "0..4294967295";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/as-number";
        }
        leaf zero-touch-prov {
          type boolean;
          description
            "zero-touch-prov: True/False";
        }
        leaf show-topology {
          type boolean;
          description
            "show-topology: True/False";
          config false;
          default "true";
        }
        uses dc-domain-dual-def;
        container policy-update-services {
          leaf sequence-number {
            type string;
            default "46";
            description
              "sequence-number";
            config false;
          }
          list cpe {
            key "end-point name";
            leaf end-point {
              type enumeration {
                enum "cpe-primary-wan";
                enum "cpe-secondary-wan";
              }
              description
                "cpe-primary-wan
                 cpe-secondary-wan
                ";
            }
            leaf name {
              type string;
              description
                "string";
            }
            leaf end-point1 {
              type leafref {
                path "../../../cpe-primary-wan/end-points/endpoint-name";
              }
              description
                "primary-wan-end-point";
              when " ../end-point = 'cpe-primary-wan' ";
            }
            leaf end-point2 {
              type leafref {
                path "../../../cpe-secondary-wan/end-points/endpoint-name";
              }
              description
                "secondary-wan-end-point";
              when " ../end-point = 'cpe-secondary-wan' ";
            }
            leaf sequence-number {
              type string;
              default "47";
              description
                "sequence-number";
              config false;
            }
            uses route-map-container-def;
          }
        }
      }
    }
  }

  grouping dc-def {
    container single-cpe-site {
      list single-cpe-site-services {
        n-ext:ncx-service;
        key "site-name";
        leaf site-name {
          type string;
          description
            "string";
        }
        leaf bgp-as {
          type inet:as-number;
          description
            "0..4294967295";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3:vrfs/vrf/router-bgp/as-number";
        }
        leaf zero-touch-prov {
          type boolean;
          description
            "zero-touch-prov: True/False";
        }
        leaf show-topology {
          type boolean;
          description
            "show-topology: True/False";
          config false;
          default "true";
        }
        uses dc-domain-def;
      }
    }
  }

  grouping domain-def {
    uses sm:service-def {
      refine "name" {
        mandatory true;
        description
          "Service name";
      }
      refine "service-sequence" {
        config false;
      }
      refine "resource-pool" {
        mandatory true;
      }
    }
  }

  grouping dmvpn-tunnel-profile-def {
    container dmvpn-tunnel-profiles {
      list dmvpn-tunnel-profile {
        key "name";
        uses dmvpn-domain-profile-def;
      }
      list update-dmvpn-tunnel-profile {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf tunnel-id {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/dmvpn-tunnel-profiles/dmvpn-tunnel-profile/tunnel-id";
          }
          description
            "tunnel-id";
          mandatory true;
        }
        leaf operation {
          type operation-def;
          description
            "CREATE
             DELETE
            ";
        }
        leaf nhrp-nw-id {
          type uint32;
          description
            "NHRP Network Id and tunnel key can be same value";
          when " ../operation = 'CREATE' ";
        }
        leaf tunnel-key {
          type uint32;
          description
            "Tunnel key and NHRP Network Id can be same value";
          when " ../operation = 'CREATE' ";
        }
        leaf nhrp-authentication-key {
          type string {
            length "1..8";
          }
          description
            "NHRP authentication key";
          when " ../operation = 'CREATE' ";
        }
        leaf wan-tunnel-ip {
          type inet:ip-address;
          description
            "DC router tunnel IP address from tunnel prefix range";
        }
        leaf wan-public-ip {
          type inet:ip-address;
          description
            "DC router tunnel source interface IP address";
        }
        leaf mtu {
          type uint32;
          description
            "0..4294967295";
          when " ../operation = 'CREATE' ";
        }
        leaf tcp-adjust-mss {
          type uint32;
          description
            "0..4294967295";
          when " ../operation = 'CREATE' ";
        }
        leaf tunnel-bandwidth {
          type uint16;
          description
            "0..65535";
          when " ../operation = 'CREATE' ";
        }
        leaf fvrf {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/vrfs/vrf/vrf-name";
          }
          description
            "fvrf";
          when " ../operation = 'CREATE' ";
        }
        leaf ipsec-profile {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/ipsec/ipsec-profiles/ipsec-profile/ipsec-profile-name";
          }
          description
            "ipsec-profile";
          when " ../operation = 'CREATE' ";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
    }
  }

  grouping dmvpn-domain-profile-def {
    leaf name {
      type string;
      description
        "name";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/description";
    }
    leaf tunnel-prefix {
      type leafref {
        path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
      }
      description
        "Tunnel subnet";
      mandatory true;
    }
    leaf nhrp-nw-id {
      type uint32;
      description
        "NHRP Network Id and tunnel key can be same value";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-network-id";
    }
    leaf tunnel-key {
      type uint32;
      description
        "Tunnel key and NHRP Network Id can be same value";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/tunnel-key";
    }
    leaf tunnel-id {
      type uint16;
      description
        "Tunnel interface id";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/name";
    }
    leaf nhrp-authentication-key {
      type string {
        length "1..8";
      }
      description
        "NHRP authentication key";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-auth-key";
    }
    leaf wan-tunnel-ip {
      type inet:ip-address;
      description
        "DC router tunnel IP address from tunnel prefix range";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-maps/sourceip";
    }
    leaf wan-public-ip {
      type inet:ip-address;
      description
        "DC router tunnel source interface IP address";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:dmvpntunnels/dmvpntunnel/nhrp-maps/destip";
    }
    leaf mtu {
      type uint32;
      description
        "0..4294967295";
      default "1400";
    }
    leaf tcp-adjust-mss {
      type uint32;
      description
        "0..4294967295";
      default "1360";
    }
    leaf ipsec-profile {
      type leafref {
        path "../../../ipsec/ipsec-profiles/ipsec-profile/ipsec-profile-name";
      }
      description
        "ipsec-profile";
    }
    leaf no-nhrp-route-watch {
      type boolean;
      description
        "no-nhrp-route-watch: True/False";
    }
    leaf nhrp-reg-no-uniq {
      type boolean;
      description
        "nhrp-reg-no-uniq: True/False";
    }
    leaf nhrp-reg-timeout {
      type uint32;
      description
        "0..4294967295";
    }
    leaf nhrp-holdtime {
      type uint16 {
        range "1..65535";
      }
      description
        "1..65535";
      default "60";
    }
    leaf nhrp-redirect {
      type boolean;
      description
        "nhrp-redirect: True/False";
    }
    leaf nhrp-shortcut {
      type boolean;
      description
        "nhrp-shortcut: True/False";
    }
    leaf tunnel-keepalive-period {
      type uint16 {
        range "0..32767";
      }
      description
        "0..32767";
    }
    leaf tunnel-keepalive-retries {
      type uint8 {
        range "1..255";
      }
      description
        "1..255";
    }
    leaf delay {
      type uint32;
      description
        "0..4294967295";
      default "100";
    }
    list nhrp-maps {
      key "wan-tunnel-ip wan-public-ip";
      uses nhrp-map;
    }
  }

  grouping nhrp-map {
    leaf wan-tunnel-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
    }
    leaf wan-public-ip {
      type inet:ip-address;
      description
        "Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)";
    }
  }

  grouping ipsec-def {
    container ipsec {
      container crypto-profiles {
        list crypto-profile {
          key "crypto-profile-name";
          uses crypto-profile-def;
        }
      }
      container transform-sets {
        list transform-set {
          key "transform-set-name";
          uses transform-set;
        }
      }
      container ipsec-profiles {
        list ipsec-profile {
          key "ipsec-profile-name";
          uses ipsec-profile;
        }
      }
      list delete-ipsec-profile {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf ipsec-profile-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/ipsec/ipsec-profiles/ipsec-profile/ipsec-profile-name";
          }
          description
            "ipsec-profile-name";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
    }
  }

  grouping crypto-profile-def {
    leaf crypto-profile-name {
      type string;
      description
        "string";
    }
    leaf crypto-type {
      type crypto-version;
      description
        "IKEV1
         IKEV2
        ";
      default "IKEV1";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/ike-version";
    }
    leaf keyring {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/key-ring-name";
    }
    leaf allow-all {
      type boolean;
      description
        "allow-all: True/False";
    }
    leaf pre-shared-key {
      type string;
      description
        "string";
      mandatory true;
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/pre-shared-secret";
    }
    leaf vrf {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/vrf-name";
    }
    leaf encryption {
      type encryption;
      description
        "DES
         3DES
         AES128
         AES192
         AES256
         esp-aes
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/ike-encryption-type";
    }
    leaf authentication {
      type authentication;
      description
        "MD5
         SHA1
         SHA256
         SHA384
         SHA512
         esp-sha-hmac
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/hash";
    }
    leaf policy-number {
      type uint32;
      description
        "0..4294967295";
      when " ../crypto-type = 'IKEV1' ";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/policy-number";
    }
    leaf auth-type {
      type auth-mode;
      description
        "pre-share
         rsa-sig
        ";
      when " ../crypto-type = 'IKEV1' ";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/auth-type";
    }
    leaf group {
      type uint32;
      description
        "0..4294967295";
      when " ../crypto-type = 'IKEV1' ";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/group";
    }
    leaf life-time {
      type uint32;
      description
        "0..4294967295";
      when " ../crypto-type = 'IKEV1' ";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/life-time";
    }
  }

  grouping transform-set {
    leaf transform-set-name {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/transform-set";
    }
    leaf mode {
      type ipsec-mode;
      description
        "transport
         tunnel
        ";
      default "transport";
    }
    leaf encryption {
      type encryption_transform;
      description
        "esp-aes
         esp-3des
         esp-des
         esp-aes 128
         esp-aes 192
         esp-aes 256
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/ipsec-encryption-type";
    }
    leaf authentication {
      type authentication_transform;
      description
        "esp-md5-hmac
         esp-sha-hmac
         esp-sha256-hmac
         esp-sha384-hmac
         esp-sha512-hmac
        ";
      //      n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/ipsec-authentication-type";
    }
  }

  grouping ipsec-profile {
    leaf ipsec-profile-name {
      type string;
      description
        "string";
      //n-ext:maps-to "/ac:devices/ac:device/dmvpn:crypto/ipsec-profile-name";
    }
    leaf sa-lifetime {
      type uint32;
      description
        "IPSec SA lifetime";
    }
    leaf transform-set {
      type leafref {
        path "../../../../ipsec/transform-sets/transform-set/transform-set-name";
      }
      description
        "transform-set";
      mandatory true;
    }
    leaf crypto-profile {
      type leafref {
        path "../../../../ipsec/crypto-profiles/crypto-profile/crypto-profile-name";
      }
      description
        "crypto-profile";
      mandatory true;
    }
    leaf shared {
      type boolean;
      description
        "shared: True/False";
    }
  }

  grouping prefix-lists-def {
    container prefix-lists {
      list prefix-list {
        key "prefix-list-name";
        uses prefix-list-def;
      }
      list update-prefix-list {
        key "id";
        leaf id {
          type string;
          description
            "string";
        }
        leaf prefix-list-name {
          type leafref {
            path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/prefix-lists/prefix-list/prefix-list-name";
          }
          description
            "prefix-list-name";
          mandatory true;
        }
        leaf operation {
          type operation-def;
          description
            "CREATE
             DELETE
            ";
        }
        leaf prefix-name {
          type string;
          description
            "string";
          when " ../operation = 'CREATE' ";
        }
        leaf rule-num {
          type uint32 {
            range "1..4294967294";
          }
          //type leafref {
          //  path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/prefix-lists/prefix-list[prefix-list-name=current()/../prefix-list-name]/prefix/rule-num";
          //}
          description
            "rule-num";
          mandatory true;
          //n-ext:maps-to "/ac:devices/ac:device/l3features:ip-prefixlist-list/ip-prefixlist[name=current()/../prefix-list-name]/ip-prefixlist-entries/ip-prefixlist-entry/rule-num";
        }
        leaf ipv4-prefix {
          type inet:ipv4-prefix;
          description
            "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
          when " ../operation = 'CREATE' ";
        }
        leaf condition {
          type enumeration {
            enum "permit";
            enum "deny";
          }
          description
            "permit
             deny
            ";
          when " ../operation = 'CREATE' ";
        }
        leaf exact-matching-prefix-length {
          type matching-prefix-type;
          description
            "string";
          when " ../operation = 'CREATE' ";
        }
        leaf minimum-matching-prefix-length {
          type matching-prefix-type;
          description
            "string";
          when " ../operation = 'CREATE' ";
        }
        leaf maximum-matching-prefix-length {
          type matching-prefix-type;
          description
            "string";
          when " ../operation = 'CREATE' ";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
        }
        leaf-list single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
        }
        leaf-list dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
        }
        leaf-list single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
        }
        leaf-list dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
            require-instance false;
          }
          description
            "dual-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
        }
        leaf-list triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
            require-instance false;
          }
          description
            "single-sites";
          when " ../triple-cpe-site = 'true' ";
        }
      }
    }
  }

  grouping route-map-container-def {
    leaf import-route-map {
      type leafref {
        path "../../../../../route-maps/route-map/route-map-name";
      }
      description
        "import-route-map";
    }
    leaf export-route-map {
      type leafref {
        path "../../../../../route-maps/route-map/route-map-name";
      }
      description
        "export-route-map";
    }
  }

  grouping associated-service-def {
    container policy-update-services {
      leaf sequence-number {
        type string;
        default "63";
        description
          "sequence-number";
        config false;
      }
      leaf rtt-trigger {
        type string;
        default "false";
        description
          "naas event trap flag";
      }
      list cpe-primary {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-primary-wan/end-points/endpoint-name";
          }
          description
            "primary-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "64";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      list cpe-secondary {
        key "end-point";
        leaf end-point {
          type leafref {
            path "../../../cpe-secondary-wan/end-points/endpoint-name";
          }
          description
            "secondary-ic-end-point";
        }
        leaf sequence-number {
          type string;
          default "65";
          description
            "sequence-number";
          config false;
        }
        uses route-map-container-def;
      }
      container hsrp-update-service {
        leaf sequence-number {
          type string;
          default "66";
          description
            "sequence-number";
          config false;
        }
        leaf cpe-primary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
        leaf cpe-secondary-hsrp-priority {
          type uint16 {
            range "0..255";
          }
          description
            "0..255";
        }
      }
    }
  }

  grouping acl-def {
    leaf name {
      type string;
      description
        "string";
    }
    leaf access-list-entry {
      type access-list-entry-type;
      description
        "standard
         extended
        ";
      default "extended";
    }
    leaf sequence-number {
      type string;
      default "13";
      description
        "sequence-number";
      config false;
    }
    leaf dps {
      type boolean;
      description
        "dps: True/False";
    }
    list access-list-rules {
      key "name action protocol";
      leaf name {
        type string;
        description
          "string";
      }
      leaf action {
        type enumeration {
          enum "permit";
          enum "deny";
        }
        description
          "permit
           deny
          ";
      }
      leaf protocol {
        type enumeration {
          enum "ahp";
          enum "eigrp";
          enum "esp";
          enum "gre";
          enum "icmp";
          enum "igmp";
          enum "ip";
          enum "ipinip";
          enum "object-group";
          enum "ospf";
          enum "pcp";
          enum "pim";
          enum "tcp";
          enum "udp";
        }
        description
          "ahp
           eigrp
           esp
           gre
           icmp
           igmp
           ip
           ipinip
           object-group
           ospf
           pcp
           pim
           tcp
           udp
          ";
      }
      leaf service-obj-name {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/object-groups/object-group/name";
        }
        description
          "string";
        when "../protocol =  'object-group'";
      }
      leaf source-condition {
        type enumeration {
          enum "cidr";
          enum "host";
          enum "any";
          enum "objectgroup";
        }
        description
          "cidr
           host
           any
           objectgroup
          ";
      }
      leaf source-object {
        type string;
        description
          "string";
        when "../source-condition =  'cidr' or ../source-condition =  'host'";
      }
      leaf source-object-group {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/object-groups/object-group/name";
        }
        description
          "source-object-group";
        when "../source-condition =  'objectgroup'";
      }
      leaf source-port {
        type uint16;
        description
          "0..65535";
        when "../protocol =  'tcp' or ../protocol =  'udp'";
      }
      leaf destination-condition {
        type enumeration {
          enum "cidr";
          enum "host";
          enum "any";
          enum "objectgroup";
        }
        description
          "cidr
           host
           any
           objectgroup
          ";
      }
      leaf destination-object {
        type string;
        description
          "string";
        when "../destination-condition =  'cidr' or ../destination-condition =  'host'";
      }
      leaf destination-object-group {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/object-groups/object-group/name";
        }
        description
          "destination-object-group";
        when "../destination-condition =  'objectgroup'";
      }
      leaf port-number {
        type uint16;
        description
          "0..65535";
        when "../protocol =  'tcp' or ../protocol =  'udp'";
      }
      leaf match-packets {
        type match-packets-type;
        description
          "precedence\n";
      }
      leaf precedence {
        type precedence-type;
        description
          "routine
           priority
           immediate
           flash
           flash-override
           critical
           internet
           network
          ";
        when " ../match-packets = 'precedence' ";
      }
      leaf dscp {
        type dscp-values-type;
        description
          "Union Input types:
           enumeration
          ";
        when " ../match-packets = 'dscp' ";
      }
      leaf sequence-number {
        type string;
        default "14";
        description
          "sequence-number";
        config false;
      }
    }
  }

  grouping update-acl-def {
    leaf id {
      type string;
      description
        "string";
    }
    leaf access-list-name {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/access-lists/access-list/name";
      }
      description
        "access-list-name";
      mandatory true;
    }
    leaf operation {
      type operation-def;
      description
        "CREATE
         DELETE
        ";
    }
    leaf acl-name {
      type string;
      description
        "string";
      //type leafref {
      //  path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/access-lists/access-list[name=current()/../access-list-name]/access-list-rules/name";
      //}
      mandatory true;
    }
    leaf action {
      type enumeration {
        enum "permit";
        enum "deny";
      }
      description
        "permit
         deny
        ";
      mandatory true;
    }
    leaf protocol {
      type enumeration {
        enum "ahp";
        enum "eigrp";
        enum "esp";
        enum "gre";
        enum "icmp";
        enum "igmp";
        enum "ip";
        enum "ipinip";
        enum "object-group";
        enum "ospf";
        enum "pcp";
        enum "pim";
        enum "tcp";
        enum "udp";
      }
      description
        "ahp
         eigrp
         esp
         gre
         icmp
         igmp
         ip
         ipinip
         object-group
         ospf
         pcp
         pim
         tcp
         udp
        ";
      mandatory true;
    }
    leaf service-obj-name {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/object-groups/object-group/name";
      }
      description
        "string";
      when "../protocol =  'object-group'";
    }
    leaf source-condition {
      type enumeration {
        enum "cidr";
        enum "host";
        enum "any";
        enum "objectgroup";
      }
      description
        "cidr
         host
         any
         objectgroup
        ";
    }
    leaf source-object {
      type string;
      description
        "string";
      when "../source-condition =  'cidr' or ../source-condition =  'host'";
    }
    leaf source-object-group {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/object-groups/object-group/name";
      }
      description
        "source-object-group";
      when "../source-condition =  'objectgroup'";
    }
    leaf source-port {
      type uint16;
      description
        "0..65535";
      when "../protocol =  'tcp' or ../protocol =  'udp'";
    }
    leaf destination-condition {
      type enumeration {
        enum "cidr";
        enum "host";
        enum "any";
        enum "objectgroup";
      }
      description
        "cidr
         host
         any
         objectgroup
        ";
    }
    leaf destination-object {
      type string;
      description
        "string";
      when "../destination-condition =  'cidr' or ../destination-condition =  'host'";
    }
    leaf destination-object-group {
      type leafref {
        path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../name]/object-groups/object-group/name";
      }
      description
        "destination-object-group";
      when "../destination-condition =  'objectgroup'";
    }
    leaf port-number {
      type uint16;
      description
        "0..65535";
      when "../protocol =  'tcp' or ../protocol =  'udp'";
    }
    leaf match-packets {
      type match-packets-type;
      description
        "precedence\n";
    }
    leaf precedence {
      type precedence-type;
      description
        "routine
         priority
         immediate
         flash
         flash-override
         critical
         internet
         network
        ";
      when " ../match-packets = 'precedence' ";
    }
    leaf dscp {
      type dscp-values-type;
      description
        "Union Input types:
         enumeration
        ";
      when " ../match-packets = 'dscp' ";
    }
    leaf single-cpe-site {
      type boolean;
      description
        "single-cpe-site: True/False";
    }
    leaf-list single-cpe-sites {
      type leafref {
        path "../../../single-cpe-site/single-cpe-site-services/site-name";
        require-instance false;
      }
      description
        "single-sites";
      when " ../single-cpe-site = 'true' ";
    }
    leaf dual-cpe-site {
      type boolean;
      description
        "dual-cpe-site: True/False";
    }
    leaf-list dual-cpe-sites {
      type leafref {
        path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
        require-instance false;
      }
      description
        "dual-sites";
      when " ../dual-cpe-site = 'true' ";
    }
    leaf single-cpe-dual-wan-site {
      type boolean;
      description
        "single-cpe-dual-wan-site: True/False";
    }
    leaf-list single-cpe-dual-wan-sites {
      type leafref {
        path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
        require-instance false;
      }
      description
        "single-sites";
      when " ../single-cpe-dual-wan-site = 'true' ";
    }
    leaf dual-cpe-dual-wan-site {
      type boolean;
      description
        "dual-cpe-dual-wan-site: True/False";
    }
    leaf-list dual-cpe-dual-wan-sites {
      type leafref {
        path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
        require-instance false;
      }
      description
        "dual-sites";
      when " ../dual-cpe-dual-wan-site = 'true' ";
    }
    leaf triple-cpe-site {
      type boolean;
      description
        "triple-cpe-site: True/False";
    }
    leaf-list triple-cpe-sites {
      type leafref {
        path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
        require-instance false;
      }
      description
        "single-sites";
      when " ../triple-cpe-site = 'true' ";
    }
  }

  grouping feature-acl-def {
    leaf name {
      type string;
      description
        "string";
    }
    leaf access-list-entry {
      type access-list-entry-type;
      description
        "standard
         extended
        ";
      default "extended";
    }
    leaf sequence-number {
      type string;
      default "22";
      description
        "sequence-number";
      config false;
    }
    list access-list-rules {
      key "name action protocol";
      leaf sequence-number {
        type string;
        default "23";
        description
          "sequence-number";
        config false;
      }
      leaf name {
        type string;
        description
          "string";
      }
      leaf action {
        type enumeration {
          enum "permit";
          enum "deny";
        }
        description
          "permit
           deny
          ";
      }
      leaf protocol {
        type enumeration {
          enum "ahp";
          enum "eigrp";
          enum "esp";
          enum "gre";
          enum "icmp";
          enum "igmp";
          enum "ip";
          enum "ipinip";
          enum "object-group";
          enum "ospf";
          enum "pcp";
          enum "pim";
          enum "tcp";
          enum "udp";
        }
        description
          "ahp
           eigrp
           esp
           gre
           icmp
           igmp
           ip
           ipinip
           object-group
           ospf
           pcp
           pim
           tcp
           udp
          ";
      }
      leaf service-obj-name {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../../name]/object-groups/object-group/name";
        }
        description
          "string";
        when "../protocol =  'object-group'";
      }
      leaf source-condition {
        type enumeration {
          enum "cidr";
          enum "host";
          enum "any";
          enum "objectgroup";
        }
        description
          "cidr
           host
           any
           objectgroup
          ";
      }
      leaf source-object {
        type string;
        description
          "string";
        when "../source-condition =  'cidr' or ../source-condition =  'host'";
      }
      leaf source-object-group {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../../name]/object-groups/object-group/name";
        }
        description
          "source-object-group";
        when "../source-condition =  'objectgroup'";
      }
      leaf source-port {
        type uint16;
        description
          "0..65535";
        when "../protocol =  'tcp' or ../protocol =  'udp'";
      }
      leaf destination-condition {
        type enumeration {
          enum "cidr";
          enum "host";
          enum "any";
          enum "objectgroup";
        }
        description
          "cidr
           host
           any
           objectgroup
          ";
      }
      leaf destination-object {
        type string;
        description
          "string";
        when "../destination-condition =  'cidr' or ../destination-condition =  'host'";
      }
      leaf destination-object-group {
        type leafref {
          path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../../../../name]/object-groups/object-group/name";
        }
        description
          "destination-object-group";
        when "../destination-condition =  'objectgroup'";
      }
      leaf port-number {
        type uint16;
        description
          "0..65535";
        when "../protocol =  'tcp' or ../protocol =  'udp'";
      }
      leaf match-packets {
        type match-packets-type;
        description
          "precedence\n";
      }
      leaf precedence {
        type precedence-type;
        description
          "routine
           priority
           immediate
           flash
           flash-override
           critical
           internet
           network
          ";
        when " ../match-packets = 'precedence' ";
      }
      leaf dscp {
        type dscp-values-type;
        description
          "Union Input types:
           enumeration
          ";
        when " ../match-packets = 'dscp' ";
      }
    }
  }

  grouping dps-def {
    container dps {
      list dps-services {
        key "name";
        leaf name {
          type string;
          description
            "string";
        }
        leaf single-cpe-site {
          type boolean;
          description
            "single-cpe-site: True/False";
          when " ../dual-cpe-site = 'false' and  ../single-cpe-dual-wan-site = 'false' and ../dual-cpe-dual-wan-site = 'false' and ../triple-cpe-site = 'false' ";
        }
        leaf single-cpe-sites {
          type leafref {
            path "../../../single-cpe-site/single-cpe-site-services/site-name";
          }
          description
            "single-sites";
          when " ../single-cpe-site = 'true' ";
        }
        leaf dual-cpe-site {
          type boolean;
          description
            "dual-cpe-site: True/False";
          when " ../single-cpe-site = 'false' and  ../single-cpe-dual-wan-site = 'false' and ../dual-cpe-dual-wan-site = 'false' and ../triple-cpe-site = 'false' ";
        }
        leaf dual-cpe-sites {
          type leafref {
            path "../../../dual-cpe-site/dual-cpe-site-services/site-name";
          }
          description
            "dual-sites";
          when " ../dual-cpe-site = 'true' ";
        }
        leaf single-cpe-dual-wan-site {
          type boolean;
          description
            "single-cpe-dual-wan-site: True/False";
          when " ../single-cpe-site = 'false' and  ../dual-cpe-site = 'false' and ../dual-cpe-dual-wan-site = 'false' and ../triple-cpe-site = 'false' ";
        }
        leaf single-cpe-dual-wan-sites {
          type leafref {
            path "../../../single-cpe-dual-wan-site/single-cpe-dual-wan-site-services/site-name";
          }
          description
            "single-sites";
          when " ../single-cpe-dual-wan-site = 'true' ";
        }
        leaf dual-cpe-dual-wan-site {
          type boolean;
          description
            "dual-cpe-dual-wan-site: True/False";
          when " ../single-cpe-site = 'false' and  ../dual-cpe-site = 'false' and  ../single-cpe-dual-wan-site = 'false' and ../triple-cpe-site = 'false' ";
        }
        leaf dual-cpe-dual-wan-sites {
          type leafref {
            path "../../../dual-cpe-dual-wan-site/dual-cpe-dual-wan-site-services/site-name";
          }
          description
            "dual-dual-wan-sites";
          when " ../dual-cpe-dual-wan-site = 'true' ";
        }
        leaf triple-cpe-site {
          type boolean;
          description
            "triple-cpe-site: True/False";
          when " ../single-cpe-site = 'false' and  ../dual-cpe-site = 'false' and  ../single-cpe-dual-wan-site = 'false' and ../dual-cpe-dual-wan-site = 'false' ";
        }
        leaf triple-cpe-sites {
          type leafref {
            path "../../../triple-cpe-site/triple-cpe-site-services/site-name";
          }
          description
            "dual-dual-wan-sites";
          when " ../triple-cpe-site = 'true' ";
        }
        uses dps-domain-def;
      }
    }
  }

  grouping dps-domain-def {
    list cpe-name {
      key "cpe";
      leaf cpe {
        type enumeration {
          enum "cpe";
          enum "cpe-primary";
          enum "cpe-secondary";
          enum "cpe-secondary-only";
          enum "cpe-primary-only";
          enum "cpe-primary-dual";
          enum "cpe-secondary-dual";
          enum "cpe-primary-triple";
          enum "cpe-secondary-only-dual";
        }
        description
          "cpe
           cpe-primary
           cpe-secondary
           cpe-secondary-only
           cpe-primary-only
          ";
      }
      leaf vrf {
        type leafref {
          path "../../../../vrfs/vrf/vrf-name";
        }
        description
          "string";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only' or ../cpe = 'cpe-secondary-only-dual' or ../cpe = 'cpe-primary-triple'";
      }
      leaf rd {
        type string;
        description
          "string";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only' or ../cpe = 'cpe-secondary-only-dual' or ../cpe = 'cpe-primary-triple'";
        config false;
      }
      leaf rt-import {
        type string;
        description
          "string";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only' or ../cpe = 'cpe-secondary-only-dual' or ../cpe = 'cpe-primary-triple'";
        config false;
      }
      leaf rt-export {
        type string;
        description
          "string";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only' or ../cpe = 'cpe-secondary-only-dual' or ../cpe = 'cpe-primary-triple'";
        config false;
      }
      leaf lan-interface {
        type boolean;
        description
          "lan-interface: True/False";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-primary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only' or ../cpe = 'cpe-secondary-only-dual' or ../cpe = 'cpe-primary-triple'";
      }
      leaf hierarchical-inbound-policy {
        type boolean;
        description
          "hierarchical-inbound-policy: True/False";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf hierarchical-policy {
        type leafref {
          path "../../../../qos-service/hierarchical-policy/policy/name";
        }
        description
          "hierarchical-policy";
        when "../hierarchical-inbound-policy = 'true'";
      }
      leaf inbound-policy {
        type leafref {
          path "../../../../qos-service/policies/policy/name";
        }
        description
          "inbound-policy";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary' and ../hierarchical-inbound-policy = 'false'";
      }
      leaf pbr-policy {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "pbr-policy";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary' ";
      }
      leaf next-hop-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        when " ../lan-interface = 'true' and ../cpe = 'cpe-primary'";
      }
      leaf vrf-receive {
        type boolean;
        description
          "vrf-receive: True/False";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary' and ../cpe != 'cpe-primary'";
      }
      leaf bgp-policy {
        type boolean;
        description
          "bgp-policy: True/False";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf bgp-policy-qos {
        type boolean;
        description
          "bgp-policy-qos: True/False";
        when " ../lan-interface = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf b2b-interface {
        type boolean;
        description
          "b2b-interface: True/False";
        when " ../cpe = 'cpe-secondary' or ../cpe = 'cpe-primary' ";
      }
      leaf vlan-id {
        type uint32 {
          range "1..4096";
        }
        description
          "1..4096";
        when " ../b2b-interface = 'true' and ../cpe != 'cpe'";
      }
      leaf cidr {
        type leafref {
          path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
        }
        description
          "cidr";
        when " ../b2b-interface = 'true' and ../cpe != 'cpe'";
      }
      leaf interface-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        when " ../b2b-interface = 'true' and ../cpe != 'cpe'";
      }
      leaf b2b-description {
        type string;
        description
          "string";
        when " ../b2b-interface = 'true' and ../cpe != 'cpe'";
      }
      leaf loopback {
        type boolean;
        description
          "loopback: True/False";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only'";
      }
      leaf loopback-interface-id {
        type uint8;
        description
          "0..255";
        when " ../loopback = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf description {
        type string;
        description
          "string";
        when " ../loopback = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf cidr-loopback {
        type leafref {
          path "/ip:ipaddress-pools/ip:ipaddress-pool/ip:name";
        }
        description
          "cidr-loopback";
        when " ../loopback = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf loopback-ip {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        when " ../loopback = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf ospf {
        type boolean;
        description
          "ospf: True/False";
      }
      leaf ospf-id {
        type uint16;
        description
          "0..65535";
        when " ../ospf = 'true' ";
      }
      leaf router-id {
        type string;
        description
          "string";
        when " ../ospf = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf static-route-map {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "static-route-map";
        when " ../ospf = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf connected-route-map {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "connected-route-map";
        when " ../ospf = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf lan-ospf-redistribution {
        type boolean;
        description
          "lan-ospf-redistribution: True/False";
        when " ../ospf = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf ospf-route-map {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "ospf-route-map";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf ospf-key1 {
        type key;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
        config false;
      }
      leaf ospf-key2 {
        type key;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
        config false;
      }
      leaf ospf-metric {
        type uint32 {
          range "0..16777214";
        }
        description
          "0..16777214";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf ospf-metric-type {
        type string;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf ospf-tag {
        type uint32 {
          range "0..4294967295";
        }
        description
          "0..4294967295";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf ospf-redistribution-id {
        type uint16;
        description
          "0..65535";
        when " ../ospf = 'true' and ../lan-ospf-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf lan-ebgp-redistribution {
        type boolean;
        description
          "lan-ebgp-redistribution: True/False";
        when " ../ospf = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf bgp-route-map {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "bgp-route-map";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf bgp-key1 {
        type key;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
        config false;
      }
      leaf bgp-key2 {
        type key;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
        config false;
      }
      leaf bgp-metric {
        type uint32 {
          range "0..16777214";
        }
        description
          "0..16777214";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf bgp-metric-type {
        type string;
        description
          "string";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf bgp-tag {
        type uint32 {
          range "0..4294967295";
        }
        description
          "0..4294967295";
        when " ../ospf = 'true' and ../lan-ebgp-redistribution = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf vrf-lite {
        type boolean;
        description
          "vrf-lite: True/False";
        when " ../ospf = 'true' and ../cpe = 'cpe'";
      }
      container ospf-networks {
        list ospf-network {
          key "name";
          uses ospf-network-def;
        }
      }
      leaf bgp {
        type boolean;
        description
          "bgp: True/False";
      }
      leaf bgp-vrf {
        type leafref {
          path "../../../../vrfs/vrf/vrf-name";
        }
        description
          "bgp_vrf";
        when " ../bgp = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf qppb-policy {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "qppb-policy";
        when " ../bgp = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf redistribute-connected {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "redistribute-connected";
        when " ../bgp = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf redistribute-static {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "redistribute-static";
        when " ../bgp = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf import-route-map {
        type leafref {
          path "../../../../route-maps/route-map/route-map-name";
        }
        description
          "import-route-map";
        when " ../bgp = 'true' and ../cpe != 'cpe-secondary'";
      }
      leaf tunnel {
        type boolean;
        description
          "tunnel: True/False";
        when " ../cpe = 'cpe' or ../cpe = 'cpe-secondary' or ../cpe = 'cpe-secondary-only' or ../cpe = 'cpe-primary-only'";
      }
      leaf hub {
        type boolean;
        description
          "hub: True/False";
        when " ../tunnel = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf dmvpn-profile {
        type leafref {
          path "../../../../dmvpn-tunnel-profiles/dmvpn-tunnel-profile/name";
        }
        description
          "dmvpn-profile";
        when " ../tunnel = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf tunnel-interface-ip-address {
        type inet:ipv4-address;
        description
          "Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)";
        when " ../tunnel = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf tunnel-bandwidth {
        type uint16;
        description
          "0..65535";
        when " ../tunnel = 'true' and ../cpe != 'cpe-primary'";
      }
      leaf tunnel-interface-description {
        type string;
        description
          "string";
        when " ../tunnel = 'true' and ../cpe != 'cpe-primary'";
      }
      container advertise-networks {
        list advertise-network {
          key "name";
          uses advertise-network-dps;
        }
      }
      container static-routes {
        list static-route {
          key "dest-ip-address dest-mask";
          uses static-route;
        }
      }
      container route-maps {
        uses route-maps-def-list;
      }
      container community-lists {
        uses community-lists-ref-def;
      }
      //container extcommunity-lists {
      //  uses extcommunity-lists-ref-def;
      //}
      container prefix-lists {
        uses prefix-lists-def-list;
      }
    }
  }

  grouping static-route {
    leaf dest-ip-address {
      type inet:ipv4-address;
      description
        "string";
      mandatory true;
    }
    leaf dest-mask {
      type inet:ipv4-address;
      description
        "string";
      mandatory true;
    }
    leaf next-hop-ip {
      type inet:ipv4-address;
      description
        "string";
      config false;
    }
    leaf description {
      type string;
      description
        "string";
      config false;
    }
    leaf metric {
      type uint32;
      description
        "0..4294967295";
      config false;
    }
    leaf interface-name {
      type string;
      description
        "interface-name";
      config false;
    }
    leaf seq-num {
      type uint32;
      description
        "0..4294967295";
      config false;
    }
    leaf name {
      type string;
      description
        "string";
      config false;
    }
    leaf vrf {
      description
        "name";
      type string;
      config false;
    }
    leaf tag {
      type uint32;
      description
        "0..4294967295";
      config false;
    }
    list options {
      key "id";
      leaf id {
        type string;
        description
          "string";
      }
      leaf next-hop-ip {
        type inet:ipv4-address;
        description
          "string";
      }
      leaf global-address {
        type boolean;
        description
          "global-address: True/False";
      }
      leaf metric {
        type uint32;
        description
          "0..4294967295";
      }
      leaf interface-name {
        type string;
        description
          "interface-name";
      }
      leaf name {
        type string;
        description
          "string";
      }
      leaf vrf {
        description
          "name";
        type leafref {
          path "../../../../../../../vrfs/vrf/vrf-name";
        }
      }
      leaf tag {
        type uint32;
        description
          "0..4294967295";
      }
      leaf track {
        type uint16;
        description
          "0..65535";
      }
    }
  }

  grouping advertise-network-dps {
    leaf name {
      type string;
      description
        "string";
    }
    leaf prefix {
      type inet:ipv4-prefix;
      description
        "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
      mandatory true;
    }
    leaf route-map {
      type leafref {
        path "../../../../../../route-maps/route-map/route-map-name";
      }
      description
        "route-map";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
  }

  grouping ospf-network-def {
    leaf name {
      type string;
      description
        "string";
    }
    leaf ospf-id {
      type uint16;
      description
        "0..65535";
    }
    leaf prefix {
      type inet:ipv4-prefix;
      description
        "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
      mandatory true;
    }
    leaf area {
      type uint8;
      description
        "0..255";
    }
    leaf nssa {
      type boolean;
      description
        "nssa: True/False";
    }
    leaf vrf-name {
      description
        "name";
      type leafref {
        path "../../../../../../vrfs/vrf/vrf-name";
      }
    }
  }

  grouping object-group-def {
    leaf type {
      type enumeration {
        enum "network";
        enum "service";
      }
      description
        "network
         service";
      mandatory true;
    }
    leaf name {
      type string;
      description
        "string";
    }
    leaf description {
      type string;
      description
        "string";
    }
    container networks {
      list network {
        key "name";
        uses network-group;
      }
    }
  }

  grouping network-group {
    leaf name {
      type string;
      description
        "string";
    }
    leaf description {
      type string;
      description
        "string";
      config false;
    }
    leaf group-object {
      type string;
      description
        "string";
    }
    leaf host {
      type string;
      description
        "string";
    }
    leaf prefix {
      type inet:ipv4-prefix;
      description
        "Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)";
    }
  }

  grouping as-path-acl {
    leaf number {
      type uint16 {
        range "1..500";
      }
      description
        "1..500";
    }
    leaf condition {
      type enumeration {
        enum "permit";
        enum "deny";
      }
      description
        "permit
         deny
        ";
    }
    leaf expression {
      type string;
      description
        "string";
    }
  }

  grouping vrf-def {
    container vrfs {
      list vrf {
        key "vrf-name";
        leaf vrf-name {
          type string;
          description
            "string";
        }
        leaf description {
          type string;
          description
            "string";
        }
        leaf rd {
          type string;
          description
            "string";
        }
        leaf vrf-definition-mode {
          type boolean;
          description
            "vrf-definition-mode: True/False";
          default "false";
        }
        list rt-import {
          key "rt-import";
          leaf rt-import {
            type string;
            description
              "string";
          }
        }
        list rt-export {
          key "rt-export";
          leaf rt-export {
            type string;
            description
              "string";
          }
        }
        list import-map {
          key "import-map";
          leaf import-map {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/route-maps/route-map/route-map-name";
              require-instance false;
            }
            description
              "string";
          }
          leaf ipv4 {
            type boolean;
            description
              "ipv4: True/False";
          }
          leaf traffic {
            type table-def;
            description
              "multicast
               unicast
              ";
            when " ../ipv4 = 'true' ";
          }
          leaf upper-limit {
            type uint32 {
              range "1..2147483647";
            }
            description
              "1..2147483647";
            when " ../ipv4 = 'true' ";
          }
        }
        list export-map {
          key "export-map";
          leaf export-map {
            type leafref {
              path "/ac:services/cpedeployment:managed-cpe-services/customer[name=current()/../../../../name]/route-maps/route-map/route-map-name";
              require-instance false;
            }
            description
              "string";
          }
          leaf ipv4 {
            type boolean;
            description
              "ipv4: True/False";
          }
          leaf traffic {
            type table-def;
            description
              "multicast
               unicast
              ";
            when " ../ipv4 = 'true' ";
          }
          leaf upper-limit {
            type uint32 {
              range "1..2147483647";
            }
            description
              "1..2147483647";
            when " ../ipv4 = 'true' ";
          }
        }
      }
    }
  }

  augment "/ac:services" {
    container managed-cpe-services {
      list customer {
        key "name";
        uses dmvpn-tunnel-profile-def;
        uses domain-def;
        uses ipsec-def;
        uses qos-def;
        uses route-maps-def;
        uses prefix-lists-def;
        uses community-lists-def;
        //uses extcommunity-lists-def;
        uses dc-def;
        uses cpe-deployment-def;
        uses cpe-deployment-def-dual;
        uses dc-def-dual;
        uses vrf-def;
        uses cpe-tertiary-def;
        container access-lists {
          list access-list {
            key "name";
            uses acl-def;
          }
          list update-access-list {
            key "id";
            uses update-acl-def;
          }
        }
        uses dps-def;
        container object-groups {
          list object-group {
            key "name";
            uses object-group-def;
          }
        }
        container as-path-acls {
          list as-path-acl {
            key "number condition expression";
            uses as-path-acl;
          }
        }
        container bgp-peer-groups {
          list bgp-peer-group {
            key "peer-group";
            uses bgp-peer-props1;
          }
        }
      }
    }
  }
  rpc cpedeployment-ipsla-threshold-violation-event-handler {
    description
      "ipsla threshold violation event handler";
    input {
      anyxml payload;
    }
    output {
      anyxml payload;
    }
  }
}
