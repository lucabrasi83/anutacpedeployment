
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ipv4addr(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module infoblox - based on the path /infoblox_rpc/get-all-hosts/output/hosts/host/ipv4addrs/ipv4addr. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__container_id','__configure_for_dhcp','__host','__address',)

  _yang_name = 'ipv4addr'
  _module_name = 'infoblox'
  _namespace = 'http://anutanetworks.com/infoblox'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__configure_for_dhcp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-for-dhcp", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='boolean', is_config=True)
    self.__host = YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    self.__container_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    self.__address = YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'infoblox_rpc', u'get-all-hosts', u'output', u'hosts', u'host', u'ipv4addrs', u'ipv4addr']

  def _get_container_id(self):
    """
    Getter method for container_id, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/container_id (string)

    YANG Description: string
    """
    return self.__container_id
      
  def _set_container_id(self, v, load=False):
    """
    Setter method for container_id, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/container_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_container_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_container_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """container_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__container_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_container_id(self):
    self.__container_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)


  def _get_configure_for_dhcp(self):
    """
    Getter method for configure_for_dhcp, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/configure_for_dhcp (boolean)

    YANG Description: configure-for-dhcp: True/False
    """
    return self.__configure_for_dhcp
      
  def _set_configure_for_dhcp(self, v, load=False):
    """
    Setter method for configure_for_dhcp, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/configure_for_dhcp (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configure_for_dhcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configure_for_dhcp() directly.

    YANG Description: configure-for-dhcp: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="configure-for-dhcp", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configure_for_dhcp must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-for-dhcp", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='boolean', is_config=True)""",
        })

    self.__configure_for_dhcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configure_for_dhcp(self):
    self.__configure_for_dhcp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-for-dhcp", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='boolean', is_config=True)


  def _get_host(self):
    """
    Getter method for host, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/host (string)

    YANG Description: string
    """
    return self.__host
      
  def _set_host(self, v, load=False):
    """
    Setter method for host, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/host (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="host", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host(self):
    self.__host = YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)


  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/address (string)

    YANG Description: string
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs/ipv4addr/address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="address", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)

  container_id = __builtin__.property(_get_container_id, _set_container_id)
  configure_for_dhcp = __builtin__.property(_get_configure_for_dhcp, _set_configure_for_dhcp)
  host = __builtin__.property(_get_host, _set_host)
  address = __builtin__.property(_get_address, _set_address)


  _pyangbind_elements = collections.OrderedDict([('container_id', container_id), ('configure_for_dhcp', configure_for_dhcp), ('host', host), ('address', address), ])


