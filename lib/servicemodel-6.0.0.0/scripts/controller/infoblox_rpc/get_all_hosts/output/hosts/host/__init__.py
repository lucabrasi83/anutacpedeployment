
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import extra_attributes
import ipv4addrs
class host(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module infoblox - based on the path /infoblox_rpc/get-all-hosts/output/hosts/host. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__container_id','__name','__view','__extra_attributes','__ipv4addrs',)

  _yang_name = 'host'
  _module_name = 'infoblox'
  _namespace = 'http://anutanetworks.com/infoblox'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__extra_attributes = YANGDynClass(base=extra_attributes.extra_attributes, is_container='container', yang_name="extra-attributes", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='container', is_config=True)
    self.__container_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    self.__ipv4addrs = YANGDynClass(base=YANGListType(False,ipv4addrs.ipv4addrs, yang_name="ipv4addrs", module_name="infoblox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False'), is_container='list', yang_name="ipv4addrs", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='list', is_config=True)
    self.__view = YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'infoblox_rpc', u'get-all-hosts', u'output', u'hosts', u'host']

  def _get_container_id(self):
    """
    Getter method for container_id, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/container_id (string)

    YANG Description: string
    """
    return self.__container_id
      
  def _set_container_id(self, v, load=False):
    """
    Setter method for container_id, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/container_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_container_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_container_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """container_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__container_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_container_id(self):
    self.__container_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="container-id", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)


  def _get_view(self):
    """
    Getter method for view, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/view (string)

    YANG Description: string
    """
    return self.__view
      
  def _set_view(self, v, load=False):
    """
    Setter method for view, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/view (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_view is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_view() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="view", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """view must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)""",
        })

    self.__view = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_view(self):
    self.__view = YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='string', is_config=True)


  def _get_extra_attributes(self):
    """
    Getter method for extra_attributes, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/extra_attributes (container)
    """
    return self.__extra_attributes
      
  def _set_extra_attributes(self, v, load=False):
    """
    Setter method for extra_attributes, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/extra_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_extra_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_extra_attributes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=extra_attributes.extra_attributes, is_container='container', yang_name="extra-attributes", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """extra_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=extra_attributes.extra_attributes, is_container='container', yang_name="extra-attributes", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='container', is_config=True)""",
        })

    self.__extra_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_extra_attributes(self):
    self.__extra_attributes = YANGDynClass(base=extra_attributes.extra_attributes, is_container='container', yang_name="extra-attributes", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='container', is_config=True)


  def _get_ipv4addrs(self):
    """
    Getter method for ipv4addrs, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs (list)
    """
    return self.__ipv4addrs
      
  def _set_ipv4addrs(self, v, load=False):
    """
    Setter method for ipv4addrs, mapped from YANG variable /infoblox_rpc/get_all_hosts/output/hosts/host/ipv4addrs (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4addrs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4addrs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType(False,ipv4addrs.ipv4addrs, yang_name="ipv4addrs", module_name="infoblox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False'), is_container='list', yang_name="ipv4addrs", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4addrs must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,ipv4addrs.ipv4addrs, yang_name="ipv4addrs", module_name="infoblox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False'), is_container='list', yang_name="ipv4addrs", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='list', is_config=True)""",
        })

    self.__ipv4addrs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4addrs(self):
    self.__ipv4addrs = YANGDynClass(base=YANGListType(False,ipv4addrs.ipv4addrs, yang_name="ipv4addrs", module_name="infoblox", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False'), is_container='list', yang_name="ipv4addrs", module_name="infoblox", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/infoblox', defining_module='infoblox', yang_type='list', is_config=True)

  container_id = __builtin__.property(_get_container_id, _set_container_id)
  name = __builtin__.property(_get_name, _set_name)
  view = __builtin__.property(_get_view, _set_view)
  extra_attributes = __builtin__.property(_get_extra_attributes, _set_extra_attributes)
  ipv4addrs = __builtin__.property(_get_ipv4addrs, _set_ipv4addrs)


  _pyangbind_elements = collections.OrderedDict([('container_id', container_id), ('name', name), ('view', view), ('extra_attributes', extra_attributes), ('ipv4addrs', ipv4addrs), ])


