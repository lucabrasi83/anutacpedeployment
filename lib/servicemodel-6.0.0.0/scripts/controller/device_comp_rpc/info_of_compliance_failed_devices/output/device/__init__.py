
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class device(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module device-comp - based on the path /device_comp_rpc/info-of-compliance-failed-devices/output/device. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__seq','__rcpath','__device_type','__job','__task_id','__template_id','__failed_rule','__time',)

  _yang_name = 'device'
  _module_name = 'device-comp'
  _namespace = 'http://anutanetworks.com/device-comp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__failed_rule = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="failed-rule", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)
    self.__seq = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='uint32', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__job = YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__device_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__time = YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__template_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="template-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)
    self.__rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'device_comp_rpc', u'info-of-compliance-failed-devices', u'output', u'device']

  def _get_seq(self):
    """
    Getter method for seq, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/seq (uint32)

    YANG Description: 0..4294967295
    """
    return self.__seq
      
  def _set_seq(self, v, load=False):
    """
    Setter method for seq, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/seq (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='uint32', is_config=True)""",
        })

    self.__seq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq(self):
    self.__seq = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='uint32', is_config=True)


  def _get_rcpath(self):
    """
    Getter method for rcpath, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/rcpath (ndt:cdata)

    YANG Description: string
    """
    return self.__rcpath
      
  def _set_rcpath(self, v, load=False):
    """
    Setter method for rcpath, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/rcpath (ndt:cdata)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rcpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rcpath() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rcpath must be of a type compatible with ndt:cdata""",
          'defined-type': "ndt:cdata",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)""",
        })

    self.__rcpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rcpath(self):
    self.__rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)


  def _get_device_type(self):
    """
    Getter method for device_type, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/device_type (string)

    YANG Description: string
    """
    return self.__device_type
      
  def _set_device_type(self, v, load=False):
    """
    Setter method for device_type, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/device_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-type", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__device_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_type(self):
    self.__device_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_job(self):
    """
    Getter method for job, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/job (string)

    YANG Description: The name of the job that invoked the compliance run
    """
    return self.__job
      
  def _set_job(self, v, load=False):
    """
    Setter method for job, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/job (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job() directly.

    YANG Description: The name of the job that invoked the compliance run
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__job = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job(self):
    self.__job = YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_template_id(self):
    """
    Getter method for template_id, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/template_id (ndt:cdata)

    YANG Description: The template whose rules are in violation
    """
    return self.__template_id
      
  def _set_template_id(self, v, load=False):
    """
    Setter method for template_id, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/template_id (ndt:cdata)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_template_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_template_id() directly.

    YANG Description: The template whose rules are in violation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="template-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """template_id must be of a type compatible with ndt:cdata""",
          'defined-type': "ndt:cdata",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="template-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)""",
        })

    self.__template_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_template_id(self):
    self.__template_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="template-id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)


  def _get_failed_rule(self):
    """
    Getter method for failed_rule, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/failed_rule (ndt:cdata)

    YANG Description: string
    """
    return self.__failed_rule
      
  def _set_failed_rule(self, v, load=False):
    """
    Setter method for failed_rule, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/failed_rule (ndt:cdata)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_failed_rule is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_failed_rule() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="failed-rule", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """failed_rule must be of a type compatible with ndt:cdata""",
          'defined-type': "ndt:cdata",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="failed-rule", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)""",
        })

    self.__failed_rule = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_failed_rule(self):
    self.__failed_rule = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="failed-rule", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='ndt:cdata', is_config=True)


  def _get_time(self):
    """
    Getter method for time, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/time (string)

    YANG Description: string
    """
    return self.__time
      
  def _set_time(self, v, load=False):
    """
    Setter method for time, mapped from YANG variable /device_comp_rpc/info_of_compliance_failed_devices/output/device/time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time(self):
    self.__time = YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)

  seq = __builtin__.property(_get_seq, _set_seq)
  rcpath = __builtin__.property(_get_rcpath, _set_rcpath)
  device_type = __builtin__.property(_get_device_type, _set_device_type)
  job = __builtin__.property(_get_job, _set_job)
  task_id = __builtin__.property(_get_task_id, _set_task_id)
  template_id = __builtin__.property(_get_template_id, _set_template_id)
  failed_rule = __builtin__.property(_get_failed_rule, _set_failed_rule)
  time = __builtin__.property(_get_time, _set_time)


  _pyangbind_elements = collections.OrderedDict([('seq', seq), ('rcpath', rcpath), ('device_type', device_type), ('job', job), ('task_id', task_id), ('template_id', template_id), ('failed_rule', failed_rule), ('time', time), ])


