
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import association
class map_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /modelmaps/map. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__id','__yangEntity','__entity','__mapper','__entityType','__parent','__enabled','__deltaEnabled','__association',)

  _yang_name = 'map'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mapper = YANGDynClass(base=unicode, is_leaf=True, yang_name="mapper", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__parent = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__entityType = YANGDynClass(base=unicode, is_leaf=True, yang_name="entityType", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__deltaEnabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deltaEnabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__entity = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__yangEntity = YANGDynClass(base=unicode, is_leaf=True, yang_name="yangEntity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__association = YANGDynClass(base=association.association, is_container='container', yang_name="association", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'modelmaps', u'map']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /modelmaps/map/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /modelmaps/map/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_yangEntity(self):
    """
    Getter method for yangEntity, mapped from YANG variable /modelmaps/map/yangEntity (string)

    YANG Description: string
    """
    return self.__yangEntity
      
  def _set_yangEntity(self, v, load=False):
    """
    Setter method for yangEntity, mapped from YANG variable /modelmaps/map/yangEntity (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_yangEntity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_yangEntity() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="yangEntity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """yangEntity must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="yangEntity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__yangEntity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_yangEntity(self):
    self.__yangEntity = YANGDynClass(base=unicode, is_leaf=True, yang_name="yangEntity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_entity(self):
    """
    Getter method for entity, mapped from YANG variable /modelmaps/map/entity (string)

    YANG Description: string
    """
    return self.__entity
      
  def _set_entity(self, v, load=False):
    """
    Setter method for entity, mapped from YANG variable /modelmaps/map/entity (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entity() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entity must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__entity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entity(self):
    self.__entity = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_mapper(self):
    """
    Getter method for mapper, mapped from YANG variable /modelmaps/map/mapper (string)

    YANG Description: string
    """
    return self.__mapper
      
  def _set_mapper(self, v, load=False):
    """
    Setter method for mapper, mapped from YANG variable /modelmaps/map/mapper (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapper() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mapper", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapper must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mapper", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mapper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapper(self):
    self.__mapper = YANGDynClass(base=unicode, is_leaf=True, yang_name="mapper", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_entityType(self):
    """
    Getter method for entityType, mapped from YANG variable /modelmaps/map/entityType (string)

    YANG Description: string
    """
    return self.__entityType
      
  def _set_entityType(self, v, load=False):
    """
    Setter method for entityType, mapped from YANG variable /modelmaps/map/entityType (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entityType is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entityType() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entityType", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entityType must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entityType", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__entityType = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entityType(self):
    self.__entityType = YANGDynClass(base=unicode, is_leaf=True, yang_name="entityType", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_parent(self):
    """
    Getter method for parent, mapped from YANG variable /modelmaps/map/parent (string)

    YANG Description: string
    """
    return self.__parent
      
  def _set_parent(self, v, load=False):
    """
    Setter method for parent, mapped from YANG variable /modelmaps/map/parent (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="parent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="parent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__parent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent(self):
    self.__parent = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /modelmaps/map/enabled (boolean)

    YANG Description: enabled: True/False
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /modelmaps/map/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: enabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_deltaEnabled(self):
    """
    Getter method for deltaEnabled, mapped from YANG variable /modelmaps/map/deltaEnabled (boolean)

    YANG Description: This property controls whether automatic population of "yang only properties" into concrete DTO objects.
    """
    return self.__deltaEnabled
      
  def _set_deltaEnabled(self, v, load=False):
    """
    Setter method for deltaEnabled, mapped from YANG variable /modelmaps/map/deltaEnabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deltaEnabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deltaEnabled() directly.

    YANG Description: This property controls whether automatic population of "yang only properties" into concrete DTO objects.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="deltaEnabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deltaEnabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deltaEnabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__deltaEnabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deltaEnabled(self):
    self.__deltaEnabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deltaEnabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_association(self):
    """
    Getter method for association, mapped from YANG variable /modelmaps/map/association (container)
    """
    return self.__association
      
  def _set_association(self, v, load=False):
    """
    Setter method for association, mapped from YANG variable /modelmaps/map/association (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_association is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_association() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=association.association, is_container='container', yang_name="association", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """association must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=association.association, is_container='container', yang_name="association", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__association = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_association(self):
    self.__association = YANGDynClass(base=association.association, is_container='container', yang_name="association", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  yangEntity = __builtin__.property(_get_yangEntity, _set_yangEntity)
  entity = __builtin__.property(_get_entity, _set_entity)
  mapper = __builtin__.property(_get_mapper, _set_mapper)
  entityType = __builtin__.property(_get_entityType, _set_entityType)
  parent = __builtin__.property(_get_parent, _set_parent)
  enabled = __builtin__.property(_get_enabled, _set_enabled)
  deltaEnabled = __builtin__.property(_get_deltaEnabled, _set_deltaEnabled)
  association = __builtin__.property(_get_association, _set_association)


  _pyangbind_elements = collections.OrderedDict([('id', id), ('yangEntity', yangEntity), ('entity', entity), ('mapper', mapper), ('entityType', entityType), ('parent', parent), ('enabled', enabled), ('deltaEnabled', deltaEnabled), ('association', association), ])


