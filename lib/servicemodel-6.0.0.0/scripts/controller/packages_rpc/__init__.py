
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import activate_package
import deactivate_package
import upload_package
import download_package
import delete_package
import list_versions_of_package
import list_active_packages
class packages(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module packages - based on the path /packages_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__activate_package','__deactivate_package','__upload_package','__download_package','__delete_package','__list_versions_of_package','__list_active_packages',)

  _yang_name = 'packages'
  _module_name = 'packages'
  _namespace = 'http://anutanetworks.com/packages'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__delete_package = YANGDynClass(base=delete_package.delete_package, is_leaf=True, yang_name="delete-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__activate_package = YANGDynClass(base=activate_package.activate_package, is_leaf=True, yang_name="activate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__download_package = YANGDynClass(base=download_package.download_package, is_leaf=True, yang_name="download-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__deactivate_package = YANGDynClass(base=deactivate_package.deactivate_package, is_leaf=True, yang_name="deactivate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__list_versions_of_package = YANGDynClass(base=list_versions_of_package.list_versions_of_package, is_leaf=True, yang_name="list-versions-of-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__list_active_packages = YANGDynClass(base=list_active_packages.list_active_packages, is_leaf=True, yang_name="list-active-packages", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    self.__upload_package = YANGDynClass(base=upload_package.upload_package, is_leaf=True, yang_name="upload-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'packages_rpc']

  def _get_activate_package(self):
    """
    Getter method for activate_package, mapped from YANG variable /packages_rpc/activate_package (rpc)

    YANG Description: Activates the specified (preveously uploaded) package. If a version of the package is already Active, it will be de-activated and the specified package will be Activated.
    """
    return self.__activate_package
      
  def _set_activate_package(self, v, load=False):
    """
    Setter method for activate_package, mapped from YANG variable /packages_rpc/activate_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_activate_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_activate_package() directly.

    YANG Description: Activates the specified (preveously uploaded) package. If a version of the package is already Active, it will be de-activated and the specified package will be Activated.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=activate_package.activate_package, is_leaf=True, yang_name="activate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """activate_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=activate_package.activate_package, is_leaf=True, yang_name="activate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__activate_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_activate_package(self):
    self.__activate_package = YANGDynClass(base=activate_package.activate_package, is_leaf=True, yang_name="activate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_deactivate_package(self):
    """
    Getter method for deactivate_package, mapped from YANG variable /packages_rpc/deactivate_package (rpc)

    YANG Description: de-activates the specified package.
    """
    return self.__deactivate_package
      
  def _set_deactivate_package(self, v, load=False):
    """
    Setter method for deactivate_package, mapped from YANG variable /packages_rpc/deactivate_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deactivate_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deactivate_package() directly.

    YANG Description: de-activates the specified package.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=deactivate_package.deactivate_package, is_leaf=True, yang_name="deactivate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deactivate_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=deactivate_package.deactivate_package, is_leaf=True, yang_name="deactivate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__deactivate_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deactivate_package(self):
    self.__deactivate_package = YANGDynClass(base=deactivate_package.deactivate_package, is_leaf=True, yang_name="deactivate-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_upload_package(self):
    """
    Getter method for upload_package, mapped from YANG variable /packages_rpc/upload_package (rpc)

    YANG Description: uploads a package file
    """
    return self.__upload_package
      
  def _set_upload_package(self, v, load=False):
    """
    Setter method for upload_package, mapped from YANG variable /packages_rpc/upload_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_upload_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_upload_package() directly.

    YANG Description: uploads a package file
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=upload_package.upload_package, is_leaf=True, yang_name="upload-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """upload_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=upload_package.upload_package, is_leaf=True, yang_name="upload-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__upload_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_upload_package(self):
    self.__upload_package = YANGDynClass(base=upload_package.upload_package, is_leaf=True, yang_name="upload-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_download_package(self):
    """
    Getter method for download_package, mapped from YANG variable /packages_rpc/download_package (rpc)

    YANG Description: Downloads a package file in zip format. 
Results in a '204 no content' if the specified package is not available.
    """
    return self.__download_package
      
  def _set_download_package(self, v, load=False):
    """
    Setter method for download_package, mapped from YANG variable /packages_rpc/download_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_download_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_download_package() directly.

    YANG Description: Downloads a package file in zip format. 
Results in a '204 no content' if the specified package is not available.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=download_package.download_package, is_leaf=True, yang_name="download-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """download_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=download_package.download_package, is_leaf=True, yang_name="download-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__download_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_download_package(self):
    self.__download_package = YANGDynClass(base=download_package.download_package, is_leaf=True, yang_name="download-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_delete_package(self):
    """
    Getter method for delete_package, mapped from YANG variable /packages_rpc/delete_package (rpc)

    YANG Description: Deletes the specified package.
    """
    return self.__delete_package
      
  def _set_delete_package(self, v, load=False):
    """
    Setter method for delete_package, mapped from YANG variable /packages_rpc/delete_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delete_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delete_package() directly.

    YANG Description: Deletes the specified package.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=delete_package.delete_package, is_leaf=True, yang_name="delete-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delete_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=delete_package.delete_package, is_leaf=True, yang_name="delete-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__delete_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delete_package(self):
    self.__delete_package = YANGDynClass(base=delete_package.delete_package, is_leaf=True, yang_name="delete-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_list_versions_of_package(self):
    """
    Getter method for list_versions_of_package, mapped from YANG variable /packages_rpc/list_versions_of_package (rpc)

    YANG Description: Lists all the known versions of specified package and which one is currently active, if active.
    """
    return self.__list_versions_of_package
      
  def _set_list_versions_of_package(self, v, load=False):
    """
    Setter method for list_versions_of_package, mapped from YANG variable /packages_rpc/list_versions_of_package (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_list_versions_of_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_list_versions_of_package() directly.

    YANG Description: Lists all the known versions of specified package and which one is currently active, if active.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=list_versions_of_package.list_versions_of_package, is_leaf=True, yang_name="list-versions-of-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """list_versions_of_package must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=list_versions_of_package.list_versions_of_package, is_leaf=True, yang_name="list-versions-of-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__list_versions_of_package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_list_versions_of_package(self):
    self.__list_versions_of_package = YANGDynClass(base=list_versions_of_package.list_versions_of_package, is_leaf=True, yang_name="list-versions-of-package", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)


  def _get_list_active_packages(self):
    """
    Getter method for list_active_packages, mapped from YANG variable /packages_rpc/list_active_packages (rpc)

    YANG Description: Lists all the known versions of specified package and which one is currently active, if active.
    """
    return self.__list_active_packages
      
  def _set_list_active_packages(self, v, load=False):
    """
    Setter method for list_active_packages, mapped from YANG variable /packages_rpc/list_active_packages (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_list_active_packages is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_list_active_packages() directly.

    YANG Description: Lists all the known versions of specified package and which one is currently active, if active.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=list_active_packages.list_active_packages, is_leaf=True, yang_name="list-active-packages", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """list_active_packages must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=list_active_packages.list_active_packages, is_leaf=True, yang_name="list-active-packages", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)""",
        })

    self.__list_active_packages = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_list_active_packages(self):
    self.__list_active_packages = YANGDynClass(base=list_active_packages.list_active_packages, is_leaf=True, yang_name="list-active-packages", module_name="packages", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/packages', defining_module='packages', yang_type='rpc', is_config=True)

  activate_package = __builtin__.property(_get_activate_package, _set_activate_package)
  deactivate_package = __builtin__.property(_get_deactivate_package, _set_deactivate_package)
  upload_package = __builtin__.property(_get_upload_package, _set_upload_package)
  download_package = __builtin__.property(_get_download_package, _set_download_package)
  delete_package = __builtin__.property(_get_delete_package, _set_delete_package)
  list_versions_of_package = __builtin__.property(_get_list_versions_of_package, _set_list_versions_of_package)
  list_active_packages = __builtin__.property(_get_list_active_packages, _set_list_active_packages)


  _pyangbind_elements = collections.OrderedDict([('activate_package', activate_package), ('deactivate_package', deactivate_package), ('upload_package', upload_package), ('download_package', download_package), ('delete_package', delete_package), ('list_versions_of_package', list_versions_of_package), ('list_active_packages', list_active_packages), ])


