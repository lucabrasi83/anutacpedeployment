
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class alarmspec(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarms - based on the path /alarmspecs/alarmspec. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__alarm_spec_name','__alarm_spec_type','__description','__alarm_severity','__owner_type','__raising_threshold','__falling_threshold','__consecutive_count',)

  _yang_name = 'alarmspec'
  _module_name = 'alarms'
  _namespace = 'http://anutanetworks.com/alarms'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__raising_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="raising-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    self.__consecutive_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="consecutive-count", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=True)
    self.__falling_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="falling-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    self.__alarm_spec_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    self.__owner_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSTEM': {}, u'TENANT': {}, u'USER': {}},), is_leaf=True, yang_name="owner-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='owner-type', is_config=True)
    self.__alarm_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarmspecs', u'alarmspec']

  def _get_alarm_spec_name(self):
    """
    Getter method for alarm_spec_name, mapped from YANG variable /alarmspecs/alarmspec/alarm_spec_name (string)

    YANG Description: string
    """
    return self.__alarm_spec_name
      
  def _set_alarm_spec_name(self, v, load=False):
    """
    Setter method for alarm_spec_name, mapped from YANG variable /alarmspecs/alarmspec/alarm_spec_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_spec_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_spec_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_spec_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)""",
        })

    self.__alarm_spec_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_spec_name(self):
    self.__alarm_spec_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)


  def _get_alarm_spec_type(self):
    """
    Getter method for alarm_spec_type, mapped from YANG variable /alarmspecs/alarmspec/alarm_spec_type (leafref)

    YANG Description: alarm-spec-type
    """
    return self.__alarm_spec_type
      
  def _set_alarm_spec_type(self, v, load=False):
    """
    Setter method for alarm_spec_type, mapped from YANG variable /alarmspecs/alarmspec/alarm_spec_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_spec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_spec_type() directly.

    YANG Description: alarm-spec-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_spec_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=True)""",
        })

    self.__alarm_spec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_spec_type(self):
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /alarmspecs/alarmspec/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /alarmspecs/alarmspec/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)


  def _get_alarm_severity(self):
    """
    Getter method for alarm_severity, mapped from YANG variable /alarmspecs/alarmspec/alarm_severity (alarm-severity)

    YANG Description: CRITICAL
MAJOR
WARNING
MINOR
INFO

    """
    return self.__alarm_severity
      
  def _set_alarm_severity(self, v, load=False):
    """
    Setter method for alarm_severity, mapped from YANG variable /alarmspecs/alarmspec/alarm_severity (alarm-severity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_severity() directly.

    YANG Description: CRITICAL
MAJOR
WARNING
MINOR
INFO

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_severity must be of a type compatible with alarm-severity""",
          'defined-type': "alarms:alarm-severity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=True)""",
        })

    self.__alarm_severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_severity(self):
    self.__alarm_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=True)


  def _get_owner_type(self):
    """
    Getter method for owner_type, mapped from YANG variable /alarmspecs/alarmspec/owner_type (owner-type)

    YANG Description: SYSTEM
TENANT
USER

    """
    return self.__owner_type
      
  def _set_owner_type(self, v, load=False):
    """
    Setter method for owner_type, mapped from YANG variable /alarmspecs/alarmspec/owner_type (owner-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_owner_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_owner_type() directly.

    YANG Description: SYSTEM
TENANT
USER

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSTEM': {}, u'TENANT': {}, u'USER': {}},), is_leaf=True, yang_name="owner-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='owner-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """owner_type must be of a type compatible with owner-type""",
          'defined-type': "alarms:owner-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSTEM': {}, u'TENANT': {}, u'USER': {}},), is_leaf=True, yang_name="owner-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='owner-type', is_config=True)""",
        })

    self.__owner_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_owner_type(self):
    self.__owner_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSTEM': {}, u'TENANT': {}, u'USER': {}},), is_leaf=True, yang_name="owner-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='owner-type', is_config=True)


  def _get_raising_threshold(self):
    """
    Getter method for raising_threshold, mapped from YANG variable /alarmspecs/alarmspec/raising_threshold (uint8)

    YANG Description: 0..255
    """
    return self.__raising_threshold
      
  def _set_raising_threshold(self, v, load=False):
    """
    Setter method for raising_threshold, mapped from YANG variable /alarmspecs/alarmspec/raising_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_raising_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_raising_threshold() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="raising-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """raising_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="raising-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)""",
        })

    self.__raising_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_raising_threshold(self):
    self.__raising_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="raising-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)


  def _get_falling_threshold(self):
    """
    Getter method for falling_threshold, mapped from YANG variable /alarmspecs/alarmspec/falling_threshold (uint8)

    YANG Description: 0..255
    """
    return self.__falling_threshold
      
  def _set_falling_threshold(self, v, load=False):
    """
    Setter method for falling_threshold, mapped from YANG variable /alarmspecs/alarmspec/falling_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_falling_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_falling_threshold() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="falling-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """falling_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="falling-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)""",
        })

    self.__falling_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_falling_threshold(self):
    self.__falling_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="falling-threshold", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)


  def _get_consecutive_count(self):
    """
    Getter method for consecutive_count, mapped from YANG variable /alarmspecs/alarmspec/consecutive_count (uint8)

    YANG Description: 0..255
    """
    return self.__consecutive_count
      
  def _set_consecutive_count(self, v, load=False):
    """
    Setter method for consecutive_count, mapped from YANG variable /alarmspecs/alarmspec/consecutive_count (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_consecutive_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_consecutive_count() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="consecutive-count", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """consecutive_count must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="consecutive-count", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)""",
        })

    self.__consecutive_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_consecutive_count(self):
    self.__consecutive_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="consecutive-count", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='uint8', is_config=True)

  alarm_spec_name = __builtin__.property(_get_alarm_spec_name, _set_alarm_spec_name)
  alarm_spec_type = __builtin__.property(_get_alarm_spec_type, _set_alarm_spec_type)
  description = __builtin__.property(_get_description, _set_description)
  alarm_severity = __builtin__.property(_get_alarm_severity, _set_alarm_severity)
  owner_type = __builtin__.property(_get_owner_type, _set_owner_type)
  raising_threshold = __builtin__.property(_get_raising_threshold, _set_raising_threshold)
  falling_threshold = __builtin__.property(_get_falling_threshold, _set_falling_threshold)
  consecutive_count = __builtin__.property(_get_consecutive_count, _set_consecutive_count)


  _pyangbind_elements = collections.OrderedDict([('alarm_spec_name', alarm_spec_name), ('alarm_spec_type', alarm_spec_type), ('description', description), ('alarm_severity', alarm_severity), ('owner_type', owner_type), ('raising_threshold', raising_threshold), ('falling_threshold', falling_threshold), ('consecutive_count', consecutive_count), ])


