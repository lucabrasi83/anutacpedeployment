
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class identity_group(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module identitygroups - based on the path /identity-groups/identity-group. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__identity_type','__user_identity_group','__vlan_selection_mode','__vlan_pool_group','__vlan_pool','__vlan','__ipaddress_pool_group','__ipaddress_pool','__resource','__vlan_number','__default_route_metric','__user_id_group','__ipaddress_pool_group_id','__vpn_network','__ip_range',)

  _yang_name = 'identity-group'
  _module_name = 'identitygroups'
  _namespace = 'http://anutanetworks.com/identitygroups'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ipaddress_pool_group_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group-id", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    self.__user_identity_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-identity-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=True)
    self.__user_id_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    self.__identity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WIRELESS': {}, u'VPN': {}},), is_leaf=True, yang_name="identity-type", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='identity-type-enum', is_config=True)
    self.__ipaddress_pool_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)
    self.__vpn_network = YANGDynClass(base=unicode, is_leaf=True, yang_name="vpn-network", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    self.__vlan_pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    self.__vlan_pool_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    self.__default_route_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="default-route-metric", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='int64', is_config=False)
    self.__ipaddress_pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    self.__ip_range = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-range", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    self.__resource = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    self.__vlan_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan-number", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)
    self.__vlan_selection_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MANUAL_ENTRY': {}, u'VLAN_POOL': {}},), is_leaf=True, yang_name="vlan-selection-mode", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='vlan-pool-choice', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'identity-groups', u'identity-group']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /identity_groups/identity_group/name (string)

    YANG Description: Unique name for vlan-pool-group. Allows AlphaNumerics, hyphen, underscore and space character only. Max length is 36
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /identity_groups/identity_group/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Unique name for vlan-pool-group. Allows AlphaNumerics, hyphen, underscore and space character only. Max length is 36
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=True)


  def _get_identity_type(self):
    """
    Getter method for identity_type, mapped from YANG variable /identity_groups/identity_group/identity_type (identity-type-enum)

    YANG Description: VPN
WIRELESS

    """
    return self.__identity_type
      
  def _set_identity_type(self, v, load=False):
    """
    Setter method for identity_type, mapped from YANG variable /identity_groups/identity_group/identity_type (identity-type-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_identity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_identity_type() directly.

    YANG Description: VPN
WIRELESS

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WIRELESS': {}, u'VPN': {}},), is_leaf=True, yang_name="identity-type", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='identity-type-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """identity_type must be of a type compatible with identity-type-enum""",
          'defined-type': "identitygroups:identity-type-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WIRELESS': {}, u'VPN': {}},), is_leaf=True, yang_name="identity-type", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='identity-type-enum', is_config=True)""",
        })

    self.__identity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_identity_type(self):
    self.__identity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WIRELESS': {}, u'VPN': {}},), is_leaf=True, yang_name="identity-type", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='identity-type-enum', is_config=True)


  def _get_user_identity_group(self):
    """
    Getter method for user_identity_group, mapped from YANG variable /identity_groups/identity_group/user_identity_group (leafref)

    YANG Description: user-identity-group
    """
    return self.__user_identity_group
      
  def _set_user_identity_group(self, v, load=False):
    """
    Setter method for user_identity_group, mapped from YANG variable /identity_groups/identity_group/user_identity_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_identity_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_identity_group() directly.

    YANG Description: user-identity-group
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-identity-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_identity_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-identity-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)""",
        })

    self.__user_identity_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_identity_group(self):
    self.__user_identity_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-identity-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)


  def _get_vlan_selection_mode(self):
    """
    Getter method for vlan_selection_mode, mapped from YANG variable /identity_groups/identity_group/vlan_selection_mode (vlan-pool-choice)

    YANG Description: MANUAL_ENTRY
VLAN_POOL

    """
    return self.__vlan_selection_mode
      
  def _set_vlan_selection_mode(self, v, load=False):
    """
    Setter method for vlan_selection_mode, mapped from YANG variable /identity_groups/identity_group/vlan_selection_mode (vlan-pool-choice)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_selection_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_selection_mode() directly.

    YANG Description: MANUAL_ENTRY
VLAN_POOL

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MANUAL_ENTRY': {}, u'VLAN_POOL': {}},), is_leaf=True, yang_name="vlan-selection-mode", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='vlan-pool-choice', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_selection_mode must be of a type compatible with vlan-pool-choice""",
          'defined-type': "identitygroups:vlan-pool-choice",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MANUAL_ENTRY': {}, u'VLAN_POOL': {}},), is_leaf=True, yang_name="vlan-selection-mode", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='vlan-pool-choice', is_config=True)""",
        })

    self.__vlan_selection_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_selection_mode(self):
    self.__vlan_selection_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MANUAL_ENTRY': {}, u'VLAN_POOL': {}},), is_leaf=True, yang_name="vlan-selection-mode", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='vlan-pool-choice', is_config=True)


  def _get_vlan_pool_group(self):
    """
    Getter method for vlan_pool_group, mapped from YANG variable /identity_groups/identity_group/vlan_pool_group (leafref)

    YANG Description: vlan-pool-group
    """
    return self.__vlan_pool_group
      
  def _set_vlan_pool_group(self, v, load=False):
    """
    Setter method for vlan_pool_group, mapped from YANG variable /identity_groups/identity_group/vlan_pool_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_pool_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_pool_group() directly.

    YANG Description: vlan-pool-group
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vlan-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_pool_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)""",
        })

    self.__vlan_pool_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_pool_group(self):
    self.__vlan_pool_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)


  def _get_vlan_pool(self):
    """
    Getter method for vlan_pool, mapped from YANG variable /identity_groups/identity_group/vlan_pool (leafref)

    YANG Description: vlan-pool
    """
    return self.__vlan_pool
      
  def _set_vlan_pool(self, v, load=False):
    """
    Setter method for vlan_pool, mapped from YANG variable /identity_groups/identity_group/vlan_pool (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_pool is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_pool() directly.

    YANG Description: vlan-pool
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vlan-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_pool must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)""",
        })

    self.__vlan_pool = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_pool(self):
    self.__vlan_pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)


  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /identity_groups/identity_group/vlan (nnt:dot1q-vlan-typedef)

    YANG Description: 1..4094
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /identity_groups/identity_group/vlan (nnt:dot1q-vlan-typedef)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: 1..4094
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with nnt:dot1q-vlan-typedef""",
          'defined-type': "nnt:dot1q-vlan-typedef",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)


  def _get_ipaddress_pool_group(self):
    """
    Getter method for ipaddress_pool_group, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool_group (leafref)

    YANG Description: ipaddress-pool-group
    """
    return self.__ipaddress_pool_group
      
  def _set_ipaddress_pool_group(self, v, load=False):
    """
    Setter method for ipaddress_pool_group, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipaddress_pool_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipaddress_pool_group() directly.

    YANG Description: ipaddress-pool-group
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ipaddress-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipaddress_pool_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)""",
        })

    self.__ipaddress_pool_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipaddress_pool_group(self):
    self.__ipaddress_pool_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)


  def _get_ipaddress_pool(self):
    """
    Getter method for ipaddress_pool, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool (leafref)

    YANG Description: ipaddress-pool
    """
    return self.__ipaddress_pool
      
  def _set_ipaddress_pool(self, v, load=False):
    """
    Setter method for ipaddress_pool, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipaddress_pool is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipaddress_pool() directly.

    YANG Description: ipaddress-pool
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ipaddress-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipaddress_pool must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)""",
        })

    self.__ipaddress_pool = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipaddress_pool(self):
    self.__ipaddress_pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='leafref', is_config=True)


  def _get_resource(self):
    """
    Getter method for resource, mapped from YANG variable /identity_groups/identity_group/resource (string)

    YANG Description: string
    """
    return self.__resource
      
  def _set_resource(self, v, load=False):
    """
    Setter method for resource, mapped from YANG variable /identity_groups/identity_group/resource (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="resource", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="resource", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)""",
        })

    self.__resource = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource(self):
    self.__resource = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)


  def _get_vlan_number(self):
    """
    Getter method for vlan_number, mapped from YANG variable /identity_groups/identity_group/vlan_number (nnt:dot1q-vlan-typedef)

    YANG Description: 1..4094
    """
    return self.__vlan_number
      
  def _set_vlan_number(self, v, load=False):
    """
    Setter method for vlan_number, mapped from YANG variable /identity_groups/identity_group/vlan_number (nnt:dot1q-vlan-typedef)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_number() directly.

    YANG Description: 1..4094
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan-number", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_number must be of a type compatible with nnt:dot1q-vlan-typedef""",
          'defined-type': "nnt:dot1q-vlan-typedef",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan-number", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)""",
        })

    self.__vlan_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_number(self):
    self.__vlan_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="vlan-number", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='nnt:dot1q-vlan-typedef', is_config=True)


  def _get_default_route_metric(self):
    """
    Getter method for default_route_metric, mapped from YANG variable /identity_groups/identity_group/default_route_metric (int64)

    YANG Description: -9223372036854775808..9223372036854775807
    """
    return self.__default_route_metric
      
  def _set_default_route_metric(self, v, load=False):
    """
    Setter method for default_route_metric, mapped from YANG variable /identity_groups/identity_group/default_route_metric (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_route_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_route_metric() directly.

    YANG Description: -9223372036854775808..9223372036854775807
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="default-route-metric", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_route_metric must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="default-route-metric", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='int64', is_config=False)""",
        })

    self.__default_route_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_route_metric(self):
    self.__default_route_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="default-route-metric", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='int64', is_config=False)


  def _get_user_id_group(self):
    """
    Getter method for user_id_group, mapped from YANG variable /identity_groups/identity_group/user_id_group (string)

    YANG Description: string
    """
    return self.__user_id_group
      
  def _set_user_id_group(self, v, load=False):
    """
    Setter method for user_id_group, mapped from YANG variable /identity_groups/identity_group/user_id_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_id_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_id_group() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-id-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_id_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)""",
        })

    self.__user_id_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_id_group(self):
    self.__user_id_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id-group", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)


  def _get_ipaddress_pool_group_id(self):
    """
    Getter method for ipaddress_pool_group_id, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool_group_id (string)

    YANG Description: string
    """
    return self.__ipaddress_pool_group_id
      
  def _set_ipaddress_pool_group_id(self, v, load=False):
    """
    Setter method for ipaddress_pool_group_id, mapped from YANG variable /identity_groups/identity_group/ipaddress_pool_group_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipaddress_pool_group_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipaddress_pool_group_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ipaddress-pool-group-id", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipaddress_pool_group_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group-id", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)""",
        })

    self.__ipaddress_pool_group_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipaddress_pool_group_id(self):
    self.__ipaddress_pool_group_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipaddress-pool-group-id", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)


  def _get_vpn_network(self):
    """
    Getter method for vpn_network, mapped from YANG variable /identity_groups/identity_group/vpn_network (string)

    YANG Description: string
    """
    return self.__vpn_network
      
  def _set_vpn_network(self, v, load=False):
    """
    Setter method for vpn_network, mapped from YANG variable /identity_groups/identity_group/vpn_network (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpn_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpn_network() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vpn-network", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpn_network must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vpn-network", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)""",
        })

    self.__vpn_network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpn_network(self):
    self.__vpn_network = YANGDynClass(base=unicode, is_leaf=True, yang_name="vpn-network", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)


  def _get_ip_range(self):
    """
    Getter method for ip_range, mapped from YANG variable /identity_groups/identity_group/ip_range (string)

    YANG Description: string
    """
    return self.__ip_range
      
  def _set_ip_range(self, v, load=False):
    """
    Setter method for ip_range, mapped from YANG variable /identity_groups/identity_group/ip_range (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_range() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ip-range", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_range must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-range", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)""",
        })

    self.__ip_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_range(self):
    self.__ip_range = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-range", module_name="identitygroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/identitygroups', defining_module='identitygroups', yang_type='string', is_config=False)

  name = __builtin__.property(_get_name, _set_name)
  identity_type = __builtin__.property(_get_identity_type, _set_identity_type)
  user_identity_group = __builtin__.property(_get_user_identity_group, _set_user_identity_group)
  vlan_selection_mode = __builtin__.property(_get_vlan_selection_mode, _set_vlan_selection_mode)
  vlan_pool_group = __builtin__.property(_get_vlan_pool_group, _set_vlan_pool_group)
  vlan_pool = __builtin__.property(_get_vlan_pool, _set_vlan_pool)
  vlan = __builtin__.property(_get_vlan, _set_vlan)
  ipaddress_pool_group = __builtin__.property(_get_ipaddress_pool_group, _set_ipaddress_pool_group)
  ipaddress_pool = __builtin__.property(_get_ipaddress_pool, _set_ipaddress_pool)
  resource = __builtin__.property(_get_resource)
  vlan_number = __builtin__.property(_get_vlan_number, _set_vlan_number)
  default_route_metric = __builtin__.property(_get_default_route_metric)
  user_id_group = __builtin__.property(_get_user_id_group)
  ipaddress_pool_group_id = __builtin__.property(_get_ipaddress_pool_group_id)
  vpn_network = __builtin__.property(_get_vpn_network)
  ip_range = __builtin__.property(_get_ip_range)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('identity_type', identity_type), ('user_identity_group', user_identity_group), ('vlan_selection_mode', vlan_selection_mode), ('vlan_pool_group', vlan_pool_group), ('vlan_pool', vlan_pool), ('vlan', vlan), ('ipaddress_pool_group', ipaddress_pool_group), ('ipaddress_pool', ipaddress_pool), ('resource', resource), ('vlan_number', vlan_number), ('default_route_metric', default_route_metric), ('user_id_group', user_id_group), ('ipaddress_pool_group_id', ipaddress_pool_group_id), ('vpn_network', vpn_network), ('ip_range', ip_range), ])


