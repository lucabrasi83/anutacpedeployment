
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ui_name_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /ui-name-profiles/ui-name-profile/ui-name-entries/ui-name-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__component_type','__singular','__plural','__ui_name_profile',)

  _yang_name = 'ui-name-entry'
  _module_name = 'ncx-ui-utils'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ui_name_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="ui-name-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__plural = YANGDynClass(base=unicode, is_leaf=True, yang_name="plural", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__component_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VDC_DEVICE': {}, u'RESOURCEPOOL': {}, u'VIRTUALROUTINGINSTANCE': {}, u'NETWORK_CONNECTION': {}, u'LINK': {}, u'IPADDRESSENTRY': {}, u'ADDRESSES': {}, u'REVERSEPROXY': {}, u'SECURITYPOLICY': {}, u'PORTPROFILE': {}, u'SUBNETWORK': {}, u'LOADBALANCER': {}, u'REALSERVER': {}, u'SERVERPORT': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'MODULE': {}, u'DEVICE_IP_ADDRESS': {}, u'OPENLDAP': {}, u'VZONECONDITION': {}, u'DATACENTER': {}, u'FIREWALLRULE': {}, u'REGION': {}, u'ADDRESSBOOK': {}, u'SERVER': {}, u'CLUSTER': {}, u'API': {}, u'INTERFACE': {}, u'OBJECTGROUP': {}, u'ROGUE_IP_ADDRESS': {}, u'OPERATION': {}, u'PROTOCOLGROUP': {}, u'VZONE': {}, u'VDC': {}, u'CONTEXT': {}, u'PROTOCOL': {}, u'DNSPROXY': {}, u'PORT': {}, u'SSLKEY': {}, u'WANOPTIMIZER': {}, u'ORDER': {}, u'LOCATION': {}, u'IPADDRESSPOOL': {}, u'VIRTUALSERVER': {}, u'WANOPREDIRECTIONCONDITION': {}, u'PERFORMANCEROUTINGPOLICY': {}, u'INTERCONNECTNETWORKS': {}, u'DYNAMICNAT': {}, u'TACACS': {}, u'NETWORKOBJECT': {}, u'L3ZONE': {}, u'ACTIVEDIRECTORY': {}, u'FORWARDPROXY': {}, u'DEVICE_GROUP': {}, u'SERVICEPOLICYRULE': {}, u'SECURITYPROFILE': {}, u'NATOVERLOAD': {}, u'SERVICE': {}, u'APPLICATION': {}, u'AGENT': {}, u'LBSSLKEY': {}, u'NETWORKFUNCTION': {}, u'ROUTERSECURITYPOLICY': {}, u'DHCPPOOL': {}, u'APPLICATIONSET': {}, u'FIREWALLZONE': {}, u'COMPUTEFIREWALLOBJECTGROUP': {}, u'RESOURCE_POOL_DEVICE_GROUP': {}, u'REPLACEDEVICE': {}, u'VIRTUALNETWORK': {}, u'RSERVICE': {}, u'HOST': {}, u'FILTERURLTRAFFIC': {}, u'TENANT': {}, u'COMPUTEFIREWALL': {}, u'GLOBALLBTOPOLOGY': {}, u'STATICROUTE': {}, u'NATEXEMPT': {}, u'FOLDER': {}, u'RESOURCE_POOL_GROUP': {}, u'GLOBALAPPLICATIONSERVICE': {}, u'POLICYGROUP': {}, u'REMOTEACCESSVPN': {}, u'WANEDGEQOSPOLICY': {}, u'SERVERFARM': {}, u'SERVERJOB': {}, u'FORWARDINGHOST': {}, u'WIRELESSLAN': {}, u'GLOBALVIRTUALSERVER': {}, u'CONFIGSCRIPT': {}, u'DATANODE': {}, u'VPC': {}, u'PORT_CHANNEL': {}, u'POD': {}, u'ADDDEVICE': {}, u'SUBINTERFACE': {}, u'RESOURCE_POOL': {}, u'VCD': {}, u'POLICYROUTING': {}, u'GROUPPOLICY': {}, u'VM': {}, u'GLOBALVDC': {}, u'DEVICE': {}, u'LBSSLCERTIFICATE': {}, u'POLICYCONDITION': {}, u'ROUTELEAK': {}, u'STACK_MEMBER': {}, u'SUBNET': {}, u'STATICNAT': {}, u'SYSTEM': {}, u'EXTNETWORK': {}, u'ADDRESSSET': {}, u'OBJECTGROUPCONDITION': {}},), is_leaf=True, yang_name="component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:component-type', is_config=True)
    self.__singular = YANGDynClass(base=unicode, is_leaf=True, yang_name="singular", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ui-name-profiles', u'ui-name-profile', u'ui-name-entries', u'ui-name-entry']

  def _get_component_type(self):
    """
    Getter method for component_type, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/component_type (ndt:component-type)

    YANG Description: ADDDEVICE
REPLACEDEVICE
CONFIGSCRIPT
DEVICE
DEVICE_GROUP
INTERFACE
NETWORK_CONNECTION
SUBINTERFACE
MODULE
STACK_MEMBER
PORT_CHANNEL
LINK
SERVICE
SUBNETWORK
RESOURCEPOOL
VIRTUALNETWORK
VIRTUALSERVER
PORTPROFILE
IPADDRESSPOOL
IPADDRESSENTRY
STATICNAT
NATOVERLOAD
NATEXEMPT
FORWARDINGHOST
FILTERURLTRAFFIC
DYNAMICNAT
TENANT
VDC
VDC_DEVICE
NETWORKFUNCTION
VPC
INTERCONNECTNETWORKS
SSLKEY
L3ZONE
LOADBALANCER
REVERSEPROXY
EXTNETWORK
FIREWALL
FIREWALLRULE
ROUTELEAK
ADDRESSBOOK
ADDRESSES
ADDRESSSET
APPLICATION
APPLICATIONSET
DNSPROXY
DHCPPOOL
OBJECTGROUP
POLICYGROUP
GROUPPOLICY
PROTOCOL
PROTOCOLGROUP
NETWORKOBJECT
COMPUTEFIREWALL
COMPUTEFIREWALLOBJECTGROUP
OBJECTGROUPCONDITION
SECURITYPROFILE
SERVICEPOLICY
SERVICEPOLICYRULE
POLICYCONDITION
VZONE
VZONECONDITION
SERVER
DATACENTER
LOCATION
SERVERJOB
VCD
HOST
CLUSTER
VM
PORT
AGENT
REALSERVER
REMOTEACCESSVPN
SERVERFARM
RSERVICE
LBSSLKEY
LBSSLCERTIFICATE
GLOBALAPPLICATIONSERVICE
GLOBALVIRTUALSERVER
GLOBALLBTOPOLOGY
STATICROUTE
SERVERPORT
FIREWALLZONE
VIRTUALROUTINGINSTANCE
REGION
RESOURCE_POOL
RESOURCE_POOL_GROUP
SUBNET
WANOPTIMIZER
WANOPREDIRECTIONCONDITION
POD
RESOURCE_POOL_DEVICE_GROUP
FORWARDPROXY
CONTEXT
POLICYROUTING
PERFORMANCEROUTINGPOLICY
GLOBALVDC
WANEDGEQOSPOLICY
SECURITYPOLICY
ROUTERSECURITYPOLICY
OPENLDAP
TACACS
SYSTEM
DEVICE_IP_ADDRESS
ROGUE_IP_ADDRESS
ACTIVEDIRECTORY
WIRELESSLAN
API
DATANODE
OPERATION
FOLDER
ORDER

    """
    return self.__component_type
      
  def _set_component_type(self, v, load=False):
    """
    Setter method for component_type, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/component_type (ndt:component-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component_type() directly.

    YANG Description: ADDDEVICE
REPLACEDEVICE
CONFIGSCRIPT
DEVICE
DEVICE_GROUP
INTERFACE
NETWORK_CONNECTION
SUBINTERFACE
MODULE
STACK_MEMBER
PORT_CHANNEL
LINK
SERVICE
SUBNETWORK
RESOURCEPOOL
VIRTUALNETWORK
VIRTUALSERVER
PORTPROFILE
IPADDRESSPOOL
IPADDRESSENTRY
STATICNAT
NATOVERLOAD
NATEXEMPT
FORWARDINGHOST
FILTERURLTRAFFIC
DYNAMICNAT
TENANT
VDC
VDC_DEVICE
NETWORKFUNCTION
VPC
INTERCONNECTNETWORKS
SSLKEY
L3ZONE
LOADBALANCER
REVERSEPROXY
EXTNETWORK
FIREWALL
FIREWALLRULE
ROUTELEAK
ADDRESSBOOK
ADDRESSES
ADDRESSSET
APPLICATION
APPLICATIONSET
DNSPROXY
DHCPPOOL
OBJECTGROUP
POLICYGROUP
GROUPPOLICY
PROTOCOL
PROTOCOLGROUP
NETWORKOBJECT
COMPUTEFIREWALL
COMPUTEFIREWALLOBJECTGROUP
OBJECTGROUPCONDITION
SECURITYPROFILE
SERVICEPOLICY
SERVICEPOLICYRULE
POLICYCONDITION
VZONE
VZONECONDITION
SERVER
DATACENTER
LOCATION
SERVERJOB
VCD
HOST
CLUSTER
VM
PORT
AGENT
REALSERVER
REMOTEACCESSVPN
SERVERFARM
RSERVICE
LBSSLKEY
LBSSLCERTIFICATE
GLOBALAPPLICATIONSERVICE
GLOBALVIRTUALSERVER
GLOBALLBTOPOLOGY
STATICROUTE
SERVERPORT
FIREWALLZONE
VIRTUALROUTINGINSTANCE
REGION
RESOURCE_POOL
RESOURCE_POOL_GROUP
SUBNET
WANOPTIMIZER
WANOPREDIRECTIONCONDITION
POD
RESOURCE_POOL_DEVICE_GROUP
FORWARDPROXY
CONTEXT
POLICYROUTING
PERFORMANCEROUTINGPOLICY
GLOBALVDC
WANEDGEQOSPOLICY
SECURITYPOLICY
ROUTERSECURITYPOLICY
OPENLDAP
TACACS
SYSTEM
DEVICE_IP_ADDRESS
ROGUE_IP_ADDRESS
ACTIVEDIRECTORY
WIRELESSLAN
API
DATANODE
OPERATION
FOLDER
ORDER

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VDC_DEVICE': {}, u'RESOURCEPOOL': {}, u'VIRTUALROUTINGINSTANCE': {}, u'NETWORK_CONNECTION': {}, u'LINK': {}, u'IPADDRESSENTRY': {}, u'ADDRESSES': {}, u'REVERSEPROXY': {}, u'SECURITYPOLICY': {}, u'PORTPROFILE': {}, u'SUBNETWORK': {}, u'LOADBALANCER': {}, u'REALSERVER': {}, u'SERVERPORT': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'MODULE': {}, u'DEVICE_IP_ADDRESS': {}, u'OPENLDAP': {}, u'VZONECONDITION': {}, u'DATACENTER': {}, u'FIREWALLRULE': {}, u'REGION': {}, u'ADDRESSBOOK': {}, u'SERVER': {}, u'CLUSTER': {}, u'API': {}, u'INTERFACE': {}, u'OBJECTGROUP': {}, u'ROGUE_IP_ADDRESS': {}, u'OPERATION': {}, u'PROTOCOLGROUP': {}, u'VZONE': {}, u'VDC': {}, u'CONTEXT': {}, u'PROTOCOL': {}, u'DNSPROXY': {}, u'PORT': {}, u'SSLKEY': {}, u'WANOPTIMIZER': {}, u'ORDER': {}, u'LOCATION': {}, u'IPADDRESSPOOL': {}, u'VIRTUALSERVER': {}, u'WANOPREDIRECTIONCONDITION': {}, u'PERFORMANCEROUTINGPOLICY': {}, u'INTERCONNECTNETWORKS': {}, u'DYNAMICNAT': {}, u'TACACS': {}, u'NETWORKOBJECT': {}, u'L3ZONE': {}, u'ACTIVEDIRECTORY': {}, u'FORWARDPROXY': {}, u'DEVICE_GROUP': {}, u'SERVICEPOLICYRULE': {}, u'SECURITYPROFILE': {}, u'NATOVERLOAD': {}, u'SERVICE': {}, u'APPLICATION': {}, u'AGENT': {}, u'LBSSLKEY': {}, u'NETWORKFUNCTION': {}, u'ROUTERSECURITYPOLICY': {}, u'DHCPPOOL': {}, u'APPLICATIONSET': {}, u'FIREWALLZONE': {}, u'COMPUTEFIREWALLOBJECTGROUP': {}, u'RESOURCE_POOL_DEVICE_GROUP': {}, u'REPLACEDEVICE': {}, u'VIRTUALNETWORK': {}, u'RSERVICE': {}, u'HOST': {}, u'FILTERURLTRAFFIC': {}, u'TENANT': {}, u'COMPUTEFIREWALL': {}, u'GLOBALLBTOPOLOGY': {}, u'STATICROUTE': {}, u'NATEXEMPT': {}, u'FOLDER': {}, u'RESOURCE_POOL_GROUP': {}, u'GLOBALAPPLICATIONSERVICE': {}, u'POLICYGROUP': {}, u'REMOTEACCESSVPN': {}, u'WANEDGEQOSPOLICY': {}, u'SERVERFARM': {}, u'SERVERJOB': {}, u'FORWARDINGHOST': {}, u'WIRELESSLAN': {}, u'GLOBALVIRTUALSERVER': {}, u'CONFIGSCRIPT': {}, u'DATANODE': {}, u'VPC': {}, u'PORT_CHANNEL': {}, u'POD': {}, u'ADDDEVICE': {}, u'SUBINTERFACE': {}, u'RESOURCE_POOL': {}, u'VCD': {}, u'POLICYROUTING': {}, u'GROUPPOLICY': {}, u'VM': {}, u'GLOBALVDC': {}, u'DEVICE': {}, u'LBSSLCERTIFICATE': {}, u'POLICYCONDITION': {}, u'ROUTELEAK': {}, u'STACK_MEMBER': {}, u'SUBNET': {}, u'STATICNAT': {}, u'SYSTEM': {}, u'EXTNETWORK': {}, u'ADDRESSSET': {}, u'OBJECTGROUPCONDITION': {}},), is_leaf=True, yang_name="component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:component-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component_type must be of a type compatible with ndt:component-type""",
          'defined-type': "ndt:component-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VDC_DEVICE': {}, u'RESOURCEPOOL': {}, u'VIRTUALROUTINGINSTANCE': {}, u'NETWORK_CONNECTION': {}, u'LINK': {}, u'IPADDRESSENTRY': {}, u'ADDRESSES': {}, u'REVERSEPROXY': {}, u'SECURITYPOLICY': {}, u'PORTPROFILE': {}, u'SUBNETWORK': {}, u'LOADBALANCER': {}, u'REALSERVER': {}, u'SERVERPORT': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'MODULE': {}, u'DEVICE_IP_ADDRESS': {}, u'OPENLDAP': {}, u'VZONECONDITION': {}, u'DATACENTER': {}, u'FIREWALLRULE': {}, u'REGION': {}, u'ADDRESSBOOK': {}, u'SERVER': {}, u'CLUSTER': {}, u'API': {}, u'INTERFACE': {}, u'OBJECTGROUP': {}, u'ROGUE_IP_ADDRESS': {}, u'OPERATION': {}, u'PROTOCOLGROUP': {}, u'VZONE': {}, u'VDC': {}, u'CONTEXT': {}, u'PROTOCOL': {}, u'DNSPROXY': {}, u'PORT': {}, u'SSLKEY': {}, u'WANOPTIMIZER': {}, u'ORDER': {}, u'LOCATION': {}, u'IPADDRESSPOOL': {}, u'VIRTUALSERVER': {}, u'WANOPREDIRECTIONCONDITION': {}, u'PERFORMANCEROUTINGPOLICY': {}, u'INTERCONNECTNETWORKS': {}, u'DYNAMICNAT': {}, u'TACACS': {}, u'NETWORKOBJECT': {}, u'L3ZONE': {}, u'ACTIVEDIRECTORY': {}, u'FORWARDPROXY': {}, u'DEVICE_GROUP': {}, u'SERVICEPOLICYRULE': {}, u'SECURITYPROFILE': {}, u'NATOVERLOAD': {}, u'SERVICE': {}, u'APPLICATION': {}, u'AGENT': {}, u'LBSSLKEY': {}, u'NETWORKFUNCTION': {}, u'ROUTERSECURITYPOLICY': {}, u'DHCPPOOL': {}, u'APPLICATIONSET': {}, u'FIREWALLZONE': {}, u'COMPUTEFIREWALLOBJECTGROUP': {}, u'RESOURCE_POOL_DEVICE_GROUP': {}, u'REPLACEDEVICE': {}, u'VIRTUALNETWORK': {}, u'RSERVICE': {}, u'HOST': {}, u'FILTERURLTRAFFIC': {}, u'TENANT': {}, u'COMPUTEFIREWALL': {}, u'GLOBALLBTOPOLOGY': {}, u'STATICROUTE': {}, u'NATEXEMPT': {}, u'FOLDER': {}, u'RESOURCE_POOL_GROUP': {}, u'GLOBALAPPLICATIONSERVICE': {}, u'POLICYGROUP': {}, u'REMOTEACCESSVPN': {}, u'WANEDGEQOSPOLICY': {}, u'SERVERFARM': {}, u'SERVERJOB': {}, u'FORWARDINGHOST': {}, u'WIRELESSLAN': {}, u'GLOBALVIRTUALSERVER': {}, u'CONFIGSCRIPT': {}, u'DATANODE': {}, u'VPC': {}, u'PORT_CHANNEL': {}, u'POD': {}, u'ADDDEVICE': {}, u'SUBINTERFACE': {}, u'RESOURCE_POOL': {}, u'VCD': {}, u'POLICYROUTING': {}, u'GROUPPOLICY': {}, u'VM': {}, u'GLOBALVDC': {}, u'DEVICE': {}, u'LBSSLCERTIFICATE': {}, u'POLICYCONDITION': {}, u'ROUTELEAK': {}, u'STACK_MEMBER': {}, u'SUBNET': {}, u'STATICNAT': {}, u'SYSTEM': {}, u'EXTNETWORK': {}, u'ADDRESSSET': {}, u'OBJECTGROUPCONDITION': {}},), is_leaf=True, yang_name="component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:component-type', is_config=True)""",
        })

    self.__component_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component_type(self):
    self.__component_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VDC_DEVICE': {}, u'RESOURCEPOOL': {}, u'VIRTUALROUTINGINSTANCE': {}, u'NETWORK_CONNECTION': {}, u'LINK': {}, u'IPADDRESSENTRY': {}, u'ADDRESSES': {}, u'REVERSEPROXY': {}, u'SECURITYPOLICY': {}, u'PORTPROFILE': {}, u'SUBNETWORK': {}, u'LOADBALANCER': {}, u'REALSERVER': {}, u'SERVERPORT': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'MODULE': {}, u'DEVICE_IP_ADDRESS': {}, u'OPENLDAP': {}, u'VZONECONDITION': {}, u'DATACENTER': {}, u'FIREWALLRULE': {}, u'REGION': {}, u'ADDRESSBOOK': {}, u'SERVER': {}, u'CLUSTER': {}, u'API': {}, u'INTERFACE': {}, u'OBJECTGROUP': {}, u'ROGUE_IP_ADDRESS': {}, u'OPERATION': {}, u'PROTOCOLGROUP': {}, u'VZONE': {}, u'VDC': {}, u'CONTEXT': {}, u'PROTOCOL': {}, u'DNSPROXY': {}, u'PORT': {}, u'SSLKEY': {}, u'WANOPTIMIZER': {}, u'ORDER': {}, u'LOCATION': {}, u'IPADDRESSPOOL': {}, u'VIRTUALSERVER': {}, u'WANOPREDIRECTIONCONDITION': {}, u'PERFORMANCEROUTINGPOLICY': {}, u'INTERCONNECTNETWORKS': {}, u'DYNAMICNAT': {}, u'TACACS': {}, u'NETWORKOBJECT': {}, u'L3ZONE': {}, u'ACTIVEDIRECTORY': {}, u'FORWARDPROXY': {}, u'DEVICE_GROUP': {}, u'SERVICEPOLICYRULE': {}, u'SECURITYPROFILE': {}, u'NATOVERLOAD': {}, u'SERVICE': {}, u'APPLICATION': {}, u'AGENT': {}, u'LBSSLKEY': {}, u'NETWORKFUNCTION': {}, u'ROUTERSECURITYPOLICY': {}, u'DHCPPOOL': {}, u'APPLICATIONSET': {}, u'FIREWALLZONE': {}, u'COMPUTEFIREWALLOBJECTGROUP': {}, u'RESOURCE_POOL_DEVICE_GROUP': {}, u'REPLACEDEVICE': {}, u'VIRTUALNETWORK': {}, u'RSERVICE': {}, u'HOST': {}, u'FILTERURLTRAFFIC': {}, u'TENANT': {}, u'COMPUTEFIREWALL': {}, u'GLOBALLBTOPOLOGY': {}, u'STATICROUTE': {}, u'NATEXEMPT': {}, u'FOLDER': {}, u'RESOURCE_POOL_GROUP': {}, u'GLOBALAPPLICATIONSERVICE': {}, u'POLICYGROUP': {}, u'REMOTEACCESSVPN': {}, u'WANEDGEQOSPOLICY': {}, u'SERVERFARM': {}, u'SERVERJOB': {}, u'FORWARDINGHOST': {}, u'WIRELESSLAN': {}, u'GLOBALVIRTUALSERVER': {}, u'CONFIGSCRIPT': {}, u'DATANODE': {}, u'VPC': {}, u'PORT_CHANNEL': {}, u'POD': {}, u'ADDDEVICE': {}, u'SUBINTERFACE': {}, u'RESOURCE_POOL': {}, u'VCD': {}, u'POLICYROUTING': {}, u'GROUPPOLICY': {}, u'VM': {}, u'GLOBALVDC': {}, u'DEVICE': {}, u'LBSSLCERTIFICATE': {}, u'POLICYCONDITION': {}, u'ROUTELEAK': {}, u'STACK_MEMBER': {}, u'SUBNET': {}, u'STATICNAT': {}, u'SYSTEM': {}, u'EXTNETWORK': {}, u'ADDRESSSET': {}, u'OBJECTGROUPCONDITION': {}},), is_leaf=True, yang_name="component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:component-type', is_config=True)


  def _get_singular(self):
    """
    Getter method for singular, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/singular (string)

    YANG Description: string
    """
    return self.__singular
      
  def _set_singular(self, v, load=False):
    """
    Setter method for singular, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/singular (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_singular is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_singular() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="singular", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """singular must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="singular", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__singular = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_singular(self):
    self.__singular = YANGDynClass(base=unicode, is_leaf=True, yang_name="singular", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_plural(self):
    """
    Getter method for plural, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/plural (string)

    YANG Description: string
    """
    return self.__plural
      
  def _set_plural(self, v, load=False):
    """
    Setter method for plural, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/plural (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_plural is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_plural() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="plural", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """plural must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="plural", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__plural = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_plural(self):
    self.__plural = YANGDynClass(base=unicode, is_leaf=True, yang_name="plural", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_ui_name_profile(self):
    """
    Getter method for ui_name_profile, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/ui_name_profile (leafref)

    YANG Description: ui-name-profile
    """
    return self.__ui_name_profile
      
  def _set_ui_name_profile(self, v, load=False):
    """
    Setter method for ui_name_profile, mapped from YANG variable /ui_name_profiles/ui_name_profile/ui_name_entries/ui_name_entry/ui_name_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ui_name_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ui_name_profile() directly.

    YANG Description: ui-name-profile
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ui-name-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ui_name_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ui-name-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__ui_name_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ui_name_profile(self):
    self.__ui_name_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="ui-name-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  component_type = __builtin__.property(_get_component_type, _set_component_type)
  singular = __builtin__.property(_get_singular, _set_singular)
  plural = __builtin__.property(_get_plural, _set_plural)
  ui_name_profile = __builtin__.property(_get_ui_name_profile, _set_ui_name_profile)


  _pyangbind_elements = collections.OrderedDict([('component_type', component_type), ('singular', singular), ('plural', plural), ('ui_name_profile', ui_name_profile), ])


