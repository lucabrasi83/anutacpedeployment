
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import to_be_approved_by
class tasks_of(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /configuration/approvals/tasks-of. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This model lets you define the following configuration :
tasks created by User Joe to be approved user Tom, or
tasks created by User Joe to be approved UserGroup tenant_admin, 
tasks created by UserGroup lb-admins to be approved user X, or 
tasks created by UserGroup lb-users to be approved UserGroup lb-admins
etc.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__task_classifier','__value','__to_be_approved_by',)

  _yang_name = 'tasks-of'
  _module_name = 'approvals'
  _namespace = 'http://anutanetworks.com/approvals'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__task_classifier = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'user': {}, u'usergroup': {}},), is_leaf=True, yang_name="task-classifier", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='enumeration', is_config=True)
    self.__to_be_approved_by = YANGDynClass(base=YANGListType("approver_classifier value",to_be_approved_by.to_be_approved_by, yang_name="to-be-approved-by", module_name="approvals", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver-classifier value'), is_container='list', yang_name="to-be-approved-by", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='list', is_config=True)
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'configuration', u'approvals', u'tasks-of']

  def _get_task_classifier(self):
    """
    Getter method for task_classifier, mapped from YANG variable /configuration/approvals/tasks_of/task_classifier (enumeration)

    YANG Description: user
usergroup

    """
    return self.__task_classifier
      
  def _set_task_classifier(self, v, load=False):
    """
    Setter method for task_classifier, mapped from YANG variable /configuration/approvals/tasks_of/task_classifier (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_classifier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_classifier() directly.

    YANG Description: user
usergroup

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'user': {}, u'usergroup': {}},), is_leaf=True, yang_name="task-classifier", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_classifier must be of a type compatible with enumeration""",
          'defined-type': "approvals:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'user': {}, u'usergroup': {}},), is_leaf=True, yang_name="task-classifier", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='enumeration', is_config=True)""",
        })

    self.__task_classifier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_classifier(self):
    self.__task_classifier = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'user': {}, u'usergroup': {}},), is_leaf=True, yang_name="task-classifier", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='enumeration', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /configuration/approvals/tasks_of/value (string)

    YANG Description: string
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /configuration/approvals/tasks_of/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="value", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='string', is_config=True)


  def _get_to_be_approved_by(self):
    """
    Getter method for to_be_approved_by, mapped from YANG variable /configuration/approvals/tasks_of/to_be_approved_by (list)
    """
    return self.__to_be_approved_by
      
  def _set_to_be_approved_by(self, v, load=False):
    """
    Setter method for to_be_approved_by, mapped from YANG variable /configuration/approvals/tasks_of/to_be_approved_by (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_to_be_approved_by is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_to_be_approved_by() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("approver_classifier value",to_be_approved_by.to_be_approved_by, yang_name="to-be-approved-by", module_name="approvals", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver-classifier value'), is_container='list', yang_name="to-be-approved-by", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """to_be_approved_by must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("approver_classifier value",to_be_approved_by.to_be_approved_by, yang_name="to-be-approved-by", module_name="approvals", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver-classifier value'), is_container='list', yang_name="to-be-approved-by", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='list', is_config=True)""",
        })

    self.__to_be_approved_by = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_to_be_approved_by(self):
    self.__to_be_approved_by = YANGDynClass(base=YANGListType("approver_classifier value",to_be_approved_by.to_be_approved_by, yang_name="to-be-approved-by", module_name="approvals", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver-classifier value'), is_container='list', yang_name="to-be-approved-by", module_name="approvals", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/approvals', defining_module='approvals', yang_type='list', is_config=True)

  task_classifier = __builtin__.property(_get_task_classifier, _set_task_classifier)
  value = __builtin__.property(_get_value, _set_value)
  to_be_approved_by = __builtin__.property(_get_to_be_approved_by, _set_to_be_approved_by)


  _pyangbind_elements = collections.OrderedDict([('task_classifier', task_classifier), ('value', value), ('to_be_approved_by', to_be_approved_by), ])


