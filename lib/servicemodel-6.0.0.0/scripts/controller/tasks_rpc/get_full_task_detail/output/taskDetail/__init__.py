
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class taskDetail(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tasks - based on the path /tasks_rpc/get-full-task-detail/output/taskDetail. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__status','__startTime','__endTime','__expiryTime','__percentComplete','__operationName','__component','__message','__userName','__taskActions','__taskDetails','__commandLog',)

  _yang_name = 'taskDetail'
  _module_name = 'tasks'
  _namespace = 'http://anutanetworks.com/tasks'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    self.__userName = YANGDynClass(base=unicode, is_leaf=True, yang_name="userName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__component = YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__operationName = YANGDynClass(base=unicode, is_leaf=True, yang_name="operationName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__expiryTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="expiryTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    self.__percentComplete = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="percentComplete", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int8', is_config=True)
    self.__startTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="startTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    self.__taskActions = YANGDynClass(base=unicode, is_leaf=True, yang_name="taskActions", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__endTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="endTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    self.__taskDetails = YANGDynClass(base=unicode, is_leaf=True, yang_name="taskDetails", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__commandLog = YANGDynClass(base=unicode, is_leaf=True, yang_name="commandLog", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tasks_rpc', u'get-full-task-detail', u'output', u'taskDetail']

  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/status (ncx-types:taskstatus-enum)

    YANG Description: NOT_STARTED
IN_PROGRESS
VALIDATED
RESERVE_RESOURCES_FAILED
RESOURCES_RESERVED
RESERVE_OPERATIONAL_RESOURCES_FAILED
OPERATIONAL_RESOURCES_RESERVED
OPERATIONAL_RESOURCES_UNRESERVED
PROVISION_RESOURCES_FAILED
RESOURCES_PROVISIONED
SCHEDULED_FOR_PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/status (ncx-types:taskstatus-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: NOT_STARTED
IN_PROGRESS
VALIDATED
RESERVE_RESOURCES_FAILED
RESOURCES_RESERVED
RESERVE_OPERATIONAL_RESOURCES_FAILED
OPERATIONAL_RESOURCES_RESERVED
OPERATIONAL_RESOURCES_UNRESERVED
PROVISION_RESOURCES_FAILED
RESOURCES_PROVISIONED
SCHEDULED_FOR_PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with ncx-types:taskstatus-enum""",
          'defined-type': "ncx-types:taskstatus-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)


  def _get_startTime(self):
    """
    Getter method for startTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/startTime (int64)

    YANG Description: -9223372036854775808..9223372036854775807
    """
    return self.__startTime
      
  def _set_startTime(self, v, load=False):
    """
    Setter method for startTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/startTime (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_startTime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_startTime() directly.

    YANG Description: -9223372036854775808..9223372036854775807
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="startTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """startTime must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="startTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)""",
        })

    self.__startTime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_startTime(self):
    self.__startTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="startTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)


  def _get_endTime(self):
    """
    Getter method for endTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/endTime (int64)

    YANG Description: -9223372036854775808..9223372036854775807
    """
    return self.__endTime
      
  def _set_endTime(self, v, load=False):
    """
    Setter method for endTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/endTime (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_endTime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_endTime() directly.

    YANG Description: -9223372036854775808..9223372036854775807
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="endTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """endTime must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="endTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)""",
        })

    self.__endTime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_endTime(self):
    self.__endTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="endTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)


  def _get_expiryTime(self):
    """
    Getter method for expiryTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/expiryTime (int64)

    YANG Description: -9223372036854775808..9223372036854775807
    """
    return self.__expiryTime
      
  def _set_expiryTime(self, v, load=False):
    """
    Setter method for expiryTime, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/expiryTime (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_expiryTime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_expiryTime() directly.

    YANG Description: -9223372036854775808..9223372036854775807
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="expiryTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """expiryTime must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="expiryTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)""",
        })

    self.__expiryTime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_expiryTime(self):
    self.__expiryTime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="expiryTime", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int64', is_config=True)


  def _get_percentComplete(self):
    """
    Getter method for percentComplete, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/percentComplete (int8)

    YANG Description: -128..127
    """
    return self.__percentComplete
      
  def _set_percentComplete(self, v, load=False):
    """
    Setter method for percentComplete, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/percentComplete (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_percentComplete is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_percentComplete() directly.

    YANG Description: -128..127
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="percentComplete", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """percentComplete must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="percentComplete", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int8', is_config=True)""",
        })

    self.__percentComplete = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_percentComplete(self):
    self.__percentComplete = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="percentComplete", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='int8', is_config=True)


  def _get_operationName(self):
    """
    Getter method for operationName, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/operationName (string)

    YANG Description: string
    """
    return self.__operationName
      
  def _set_operationName(self, v, load=False):
    """
    Setter method for operationName, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/operationName (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operationName is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operationName() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operationName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operationName must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operationName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__operationName = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operationName(self):
    self.__operationName = YANGDynClass(base=unicode, is_leaf=True, yang_name="operationName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_component(self):
    """
    Getter method for component, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/component (string)

    YANG Description: string
    """
    return self.__component
      
  def _set_component(self, v, load=False):
    """
    Setter method for component, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/component (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__component = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component(self):
    self.__component = YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/message (string)

    YANG Description: string
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_userName(self):
    """
    Getter method for userName, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/userName (string)

    YANG Description: string
    """
    return self.__userName
      
  def _set_userName(self, v, load=False):
    """
    Setter method for userName, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/userName (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_userName is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_userName() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="userName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """userName must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="userName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__userName = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_userName(self):
    self.__userName = YANGDynClass(base=unicode, is_leaf=True, yang_name="userName", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_taskActions(self):
    """
    Getter method for taskActions, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/taskActions (string)

    YANG Description: string
    """
    return self.__taskActions
      
  def _set_taskActions(self, v, load=False):
    """
    Setter method for taskActions, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/taskActions (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_taskActions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_taskActions() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="taskActions", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """taskActions must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="taskActions", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__taskActions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_taskActions(self):
    self.__taskActions = YANGDynClass(base=unicode, is_leaf=True, yang_name="taskActions", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_taskDetails(self):
    """
    Getter method for taskDetails, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/taskDetails (string)

    YANG Description: string
    """
    return self.__taskDetails
      
  def _set_taskDetails(self, v, load=False):
    """
    Setter method for taskDetails, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/taskDetails (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_taskDetails is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_taskDetails() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="taskDetails", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """taskDetails must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="taskDetails", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__taskDetails = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_taskDetails(self):
    self.__taskDetails = YANGDynClass(base=unicode, is_leaf=True, yang_name="taskDetails", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_commandLog(self):
    """
    Getter method for commandLog, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/commandLog (string)

    YANG Description: string
    """
    return self.__commandLog
      
  def _set_commandLog(self, v, load=False):
    """
    Setter method for commandLog, mapped from YANG variable /tasks_rpc/get_full_task_detail/output/taskDetail/commandLog (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_commandLog is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_commandLog() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="commandLog", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """commandLog must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="commandLog", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__commandLog = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_commandLog(self):
    self.__commandLog = YANGDynClass(base=unicode, is_leaf=True, yang_name="commandLog", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)

  status = __builtin__.property(_get_status, _set_status)
  startTime = __builtin__.property(_get_startTime, _set_startTime)
  endTime = __builtin__.property(_get_endTime, _set_endTime)
  expiryTime = __builtin__.property(_get_expiryTime, _set_expiryTime)
  percentComplete = __builtin__.property(_get_percentComplete, _set_percentComplete)
  operationName = __builtin__.property(_get_operationName, _set_operationName)
  component = __builtin__.property(_get_component, _set_component)
  message = __builtin__.property(_get_message, _set_message)
  userName = __builtin__.property(_get_userName, _set_userName)
  taskActions = __builtin__.property(_get_taskActions, _set_taskActions)
  taskDetails = __builtin__.property(_get_taskDetails, _set_taskDetails)
  commandLog = __builtin__.property(_get_commandLog, _set_commandLog)


  _pyangbind_elements = collections.OrderedDict([('status', status), ('startTime', startTime), ('endTime', endTime), ('expiryTime', expiryTime), ('percentComplete', percentComplete), ('operationName', operationName), ('component', component), ('message', message), ('userName', userName), ('taskActions', taskActions), ('taskDetails', taskDetails), ('commandLog', commandLog), ])


