
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import blocked_by
import blocking
class output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tasks - based on the path /tasks_rpc/get-active-task-details/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__task_id','__operation_name','__operation_type','__description','__lock_timestamp','__lock_duration','__lock_attempts','__status','__auto_rollback','__command_generation_disabled','__yang_task_state','__blocked_by','__blocking',)

  _yang_name = 'output'
  _module_name = 'tasks'
  _namespace = 'http://anutanetworks.com/tasks'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'BLOCKED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__command_generation_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="command-generation-disabled", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)
    self.__auto_rollback = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-rollback", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)
    self.__yang_task_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="yang-task-state", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)
    self.__lock_attempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lock-attempts", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint32', is_config=False)
    self.__lock_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-duration", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    self.__lock_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-timestamp", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    self.__blocking = YANGDynClass(base=blocking.blocking, is_container='container', yang_name="blocking", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)
    self.__operation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTION': {}, u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)
    self.__blocked_by = YANGDynClass(base=blocked_by.blocked_by, is_container='container', yang_name="blocked-by", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tasks_rpc', u'get-active-task-details', u'output']

  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /tasks_rpc/get_active_task_details/output/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /tasks_rpc/get_active_task_details/output/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_operation_name(self):
    """
    Getter method for operation_name, mapped from YANG variable /tasks_rpc/get_active_task_details/output/operation_name (string)

    YANG Description: string
    """
    return self.__operation_name
      
  def _set_operation_name(self, v, load=False):
    """
    Setter method for operation_name, mapped from YANG variable /tasks_rpc/get_active_task_details/output/operation_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)""",
        })

    self.__operation_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_name(self):
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)


  def _get_operation_type(self):
    """
    Getter method for operation_type, mapped from YANG variable /tasks_rpc/get_active_task_details/output/operation_type (enumeration)

    YANG Description: CREATE
UPDATE
DELETE
ACTION

    """
    return self.__operation_type
      
  def _set_operation_type(self, v, load=False):
    """
    Setter method for operation_type, mapped from YANG variable /tasks_rpc/get_active_task_details/output/operation_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_type() directly.

    YANG Description: CREATE
UPDATE
DELETE
ACTION

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTION': {}, u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_type must be of a type compatible with enumeration""",
          'defined-type': "tasks:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTION': {}, u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)""",
        })

    self.__operation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_type(self):
    self.__operation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTION': {}, u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /tasks_rpc/get_active_task_details/output/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /tasks_rpc/get_active_task_details/output/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_lock_timestamp(self):
    """
    Getter method for lock_timestamp, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_timestamp (uint64)

    YANG Description: 0..18446744073709551615
    """
    return self.__lock_timestamp
      
  def _set_lock_timestamp(self, v, load=False):
    """
    Setter method for lock_timestamp, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_timestamp (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lock_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lock_timestamp() directly.

    YANG Description: 0..18446744073709551615
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-timestamp", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lock_timestamp must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-timestamp", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)""",
        })

    self.__lock_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lock_timestamp(self):
    self.__lock_timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-timestamp", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)


  def _get_lock_duration(self):
    """
    Getter method for lock_duration, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_duration (uint64)

    YANG Description: 0..18446744073709551615
    """
    return self.__lock_duration
      
  def _set_lock_duration(self, v, load=False):
    """
    Setter method for lock_duration, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_duration (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lock_duration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lock_duration() directly.

    YANG Description: 0..18446744073709551615
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-duration", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lock_duration must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-duration", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)""",
        })

    self.__lock_duration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lock_duration(self):
    self.__lock_duration = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lock-duration", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)


  def _get_lock_attempts(self):
    """
    Getter method for lock_attempts, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_attempts (uint32)

    YANG Description: 0..4294967295
    """
    return self.__lock_attempts
      
  def _set_lock_attempts(self, v, load=False):
    """
    Setter method for lock_attempts, mapped from YANG variable /tasks_rpc/get_active_task_details/output/lock_attempts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lock_attempts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lock_attempts() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lock-attempts", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lock_attempts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lock-attempts", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint32', is_config=False)""",
        })

    self.__lock_attempts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lock_attempts(self):
    self.__lock_attempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lock-attempts", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint32', is_config=False)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /tasks_rpc/get_active_task_details/output/status (enumeration)

    YANG Description: BLOCKED
ACTIVE

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /tasks_rpc/get_active_task_details/output/status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: BLOCKED
ACTIVE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'BLOCKED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with enumeration""",
          'defined-type': "tasks:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'BLOCKED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'BLOCKED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=False)


  def _get_auto_rollback(self):
    """
    Getter method for auto_rollback, mapped from YANG variable /tasks_rpc/get_active_task_details/output/auto_rollback (boolean)

    YANG Description: auto-rollback: True/False
    """
    return self.__auto_rollback
      
  def _set_auto_rollback(self, v, load=False):
    """
    Setter method for auto_rollback, mapped from YANG variable /tasks_rpc/get_active_task_details/output/auto_rollback (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_rollback is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_rollback() directly.

    YANG Description: auto-rollback: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="auto-rollback", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_rollback must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-rollback", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)""",
        })

    self.__auto_rollback = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_rollback(self):
    self.__auto_rollback = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-rollback", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)


  def _get_command_generation_disabled(self):
    """
    Getter method for command_generation_disabled, mapped from YANG variable /tasks_rpc/get_active_task_details/output/command_generation_disabled (boolean)

    YANG Description: command-generation-disabled: True/False
    """
    return self.__command_generation_disabled
      
  def _set_command_generation_disabled(self, v, load=False):
    """
    Setter method for command_generation_disabled, mapped from YANG variable /tasks_rpc/get_active_task_details/output/command_generation_disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_generation_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_generation_disabled() directly.

    YANG Description: command-generation-disabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="command-generation-disabled", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_generation_disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="command-generation-disabled", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)""",
        })

    self.__command_generation_disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_generation_disabled(self):
    self.__command_generation_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="command-generation-disabled", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=True)


  def _get_yang_task_state(self):
    """
    Getter method for yang_task_state, mapped from YANG variable /tasks_rpc/get_active_task_details/output/yang_task_state (string)

    YANG Description: string
    """
    return self.__yang_task_state
      
  def _set_yang_task_state(self, v, load=False):
    """
    Setter method for yang_task_state, mapped from YANG variable /tasks_rpc/get_active_task_details/output/yang_task_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_yang_task_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_yang_task_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="yang-task-state", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """yang_task_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="yang-task-state", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)""",
        })

    self.__yang_task_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_yang_task_state(self):
    self.__yang_task_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="yang-task-state", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=False)


  def _get_blocked_by(self):
    """
    Getter method for blocked_by, mapped from YANG variable /tasks_rpc/get_active_task_details/output/blocked_by (container)
    """
    return self.__blocked_by
      
  def _set_blocked_by(self, v, load=False):
    """
    Setter method for blocked_by, mapped from YANG variable /tasks_rpc/get_active_task_details/output/blocked_by (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_blocked_by is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_blocked_by() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=blocked_by.blocked_by, is_container='container', yang_name="blocked-by", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """blocked_by must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=blocked_by.blocked_by, is_container='container', yang_name="blocked-by", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)""",
        })

    self.__blocked_by = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_blocked_by(self):
    self.__blocked_by = YANGDynClass(base=blocked_by.blocked_by, is_container='container', yang_name="blocked-by", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)


  def _get_blocking(self):
    """
    Getter method for blocking, mapped from YANG variable /tasks_rpc/get_active_task_details/output/blocking (container)
    """
    return self.__blocking
      
  def _set_blocking(self, v, load=False):
    """
    Setter method for blocking, mapped from YANG variable /tasks_rpc/get_active_task_details/output/blocking (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_blocking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_blocking() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=blocking.blocking, is_container='container', yang_name="blocking", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """blocking must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=blocking.blocking, is_container='container', yang_name="blocking", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)""",
        })

    self.__blocking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_blocking(self):
    self.__blocking = YANGDynClass(base=blocking.blocking, is_container='container', yang_name="blocking", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='container', is_config=True)

  task_id = __builtin__.property(_get_task_id, _set_task_id)
  operation_name = __builtin__.property(_get_operation_name)
  operation_type = __builtin__.property(_get_operation_type)
  description = __builtin__.property(_get_description, _set_description)
  lock_timestamp = __builtin__.property(_get_lock_timestamp)
  lock_duration = __builtin__.property(_get_lock_duration)
  lock_attempts = __builtin__.property(_get_lock_attempts)
  status = __builtin__.property(_get_status)
  auto_rollback = __builtin__.property(_get_auto_rollback, _set_auto_rollback)
  command_generation_disabled = __builtin__.property(_get_command_generation_disabled, _set_command_generation_disabled)
  yang_task_state = __builtin__.property(_get_yang_task_state)
  blocked_by = __builtin__.property(_get_blocked_by, _set_blocked_by)
  blocking = __builtin__.property(_get_blocking, _set_blocking)


  _pyangbind_elements = collections.OrderedDict([('task_id', task_id), ('operation_name', operation_name), ('operation_type', operation_type), ('description', description), ('lock_timestamp', lock_timestamp), ('lock_duration', lock_duration), ('lock_attempts', lock_attempts), ('status', status), ('auto_rollback', auto_rollback), ('command_generation_disabled', command_generation_disabled), ('yang_task_state', yang_task_state), ('blocked_by', blocked_by), ('blocking', blocking), ])


