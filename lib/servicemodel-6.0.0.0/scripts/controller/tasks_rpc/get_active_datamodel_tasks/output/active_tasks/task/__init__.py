
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class task(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tasks - based on the path /tasks_rpc/get-active-datamodel-tasks/output/active-tasks/task. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__task_id','__operation_name','__component_name','__task_status',)

  _yang_name = 'task'
  _module_name = 'tasks'
  _namespace = 'http://anutanetworks.com/tasks'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__task_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="task-status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__component_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="component-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tasks_rpc', u'get-active-datamodel-tasks', u'output', u'active-tasks', u'task']

  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_operation_name(self):
    """
    Getter method for operation_name, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/operation_name (string)

    YANG Description: string
    """
    return self.__operation_name
      
  def _set_operation_name(self, v, load=False):
    """
    Setter method for operation_name, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/operation_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__operation_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_name(self):
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_component_name(self):
    """
    Getter method for component_name, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/component_name (string)

    YANG Description: string
    """
    return self.__component_name
      
  def _set_component_name(self, v, load=False):
    """
    Setter method for component_name, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/component_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="component-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="component-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__component_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component_name(self):
    self.__component_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="component-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_task_status(self):
    """
    Getter method for task_status, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/task_status (ncx-types:taskstatus-enum)

    YANG Description: NOT_STARTED
IN_PROGRESS
VALIDATED
RESERVE_RESOURCES_FAILED
RESOURCES_RESERVED
RESERVE_OPERATIONAL_RESOURCES_FAILED
OPERATIONAL_RESOURCES_RESERVED
OPERATIONAL_RESOURCES_UNRESERVED
PROVISION_RESOURCES_FAILED
RESOURCES_PROVISIONED
SCHEDULED_FOR_PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    return self.__task_status
      
  def _set_task_status(self, v, load=False):
    """
    Setter method for task_status, mapped from YANG variable /tasks_rpc/get_active_datamodel_tasks/output/active_tasks/task/task_status (ncx-types:taskstatus-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_status() directly.

    YANG Description: NOT_STARTED
IN_PROGRESS
VALIDATED
RESERVE_RESOURCES_FAILED
RESOURCES_RESERVED
RESERVE_OPERATIONAL_RESOURCES_FAILED
OPERATIONAL_RESOURCES_RESERVED
OPERATIONAL_RESOURCES_UNRESERVED
PROVISION_RESOURCES_FAILED
RESOURCES_PROVISIONED
SCHEDULED_FOR_PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="task-status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_status must be of a type compatible with ncx-types:taskstatus-enum""",
          'defined-type': "ncx-types:taskstatus-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="task-status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)""",
        })

    self.__task_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_status(self):
    self.__task_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="task-status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)

  task_id = __builtin__.property(_get_task_id, _set_task_id)
  operation_name = __builtin__.property(_get_operation_name, _set_operation_name)
  component_name = __builtin__.property(_get_component_name, _set_component_name)
  task_status = __builtin__.property(_get_task_status, _set_task_status)


  _pyangbind_elements = collections.OrderedDict([('task_id', task_id), ('operation_name', operation_name), ('component_name', component_name), ('task_status', task_status), ])


