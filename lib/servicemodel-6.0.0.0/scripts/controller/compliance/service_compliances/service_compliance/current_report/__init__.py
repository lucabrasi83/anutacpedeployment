
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import violation
class current_report(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ncx-compliance - based on the path /compliance/service-compliances/service-compliance/current-report. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Store the current compliance status.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__compliance_status','__executed_time','__violation',)

  _yang_name = 'current-report'
  _module_name = 'ncx-compliance'
  _namespace = 'http://anutanetworks.com/ncx-compliance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__violation = YANGDynClass(base=YANGListType("entity",violation.violation, yang_name="violation", module_name="ncx-compliance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entity'), is_container='list', yang_name="violation", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='list', is_config=True)
    self.__compliance_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="compliance-status", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='ncx:compliance-status', is_config=True)
    self.__executed_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="executed-time", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'compliance', u'service-compliances', u'service-compliance', u'current-report']

  def _get_compliance_status(self):
    """
    Getter method for compliance_status, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/compliance_status (ncx:compliance-status)

    YANG Description: Service compliance status. Can be COMPLIANT or NON_COMPLIANT
    """
    return self.__compliance_status
      
  def _set_compliance_status(self, v, load=False):
    """
    Setter method for compliance_status, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/compliance_status (ncx:compliance-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compliance_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compliance_status() directly.

    YANG Description: Service compliance status. Can be COMPLIANT or NON_COMPLIANT
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="compliance-status", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='ncx:compliance-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compliance_status must be of a type compatible with ncx:compliance-status""",
          'defined-type': "ncx:compliance-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="compliance-status", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='ncx:compliance-status', is_config=True)""",
        })

    self.__compliance_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compliance_status(self):
    self.__compliance_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="compliance-status", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='ncx:compliance-status', is_config=True)


  def _get_executed_time(self):
    """
    Getter method for executed_time, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/executed_time (uint64)

    YANG Description: Time at which the check is performed
    """
    return self.__executed_time
      
  def _set_executed_time(self, v, load=False):
    """
    Setter method for executed_time, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/executed_time (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_executed_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_executed_time() directly.

    YANG Description: Time at which the check is performed
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="executed-time", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """executed_time must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="executed-time", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)""",
        })

    self.__executed_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_executed_time(self):
    self.__executed_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="executed-time", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)


  def _get_violation(self):
    """
    Getter method for violation, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/violation (list)

    YANG Description: List of violations if the service is non compliant.
    """
    return self.__violation
      
  def _set_violation(self, v, load=False):
    """
    Setter method for violation, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report/violation (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_violation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_violation() directly.

    YANG Description: List of violations if the service is non compliant.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("entity",violation.violation, yang_name="violation", module_name="ncx-compliance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entity'), is_container='list', yang_name="violation", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """violation must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("entity",violation.violation, yang_name="violation", module_name="ncx-compliance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entity'), is_container='list', yang_name="violation", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='list', is_config=True)""",
        })

    self.__violation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_violation(self):
    self.__violation = YANGDynClass(base=YANGListType("entity",violation.violation, yang_name="violation", module_name="ncx-compliance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entity'), is_container='list', yang_name="violation", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='list', is_config=True)

  compliance_status = __builtin__.property(_get_compliance_status, _set_compliance_status)
  executed_time = __builtin__.property(_get_executed_time, _set_executed_time)
  violation = __builtin__.property(_get_violation, _set_violation)


  _pyangbind_elements = collections.OrderedDict([('compliance_status', compliance_status), ('executed_time', executed_time), ('violation', violation), ])


