
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import current_report
class service_compliance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module ncx-compliance - based on the path /compliance/service-compliances/service-compliance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__service_rc_path','__last_compliance_success','__current_report',)

  _yang_name = 'service-compliance'
  _module_name = 'ncx-compliance'
  _namespace = 'http://anutanetworks.com/ncx-compliance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__last_compliance_success = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-compliance-success", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)
    self.__current_report = YANGDynClass(base=current_report.current_report, is_container='container', yang_name="current-report", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='container', is_config=True)
    self.__service_rc_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-rc-path", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'compliance', u'service-compliances', u'service-compliance']

  def _get_service_rc_path(self):
    """
    Getter method for service_rc_path, mapped from YANG variable /compliance/service_compliances/service_compliance/service_rc_path (string)

    YANG Description: Resource path of the service
    """
    return self.__service_rc_path
      
  def _set_service_rc_path(self, v, load=False):
    """
    Setter method for service_rc_path, mapped from YANG variable /compliance/service_compliances/service_compliance/service_rc_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_rc_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_rc_path() directly.

    YANG Description: Resource path of the service
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="service-rc-path", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_rc_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="service-rc-path", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='string', is_config=True)""",
        })

    self.__service_rc_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_rc_path(self):
    self.__service_rc_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-rc-path", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='string', is_config=True)


  def _get_last_compliance_success(self):
    """
    Getter method for last_compliance_success, mapped from YANG variable /compliance/service_compliances/service_compliance/last_compliance_success (uint64)

    YANG Description: Time at which the service was last compliant.
    """
    return self.__last_compliance_success
      
  def _set_last_compliance_success(self, v, load=False):
    """
    Setter method for last_compliance_success, mapped from YANG variable /compliance/service_compliances/service_compliance/last_compliance_success (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_compliance_success is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_compliance_success() directly.

    YANG Description: Time at which the service was last compliant.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-compliance-success", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_compliance_success must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-compliance-success", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)""",
        })

    self.__last_compliance_success = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_compliance_success(self):
    self.__last_compliance_success = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="last-compliance-success", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='uint64', is_config=True)


  def _get_current_report(self):
    """
    Getter method for current_report, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report (container)

    YANG Description: Store the current compliance status.
    """
    return self.__current_report
      
  def _set_current_report(self, v, load=False):
    """
    Setter method for current_report, mapped from YANG variable /compliance/service_compliances/service_compliance/current_report (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_report is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_report() directly.

    YANG Description: Store the current compliance status.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=current_report.current_report, is_container='container', yang_name="current-report", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_report must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=current_report.current_report, is_container='container', yang_name="current-report", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='container', is_config=True)""",
        })

    self.__current_report = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_report(self):
    self.__current_report = YANGDynClass(base=current_report.current_report, is_container='container', yang_name="current-report", module_name="ncx-compliance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/ncx-compliance', defining_module='ncx-compliance', yang_type='container', is_config=True)

  service_rc_path = __builtin__.property(_get_service_rc_path, _set_service_rc_path)
  last_compliance_success = __builtin__.property(_get_last_compliance_success, _set_last_compliance_success)
  current_report = __builtin__.property(_get_current_report, _set_current_report)


  _pyangbind_elements = collections.OrderedDict([('service_rc_path', service_rc_path), ('last_compliance_success', last_compliance_success), ('current_report', current_report), ])


