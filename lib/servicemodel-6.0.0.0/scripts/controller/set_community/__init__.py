
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class set_community(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module testModule - based on the path /set-community. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: action to set the community attributes of the route, along
with options to modify how the community is modified
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__communities','__community_set_ref','__options',)

  _yang_name = 'set-community'
  _module_name = 'testModule'
  _namespace = 'http://anutanetworks.com/testModule'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__communities = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'65536..4294901759']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'([0-9]+:[0-9]+)'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NO_ADVERTISE': {}, u'NO_EXPORT': {}, u'NO_EXPORT_SUBCONFED': {}, u'INTERNET': {}},),]), is_leaf=False, yang_name="communities", module_name="testModule", parent=self, choice=(u'set-community-method', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='union', is_config=True)
    self.__community_set_ref = YANGDynClass(base=unicode, is_leaf=True, yang_name="community-set-ref", module_name="testModule", parent=self, choice=(u'set-community-method', u'reference'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='string', is_config=True)
    self.__options = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ADD': {}, u'REMOVE': {}, u'REPLACE': {}},), is_leaf=True, yang_name="options", module_name="testModule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='bgp-set-community-option-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'set-community']

  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /set_community/communities (union)

    YANG Description: Set the community values for the update inline with
a list.
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /set_community/communities (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.

    YANG Description: Set the community values for the update inline with
a list.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'65536..4294901759']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'([0-9]+:[0-9]+)'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NO_ADVERTISE': {}, u'NO_EXPORT': {}, u'NO_EXPORT_SUBCONFED': {}, u'INTERNET': {}},),]), is_leaf=False, yang_name="communities", module_name="testModule", parent=self, choice=(u'set-community-method', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with union""",
          'defined-type': "testModule:union",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'65536..4294901759']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'([0-9]+:[0-9]+)'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NO_ADVERTISE': {}, u'NO_EXPORT': {}, u'NO_EXPORT_SUBCONFED': {}, u'INTERNET': {}},),]), is_leaf=False, yang_name="communities", module_name="testModule", parent=self, choice=(u'set-community-method', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='union', is_config=True)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=TypedListType(allowed_type=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'65536..4294901759']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'([0-9]+:[0-9]+)'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NO_ADVERTISE': {}, u'NO_EXPORT': {}, u'NO_EXPORT_SUBCONFED': {}, u'INTERNET': {}},),]), is_leaf=False, yang_name="communities", module_name="testModule", parent=self, choice=(u'set-community-method', u'inline'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='union', is_config=True)


  def _get_community_set_ref(self):
    """
    Getter method for community_set_ref, mapped from YANG variable /set_community/community_set_ref (string)

    YANG Description: References a defined community set by name
    """
    return self.__community_set_ref
      
  def _set_community_set_ref(self, v, load=False):
    """
    Setter method for community_set_ref, mapped from YANG variable /set_community/community_set_ref (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_set_ref is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_set_ref() directly.

    YANG Description: References a defined community set by name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community-set-ref", module_name="testModule", parent=self, choice=(u'set-community-method', u'reference'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_set_ref must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community-set-ref", module_name="testModule", parent=self, choice=(u'set-community-method', u'reference'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='string', is_config=True)""",
        })

    self.__community_set_ref = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_set_ref(self):
    self.__community_set_ref = YANGDynClass(base=unicode, is_leaf=True, yang_name="community-set-ref", module_name="testModule", parent=self, choice=(u'set-community-method', u'reference'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='string', is_config=True)


  def _get_options(self):
    """
    Getter method for options, mapped from YANG variable /set_community/options (bgp-set-community-option-type)

    YANG Description: Options for modifying the community attribute with
the specified values.  These options apply to both
methods of setting the community attribute.
    """
    return self.__options
      
  def _set_options(self, v, load=False):
    """
    Setter method for options, mapped from YANG variable /set_community/options (bgp-set-community-option-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_options() directly.

    YANG Description: Options for modifying the community attribute with
the specified values.  These options apply to both
methods of setting the community attribute.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ADD': {}, u'REMOVE': {}, u'REPLACE': {}},), is_leaf=True, yang_name="options", module_name="testModule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='bgp-set-community-option-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """options must be of a type compatible with bgp-set-community-option-type""",
          'defined-type': "testModule:bgp-set-community-option-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ADD': {}, u'REMOVE': {}, u'REPLACE': {}},), is_leaf=True, yang_name="options", module_name="testModule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='bgp-set-community-option-type', is_config=True)""",
        })

    self.__options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_options(self):
    self.__options = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ADD': {}, u'REMOVE': {}, u'REPLACE': {}},), is_leaf=True, yang_name="options", module_name="testModule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/testModule', defining_module='testModule', yang_type='bgp-set-community-option-type', is_config=True)

  communities = __builtin__.property(_get_communities, _set_communities)
  community_set_ref = __builtin__.property(_get_community_set_ref, _set_community_set_ref)
  options = __builtin__.property(_get_options, _set_options)

  __choices__ = {u'set-community-method': {u'inline': [u'communities'], u'reference': [u'community_set_ref']}}
  _pyangbind_elements = collections.OrderedDict([('communities', communities), ('community_set_ref', community_set_ref), ('options', options), ])


