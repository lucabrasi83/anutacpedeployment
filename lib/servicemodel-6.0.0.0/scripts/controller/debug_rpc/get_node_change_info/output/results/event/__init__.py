
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class event(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module debug - based on the path /debug_rpc/get-node-change-info/output/results/event. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__seq','__node_id','__rcpath','__task_id','__previous_value','__current_value','__mfd','__base_node_id','__change_type',)

  _yang_name = 'event'
  _module_name = 'debug'
  _namespace = 'http://anutanetworks.com/debug'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mfd", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='boolean', is_config=True)
    self.__seq = YANGDynClass(base=unicode, is_leaf=True, yang_name="seq", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__current_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="current-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__change_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="change-type", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='change-type-enum', is_config=True)
    self.__base_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="base-node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__previous_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="previous-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    self.__rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'debug_rpc', u'get-node-change-info', u'output', u'results', u'event']

  def _get_seq(self):
    """
    Getter method for seq, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/seq (string)

    YANG Description: string
    """
    return self.__seq
      
  def _set_seq(self, v, load=False):
    """
    Setter method for seq, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/seq (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="seq", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="seq", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__seq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq(self):
    self.__seq = YANGDynClass(base=unicode, is_leaf=True, yang_name="seq", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_node_id(self):
    """
    Getter method for node_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/node_id (string)

    YANG Description: string
    """
    return self.__node_id
      
  def _set_node_id(self, v, load=False):
    """
    Setter method for node_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/node_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__node_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_id(self):
    self.__node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_rcpath(self):
    """
    Getter method for rcpath, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/rcpath (string)

    YANG Description: string
    """
    return self.__rcpath
      
  def _set_rcpath(self, v, load=False):
    """
    Setter method for rcpath, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/rcpath (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rcpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rcpath() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rcpath", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rcpath must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__rcpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rcpath(self):
    self.__rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="rcpath", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_previous_value(self):
    """
    Getter method for previous_value, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/previous_value (string)

    YANG Description: string
    """
    return self.__previous_value
      
  def _set_previous_value(self, v, load=False):
    """
    Setter method for previous_value, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/previous_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_previous_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_previous_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="previous-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """previous_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="previous-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__previous_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_previous_value(self):
    self.__previous_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="previous-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_current_value(self):
    """
    Getter method for current_value, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/current_value (string)

    YANG Description: string
    """
    return self.__current_value
      
  def _set_current_value(self, v, load=False):
    """
    Setter method for current_value, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/current_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="current-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="current-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__current_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_value(self):
    self.__current_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="current-value", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_mfd(self):
    """
    Getter method for mfd, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/mfd (boolean)

    YANG Description: mfd: True/False
    """
    return self.__mfd
      
  def _set_mfd(self, v, load=False):
    """
    Setter method for mfd, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/mfd (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mfd() directly.

    YANG Description: mfd: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mfd", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mfd must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mfd", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='boolean', is_config=True)""",
        })

    self.__mfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mfd(self):
    self.__mfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mfd", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='boolean', is_config=True)


  def _get_base_node_id(self):
    """
    Getter method for base_node_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/base_node_id (string)

    YANG Description: string
    """
    return self.__base_node_id
      
  def _set_base_node_id(self, v, load=False):
    """
    Setter method for base_node_id, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/base_node_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_base_node_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_base_node_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="base-node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """base_node_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="base-node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)""",
        })

    self.__base_node_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_base_node_id(self):
    self.__base_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="base-node-id", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='string', is_config=True)


  def _get_change_type(self):
    """
    Getter method for change_type, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/change_type (change-type-enum)

    YANG Description: CREATE
DELETE
UPDATE

    """
    return self.__change_type
      
  def _set_change_type(self, v, load=False):
    """
    Setter method for change_type, mapped from YANG variable /debug_rpc/get_node_change_info/output/results/event/change_type (change-type-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_change_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_change_type() directly.

    YANG Description: CREATE
DELETE
UPDATE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="change-type", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='change-type-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """change_type must be of a type compatible with change-type-enum""",
          'defined-type': "debug:change-type-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="change-type", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='change-type-enum', is_config=True)""",
        })

    self.__change_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_change_type(self):
    self.__change_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="change-type", module_name="debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/debug', defining_module='debug', yang_type='change-type-enum', is_config=True)

  seq = __builtin__.property(_get_seq, _set_seq)
  node_id = __builtin__.property(_get_node_id, _set_node_id)
  rcpath = __builtin__.property(_get_rcpath, _set_rcpath)
  task_id = __builtin__.property(_get_task_id, _set_task_id)
  previous_value = __builtin__.property(_get_previous_value, _set_previous_value)
  current_value = __builtin__.property(_get_current_value, _set_current_value)
  mfd = __builtin__.property(_get_mfd, _set_mfd)
  base_node_id = __builtin__.property(_get_base_node_id, _set_base_node_id)
  change_type = __builtin__.property(_get_change_type, _set_change_type)


  _pyangbind_elements = collections.OrderedDict([('seq', seq), ('node_id', node_id), ('rcpath', rcpath), ('task_id', task_id), ('previous_value', previous_value), ('current_value', current_value), ('mfd', mfd), ('base_node_id', base_node_id), ('change_type', change_type), ])


