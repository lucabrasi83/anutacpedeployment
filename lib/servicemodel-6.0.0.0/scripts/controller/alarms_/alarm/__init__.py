
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import alarm_logs
class alarm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarms - based on the path /alarms/alarm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__alarm_id','__message','__description','__alarm_spec_type','__entity','__alarm_state','__acknowledged','__time_of_last_update','__alarm_severity','__last_active','__alarm_spec_name','__alarm_logs',)

  _yang_name = 'alarm'
  _module_name = 'alarms'
  _namespace = 'http://anutanetworks.com/alarms'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__alarm_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'CLEARED': {}},), is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-state', is_config=False)
    self.__alarm_spec_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=False)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__last_active = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-active", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__acknowledged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)
    self.__entity = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__alarm_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    self.__time_of_last_update = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time-of-last-update", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    self.__alarm_logs = YANGDynClass(base=YANGListType("alarm_log_id",alarm_logs.alarm_logs, yang_name="alarm-logs", module_name="alarms", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='alarm-log-id'), is_container='list', yang_name="alarm-logs", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='list', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__alarm_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarms', u'alarm']

  def _get_alarm_id(self):
    """
    Getter method for alarm_id, mapped from YANG variable /alarms/alarm/alarm_id (string)

    YANG Description: string
    """
    return self.__alarm_id
      
  def _set_alarm_id(self, v, load=False):
    """
    Setter method for alarm_id, mapped from YANG variable /alarms/alarm/alarm_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)""",
        })

    self.__alarm_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_id(self):
    self.__alarm_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)


  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /alarms/alarm/message (string)

    YANG Description: string
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /alarms/alarm/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /alarms/alarm/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /alarms/alarm/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_alarm_spec_type(self):
    """
    Getter method for alarm_spec_type, mapped from YANG variable /alarms/alarm/alarm_spec_type (string)

    YANG Description: string
    """
    return self.__alarm_spec_type
      
  def _set_alarm_spec_type(self, v, load=False):
    """
    Setter method for alarm_spec_type, mapped from YANG variable /alarms/alarm/alarm_spec_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_spec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_spec_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_spec_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__alarm_spec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_spec_type(self):
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_entity(self):
    """
    Getter method for entity, mapped from YANG variable /alarms/alarm/entity (string)

    YANG Description: Yang entity, for which alarm is raised
    """
    return self.__entity
      
  def _set_entity(self, v, load=False):
    """
    Setter method for entity, mapped from YANG variable /alarms/alarm/entity (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entity() directly.

    YANG Description: Yang entity, for which alarm is raised
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entity must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__entity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entity(self):
    self.__entity = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_alarm_state(self):
    """
    Getter method for alarm_state, mapped from YANG variable /alarms/alarm/alarm_state (alarm-state)

    YANG Description: Alarm state can be Active or Clear
    """
    return self.__alarm_state
      
  def _set_alarm_state(self, v, load=False):
    """
    Setter method for alarm_state, mapped from YANG variable /alarms/alarm/alarm_state (alarm-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_state() directly.

    YANG Description: Alarm state can be Active or Clear
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'CLEARED': {}},), is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_state must be of a type compatible with alarm-state""",
          'defined-type': "alarms:alarm-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'CLEARED': {}},), is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-state', is_config=False)""",
        })

    self.__alarm_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_state(self):
    self.__alarm_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE': {}, u'CLEARED': {}},), is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-state', is_config=False)


  def _get_acknowledged(self):
    """
    Getter method for acknowledged, mapped from YANG variable /alarms/alarm/acknowledged (boolean)

    YANG Description: acknowledged: True/False
    """
    return self.__acknowledged
      
  def _set_acknowledged(self, v, load=False):
    """
    Setter method for acknowledged, mapped from YANG variable /alarms/alarm/acknowledged (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acknowledged is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acknowledged() directly.

    YANG Description: acknowledged: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acknowledged must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)""",
        })

    self.__acknowledged = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acknowledged(self):
    self.__acknowledged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)


  def _get_time_of_last_update(self):
    """
    Getter method for time_of_last_update, mapped from YANG variable /alarms/alarm/time_of_last_update (yang:date-and-time)

    YANG Description: string
    """
    return self.__time_of_last_update
      
  def _set_time_of_last_update(self, v, load=False):
    """
    Setter method for time_of_last_update, mapped from YANG variable /alarms/alarm/time_of_last_update (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_of_last_update is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_of_last_update() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time-of-last-update", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_of_last_update must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time-of-last-update", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__time_of_last_update = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_of_last_update(self):
    self.__time_of_last_update = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time-of-last-update", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)


  def _get_alarm_severity(self):
    """
    Getter method for alarm_severity, mapped from YANG variable /alarms/alarm/alarm_severity (alarm-severity)

    YANG Description: CRITICAL
MAJOR
WARNING
MINOR
INFO

    """
    return self.__alarm_severity
      
  def _set_alarm_severity(self, v, load=False):
    """
    Setter method for alarm_severity, mapped from YANG variable /alarms/alarm/alarm_severity (alarm-severity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_severity() directly.

    YANG Description: CRITICAL
MAJOR
WARNING
MINOR
INFO

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_severity must be of a type compatible with alarm-severity""",
          'defined-type': "alarms:alarm-severity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=False)""",
        })

    self.__alarm_severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_severity(self):
    self.__alarm_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INFO': {}, u'MAJOR': {}, u'CRITICAL': {}, u'WARNING': {}, u'MINOR': {}},), is_leaf=True, yang_name="alarm-severity", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='alarm-severity', is_config=False)


  def _get_last_active(self):
    """
    Getter method for last_active, mapped from YANG variable /alarms/alarm/last_active (yang:date-and-time)

    YANG Description: string
    """
    return self.__last_active
      
  def _set_last_active(self, v, load=False):
    """
    Setter method for last_active, mapped from YANG variable /alarms/alarm/last_active (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_active() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-active", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_active must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-active", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__last_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_active(self):
    self.__last_active = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="last-active", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)


  def _get_alarm_spec_name(self):
    """
    Getter method for alarm_spec_name, mapped from YANG variable /alarms/alarm/alarm_spec_name (leafref)

    YANG Description: alarm-spec-name
    """
    return self.__alarm_spec_name
      
  def _set_alarm_spec_name(self, v, load=False):
    """
    Setter method for alarm_spec_name, mapped from YANG variable /alarms/alarm/alarm_spec_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_spec_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_spec_name() directly.

    YANG Description: alarm-spec-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_spec_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=False)""",
        })

    self.__alarm_spec_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_spec_name(self):
    self.__alarm_spec_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-name", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='leafref', is_config=False)


  def _get_alarm_logs(self):
    """
    Getter method for alarm_logs, mapped from YANG variable /alarms/alarm/alarm_logs (list)
    """
    return self.__alarm_logs
      
  def _set_alarm_logs(self, v, load=False):
    """
    Setter method for alarm_logs, mapped from YANG variable /alarms/alarm/alarm_logs (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_logs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_logs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("alarm_log_id",alarm_logs.alarm_logs, yang_name="alarm-logs", module_name="alarms", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='alarm-log-id'), is_container='list', yang_name="alarm-logs", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_logs must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("alarm_log_id",alarm_logs.alarm_logs, yang_name="alarm-logs", module_name="alarms", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='alarm-log-id'), is_container='list', yang_name="alarm-logs", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='list', is_config=True)""",
        })

    self.__alarm_logs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_logs(self):
    self.__alarm_logs = YANGDynClass(base=YANGListType("alarm_log_id",alarm_logs.alarm_logs, yang_name="alarm-logs", module_name="alarms", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='alarm-log-id'), is_container='list', yang_name="alarm-logs", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='list', is_config=True)

  alarm_id = __builtin__.property(_get_alarm_id, _set_alarm_id)
  message = __builtin__.property(_get_message)
  description = __builtin__.property(_get_description)
  alarm_spec_type = __builtin__.property(_get_alarm_spec_type)
  entity = __builtin__.property(_get_entity)
  alarm_state = __builtin__.property(_get_alarm_state)
  acknowledged = __builtin__.property(_get_acknowledged, _set_acknowledged)
  time_of_last_update = __builtin__.property(_get_time_of_last_update)
  alarm_severity = __builtin__.property(_get_alarm_severity)
  last_active = __builtin__.property(_get_last_active)
  alarm_spec_name = __builtin__.property(_get_alarm_spec_name)
  alarm_logs = __builtin__.property(_get_alarm_logs, _set_alarm_logs)


  _pyangbind_elements = collections.OrderedDict([('alarm_id', alarm_id), ('message', message), ('description', description), ('alarm_spec_type', alarm_spec_type), ('entity', entity), ('alarm_state', alarm_state), ('acknowledged', acknowledged), ('time_of_last_update', time_of_last_update), ('alarm_severity', alarm_severity), ('last_active', last_active), ('alarm_spec_name', alarm_spec_name), ('alarm_logs', alarm_logs), ])


