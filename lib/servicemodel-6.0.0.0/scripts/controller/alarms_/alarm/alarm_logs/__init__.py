
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class alarm_logs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module alarms - based on the path /alarms/alarm/alarm-logs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__alarm_log_id','__time','__alarm_state','__acknowledged','__message','__alarm_id',)

  _yang_name = 'alarm-logs'
  _module_name = 'alarms'
  _namespace = 'http://anutanetworks.com/alarms'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__alarm_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__acknowledged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)
    self.__alarm_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    self.__time = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    self.__alarm_log_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-log-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'alarms', u'alarm', u'alarm-logs']

  def _get_alarm_log_id(self):
    """
    Getter method for alarm_log_id, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_log_id (string)

    YANG Description: string
    """
    return self.__alarm_log_id
      
  def _set_alarm_log_id(self, v, load=False):
    """
    Setter method for alarm_log_id, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_log_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_log_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_log_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-log-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_log_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-log-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)""",
        })

    self.__alarm_log_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_log_id(self):
    self.__alarm_log_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-log-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=True)


  def _get_time(self):
    """
    Getter method for time, mapped from YANG variable /alarms/alarm/alarm_logs/time (yang:date-and-time)

    YANG Description: string
    """
    return self.__time
      
  def _set_time(self, v, load=False):
    """
    Setter method for time, mapped from YANG variable /alarms/alarm/alarm_logs/time (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time(self):
    self.__time = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="time", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='yang:date-and-time', is_config=False)


  def _get_alarm_state(self):
    """
    Getter method for alarm_state, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_state (string)

    YANG Description: string
    """
    return self.__alarm_state
      
  def _set_alarm_state(self, v, load=False):
    """
    Setter method for alarm_state, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__alarm_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_state(self):
    self.__alarm_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-state", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_acknowledged(self):
    """
    Getter method for acknowledged, mapped from YANG variable /alarms/alarm/alarm_logs/acknowledged (boolean)

    YANG Description: acknowledged: True/False
    """
    return self.__acknowledged
      
  def _set_acknowledged(self, v, load=False):
    """
    Setter method for acknowledged, mapped from YANG variable /alarms/alarm/alarm_logs/acknowledged (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acknowledged is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acknowledged() directly.

    YANG Description: acknowledged: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acknowledged must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)""",
        })

    self.__acknowledged = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acknowledged(self):
    self.__acknowledged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="acknowledged", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='boolean', is_config=True)


  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /alarms/alarm/alarm_logs/message (string)

    YANG Description: string
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /alarms/alarm/alarm_logs/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)


  def _get_alarm_id(self):
    """
    Getter method for alarm_id, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_id (string)

    YANG Description: string
    """
    return self.__alarm_id
      
  def _set_alarm_id(self, v, load=False):
    """
    Setter method for alarm_id, mapped from YANG variable /alarms/alarm/alarm_logs/alarm_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)""",
        })

    self.__alarm_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_id(self):
    self.__alarm_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-id", module_name="alarms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/alarms', defining_module='alarms', yang_type='string', is_config=False)

  alarm_log_id = __builtin__.property(_get_alarm_log_id, _set_alarm_log_id)
  time = __builtin__.property(_get_time)
  alarm_state = __builtin__.property(_get_alarm_state)
  acknowledged = __builtin__.property(_get_acknowledged, _set_acknowledged)
  message = __builtin__.property(_get_message)
  alarm_id = __builtin__.property(_get_alarm_id)


  _pyangbind_elements = collections.OrderedDict([('alarm_log_id', alarm_log_id), ('time', time), ('alarm_state', alarm_state), ('acknowledged', acknowledged), ('message', message), ('alarm_id', alarm_id), ])


