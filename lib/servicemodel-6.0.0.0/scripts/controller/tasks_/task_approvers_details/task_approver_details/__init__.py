
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import appover_info
class task_approver_details(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tasks - based on the path /tasks/task-approvers-details/task-approver-details. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__task_id','__operation_name','__component','__policy_name','__approval_policy_type','__operation_type','__escalation_threshold','__time_to_escalate','__event_published','__appover_info',)

  _yang_name = 'task-approver-details'
  _module_name = 'tasks'
  _namespace = 'http://anutanetworks.com/tasks'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__appover_info = YANGDynClass(base=YANGListType("approver",appover_info.appover_info, yang_name="appover-info", module_name="tasks", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver'), is_container='list', yang_name="appover-info", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='list', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__time_to_escalate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-to-escalate", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    self.__event_published = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="event-published", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=False)
    self.__component = YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__approval_policy_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="approval-policy-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='sm:policy-type', is_config=True)
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__operation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=True)
    self.__escalation_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint16', is_config=True)
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tasks', u'task-approvers-details', u'task-approver-details']

  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_operation_name(self):
    """
    Getter method for operation_name, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/operation_name (string)

    YANG Description: Name of Operation
    """
    return self.__operation_name
      
  def _set_operation_name(self, v, load=False):
    """
    Setter method for operation_name, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/operation_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_name() directly.

    YANG Description: Name of Operation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__operation_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_name(self):
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_component(self):
    """
    Getter method for component, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/component (string)

    YANG Description: Name of Component
    """
    return self.__component
      
  def _set_component(self, v, load=False):
    """
    Setter method for component, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/component (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_component is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_component() directly.

    YANG Description: Name of Component
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """component must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__component = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_component(self):
    self.__component = YANGDynClass(base=unicode, is_leaf=True, yang_name="component", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_policy_name(self):
    """
    Getter method for policy_name, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/policy_name (string)

    YANG Description: string
    """
    return self.__policy_name
      
  def _set_policy_name(self, v, load=False):
    """
    Setter method for policy_name, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/policy_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="policy-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__policy_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_name(self):
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_approval_policy_type(self):
    """
    Getter method for approval_policy_type, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/approval_policy_type (sm:policy-type)

    YANG Description: Type of Policy
    """
    return self.__approval_policy_type
      
  def _set_approval_policy_type(self, v, load=False):
    """
    Setter method for approval_policy_type, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/approval_policy_type (sm:policy-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_approval_policy_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_approval_policy_type() directly.

    YANG Description: Type of Policy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="approval-policy-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='sm:policy-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """approval_policy_type must be of a type compatible with sm:policy-type""",
          'defined-type': "sm:policy-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="approval-policy-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='sm:policy-type', is_config=True)""",
        })

    self.__approval_policy_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_approval_policy_type(self):
    self.__approval_policy_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="approval-policy-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='sm:policy-type', is_config=True)


  def _get_operation_type(self):
    """
    Getter method for operation_type, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/operation_type (enumeration)

    YANG Description: CREATE
UPDATE
DELETE

    """
    return self.__operation_type
      
  def _set_operation_type(self, v, load=False):
    """
    Setter method for operation_type, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/operation_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_type() directly.

    YANG Description: CREATE
UPDATE
DELETE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_type must be of a type compatible with enumeration""",
          'defined-type': "tasks:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=True)""",
        })

    self.__operation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_type(self):
    self.__operation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'DELETE': {}},), is_leaf=True, yang_name="operation-type", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='enumeration', is_config=True)


  def _get_escalation_threshold(self):
    """
    Getter method for escalation_threshold, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/escalation_threshold (uint16)

    YANG Description: Number of days to wait before escalating
    """
    return self.__escalation_threshold
      
  def _set_escalation_threshold(self, v, load=False):
    """
    Setter method for escalation_threshold, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/escalation_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_escalation_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_escalation_threshold() directly.

    YANG Description: Number of days to wait before escalating
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """escalation_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint16', is_config=True)""",
        })

    self.__escalation_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_escalation_threshold(self):
    self.__escalation_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint16', is_config=True)


  def _get_time_to_escalate(self):
    """
    Getter method for time_to_escalate, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/time_to_escalate (uint64)

    YANG Description: Time to escalate in ms
    """
    return self.__time_to_escalate
      
  def _set_time_to_escalate(self, v, load=False):
    """
    Setter method for time_to_escalate, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/time_to_escalate (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_to_escalate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_to_escalate() directly.

    YANG Description: Time to escalate in ms
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-to-escalate", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_to_escalate must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-to-escalate", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)""",
        })

    self.__time_to_escalate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_to_escalate(self):
    self.__time_to_escalate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="time-to-escalate", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='uint64', is_config=False)


  def _get_event_published(self):
    """
    Getter method for event_published, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/event_published (boolean)

    YANG Description: Flag to know whether event is already published or not
    """
    return self.__event_published
      
  def _set_event_published(self, v, load=False):
    """
    Setter method for event_published, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/event_published (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_published is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_published() directly.

    YANG Description: Flag to know whether event is already published or not
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="event-published", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_published must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="event-published", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=False)""",
        })

    self.__event_published = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_published(self):
    self.__event_published = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="event-published", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='boolean', is_config=False)


  def _get_appover_info(self):
    """
    Getter method for appover_info, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info (list)
    """
    return self.__appover_info
      
  def _set_appover_info(self, v, load=False):
    """
    Setter method for appover_info, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_appover_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_appover_info() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("approver",appover_info.appover_info, yang_name="appover-info", module_name="tasks", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver'), is_container='list', yang_name="appover-info", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """appover_info must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("approver",appover_info.appover_info, yang_name="appover-info", module_name="tasks", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver'), is_container='list', yang_name="appover-info", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='list', is_config=True)""",
        })

    self.__appover_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_appover_info(self):
    self.__appover_info = YANGDynClass(base=YANGListType("approver",appover_info.appover_info, yang_name="appover-info", module_name="tasks", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='approver'), is_container='list', yang_name="appover-info", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='list', is_config=True)

  task_id = __builtin__.property(_get_task_id, _set_task_id)
  operation_name = __builtin__.property(_get_operation_name, _set_operation_name)
  component = __builtin__.property(_get_component, _set_component)
  policy_name = __builtin__.property(_get_policy_name, _set_policy_name)
  approval_policy_type = __builtin__.property(_get_approval_policy_type, _set_approval_policy_type)
  operation_type = __builtin__.property(_get_operation_type, _set_operation_type)
  escalation_threshold = __builtin__.property(_get_escalation_threshold, _set_escalation_threshold)
  time_to_escalate = __builtin__.property(_get_time_to_escalate)
  event_published = __builtin__.property(_get_event_published)
  appover_info = __builtin__.property(_get_appover_info, _set_appover_info)


  _pyangbind_elements = collections.OrderedDict([('task_id', task_id), ('operation_name', operation_name), ('component', component), ('policy_name', policy_name), ('approval_policy_type', approval_policy_type), ('operation_type', operation_type), ('escalation_threshold', escalation_threshold), ('time_to_escalate', time_to_escalate), ('event_published', event_published), ('appover_info', appover_info), ])


