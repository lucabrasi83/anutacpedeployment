
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class appover_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module tasks - based on the path /tasks/task-approvers-details/task-approver-details/appover-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__approver','__notes','__status',)

  _yang_name = 'appover-info'
  _module_name = 'tasks'
  _namespace = 'http://anutanetworks.com/tasks'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    self.__notes = YANGDynClass(base=unicode, is_leaf=True, yang_name="notes", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    self.__approver = YANGDynClass(base=unicode, is_leaf=True, yang_name="approver", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tasks', u'task-approvers-details', u'task-approver-details', u'appover-info']

  def _get_approver(self):
    """
    Getter method for approver, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/approver (string)

    YANG Description: Name of approver
    """
    return self.__approver
      
  def _set_approver(self, v, load=False):
    """
    Setter method for approver, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/approver (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_approver is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_approver() directly.

    YANG Description: Name of approver
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="approver", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """approver must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="approver", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__approver = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_approver(self):
    self.__approver = YANGDynClass(base=unicode, is_leaf=True, yang_name="approver", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_notes(self):
    """
    Getter method for notes, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/notes (string)

    YANG Description: Comments given by approver
    """
    return self.__notes
      
  def _set_notes(self, v, load=False):
    """
    Setter method for notes, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/notes (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_notes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_notes() directly.

    YANG Description: Comments given by approver
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="notes", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """notes must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="notes", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)""",
        })

    self.__notes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_notes(self):
    self.__notes = YANGDynClass(base=unicode, is_leaf=True, yang_name="notes", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/status (ncx-types:taskstatus-enum)

    YANG Description: Approval status
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /tasks/task_approvers_details/task_approver_details/appover_info/status (ncx-types:taskstatus-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: Approval status
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with ncx-types:taskstatus-enum""",
          'defined-type': "ncx-types:taskstatus-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCES_RESERVED': {}, u'COMPLETE': {}, u'NOT_STARTED': {}, u'SCHEDULED_FOR_PROVISION': {}, u'PROVISION_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_UNRESERVED': {}, u'CANCELLED': {}, u'WAITING': {}, u'RESERVE_OPERATIONAL_RESOURCES_FAILED': {}, u'ERROR': {}, u'RESOURCES_PROVISIONED': {}, u'IN_PROGRESS': {}, u'VALIDATED': {}, u'RESERVE_RESOURCES_FAILED': {}, u'OPERATIONAL_RESOURCES_RESERVED': {}},), is_leaf=True, yang_name="status", module_name="tasks", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/tasks', defining_module='tasks', yang_type='ncx-types:taskstatus-enum', is_config=True)

  approver = __builtin__.property(_get_approver, _set_approver)
  notes = __builtin__.property(_get_notes, _set_notes)
  status = __builtin__.property(_get_status, _set_status)


  _pyangbind_elements = collections.OrderedDict([('approver', approver), ('notes', notes), ('status', status), ])


