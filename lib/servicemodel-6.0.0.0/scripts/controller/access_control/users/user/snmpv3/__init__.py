
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class snmpv3(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /access-control/users/user/snmpv3. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__auth_protocol','__auth_password','__priv_protocol','__priv_password',)

  _yang_name = 'snmpv3'
  _module_name = 'accesscontrol'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auth_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA': {}, u'NO_AUTH': {}, u'MD5': {}},), is_leaf=True, yang_name="auth-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-auth-protocol', is_config=True)
    self.__priv_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    self.__auth_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="auth-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    self.__priv_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES256': {}, u'DES': {}, u'NO_PRIV': {}, u'DES3': {}, u'AES128': {}, u'AES192': {}},), is_leaf=True, yang_name="priv-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-priv-protocol', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'access-control', u'users', u'user', u'snmpv3']

  def _get_auth_protocol(self):
    """
    Getter method for auth_protocol, mapped from YANG variable /access_control/users/user/snmpv3/auth_protocol (snmpv3-auth-protocol)

    YANG Description: NO_AUTH
SHA
MD5

    """
    return self.__auth_protocol
      
  def _set_auth_protocol(self, v, load=False):
    """
    Setter method for auth_protocol, mapped from YANG variable /access_control/users/user/snmpv3/auth_protocol (snmpv3-auth-protocol)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_protocol() directly.

    YANG Description: NO_AUTH
SHA
MD5

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA': {}, u'NO_AUTH': {}, u'MD5': {}},), is_leaf=True, yang_name="auth-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-auth-protocol', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_protocol must be of a type compatible with snmpv3-auth-protocol""",
          'defined-type': "controller:snmpv3-auth-protocol",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA': {}, u'NO_AUTH': {}, u'MD5': {}},), is_leaf=True, yang_name="auth-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-auth-protocol', is_config=True)""",
        })

    self.__auth_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_protocol(self):
    self.__auth_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA': {}, u'NO_AUTH': {}, u'MD5': {}},), is_leaf=True, yang_name="auth-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-auth-protocol', is_config=True)


  def _get_auth_password(self):
    """
    Getter method for auth_password, mapped from YANG variable /access_control/users/user/snmpv3/auth_password (nct:password)

    YANG Description: string
    """
    return self.__auth_password
      
  def _set_auth_password(self, v, load=False):
    """
    Setter method for auth_password, mapped from YANG variable /access_control/users/user/snmpv3/auth_password (nct:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="auth-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_password must be of a type compatible with nct:password""",
          'defined-type': "nct:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="auth-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)""",
        })

    self.__auth_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_password(self):
    self.__auth_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="auth-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)


  def _get_priv_protocol(self):
    """
    Getter method for priv_protocol, mapped from YANG variable /access_control/users/user/snmpv3/priv_protocol (snmpv3-priv-protocol)

    YANG Description: NO_PRIV
DES
DES3
AES128
AES192
AES256

    """
    return self.__priv_protocol
      
  def _set_priv_protocol(self, v, load=False):
    """
    Setter method for priv_protocol, mapped from YANG variable /access_control/users/user/snmpv3/priv_protocol (snmpv3-priv-protocol)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priv_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priv_protocol() directly.

    YANG Description: NO_PRIV
DES
DES3
AES128
AES192
AES256

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES256': {}, u'DES': {}, u'NO_PRIV': {}, u'DES3': {}, u'AES128': {}, u'AES192': {}},), is_leaf=True, yang_name="priv-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-priv-protocol', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priv_protocol must be of a type compatible with snmpv3-priv-protocol""",
          'defined-type': "controller:snmpv3-priv-protocol",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES256': {}, u'DES': {}, u'NO_PRIV': {}, u'DES3': {}, u'AES128': {}, u'AES192': {}},), is_leaf=True, yang_name="priv-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-priv-protocol', is_config=True)""",
        })

    self.__priv_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priv_protocol(self):
    self.__priv_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES256': {}, u'DES': {}, u'NO_PRIV': {}, u'DES3': {}, u'AES128': {}, u'AES192': {}},), is_leaf=True, yang_name="priv-protocol", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmpv3-priv-protocol', is_config=True)


  def _get_priv_password(self):
    """
    Getter method for priv_password, mapped from YANG variable /access_control/users/user/snmpv3/priv_password (nct:password)

    YANG Description: string
    """
    return self.__priv_password
      
  def _set_priv_password(self, v, load=False):
    """
    Setter method for priv_password, mapped from YANG variable /access_control/users/user/snmpv3/priv_password (nct:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priv_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priv_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priv_password must be of a type compatible with nct:password""",
          'defined-type': "nct:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)""",
        })

    self.__priv_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priv_password(self):
    self.__priv_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)

  auth_protocol = __builtin__.property(_get_auth_protocol, _set_auth_protocol)
  auth_password = __builtin__.property(_get_auth_password, _set_auth_password)
  priv_protocol = __builtin__.property(_get_priv_protocol, _set_priv_protocol)
  priv_password = __builtin__.property(_get_priv_password, _set_priv_password)


  _pyangbind_elements = collections.OrderedDict([('auth_protocol', auth_protocol), ('auth_password', auth_password), ('priv_protocol', priv_protocol), ('priv_password', priv_password), ])


