
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class link_property(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module topology - based on the path /network-connections/network-connection/link-property. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__src_trunk_type','__dst_trunk_type','__cost','__priority','__sham_link','__link_type','__mtu','__routing_protocol','__ospf_authentication',)

  _yang_name = 'link-property'
  _module_name = 'topology'
  _namespace = 'http://anutanetworks.com/topology'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dst_trunk_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="dst-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    self.__src_trunk_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="src-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)
    self.__cost = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="cost", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    self.__routing_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="routing-protocol", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='internal-igp', is_config=True)
    self.__ospf_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-authentication", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)
    self.__link_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'BROADCAST': {}, u'NON_BROADCAST': {}, u'NONE': {}, u'POINT_TO_MULTIPOINT': {}, u'POINT_TO_POINT': {}},), is_leaf=True, yang_name="link-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='link-type', is_config=True)
    self.__sham_link = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sham-link", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-connections', u'network-connection', u'link-property']

  def _get_src_trunk_type(self):
    """
    Getter method for src_trunk_type, mapped from YANG variable /network_connections/network_connection/link_property/src_trunk_type (nctrunk-type)

    YANG Description: L2_TRUNK
L3_TRUNK
L2_ACCESS
L3_ACCESS
NONE

    """
    return self.__src_trunk_type
      
  def _set_src_trunk_type(self, v, load=False):
    """
    Setter method for src_trunk_type, mapped from YANG variable /network_connections/network_connection/link_property/src_trunk_type (nctrunk-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_trunk_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_trunk_type() directly.

    YANG Description: L2_TRUNK
L3_TRUNK
L2_ACCESS
L3_ACCESS
NONE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="src-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_trunk_type must be of a type compatible with nctrunk-type""",
          'defined-type': "topology:nctrunk-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="src-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)""",
        })

    self.__src_trunk_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_trunk_type(self):
    self.__src_trunk_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="src-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)


  def _get_dst_trunk_type(self):
    """
    Getter method for dst_trunk_type, mapped from YANG variable /network_connections/network_connection/link_property/dst_trunk_type (nctrunk-type)

    YANG Description: L2_TRUNK
L3_TRUNK
L2_ACCESS
L3_ACCESS
NONE

    """
    return self.__dst_trunk_type
      
  def _set_dst_trunk_type(self, v, load=False):
    """
    Setter method for dst_trunk_type, mapped from YANG variable /network_connections/network_connection/link_property/dst_trunk_type (nctrunk-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_trunk_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_trunk_type() directly.

    YANG Description: L2_TRUNK
L3_TRUNK
L2_ACCESS
L3_ACCESS
NONE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="dst-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_trunk_type must be of a type compatible with nctrunk-type""",
          'defined-type': "topology:nctrunk-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="dst-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)""",
        })

    self.__dst_trunk_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_trunk_type(self):
    self.__dst_trunk_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3_ACCESS': {}, u'NONE': {}, u'L3_TRUNK': {}, u'L2_TRUNK': {}, u'L2_ACCESS': {}},), is_leaf=True, yang_name="dst-trunk-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='nctrunk-type', is_config=True)


  def _get_cost(self):
    """
    Getter method for cost, mapped from YANG variable /network_connections/network_connection/link_property/cost (uint16)

    YANG Description: 0..65535
    """
    return self.__cost
      
  def _set_cost(self, v, load=False):
    """
    Setter method for cost, mapped from YANG variable /network_connections/network_connection/link_property/cost (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cost() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="cost", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cost must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="cost", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)""",
        })

    self.__cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cost(self):
    self.__cost = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="cost", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /network_connections/network_connection/link_property/priority (uint16)

    YANG Description: 0..65535
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /network_connections/network_connection/link_property/priority (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)


  def _get_sham_link(self):
    """
    Getter method for sham_link, mapped from YANG variable /network_connections/network_connection/link_property/sham_link (boolean)

    YANG Description: sham-link: True/False
    """
    return self.__sham_link
      
  def _set_sham_link(self, v, load=False):
    """
    Setter method for sham_link, mapped from YANG variable /network_connections/network_connection/link_property/sham_link (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sham_link is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sham_link() directly.

    YANG Description: sham-link: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sham-link", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sham_link must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sham-link", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)""",
        })

    self.__sham_link = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sham_link(self):
    self.__sham_link = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="sham-link", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)


  def _get_link_type(self):
    """
    Getter method for link_type, mapped from YANG variable /network_connections/network_connection/link_property/link_type (link-type)

    YANG Description: NONE
BROADCAST
NON_BROADCAST
POINT_TO_POINT
POINT_TO_MULTIPOINT

    """
    return self.__link_type
      
  def _set_link_type(self, v, load=False):
    """
    Setter method for link_type, mapped from YANG variable /network_connections/network_connection/link_property/link_type (link-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_type() directly.

    YANG Description: NONE
BROADCAST
NON_BROADCAST
POINT_TO_POINT
POINT_TO_MULTIPOINT

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'BROADCAST': {}, u'NON_BROADCAST': {}, u'NONE': {}, u'POINT_TO_MULTIPOINT': {}, u'POINT_TO_POINT': {}},), is_leaf=True, yang_name="link-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='link-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_type must be of a type compatible with link-type""",
          'defined-type': "topology:link-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'BROADCAST': {}, u'NON_BROADCAST': {}, u'NONE': {}, u'POINT_TO_MULTIPOINT': {}, u'POINT_TO_POINT': {}},), is_leaf=True, yang_name="link-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='link-type', is_config=True)""",
        })

    self.__link_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_type(self):
    self.__link_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'BROADCAST': {}, u'NON_BROADCAST': {}, u'NONE': {}, u'POINT_TO_MULTIPOINT': {}, u'POINT_TO_POINT': {}},), is_leaf=True, yang_name="link-type", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='link-type', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /network_connections/network_connection/link_property/mtu (uint16)

    YANG Description: 0..65535
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /network_connections/network_connection/link_property/mtu (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='uint16', is_config=True)


  def _get_routing_protocol(self):
    """
    Getter method for routing_protocol, mapped from YANG variable /network_connections/network_connection/link_property/routing_protocol (internal-igp)

    YANG Description: EIGRP
BGP
OSPF
Default

    """
    return self.__routing_protocol
      
  def _set_routing_protocol(self, v, load=False):
    """
    Setter method for routing_protocol, mapped from YANG variable /network_connections/network_connection/link_property/routing_protocol (internal-igp)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_routing_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_routing_protocol() directly.

    YANG Description: EIGRP
BGP
OSPF
Default

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="routing-protocol", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='internal-igp', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """routing_protocol must be of a type compatible with internal-igp""",
          'defined-type': "topology:internal-igp",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="routing-protocol", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='internal-igp', is_config=True)""",
        })

    self.__routing_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_routing_protocol(self):
    self.__routing_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="routing-protocol", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='internal-igp', is_config=True)


  def _get_ospf_authentication(self):
    """
    Getter method for ospf_authentication, mapped from YANG variable /network_connections/network_connection/link_property/ospf_authentication (boolean)

    YANG Description: ospf-authentication: True/False
    """
    return self.__ospf_authentication
      
  def _set_ospf_authentication(self, v, load=False):
    """
    Setter method for ospf_authentication, mapped from YANG variable /network_connections/network_connection/link_property/ospf_authentication (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_authentication is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_authentication() directly.

    YANG Description: ospf-authentication: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ospf-authentication", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_authentication must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-authentication", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)""",
        })

    self.__ospf_authentication = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_authentication(self):
    self.__ospf_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-authentication", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=True)

  src_trunk_type = __builtin__.property(_get_src_trunk_type, _set_src_trunk_type)
  dst_trunk_type = __builtin__.property(_get_dst_trunk_type, _set_dst_trunk_type)
  cost = __builtin__.property(_get_cost, _set_cost)
  priority = __builtin__.property(_get_priority, _set_priority)
  sham_link = __builtin__.property(_get_sham_link, _set_sham_link)
  link_type = __builtin__.property(_get_link_type, _set_link_type)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  routing_protocol = __builtin__.property(_get_routing_protocol, _set_routing_protocol)
  ospf_authentication = __builtin__.property(_get_ospf_authentication, _set_ospf_authentication)


  _pyangbind_elements = collections.OrderedDict([('src_trunk_type', src_trunk_type), ('dst_trunk_type', dst_trunk_type), ('cost', cost), ('priority', priority), ('sham_link', sham_link), ('link_type', link_type), ('mtu', mtu), ('routing_protocol', routing_protocol), ('ospf_authentication', ospf_authentication), ])


