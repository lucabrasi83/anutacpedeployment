
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import link_property
class network_connection(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module topology - based on the path /network-connections/network-connection. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__unique_id','__source_device','__source_interface','__destination_device','__destination_interface','__link_property','__system_defined',)

  _yang_name = 'network-connection'
  _module_name = 'topology'
  _namespace = 'http://anutanetworks.com/topology'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__destination_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    self.__link_property = YANGDynClass(base=link_property.link_property, is_container='container', yang_name="link-property", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='container', is_config=True)
    self.__source_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    self.__system_defined = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-defined", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=False)
    self.__destination_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    self.__unique_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-id", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-connections', u'network-connection']

  def _get_unique_id(self):
    """
    Getter method for unique_id, mapped from YANG variable /network_connections/network_connection/unique_id (string)

    YANG Description: Natural key for network connections. Used to easily identify the network connection
    """
    return self.__unique_id
      
  def _set_unique_id(self, v, load=False):
    """
    Setter method for unique_id, mapped from YANG variable /network_connections/network_connection/unique_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unique_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unique_id() directly.

    YANG Description: Natural key for network connections. Used to easily identify the network connection
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="unique-id", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unique_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-id", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='string', is_config=True)""",
        })

    self.__unique_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unique_id(self):
    self.__unique_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-id", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='string', is_config=True)


  def _get_source_device(self):
    """
    Getter method for source_device, mapped from YANG variable /network_connections/network_connection/source_device (leafref)

    YANG Description: source-device
    """
    return self.__source_device
      
  def _set_source_device(self, v, load=False):
    """
    Setter method for source_device, mapped from YANG variable /network_connections/network_connection/source_device (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_device() directly.

    YANG Description: source-device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_device must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)""",
        })

    self.__source_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_device(self):
    self.__source_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)


  def _get_source_interface(self):
    """
    Getter method for source_interface, mapped from YANG variable /network_connections/network_connection/source_interface (leafref)

    YANG Description: source-interface
    """
    return self.__source_interface
      
  def _set_source_interface(self, v, load=False):
    """
    Setter method for source_interface, mapped from YANG variable /network_connections/network_connection/source_interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_interface() directly.

    YANG Description: source-interface
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)""",
        })

    self.__source_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_interface(self):
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)


  def _get_destination_device(self):
    """
    Getter method for destination_device, mapped from YANG variable /network_connections/network_connection/destination_device (leafref)

    YANG Description: destination-device
    """
    return self.__destination_device
      
  def _set_destination_device(self, v, load=False):
    """
    Setter method for destination_device, mapped from YANG variable /network_connections/network_connection/destination_device (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_destination_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_destination_device() directly.

    YANG Description: destination-device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="destination-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """destination_device must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)""",
        })

    self.__destination_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_destination_device(self):
    self.__destination_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-device", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)


  def _get_destination_interface(self):
    """
    Getter method for destination_interface, mapped from YANG variable /network_connections/network_connection/destination_interface (leafref)

    YANG Description: destination-interface
    """
    return self.__destination_interface
      
  def _set_destination_interface(self, v, load=False):
    """
    Setter method for destination_interface, mapped from YANG variable /network_connections/network_connection/destination_interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_destination_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_destination_interface() directly.

    YANG Description: destination-interface
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="destination-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """destination_interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)""",
        })

    self.__destination_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_destination_interface(self):
    self.__destination_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-interface", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='leafref', is_config=True)


  def _get_link_property(self):
    """
    Getter method for link_property, mapped from YANG variable /network_connections/network_connection/link_property (container)
    """
    return self.__link_property
      
  def _set_link_property(self, v, load=False):
    """
    Setter method for link_property, mapped from YANG variable /network_connections/network_connection/link_property (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_property() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=link_property.link_property, is_container='container', yang_name="link-property", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_property must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=link_property.link_property, is_container='container', yang_name="link-property", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='container', is_config=True)""",
        })

    self.__link_property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_property(self):
    self.__link_property = YANGDynClass(base=link_property.link_property, is_container='container', yang_name="link-property", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='container', is_config=True)


  def _get_system_defined(self):
    """
    Getter method for system_defined, mapped from YANG variable /network_connections/network_connection/system_defined (boolean)

    YANG Description: system-defined: True/False
    """
    return self.__system_defined
      
  def _set_system_defined(self, v, load=False):
    """
    Setter method for system_defined, mapped from YANG variable /network_connections/network_connection/system_defined (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_defined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_defined() directly.

    YANG Description: system-defined: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-defined", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_defined must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-defined", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=False)""",
        })

    self.__system_defined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_defined(self):
    self.__system_defined = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-defined", module_name="topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/topology', defining_module='topology', yang_type='boolean', is_config=False)

  unique_id = __builtin__.property(_get_unique_id, _set_unique_id)
  source_device = __builtin__.property(_get_source_device, _set_source_device)
  source_interface = __builtin__.property(_get_source_interface, _set_source_interface)
  destination_device = __builtin__.property(_get_destination_device, _set_destination_device)
  destination_interface = __builtin__.property(_get_destination_interface, _set_destination_interface)
  link_property = __builtin__.property(_get_link_property, _set_link_property)
  system_defined = __builtin__.property(_get_system_defined)


  _pyangbind_elements = collections.OrderedDict([('unique_id', unique_id), ('source_device', source_device), ('source_interface', source_interface), ('destination_device', destination_device), ('destination_interface', destination_interface), ('link_property', link_property), ('system_defined', system_defined), ])


