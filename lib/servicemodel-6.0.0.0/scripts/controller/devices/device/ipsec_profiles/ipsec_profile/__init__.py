
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ipsec_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/ipsec-profiles/ipsec-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ipsec_profile_name','__life_time','__transform_set','__ike_profile_name','__shared','__ike_version',)

  _yang_name = 'ipsec-profile'
  _module_name = 'dmvpn'
  _namespace = 'http://anutanetworks.com/dmvpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ipsec_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipsec-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__transform_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__ike_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__shared = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="shared", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    self.__life_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'ipsec-profiles', u'ipsec-profile']

  def _get_ipsec_profile_name(self):
    """
    Getter method for ipsec_profile_name, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ipsec_profile_name (string)

    YANG Description: string
    """
    return self.__ipsec_profile_name
      
  def _set_ipsec_profile_name(self, v, load=False):
    """
    Setter method for ipsec_profile_name, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ipsec_profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipsec_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipsec_profile_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ipsec-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipsec_profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ipsec-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ipsec_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipsec_profile_name(self):
    self.__ipsec_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipsec-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_life_time(self):
    """
    Getter method for life_time, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/life_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__life_time
      
  def _set_life_time(self, v, load=False):
    """
    Setter method for life_time, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/life_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_life_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_life_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """life_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__life_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_life_time(self):
    self.__life_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_transform_set(self):
    """
    Getter method for transform_set, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/transform_set (leafref)

    YANG Description: transform-set
    """
    return self.__transform_set
      
  def _set_transform_set(self, v, load=False):
    """
    Setter method for transform_set, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/transform_set (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transform_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transform_set() directly.

    YANG Description: transform-set
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transform_set must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__transform_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transform_set(self):
    self.__transform_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_ike_profile_name(self):
    """
    Getter method for ike_profile_name, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ike_profile_name (leafref)

    YANG Description: ike-profile-name
    """
    return self.__ike_profile_name
      
  def _set_ike_profile_name(self, v, load=False):
    """
    Setter method for ike_profile_name, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ike_profile_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_profile_name() directly.

    YANG Description: ike-profile-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_profile_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__ike_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_profile_name(self):
    self.__ike_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-profile-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_shared(self):
    """
    Getter method for shared, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/shared (boolean)

    YANG Description: shared: True/False
    """
    return self.__shared
      
  def _set_shared(self, v, load=False):
    """
    Setter method for shared, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/shared (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shared is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shared() directly.

    YANG Description: shared: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="shared", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shared must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="shared", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)""",
        })

    self.__shared = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shared(self):
    self.__shared = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="shared", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)


  def _get_ike_version(self):
    """
    Getter method for ike_version, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ike_version (string)

    YANG Description: string
    """
    return self.__ike_version
      
  def _set_ike_version(self, v, load=False):
    """
    Setter method for ike_version, mapped from YANG variable /devices/device/ipsec_profiles/ipsec_profile/ike_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ike_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_version(self):
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)

  ipsec_profile_name = __builtin__.property(_get_ipsec_profile_name, _set_ipsec_profile_name)
  life_time = __builtin__.property(_get_life_time, _set_life_time)
  transform_set = __builtin__.property(_get_transform_set, _set_transform_set)
  ike_profile_name = __builtin__.property(_get_ike_profile_name, _set_ike_profile_name)
  shared = __builtin__.property(_get_shared, _set_shared)
  ike_version = __builtin__.property(_get_ike_version, _set_ike_version)


  _pyangbind_elements = collections.OrderedDict([('ipsec_profile_name', ipsec_profile_name), ('life_time', life_time), ('transform_set', transform_set), ('ike_profile_name', ike_profile_name), ('shared', shared), ('ike_version', ike_version), ])


