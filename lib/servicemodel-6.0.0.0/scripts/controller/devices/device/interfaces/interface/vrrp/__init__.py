
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import bfd
class vrrp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/interfaces/interface/vrrp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__vrrp_interface_name','__vrid','__unit','__inet_address','__mask','__priority','__vrrp_group','__virtual_address','__advertisement_interval','__delay_interval','__preempt','__auth_type','__auth_key','__track_interface','__vrrp_track_group','__vrrp_interface_type','__l3vpn_name','__bfd',)

  _yang_name = 'vrrp'
  _module_name = 'vrrp'
  _namespace = 'http://anutanetworks.com/vrrp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'simple': {}, u'md5': {}},), is_leaf=True, yang_name="auth-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)
    self.__vrrp_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__vrrp_interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admin': {}, u'l3-interface': {}},), is_leaf=True, yang_name="vrrp-interface-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)
    self.__vrrp_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrrp-interface-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    self.__vrrp_track_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-track-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    self.__inet_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="inet-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)
    self.__vrid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="vrid", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint8', is_config=True)
    self.__mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    self.__delay_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__preempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="preempt", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='boolean', is_config=True)
    self.__advertisement_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="advertisement-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__track_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="track-interface", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    self.__virtual_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="virtual-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', yang_name="bfd", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='container', is_config=True)
    self.__unit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unit", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    self.__l3vpn_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="l3vpn-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'interfaces', u'interface', u'vrrp']

  def _get_vrrp_interface_name(self):
    """
    Getter method for vrrp_interface_name, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_interface_name (string)

    YANG Description: string
    """
    return self.__vrrp_interface_name
      
  def _set_vrrp_interface_name(self, v, load=False):
    """
    Setter method for vrrp_interface_name, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrrp_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrrp_interface_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrrp-interface-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrrp_interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrrp-interface-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)""",
        })

    self.__vrrp_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrrp_interface_name(self):
    self.__vrrp_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrrp-interface-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)


  def _get_vrid(self):
    """
    Getter method for vrid, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrid (uint8)

    YANG Description: a virtual router identification (VRID) configured on all VRRP routers in the same network or, in the case of a multinetted VLAN, on all routers in the same subnet
    """
    return self.__vrid
      
  def _set_vrid(self, v, load=False):
    """
    Setter method for vrid, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrid (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrid() directly.

    YANG Description: a virtual router identification (VRID) configured on all VRRP routers in the same network or, in the case of a multinetted VLAN, on all routers in the same subnet
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="vrid", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrid must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="vrid", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint8', is_config=True)""",
        })

    self.__vrid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrid(self):
    self.__vrid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="vrid", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint8', is_config=True)


  def _get_unit(self):
    """
    Getter method for unit, mapped from YANG variable /devices/device/interfaces/interface/vrrp/unit (uint32)

    YANG Description: 0..4294967295
    """
    return self.__unit
      
  def _set_unit(self, v, load=False):
    """
    Setter method for unit, mapped from YANG variable /devices/device/interfaces/interface/vrrp/unit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unit() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unit", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unit", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__unit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unit(self):
    self.__unit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unit", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_inet_address(self):
    """
    Getter method for inet_address, mapped from YANG variable /devices/device/interfaces/interface/vrrp/inet_address (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__inet_address
      
  def _set_inet_address(self, v, load=False):
    """
    Setter method for inet_address, mapped from YANG variable /devices/device/interfaces/interface/vrrp/inet_address (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inet_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inet_address() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="inet-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inet_address must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="inet-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__inet_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inet_address(self):
    self.__inet_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="inet-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)


  def _get_mask(self):
    """
    Getter method for mask, mapped from YANG variable /devices/device/interfaces/interface/vrrp/mask (string)

    YANG Description: string
    """
    return self.__mask
      
  def _set_mask(self, v, load=False):
    """
    Setter method for mask, mapped from YANG variable /devices/device/interfaces/interface/vrrp/mask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mask() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mask", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)""",
        })

    self.__mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mask(self):
    self.__mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /devices/device/interfaces/interface/vrrp/priority (uint32)

    YANG Description: 0..4294967295
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /devices/device/interfaces/interface/vrrp/priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_vrrp_group(self):
    """
    Getter method for vrrp_group, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_group (uint32)

    YANG Description: 0..4294967295
    """
    return self.__vrrp_group
      
  def _set_vrrp_group(self, v, load=False):
    """
    Setter method for vrrp_group, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrrp_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrrp_group() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrrp_group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__vrrp_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrrp_group(self):
    self.__vrrp_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_virtual_address(self):
    """
    Getter method for virtual_address, mapped from YANG variable /devices/device/interfaces/interface/vrrp/virtual_address (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__virtual_address
      
  def _set_virtual_address(self, v, load=False):
    """
    Setter method for virtual_address, mapped from YANG variable /devices/device/interfaces/interface/vrrp/virtual_address (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_address() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="virtual-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_address must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="virtual-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__virtual_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_address(self):
    self.__virtual_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="virtual-address", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='inet:ip-address', is_config=True)


  def _get_advertisement_interval(self):
    """
    Getter method for advertisement_interval, mapped from YANG variable /devices/device/interfaces/interface/vrrp/advertisement_interval (uint32)

    YANG Description: 0..4294967295
    """
    return self.__advertisement_interval
      
  def _set_advertisement_interval(self, v, load=False):
    """
    Setter method for advertisement_interval, mapped from YANG variable /devices/device/interfaces/interface/vrrp/advertisement_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertisement_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertisement_interval() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="advertisement-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertisement_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="advertisement-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__advertisement_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertisement_interval(self):
    self.__advertisement_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="advertisement-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_delay_interval(self):
    """
    Getter method for delay_interval, mapped from YANG variable /devices/device/interfaces/interface/vrrp/delay_interval (uint32)

    YANG Description: 0..4294967295
    """
    return self.__delay_interval
      
  def _set_delay_interval(self, v, load=False):
    """
    Setter method for delay_interval, mapped from YANG variable /devices/device/interfaces/interface/vrrp/delay_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_interval() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__delay_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_interval(self):
    self.__delay_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-interval", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_preempt(self):
    """
    Getter method for preempt, mapped from YANG variable /devices/device/interfaces/interface/vrrp/preempt (boolean)

    YANG Description: preempt: True/False
    """
    return self.__preempt
      
  def _set_preempt(self, v, load=False):
    """
    Setter method for preempt, mapped from YANG variable /devices/device/interfaces/interface/vrrp/preempt (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preempt() directly.

    YANG Description: preempt: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="preempt", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preempt must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="preempt", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='boolean', is_config=True)""",
        })

    self.__preempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preempt(self):
    self.__preempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="preempt", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='boolean', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /devices/device/interfaces/interface/vrrp/auth_type (enumeration)

    YANG Description: md5
simple

    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /devices/device/interfaces/interface/vrrp/auth_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: md5
simple

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'simple': {}, u'md5': {}},), is_leaf=True, yang_name="auth-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with enumeration""",
          'defined-type': "vrrp:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'simple': {}, u'md5': {}},), is_leaf=True, yang_name="auth-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'simple': {}, u'md5': {}},), is_leaf=True, yang_name="auth-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)


  def _get_auth_key(self):
    """
    Getter method for auth_key, mapped from YANG variable /devices/device/interfaces/interface/vrrp/auth_key (string)

    YANG Description: string
    """
    return self.__auth_key
      
  def _set_auth_key(self, v, load=False):
    """
    Setter method for auth_key, mapped from YANG variable /devices/device/interfaces/interface/vrrp/auth_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-key", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)""",
        })

    self.__auth_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key(self):
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)


  def _get_track_interface(self):
    """
    Getter method for track_interface, mapped from YANG variable /devices/device/interfaces/interface/vrrp/track_interface (string)

    YANG Description: string
    """
    return self.__track_interface
      
  def _set_track_interface(self, v, load=False):
    """
    Setter method for track_interface, mapped from YANG variable /devices/device/interfaces/interface/vrrp/track_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="track-interface", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="track-interface", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)""",
        })

    self.__track_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track_interface(self):
    self.__track_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="track-interface", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='string', is_config=True)


  def _get_vrrp_track_group(self):
    """
    Getter method for vrrp_track_group, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_track_group (uint32)

    YANG Description: 0..4294967295
    """
    return self.__vrrp_track_group
      
  def _set_vrrp_track_group(self, v, load=False):
    """
    Setter method for vrrp_track_group, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_track_group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrrp_track_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrrp_track_group() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-track-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrrp_track_group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-track-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)""",
        })

    self.__vrrp_track_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrrp_track_group(self):
    self.__vrrp_track_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vrrp-track-group", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='uint32', is_config=True)


  def _get_vrrp_interface_type(self):
    """
    Getter method for vrrp_interface_type, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_interface_type (enumeration)

    YANG Description: l3-interface
admin

    """
    return self.__vrrp_interface_type
      
  def _set_vrrp_interface_type(self, v, load=False):
    """
    Setter method for vrrp_interface_type, mapped from YANG variable /devices/device/interfaces/interface/vrrp/vrrp_interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrrp_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrrp_interface_type() directly.

    YANG Description: l3-interface
admin

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admin': {}, u'l3-interface': {}},), is_leaf=True, yang_name="vrrp-interface-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrrp_interface_type must be of a type compatible with enumeration""",
          'defined-type': "vrrp:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admin': {}, u'l3-interface': {}},), is_leaf=True, yang_name="vrrp-interface-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)""",
        })

    self.__vrrp_interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrrp_interface_type(self):
    self.__vrrp_interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admin': {}, u'l3-interface': {}},), is_leaf=True, yang_name="vrrp-interface-type", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='enumeration', is_config=True)


  def _get_l3vpn_name(self):
    """
    Getter method for l3vpn_name, mapped from YANG variable /devices/device/interfaces/interface/vrrp/l3vpn_name (leafref)

    YANG Description: l3vpn-name
    """
    return self.__l3vpn_name
      
  def _set_l3vpn_name(self, v, load=False):
    """
    Setter method for l3vpn_name, mapped from YANG variable /devices/device/interfaces/interface/vrrp/l3vpn_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l3vpn_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l3vpn_name() directly.

    YANG Description: l3vpn-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="l3vpn-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l3vpn_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="l3vpn-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='leafref', is_config=True)""",
        })

    self.__l3vpn_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l3vpn_name(self):
    self.__l3vpn_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="l3vpn-name", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='leafref', is_config=True)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /devices/device/interfaces/interface/vrrp/bfd (container)
    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /devices/device/interfaces/interface/vrrp/bfd (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=bfd.bfd, is_container='container', yang_name="bfd", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bfd.bfd, is_container='container', yang_name="bfd", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='container', is_config=True)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', yang_name="bfd", module_name="vrrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vrrp', defining_module='vrrp', yang_type='container', is_config=True)

  vrrp_interface_name = __builtin__.property(_get_vrrp_interface_name, _set_vrrp_interface_name)
  vrid = __builtin__.property(_get_vrid, _set_vrid)
  unit = __builtin__.property(_get_unit, _set_unit)
  inet_address = __builtin__.property(_get_inet_address, _set_inet_address)
  mask = __builtin__.property(_get_mask, _set_mask)
  priority = __builtin__.property(_get_priority, _set_priority)
  vrrp_group = __builtin__.property(_get_vrrp_group, _set_vrrp_group)
  virtual_address = __builtin__.property(_get_virtual_address, _set_virtual_address)
  advertisement_interval = __builtin__.property(_get_advertisement_interval, _set_advertisement_interval)
  delay_interval = __builtin__.property(_get_delay_interval, _set_delay_interval)
  preempt = __builtin__.property(_get_preempt, _set_preempt)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_key = __builtin__.property(_get_auth_key, _set_auth_key)
  track_interface = __builtin__.property(_get_track_interface, _set_track_interface)
  vrrp_track_group = __builtin__.property(_get_vrrp_track_group, _set_vrrp_track_group)
  vrrp_interface_type = __builtin__.property(_get_vrrp_interface_type, _set_vrrp_interface_type)
  l3vpn_name = __builtin__.property(_get_l3vpn_name, _set_l3vpn_name)
  bfd = __builtin__.property(_get_bfd, _set_bfd)


  _pyangbind_elements = collections.OrderedDict([('vrrp_interface_name', vrrp_interface_name), ('vrid', vrid), ('unit', unit), ('inet_address', inet_address), ('mask', mask), ('priority', priority), ('vrrp_group', vrrp_group), ('virtual_address', virtual_address), ('advertisement_interval', advertisement_interval), ('delay_interval', delay_interval), ('preempt', preempt), ('auth_type', auth_type), ('auth_key', auth_key), ('track_interface', track_interface), ('vrrp_track_group', vrrp_track_group), ('vrrp_interface_type', vrrp_interface_type), ('l3vpn_name', l3vpn_name), ('bfd', bfd), ])


