
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import additional_ipv4_address
import additional_ipv6_address
class hsrp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/interfaces/interface/hsrp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ip_address','__group','__priority','__hsrp_preempt','__preempt_reload','__auth_type','__auth_key','__timer1_msec','__timer1','__timer2_msec','__timer2','__version','__group_name','__bfd','__bfd_interval','__bfd_multiplier','__preempt_minimum_delay','__mgo','__track','__decrement','__additional_ipv4_address','__additional_ipv6_address',)

  _yang_name = 'hsrp'
  _module_name = 'hsrp'
  _namespace = 'http://anutanetworks.com/hsrp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'text': {}, u'key-string': {}, u'md5-key-string': {}, u'md5-key-chain': {}},), is_leaf=True, yang_name="auth-type", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='interface-auth-type', is_config=True)
    self.__bfd_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-interval", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__timer2_msec = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer2-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    self.__group_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    self.__preempt_minimum_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="preempt-minimum-delay", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    self.__additional_ipv6_address = YANGDynClass(base=additional_ipv6_address.additional_ipv6_address, is_container='container', yang_name="additional-ipv6-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)
    self.__preempt_reload = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="preempt-reload", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__decrement = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="decrement", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)
    self.__bfd_multiplier = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-multiplier", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__bfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    self.__ip_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="ip-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='inet:ip-address', is_config=True)
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    self.__additional_ipv4_address = YANGDynClass(base=additional_ipv4_address.additional_ipv4_address, is_container='container', yang_name="additional-ipv4-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)
    self.__timer1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer1", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__timer2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer2", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)
    self.__mgo = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgo", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    self.__timer1_msec = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer1-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    self.__hsrp_preempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hsrp-preempt", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'interfaces', u'interface', u'hsrp']

  def _get_ip_address(self):
    """
    Getter method for ip_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/ip_address (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__ip_address
      
  def _set_ip_address(self, v, load=False):
    """
    Setter method for ip_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/ip_address (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_address() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="ip-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_address must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="ip-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_address(self):
    self.__ip_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="ip-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='inet:ip-address', is_config=True)


  def _get_group(self):
    """
    Getter method for group, mapped from YANG variable /devices/device/interfaces/interface/hsrp/group (uint32)

    YANG Description: 0..4294967295
    """
    return self.__group
      
  def _set_group(self, v, load=False):
    """
    Setter method for group, mapped from YANG variable /devices/device/interfaces/interface/hsrp/group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group(self):
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /devices/device/interfaces/interface/hsrp/priority (uint32)

    YANG Description: 0..4294967295
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /devices/device/interfaces/interface/hsrp/priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_hsrp_preempt(self):
    """
    Getter method for hsrp_preempt, mapped from YANG variable /devices/device/interfaces/interface/hsrp/hsrp_preempt (boolean)

    YANG Description: hsrp-preempt: True/False
    """
    return self.__hsrp_preempt
      
  def _set_hsrp_preempt(self, v, load=False):
    """
    Setter method for hsrp_preempt, mapped from YANG variable /devices/device/interfaces/interface/hsrp/hsrp_preempt (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hsrp_preempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hsrp_preempt() directly.

    YANG Description: hsrp-preempt: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="hsrp-preempt", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hsrp_preempt must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hsrp-preempt", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)""",
        })

    self.__hsrp_preempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hsrp_preempt(self):
    self.__hsrp_preempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hsrp-preempt", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)


  def _get_preempt_reload(self):
    """
    Getter method for preempt_reload, mapped from YANG variable /devices/device/interfaces/interface/hsrp/preempt_reload (uint32)

    YANG Description: 0..4294967295
    """
    return self.__preempt_reload
      
  def _set_preempt_reload(self, v, load=False):
    """
    Setter method for preempt_reload, mapped from YANG variable /devices/device/interfaces/interface/hsrp/preempt_reload (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preempt_reload is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preempt_reload() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="preempt-reload", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preempt_reload must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="preempt-reload", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__preempt_reload = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preempt_reload(self):
    self.__preempt_reload = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="preempt-reload", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /devices/device/interfaces/interface/hsrp/auth_type (interface-auth-type)

    YANG Description: md5-key-chain
md5-key-string
text
key-string

    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /devices/device/interfaces/interface/hsrp/auth_type (interface-auth-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: md5-key-chain
md5-key-string
text
key-string

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'text': {}, u'key-string': {}, u'md5-key-string': {}, u'md5-key-chain': {}},), is_leaf=True, yang_name="auth-type", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='interface-auth-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with interface-auth-type""",
          'defined-type': "hsrp:interface-auth-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'text': {}, u'key-string': {}, u'md5-key-string': {}, u'md5-key-chain': {}},), is_leaf=True, yang_name="auth-type", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='interface-auth-type', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'text': {}, u'key-string': {}, u'md5-key-string': {}, u'md5-key-chain': {}},), is_leaf=True, yang_name="auth-type", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='interface-auth-type', is_config=True)


  def _get_auth_key(self):
    """
    Getter method for auth_key, mapped from YANG variable /devices/device/interfaces/interface/hsrp/auth_key (string)

    YANG Description: string
    """
    return self.__auth_key
      
  def _set_auth_key(self, v, load=False):
    """
    Setter method for auth_key, mapped from YANG variable /devices/device/interfaces/interface/hsrp/auth_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-key", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)""",
        })

    self.__auth_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key(self):
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)


  def _get_timer1_msec(self):
    """
    Getter method for timer1_msec, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer1_msec (boolean)

    YANG Description: timer1-msec: True/False
    """
    return self.__timer1_msec
      
  def _set_timer1_msec(self, v, load=False):
    """
    Setter method for timer1_msec, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer1_msec (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timer1_msec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timer1_msec() directly.

    YANG Description: timer1-msec: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="timer1-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timer1_msec must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer1-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)""",
        })

    self.__timer1_msec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timer1_msec(self):
    self.__timer1_msec = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer1-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)


  def _get_timer1(self):
    """
    Getter method for timer1, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer1 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__timer1
      
  def _set_timer1(self, v, load=False):
    """
    Setter method for timer1, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timer1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timer1() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer1", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timer1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer1", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__timer1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timer1(self):
    self.__timer1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer1", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_timer2_msec(self):
    """
    Getter method for timer2_msec, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer2_msec (boolean)

    YANG Description: timer2-msec: True/False
    """
    return self.__timer2_msec
      
  def _set_timer2_msec(self, v, load=False):
    """
    Setter method for timer2_msec, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer2_msec (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timer2_msec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timer2_msec() directly.

    YANG Description: timer2-msec: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="timer2-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timer2_msec must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer2-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)""",
        })

    self.__timer2_msec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timer2_msec(self):
    self.__timer2_msec = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="timer2-msec", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)


  def _get_timer2(self):
    """
    Getter method for timer2, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer2 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__timer2
      
  def _set_timer2(self, v, load=False):
    """
    Setter method for timer2, mapped from YANG variable /devices/device/interfaces/interface/hsrp/timer2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timer2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timer2() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer2", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timer2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer2", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__timer2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timer2(self):
    self.__timer2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timer2", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /devices/device/interfaces/interface/hsrp/version (string)

    YANG Description: string
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /devices/device/interfaces/interface/hsrp/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="version", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)


  def _get_group_name(self):
    """
    Getter method for group_name, mapped from YANG variable /devices/device/interfaces/interface/hsrp/group_name (string)

    YANG Description: string
    """
    return self.__group_name
      
  def _set_group_name(self, v, load=False):
    """
    Setter method for group_name, mapped from YANG variable /devices/device/interfaces/interface/hsrp/group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="group-name", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)""",
        })

    self.__group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_name(self):
    self.__group_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd (boolean)

    YANG Description: bfd: True/False
    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.

    YANG Description: bfd: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bfd", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)


  def _get_bfd_interval(self):
    """
    Getter method for bfd_interval, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd_interval (uint32)

    YANG Description: 0..4294967295
    """
    return self.__bfd_interval
      
  def _set_bfd_interval(self, v, load=False):
    """
    Setter method for bfd_interval, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_interval() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-interval", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-interval", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__bfd_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_interval(self):
    self.__bfd_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-interval", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_bfd_multiplier(self):
    """
    Getter method for bfd_multiplier, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd_multiplier (uint32)

    YANG Description: 0..4294967295
    """
    return self.__bfd_multiplier
      
  def _set_bfd_multiplier(self, v, load=False):
    """
    Setter method for bfd_multiplier, mapped from YANG variable /devices/device/interfaces/interface/hsrp/bfd_multiplier (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_multiplier() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-multiplier", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_multiplier must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-multiplier", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)""",
        })

    self.__bfd_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_multiplier(self):
    self.__bfd_multiplier = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-multiplier", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint32', is_config=True)


  def _get_preempt_minimum_delay(self):
    """
    Getter method for preempt_minimum_delay, mapped from YANG variable /devices/device/interfaces/interface/hsrp/preempt_minimum_delay (string)

    YANG Description: string
    """
    return self.__preempt_minimum_delay
      
  def _set_preempt_minimum_delay(self, v, load=False):
    """
    Setter method for preempt_minimum_delay, mapped from YANG variable /devices/device/interfaces/interface/hsrp/preempt_minimum_delay (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preempt_minimum_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preempt_minimum_delay() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="preempt-minimum-delay", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preempt_minimum_delay must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="preempt-minimum-delay", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)""",
        })

    self.__preempt_minimum_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preempt_minimum_delay(self):
    self.__preempt_minimum_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="preempt-minimum-delay", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='string', is_config=True)


  def _get_mgo(self):
    """
    Getter method for mgo, mapped from YANG variable /devices/device/interfaces/interface/hsrp/mgo (boolean)

    YANG Description: mgo: True/False
    """
    return self.__mgo
      
  def _set_mgo(self, v, load=False):
    """
    Setter method for mgo, mapped from YANG variable /devices/device/interfaces/interface/hsrp/mgo (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgo() directly.

    YANG Description: mgo: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mgo", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgo must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgo", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)""",
        })

    self.__mgo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgo(self):
    self.__mgo = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgo", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='boolean', is_config=True)


  def _get_track(self):
    """
    Getter method for track, mapped from YANG variable /devices/device/interfaces/interface/hsrp/track (uint8)

    YANG Description: 0..255
    """
    return self.__track
      
  def _set_track(self, v, load=False):
    """
    Setter method for track, mapped from YANG variable /devices/device/interfaces/interface/hsrp/track (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)""",
        })

    self.__track = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track(self):
    self.__track = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="track", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)


  def _get_decrement(self):
    """
    Getter method for decrement, mapped from YANG variable /devices/device/interfaces/interface/hsrp/decrement (uint8)

    YANG Description: 0..255
    """
    return self.__decrement
      
  def _set_decrement(self, v, load=False):
    """
    Setter method for decrement, mapped from YANG variable /devices/device/interfaces/interface/hsrp/decrement (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_decrement is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_decrement() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="decrement", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """decrement must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="decrement", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)""",
        })

    self.__decrement = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_decrement(self):
    self.__decrement = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="decrement", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='uint8', is_config=True)


  def _get_additional_ipv4_address(self):
    """
    Getter method for additional_ipv4_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/additional_ipv4_address (container)
    """
    return self.__additional_ipv4_address
      
  def _set_additional_ipv4_address(self, v, load=False):
    """
    Setter method for additional_ipv4_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/additional_ipv4_address (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_additional_ipv4_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_additional_ipv4_address() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=additional_ipv4_address.additional_ipv4_address, is_container='container', yang_name="additional-ipv4-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """additional_ipv4_address must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=additional_ipv4_address.additional_ipv4_address, is_container='container', yang_name="additional-ipv4-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)""",
        })

    self.__additional_ipv4_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_additional_ipv4_address(self):
    self.__additional_ipv4_address = YANGDynClass(base=additional_ipv4_address.additional_ipv4_address, is_container='container', yang_name="additional-ipv4-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)


  def _get_additional_ipv6_address(self):
    """
    Getter method for additional_ipv6_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/additional_ipv6_address (container)
    """
    return self.__additional_ipv6_address
      
  def _set_additional_ipv6_address(self, v, load=False):
    """
    Setter method for additional_ipv6_address, mapped from YANG variable /devices/device/interfaces/interface/hsrp/additional_ipv6_address (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_additional_ipv6_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_additional_ipv6_address() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=additional_ipv6_address.additional_ipv6_address, is_container='container', yang_name="additional-ipv6-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """additional_ipv6_address must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=additional_ipv6_address.additional_ipv6_address, is_container='container', yang_name="additional-ipv6-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)""",
        })

    self.__additional_ipv6_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_additional_ipv6_address(self):
    self.__additional_ipv6_address = YANGDynClass(base=additional_ipv6_address.additional_ipv6_address, is_container='container', yang_name="additional-ipv6-address", module_name="hsrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/hsrp', defining_module='hsrp', yang_type='container', is_config=True)

  ip_address = __builtin__.property(_get_ip_address, _set_ip_address)
  group = __builtin__.property(_get_group, _set_group)
  priority = __builtin__.property(_get_priority, _set_priority)
  hsrp_preempt = __builtin__.property(_get_hsrp_preempt, _set_hsrp_preempt)
  preempt_reload = __builtin__.property(_get_preempt_reload, _set_preempt_reload)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  auth_key = __builtin__.property(_get_auth_key, _set_auth_key)
  timer1_msec = __builtin__.property(_get_timer1_msec, _set_timer1_msec)
  timer1 = __builtin__.property(_get_timer1, _set_timer1)
  timer2_msec = __builtin__.property(_get_timer2_msec, _set_timer2_msec)
  timer2 = __builtin__.property(_get_timer2, _set_timer2)
  version = __builtin__.property(_get_version, _set_version)
  group_name = __builtin__.property(_get_group_name, _set_group_name)
  bfd = __builtin__.property(_get_bfd, _set_bfd)
  bfd_interval = __builtin__.property(_get_bfd_interval, _set_bfd_interval)
  bfd_multiplier = __builtin__.property(_get_bfd_multiplier, _set_bfd_multiplier)
  preempt_minimum_delay = __builtin__.property(_get_preempt_minimum_delay, _set_preempt_minimum_delay)
  mgo = __builtin__.property(_get_mgo, _set_mgo)
  track = __builtin__.property(_get_track, _set_track)
  decrement = __builtin__.property(_get_decrement, _set_decrement)
  additional_ipv4_address = __builtin__.property(_get_additional_ipv4_address, _set_additional_ipv4_address)
  additional_ipv6_address = __builtin__.property(_get_additional_ipv6_address, _set_additional_ipv6_address)


  _pyangbind_elements = collections.OrderedDict([('ip_address', ip_address), ('group', group), ('priority', priority), ('hsrp_preempt', hsrp_preempt), ('preempt_reload', preempt_reload), ('auth_type', auth_type), ('auth_key', auth_key), ('timer1_msec', timer1_msec), ('timer1', timer1), ('timer2_msec', timer2_msec), ('timer2', timer2), ('version', version), ('group_name', group_name), ('bfd', bfd), ('bfd_interval', bfd_interval), ('bfd_multiplier', bfd_multiplier), ('preempt_minimum_delay', preempt_minimum_delay), ('mgo', mgo), ('track', track), ('decrement', decrement), ('additional_ipv4_address', additional_ipv4_address), ('additional_ipv6_address', additional_ipv6_address), ])


