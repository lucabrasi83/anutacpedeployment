
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import http_url
class class_match_condition(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/class-maps/class-map/class-match-condition. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__condition_type','__match_value','__only_http','__traffic_class','__business_relevant','__http_url',)

  _yang_name = 'class-match-condition'
  _module_name = 'qos'
  _namespace = 'http://anutanetworks.com/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__match_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="match-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__traffic_class = YANGDynClass(base=unicode, is_leaf=True, yang_name="traffic-class", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__business_relevant = YANGDynClass(base=unicode, is_leaf=True, yang_name="business-relevant", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__only_http = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="only-http", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    self.__condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'access-group': {}, u'protocol': {}, u'dscp': {}, u'qos-group': {}, u'ip-dscp': {}, u'ip dscp': {}, u'any': {}},), is_leaf=True, yang_name="condition-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='condition-type-def', is_config=True)
    self.__http_url = YANGDynClass(base=YANGListType("url",http_url.http_url, yang_name="http-url", module_name="qos", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='url'), is_container='list', yang_name="http-url", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'class-maps', u'class-map', u'class-match-condition']

  def _get_condition_type(self):
    """
    Getter method for condition_type, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/condition_type (condition-type-def)

    YANG Description: dscp
ip dscp
access-group
protocol
ip-dscp
any
qos-group

    """
    return self.__condition_type
      
  def _set_condition_type(self, v, load=False):
    """
    Setter method for condition_type, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/condition_type (condition-type-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_type() directly.

    YANG Description: dscp
ip dscp
access-group
protocol
ip-dscp
any
qos-group

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'access-group': {}, u'protocol': {}, u'dscp': {}, u'qos-group': {}, u'ip-dscp': {}, u'ip dscp': {}, u'any': {}},), is_leaf=True, yang_name="condition-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='condition-type-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_type must be of a type compatible with condition-type-def""",
          'defined-type': "qos:condition-type-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'access-group': {}, u'protocol': {}, u'dscp': {}, u'qos-group': {}, u'ip-dscp': {}, u'ip dscp': {}, u'any': {}},), is_leaf=True, yang_name="condition-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='condition-type-def', is_config=True)""",
        })

    self.__condition_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_type(self):
    self.__condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'access-group': {}, u'protocol': {}, u'dscp': {}, u'qos-group': {}, u'ip-dscp': {}, u'ip dscp': {}, u'any': {}},), is_leaf=True, yang_name="condition-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='condition-type-def', is_config=True)


  def _get_match_value(self):
    """
    Getter method for match_value, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/match_value (string)

    YANG Description: string
    """
    return self.__match_value
      
  def _set_match_value(self, v, load=False):
    """
    Setter method for match_value, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/match_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_value() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="match-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="match-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__match_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_value(self):
    self.__match_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="match-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_only_http(self):
    """
    Getter method for only_http, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/only_http (boolean)

    YANG Description: only-http: True/False
    """
    return self.__only_http
      
  def _set_only_http(self, v, load=False):
    """
    Setter method for only_http, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/only_http (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_only_http is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_only_http() directly.

    YANG Description: only-http: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="only-http", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """only_http must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="only-http", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)""",
        })

    self.__only_http = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_only_http(self):
    self.__only_http = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="only-http", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)


  def _get_traffic_class(self):
    """
    Getter method for traffic_class, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/traffic_class (string)

    YANG Description: string
    """
    return self.__traffic_class
      
  def _set_traffic_class(self, v, load=False):
    """
    Setter method for traffic_class, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/traffic_class (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_class() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="traffic-class", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_class must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="traffic-class", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__traffic_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_class(self):
    self.__traffic_class = YANGDynClass(base=unicode, is_leaf=True, yang_name="traffic-class", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_business_relevant(self):
    """
    Getter method for business_relevant, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/business_relevant (string)

    YANG Description: string
    """
    return self.__business_relevant
      
  def _set_business_relevant(self, v, load=False):
    """
    Setter method for business_relevant, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/business_relevant (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_business_relevant is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_business_relevant() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="business-relevant", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """business_relevant must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="business-relevant", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__business_relevant = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_business_relevant(self):
    self.__business_relevant = YANGDynClass(base=unicode, is_leaf=True, yang_name="business-relevant", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_http_url(self):
    """
    Getter method for http_url, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/http_url (list)
    """
    return self.__http_url
      
  def _set_http_url(self, v, load=False):
    """
    Setter method for http_url, mapped from YANG variable /devices/device/class_maps/class_map/class_match_condition/http_url (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_url() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("url",http_url.http_url, yang_name="http-url", module_name="qos", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='url'), is_container='list', yang_name="http-url", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_url must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("url",http_url.http_url, yang_name="http-url", module_name="qos", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='url'), is_container='list', yang_name="http-url", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='list', is_config=True)""",
        })

    self.__http_url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_url(self):
    self.__http_url = YANGDynClass(base=YANGListType("url",http_url.http_url, yang_name="http-url", module_name="qos", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='url'), is_container='list', yang_name="http-url", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='list', is_config=True)

  condition_type = __builtin__.property(_get_condition_type, _set_condition_type)
  match_value = __builtin__.property(_get_match_value, _set_match_value)
  only_http = __builtin__.property(_get_only_http, _set_only_http)
  traffic_class = __builtin__.property(_get_traffic_class, _set_traffic_class)
  business_relevant = __builtin__.property(_get_business_relevant, _set_business_relevant)
  http_url = __builtin__.property(_get_http_url, _set_http_url)


  _pyangbind_elements = collections.OrderedDict([('condition_type', condition_type), ('match_value', match_value), ('only_http', only_http), ('traffic_class', traffic_class), ('business_relevant', business_relevant), ('http_url', http_url), ])


