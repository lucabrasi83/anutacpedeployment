
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import allowed_vlans
class interface_range(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/interface-ranges/interface-range. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__long_name','__if_index','__description','__mode','__mtu','__hold_time_up','__hold_time_down','__physical_address','__start_interface','__end_interface','__allowed_vlans',)

  _yang_name = 'interface-range'
  _module_name = 'interface'
  _namespace = 'http://anutanetworks.com/interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__physical_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="physical-address", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    self.__hold_time_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-up", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="if-index", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    self.__allowed_vlans = YANGDynClass(base=allowed_vlans.allowed_vlans, is_container='container', yang_name="allowed-vlans", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='container', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    self.__long_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="long-name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    self.__start_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rnc-interface': {}, u'l2-sub-interface': {}, u'loopback-interface': {}, u'sub-interface': {}, u'tunnel': {}, u'vlan': {}, u'l3vpn-interface': {}, u'reset': {}, u'access': {}, u'l2-interface': {}, u'trunk': {}, u'voice': {}, u'l3-interface': {}},), is_leaf=True, yang_name="mode", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='interface-mode', is_config=True)
    self.__hold_time_down = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-down", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    self.__end_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'interface-ranges', u'interface-range']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/interface_ranges/interface_range/name (string)

    YANG Description: Name of the interface. Typically maps to the short name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/interface_ranges/interface_range/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the interface. Typically maps to the short name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_long_name(self):
    """
    Getter method for long_name, mapped from YANG variable /devices/device/interface_ranges/interface_range/long_name (string)

    YANG Description: Complete name of the interface.
    """
    return self.__long_name
      
  def _set_long_name(self, v, load=False):
    """
    Setter method for long_name, mapped from YANG variable /devices/device/interface_ranges/interface_range/long_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_long_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_long_name() directly.

    YANG Description: Complete name of the interface.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="long-name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """long_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="long-name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__long_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_long_name(self):
    self.__long_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="long-name", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_if_index(self):
    """
    Getter method for if_index, mapped from YANG variable /devices/device/interface_ranges/interface_range/if_index (uint32)

    YANG Description: SNMP index of the interface.
    """
    return self.__if_index
      
  def _set_if_index(self, v, load=False):
    """
    Setter method for if_index, mapped from YANG variable /devices/device/interface_ranges/interface_range/if_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_index() directly.

    YANG Description: SNMP index of the interface.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="if-index", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="if-index", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)""",
        })

    self.__if_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_index(self):
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="if-index", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/interface_ranges/interface_range/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/interface_ranges/interface_range/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /devices/device/interface_ranges/interface_range/mode (interface-mode)

    YANG Description: trunk
access
vlan
voice
sub-interface
l3-interface
l2-interface
l2-sub-interface
loopback-interface
tunnel
rnc-interface
l3vpn-interface

    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /devices/device/interface_ranges/interface_range/mode (interface-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: trunk
access
vlan
voice
sub-interface
l3-interface
l2-interface
l2-sub-interface
loopback-interface
tunnel
rnc-interface
l3vpn-interface

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rnc-interface': {}, u'l2-sub-interface': {}, u'loopback-interface': {}, u'sub-interface': {}, u'tunnel': {}, u'vlan': {}, u'l3vpn-interface': {}, u'reset': {}, u'access': {}, u'l2-interface': {}, u'trunk': {}, u'voice': {}, u'l3-interface': {}},), is_leaf=True, yang_name="mode", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='interface-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with interface-mode""",
          'defined-type': "interface:interface-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rnc-interface': {}, u'l2-sub-interface': {}, u'loopback-interface': {}, u'sub-interface': {}, u'tunnel': {}, u'vlan': {}, u'l3vpn-interface': {}, u'reset': {}, u'access': {}, u'l2-interface': {}, u'trunk': {}, u'voice': {}, u'l3-interface': {}},), is_leaf=True, yang_name="mode", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='interface-mode', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rnc-interface': {}, u'l2-sub-interface': {}, u'loopback-interface': {}, u'sub-interface': {}, u'tunnel': {}, u'vlan': {}, u'l3vpn-interface': {}, u'reset': {}, u'access': {}, u'l2-interface': {}, u'trunk': {}, u'voice': {}, u'l3-interface': {}},), is_leaf=True, yang_name="mode", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='interface-mode', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /devices/device/interface_ranges/interface_range/mtu (uint32)

    YANG Description: 0..4294967295
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /devices/device/interface_ranges/interface_range/mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)


  def _get_hold_time_up(self):
    """
    Getter method for hold_time_up, mapped from YANG variable /devices/device/interface_ranges/interface_range/hold_time_up (uint32)

    YANG Description: 0..4294967295
    """
    return self.__hold_time_up
      
  def _set_hold_time_up(self, v, load=False):
    """
    Setter method for hold_time_up, mapped from YANG variable /devices/device/interface_ranges/interface_range/hold_time_up (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hold_time_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hold_time_up() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-up", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hold_time_up must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-up", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)""",
        })

    self.__hold_time_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hold_time_up(self):
    self.__hold_time_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-up", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)


  def _get_hold_time_down(self):
    """
    Getter method for hold_time_down, mapped from YANG variable /devices/device/interface_ranges/interface_range/hold_time_down (uint32)

    YANG Description: 0..4294967295
    """
    return self.__hold_time_down
      
  def _set_hold_time_down(self, v, load=False):
    """
    Setter method for hold_time_down, mapped from YANG variable /devices/device/interface_ranges/interface_range/hold_time_down (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hold_time_down is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hold_time_down() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-down", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hold_time_down must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-down", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)""",
        })

    self.__hold_time_down = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hold_time_down(self):
    self.__hold_time_down = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hold-time-down", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='uint32', is_config=True)


  def _get_physical_address(self):
    """
    Getter method for physical_address, mapped from YANG variable /devices/device/interface_ranges/interface_range/physical_address (string)

    YANG Description: string
    """
    return self.__physical_address
      
  def _set_physical_address(self, v, load=False):
    """
    Setter method for physical_address, mapped from YANG variable /devices/device/interface_ranges/interface_range/physical_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_physical_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_physical_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="physical-address", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """physical_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="physical-address", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__physical_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_physical_address(self):
    self.__physical_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="physical-address", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_start_interface(self):
    """
    Getter method for start_interface, mapped from YANG variable /devices/device/interface_ranges/interface_range/start_interface (string)

    YANG Description: string
    """
    return self.__start_interface
      
  def _set_start_interface(self, v, load=False):
    """
    Setter method for start_interface, mapped from YANG variable /devices/device/interface_ranges/interface_range/start_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__start_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_interface(self):
    self.__start_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_end_interface(self):
    """
    Getter method for end_interface, mapped from YANG variable /devices/device/interface_ranges/interface_range/end_interface (string)

    YANG Description: string
    """
    return self.__end_interface
      
  def _set_end_interface(self, v, load=False):
    """
    Setter method for end_interface, mapped from YANG variable /devices/device/interface_ranges/interface_range/end_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="end-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="end-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)""",
        })

    self.__end_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_interface(self):
    self.__end_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-interface", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='string', is_config=True)


  def _get_allowed_vlans(self):
    """
    Getter method for allowed_vlans, mapped from YANG variable /devices/device/interface_ranges/interface_range/allowed_vlans (container)
    """
    return self.__allowed_vlans
      
  def _set_allowed_vlans(self, v, load=False):
    """
    Setter method for allowed_vlans, mapped from YANG variable /devices/device/interface_ranges/interface_range/allowed_vlans (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allowed_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allowed_vlans() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=allowed_vlans.allowed_vlans, is_container='container', yang_name="allowed-vlans", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allowed_vlans must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=allowed_vlans.allowed_vlans, is_container='container', yang_name="allowed-vlans", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='container', is_config=True)""",
        })

    self.__allowed_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allowed_vlans(self):
    self.__allowed_vlans = YANGDynClass(base=allowed_vlans.allowed_vlans, is_container='container', yang_name="allowed-vlans", module_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/interface', defining_module='interface', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  long_name = __builtin__.property(_get_long_name, _set_long_name)
  if_index = __builtin__.property(_get_if_index, _set_if_index)
  description = __builtin__.property(_get_description, _set_description)
  mode = __builtin__.property(_get_mode, _set_mode)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  hold_time_up = __builtin__.property(_get_hold_time_up, _set_hold_time_up)
  hold_time_down = __builtin__.property(_get_hold_time_down, _set_hold_time_down)
  physical_address = __builtin__.property(_get_physical_address, _set_physical_address)
  start_interface = __builtin__.property(_get_start_interface, _set_start_interface)
  end_interface = __builtin__.property(_get_end_interface, _set_end_interface)
  allowed_vlans = __builtin__.property(_get_allowed_vlans, _set_allowed_vlans)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('long_name', long_name), ('if_index', if_index), ('description', description), ('mode', mode), ('mtu', mtu), ('hold_time_up', hold_time_up), ('hold_time_down', hold_time_down), ('physical_address', physical_address), ('start_interface', start_interface), ('end_interface', end_interface), ('allowed_vlans', allowed_vlans), ])


