
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class lb_route(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/lb-routes/lb-route. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__dest_ip_address','__dest_mask','__domain_number','__partition','__next_hop_ip','__description',)

  _yang_name = 'lb-route'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__dest_mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-mask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__next_hop_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="next-hop-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)
    self.__dest_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip-address", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'lb-routes', u'lb-route']

  def _get_dest_ip_address(self):
    """
    Getter method for dest_ip_address, mapped from YANG variable /devices/device/lb_routes/lb_route/dest_ip_address (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__dest_ip_address
      
  def _set_dest_ip_address(self, v, load=False):
    """
    Setter method for dest_ip_address, mapped from YANG variable /devices/device/lb_routes/lb_route/dest_ip_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_ip_address() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip-address", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_ip_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip-address", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__dest_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_ip_address(self):
    self.__dest_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip-address", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)


  def _get_dest_mask(self):
    """
    Getter method for dest_mask, mapped from YANG variable /devices/device/lb_routes/lb_route/dest_mask (string)

    YANG Description: string
    """
    return self.__dest_mask
      
  def _set_dest_mask(self, v, load=False):
    """
    Setter method for dest_mask, mapped from YANG variable /devices/device/lb_routes/lb_route/dest_mask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_mask() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dest-mask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_mask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-mask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__dest_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_mask(self):
    self.__dest_mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-mask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_domain_number(self):
    """
    Getter method for domain_number, mapped from YANG variable /devices/device/lb_routes/lb_route/domain_number (leafref)

    YANG Description: domain-number
    """
    return self.__domain_number
      
  def _set_domain_number(self, v, load=False):
    """
    Setter method for domain_number, mapped from YANG variable /devices/device/lb_routes/lb_route/domain_number (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_number() directly.

    YANG Description: domain-number
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_number must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__domain_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_number(self):
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_partition(self):
    """
    Getter method for partition, mapped from YANG variable /devices/device/lb_routes/lb_route/partition (leafref)

    YANG Description: partition
    """
    return self.__partition
      
  def _set_partition(self, v, load=False):
    """
    Setter method for partition, mapped from YANG variable /devices/device/lb_routes/lb_route/partition (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partition() directly.

    YANG Description: partition
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partition must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__partition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partition(self):
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_next_hop_ip(self):
    """
    Getter method for next_hop_ip, mapped from YANG variable /devices/device/lb_routes/lb_route/next_hop_ip (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__next_hop_ip
      
  def _set_next_hop_ip(self, v, load=False):
    """
    Setter method for next_hop_ip, mapped from YANG variable /devices/device/lb_routes/lb_route/next_hop_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_ip() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="next-hop-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="next-hop-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__next_hop_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_ip(self):
    self.__next_hop_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="next-hop-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ipv4-address', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/lb_routes/lb_route/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/lb_routes/lb_route/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)

  dest_ip_address = __builtin__.property(_get_dest_ip_address, _set_dest_ip_address)
  dest_mask = __builtin__.property(_get_dest_mask, _set_dest_mask)
  domain_number = __builtin__.property(_get_domain_number, _set_domain_number)
  partition = __builtin__.property(_get_partition, _set_partition)
  next_hop_ip = __builtin__.property(_get_next_hop_ip, _set_next_hop_ip)
  description = __builtin__.property(_get_description, _set_description)


  _pyangbind_elements = collections.OrderedDict([('dest_ip_address', dest_ip_address), ('dest_mask', dest_mask), ('domain_number', domain_number), ('partition', partition), ('next_hop_ip', next_hop_ip), ('description', description), ])


