
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import ipv4_network
import ip_block_1
class ip_block(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/configurations/configuration/ipam/ip-block. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__CIDR_Block','__id','__default_view','__ipv4_network','__ip_block_1',)

  _yang_name = 'ip-block'
  _module_name = 'bluecat'
  _namespace = 'http://anutanetworks.com/bluecat'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__default_view = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-view", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='leafref', is_config=True)
    self.__CIDR_Block = YANGDynClass(base=unicode, is_leaf=True, yang_name="CIDR-Block", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    self.__ip_block_1 = YANGDynClass(base=YANGListType("CIDR_Block",ip_block_1.ip_block_1, yang_name="ip-block-1", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ip-block-1", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)
    self.__ipv4_network = YANGDynClass(base=YANGListType("CIDR_Block",ipv4_network.ipv4_network, yang_name="ipv4-network", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ipv4-network", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'configurations', u'configuration', u'ipam', u'ip-block']

  def _get_CIDR_Block(self):
    """
    Getter method for CIDR_Block, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/CIDR_Block (string)

    YANG Description: string
    """
    return self.__CIDR_Block
      
  def _set_CIDR_Block(self, v, load=False):
    """
    Setter method for CIDR_Block, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/CIDR_Block (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_CIDR_Block is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_CIDR_Block() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="CIDR-Block", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """CIDR_Block must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="CIDR-Block", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)""",
        })

    self.__CIDR_Block = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_CIDR_Block(self):
    self.__CIDR_Block = YANGDynClass(base=unicode, is_leaf=True, yang_name="CIDR-Block", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)


  def _get_default_view(self):
    """
    Getter method for default_view, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/default_view (leafref)

    YANG Description: default-view
    """
    return self.__default_view
      
  def _set_default_view(self, v, load=False):
    """
    Setter method for default_view, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/default_view (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_view is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_view() directly.

    YANG Description: default-view
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-view", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_view must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-view", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='leafref', is_config=True)""",
        })

    self.__default_view = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_view(self):
    self.__default_view = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-view", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='leafref', is_config=True)


  def _get_ipv4_network(self):
    """
    Getter method for ipv4_network, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/ipv4_network (list)
    """
    return self.__ipv4_network
      
  def _set_ipv4_network(self, v, load=False):
    """
    Setter method for ipv4_network, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/ipv4_network (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4_network() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("CIDR_Block",ipv4_network.ipv4_network, yang_name="ipv4-network", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ipv4-network", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4_network must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("CIDR_Block",ipv4_network.ipv4_network, yang_name="ipv4-network", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ipv4-network", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)""",
        })

    self.__ipv4_network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4_network(self):
    self.__ipv4_network = YANGDynClass(base=YANGListType("CIDR_Block",ipv4_network.ipv4_network, yang_name="ipv4-network", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ipv4-network", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)


  def _get_ip_block_1(self):
    """
    Getter method for ip_block_1, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/ip_block_1 (list)
    """
    return self.__ip_block_1
      
  def _set_ip_block_1(self, v, load=False):
    """
    Setter method for ip_block_1, mapped from YANG variable /devices/device/configurations/configuration/ipam/ip_block/ip_block_1 (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_block_1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_block_1() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("CIDR_Block",ip_block_1.ip_block_1, yang_name="ip-block-1", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ip-block-1", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_block_1 must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("CIDR_Block",ip_block_1.ip_block_1, yang_name="ip-block-1", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ip-block-1", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)""",
        })

    self.__ip_block_1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_block_1(self):
    self.__ip_block_1 = YANGDynClass(base=YANGListType("CIDR_Block",ip_block_1.ip_block_1, yang_name="ip-block-1", module_name="bluecat", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='CIDR-Block'), is_container='list', yang_name="ip-block-1", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='list', is_config=True)

  CIDR_Block = __builtin__.property(_get_CIDR_Block, _set_CIDR_Block)
  id = __builtin__.property(_get_id)
  default_view = __builtin__.property(_get_default_view, _set_default_view)
  ipv4_network = __builtin__.property(_get_ipv4_network, _set_ipv4_network)
  ip_block_1 = __builtin__.property(_get_ip_block_1, _set_ip_block_1)


  _pyangbind_elements = collections.OrderedDict([('CIDR_Block', CIDR_Block), ('id', id), ('default_view', default_view), ('ipv4_network', ipv4_network), ('ip_block_1', ip_block_1), ])


