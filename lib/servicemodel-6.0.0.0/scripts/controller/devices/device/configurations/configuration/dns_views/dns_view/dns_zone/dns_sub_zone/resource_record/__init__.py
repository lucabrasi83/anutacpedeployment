
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class resource_record(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/configurations/configuration/dns-views/dns-view/dns-zone/dns-sub-zone/resource-record. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__fqdn','__id','__absolute_name','__type','__record_data',)

  _yang_name = 'resource-record'
  _module_name = 'bluecat'
  _namespace = 'http://anutanetworks.com/bluecat'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__record_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="record-data", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    self.__absolute_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="absolute-name", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Host Record': {}},), is_leaf=True, yang_name="type", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='enumeration', is_config=True)
    self.__fqdn = YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'configurations', u'configuration', u'dns-views', u'dns-view', u'dns-zone', u'dns-sub-zone', u'resource-record']

  def _get_fqdn(self):
    """
    Getter method for fqdn, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/fqdn (string)

    YANG Description: string
    """
    return self.__fqdn
      
  def _set_fqdn(self, v, load=False):
    """
    Setter method for fqdn, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/fqdn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fqdn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fqdn() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="fqdn", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fqdn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)""",
        })

    self.__fqdn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fqdn(self):
    self.__fqdn = YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=False)


  def _get_absolute_name(self):
    """
    Getter method for absolute_name, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/absolute_name (string)

    YANG Description: string
    """
    return self.__absolute_name
      
  def _set_absolute_name(self, v, load=False):
    """
    Setter method for absolute_name, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/absolute_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_absolute_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_absolute_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="absolute-name", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """absolute_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="absolute-name", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)""",
        })

    self.__absolute_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_absolute_name(self):
    self.__absolute_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="absolute-name", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/type (enumeration)

    YANG Description: Host Record

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Host Record

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Host Record': {}},), is_leaf=True, yang_name="type", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with enumeration""",
          'defined-type': "bluecat:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Host Record': {}},), is_leaf=True, yang_name="type", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='enumeration', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Host Record': {}},), is_leaf=True, yang_name="type", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='enumeration', is_config=True)


  def _get_record_data(self):
    """
    Getter method for record_data, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/record_data (string)

    YANG Description: string
    """
    return self.__record_data
      
  def _set_record_data(self, v, load=False):
    """
    Setter method for record_data, mapped from YANG variable /devices/device/configurations/configuration/dns_views/dns_view/dns_zone/dns_sub_zone/resource_record/record_data (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_data() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="record-data", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_data must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="record-data", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)""",
        })

    self.__record_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_data(self):
    self.__record_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="record-data", module_name="bluecat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/bluecat', defining_module='bluecat', yang_type='string', is_config=True)

  fqdn = __builtin__.property(_get_fqdn, _set_fqdn)
  id = __builtin__.property(_get_id)
  absolute_name = __builtin__.property(_get_absolute_name, _set_absolute_name)
  type = __builtin__.property(_get_type, _set_type)
  record_data = __builtin__.property(_get_record_data, _set_record_data)


  _pyangbind_elements = collections.OrderedDict([('fqdn', fqdn), ('id', id), ('absolute_name', absolute_name), ('type', type), ('record_data', record_data), ])


