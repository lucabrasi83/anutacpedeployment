
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class CaTrustPointCertificate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/CaTrustPointCertificate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__url','__vrfName','__ipAddress','__addSerialNumber','__password','__revocationCheck','__sourceInterface','__autoEntrollPeriod','__caCertificate',)

  _yang_name = 'CaTrustPointCertificate'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__revocationCheck = YANGDynClass(base=unicode, is_leaf=True, yang_name="revocationCheck", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__vrfName = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrfName", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__addSerialNumber = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addSerialNumber", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__caCertificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="caCertificate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__autoEntrollPeriod = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="autoEntrollPeriod", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__ipAddress = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipAddress", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__sourceInterface = YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceInterface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'CaTrustPointCertificate']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/CaTrustPointCertificate/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/CaTrustPointCertificate/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_url(self):
    """
    Getter method for url, mapped from YANG variable /devices/device/CaTrustPointCertificate/url (string)

    YANG Description: string
    """
    return self.__url
      
  def _set_url(self, v, load=False):
    """
    Setter method for url, mapped from YANG variable /devices/device/CaTrustPointCertificate/url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_url() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="url", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_url(self):
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_vrfName(self):
    """
    Getter method for vrfName, mapped from YANG variable /devices/device/CaTrustPointCertificate/vrfName (string)

    YANG Description: string
    """
    return self.__vrfName
      
  def _set_vrfName(self, v, load=False):
    """
    Setter method for vrfName, mapped from YANG variable /devices/device/CaTrustPointCertificate/vrfName (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrfName is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrfName() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrfName", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrfName must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrfName", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__vrfName = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrfName(self):
    self.__vrfName = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrfName", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_ipAddress(self):
    """
    Getter method for ipAddress, mapped from YANG variable /devices/device/CaTrustPointCertificate/ipAddress (string)

    YANG Description: string
    """
    return self.__ipAddress
      
  def _set_ipAddress(self, v, load=False):
    """
    Setter method for ipAddress, mapped from YANG variable /devices/device/CaTrustPointCertificate/ipAddress (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipAddress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipAddress() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ipAddress", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipAddress must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ipAddress", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__ipAddress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipAddress(self):
    self.__ipAddress = YANGDynClass(base=unicode, is_leaf=True, yang_name="ipAddress", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_addSerialNumber(self):
    """
    Getter method for addSerialNumber, mapped from YANG variable /devices/device/CaTrustPointCertificate/addSerialNumber (boolean)

    YANG Description: addSerialNumber: True/False
    """
    return self.__addSerialNumber
      
  def _set_addSerialNumber(self, v, load=False):
    """
    Setter method for addSerialNumber, mapped from YANG variable /devices/device/CaTrustPointCertificate/addSerialNumber (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addSerialNumber is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addSerialNumber() directly.

    YANG Description: addSerialNumber: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="addSerialNumber", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addSerialNumber must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addSerialNumber", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__addSerialNumber = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addSerialNumber(self):
    self.__addSerialNumber = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addSerialNumber", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /devices/device/CaTrustPointCertificate/password (string)

    YANG Description: string
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /devices/device/CaTrustPointCertificate/password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="password", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_revocationCheck(self):
    """
    Getter method for revocationCheck, mapped from YANG variable /devices/device/CaTrustPointCertificate/revocationCheck (string)

    YANG Description: string
    """
    return self.__revocationCheck
      
  def _set_revocationCheck(self, v, load=False):
    """
    Setter method for revocationCheck, mapped from YANG variable /devices/device/CaTrustPointCertificate/revocationCheck (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_revocationCheck is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_revocationCheck() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="revocationCheck", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """revocationCheck must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="revocationCheck", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__revocationCheck = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_revocationCheck(self):
    self.__revocationCheck = YANGDynClass(base=unicode, is_leaf=True, yang_name="revocationCheck", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_sourceInterface(self):
    """
    Getter method for sourceInterface, mapped from YANG variable /devices/device/CaTrustPointCertificate/sourceInterface (string)

    YANG Description: string
    """
    return self.__sourceInterface
      
  def _set_sourceInterface(self, v, load=False):
    """
    Setter method for sourceInterface, mapped from YANG variable /devices/device/CaTrustPointCertificate/sourceInterface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sourceInterface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sourceInterface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="sourceInterface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sourceInterface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceInterface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__sourceInterface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sourceInterface(self):
    self.__sourceInterface = YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceInterface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_autoEntrollPeriod(self):
    """
    Getter method for autoEntrollPeriod, mapped from YANG variable /devices/device/CaTrustPointCertificate/autoEntrollPeriod (uint32)

    YANG Description: 0..4294967295
    """
    return self.__autoEntrollPeriod
      
  def _set_autoEntrollPeriod(self, v, load=False):
    """
    Setter method for autoEntrollPeriod, mapped from YANG variable /devices/device/CaTrustPointCertificate/autoEntrollPeriod (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_autoEntrollPeriod is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_autoEntrollPeriod() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="autoEntrollPeriod", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """autoEntrollPeriod must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="autoEntrollPeriod", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__autoEntrollPeriod = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_autoEntrollPeriod(self):
    self.__autoEntrollPeriod = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="autoEntrollPeriod", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_caCertificate(self):
    """
    Getter method for caCertificate, mapped from YANG variable /devices/device/CaTrustPointCertificate/caCertificate (string)

    YANG Description: string
    """
    return self.__caCertificate
      
  def _set_caCertificate(self, v, load=False):
    """
    Setter method for caCertificate, mapped from YANG variable /devices/device/CaTrustPointCertificate/caCertificate (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_caCertificate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_caCertificate() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="caCertificate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """caCertificate must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="caCertificate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__caCertificate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_caCertificate(self):
    self.__caCertificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="caCertificate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  url = __builtin__.property(_get_url, _set_url)
  vrfName = __builtin__.property(_get_vrfName, _set_vrfName)
  ipAddress = __builtin__.property(_get_ipAddress, _set_ipAddress)
  addSerialNumber = __builtin__.property(_get_addSerialNumber, _set_addSerialNumber)
  password = __builtin__.property(_get_password, _set_password)
  revocationCheck = __builtin__.property(_get_revocationCheck, _set_revocationCheck)
  sourceInterface = __builtin__.property(_get_sourceInterface, _set_sourceInterface)
  autoEntrollPeriod = __builtin__.property(_get_autoEntrollPeriod, _set_autoEntrollPeriod)
  caCertificate = __builtin__.property(_get_caCertificate, _set_caCertificate)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('url', url), ('vrfName', vrfName), ('ipAddress', ipAddress), ('addSerialNumber', addSerialNumber), ('password', password), ('revocationCheck', revocationCheck), ('sourceInterface', sourceInterface), ('autoEntrollPeriod', autoEntrollPeriod), ('caCertificate', caCertificate), ])


