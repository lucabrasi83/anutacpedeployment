
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class crypto_proposal(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/crypto-proposals/crypto-proposal. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ike_proposal_name','__ike_default','__ike_version','__ike_policy_name','__interval','__retry_interval','__ike_encryption_type','__ike_authentication_type','__prf','__group',)

  _yang_name = 'crypto-proposal'
  _module_name = 'dmvpn'
  _namespace = 'http://anutanetworks.com/dmvpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__ike_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ike-default", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    self.__ike_policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-policy-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__retry_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__ike_proposal_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-proposal-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__prf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="prf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)
    self.__ike_authentication_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="ike-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)
    self.__ike_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'crypto-proposals', u'crypto-proposal']

  def _get_ike_proposal_name(self):
    """
    Getter method for ike_proposal_name, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_proposal_name (string)

    YANG Description: string
    """
    return self.__ike_proposal_name
      
  def _set_ike_proposal_name(self, v, load=False):
    """
    Setter method for ike_proposal_name, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_proposal_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_proposal_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_proposal_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-proposal-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_proposal_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-proposal-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ike_proposal_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_proposal_name(self):
    self.__ike_proposal_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-proposal-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_ike_default(self):
    """
    Getter method for ike_default, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_default (boolean)

    YANG Description: ike-default: True/False
    """
    return self.__ike_default
      
  def _set_ike_default(self, v, load=False):
    """
    Setter method for ike_default, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_default() directly.

    YANG Description: ike-default: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ike-default", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ike-default", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)""",
        })

    self.__ike_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_default(self):
    self.__ike_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ike-default", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)


  def _get_ike_version(self):
    """
    Getter method for ike_version, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_version (string)

    YANG Description: string
    """
    return self.__ike_version
      
  def _set_ike_version(self, v, load=False):
    """
    Setter method for ike_version, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ike_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_version(self):
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_ike_policy_name(self):
    """
    Getter method for ike_policy_name, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_policy_name (string)

    YANG Description: string
    """
    return self.__ike_policy_name
      
  def _set_ike_policy_name(self, v, load=False):
    """
    Setter method for ike_policy_name, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_policy_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_policy_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_policy_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-policy-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_policy_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-policy-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ike_policy_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_policy_name(self):
    self.__ike_policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-policy-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_interval(self):
    """
    Getter method for interval, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/interval (uint32)

    YANG Description: 0..4294967295
    """
    return self.__interval
      
  def _set_interval(self, v, load=False):
    """
    Setter method for interval, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interval() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interval(self):
    self.__interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_retry_interval(self):
    """
    Getter method for retry_interval, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/retry_interval (uint32)

    YANG Description: 0..4294967295
    """
    return self.__retry_interval
      
  def _set_retry_interval(self, v, load=False):
    """
    Setter method for retry_interval, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/retry_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retry_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retry_interval() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retry_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__retry_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retry_interval(self):
    self.__retry_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-interval", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_ike_encryption_type(self):
    """
    Getter method for ike_encryption_type, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_encryption_type (encryption-mode)

    YANG Description: AES256
AES128
AES192
DES
3DES
aes-cbc-128
aes-cbc-192
aes-cbc-256
aes-gcm-128
aes-gcm-256

    """
    return self.__ike_encryption_type
      
  def _set_ike_encryption_type(self, v, load=False):
    """
    Setter method for ike_encryption_type, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_encryption_type (encryption-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_encryption_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_encryption_type() directly.

    YANG Description: AES256
AES128
AES192
DES
3DES
aes-cbc-128
aes-cbc-192
aes-cbc-256
aes-gcm-128
aes-gcm-256

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_encryption_type must be of a type compatible with encryption-mode""",
          'defined-type': "dmvpn:encryption-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)""",
        })

    self.__ike_encryption_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_encryption_type(self):
    self.__ike_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)


  def _get_ike_authentication_type(self):
    """
    Getter method for ike_authentication_type, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_authentication_type (authentication-mode)

    YANG Description: MD5
SHA1
SHA256
SHA384
SHA512

    """
    return self.__ike_authentication_type
      
  def _set_ike_authentication_type(self, v, load=False):
    """
    Setter method for ike_authentication_type, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/ike_authentication_type (authentication-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_authentication_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_authentication_type() directly.

    YANG Description: MD5
SHA1
SHA256
SHA384
SHA512

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="ike-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_authentication_type must be of a type compatible with authentication-mode""",
          'defined-type': "dmvpn:authentication-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="ike-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)""",
        })

    self.__ike_authentication_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_authentication_type(self):
    self.__ike_authentication_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="ike-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)


  def _get_prf(self):
    """
    Getter method for prf, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/prf (authentication-mode)

    YANG Description: MD5
SHA1
SHA256
SHA384
SHA512

    """
    return self.__prf
      
  def _set_prf(self, v, load=False):
    """
    Setter method for prf, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/prf (authentication-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prf() directly.

    YANG Description: MD5
SHA1
SHA256
SHA384
SHA512

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="prf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prf must be of a type compatible with authentication-mode""",
          'defined-type': "dmvpn:authentication-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="prf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)""",
        })

    self.__prf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prf(self):
    self.__prf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SHA512': {}, u'SHA1': {}, u'SHA256': {}, u'SHA384': {}, u'MD5': {}},), is_leaf=True, yang_name="prf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode', is_config=True)


  def _get_group(self):
    """
    Getter method for group, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/group (uint32)

    YANG Description: 0..4294967295
    """
    return self.__group
      
  def _set_group(self, v, load=False):
    """
    Setter method for group, mapped from YANG variable /devices/device/crypto_proposals/crypto_proposal/group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group(self):
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)

  ike_proposal_name = __builtin__.property(_get_ike_proposal_name, _set_ike_proposal_name)
  ike_default = __builtin__.property(_get_ike_default, _set_ike_default)
  ike_version = __builtin__.property(_get_ike_version, _set_ike_version)
  ike_policy_name = __builtin__.property(_get_ike_policy_name, _set_ike_policy_name)
  interval = __builtin__.property(_get_interval, _set_interval)
  retry_interval = __builtin__.property(_get_retry_interval, _set_retry_interval)
  ike_encryption_type = __builtin__.property(_get_ike_encryption_type, _set_ike_encryption_type)
  ike_authentication_type = __builtin__.property(_get_ike_authentication_type, _set_ike_authentication_type)
  prf = __builtin__.property(_get_prf, _set_prf)
  group = __builtin__.property(_get_group, _set_group)


  _pyangbind_elements = collections.OrderedDict([('ike_proposal_name', ike_proposal_name), ('ike_default', ike_default), ('ike_version', ike_version), ('ike_policy_name', ike_policy_name), ('interval', interval), ('retry_interval', retry_interval), ('ike_encryption_type', ike_encryption_type), ('ike_authentication_type', ike_authentication_type), ('prf', prf), ('group', group), ])


