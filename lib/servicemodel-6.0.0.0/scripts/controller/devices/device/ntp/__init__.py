
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import ntp_server
class ntp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/ntp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ntp','__ntp_source_interface','__vrf','__update_calendar','__ntp_server',)

  _yang_name = 'ntp'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ntp_server = YANGDynClass(base=YANGListType("ntp_server_address",ntp_server.ntp_server, yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ntp-server-address'), is_container='list', yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)
    self.__ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__ntp_source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp-source-interface", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__update_calendar = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-calendar", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'ntp']

  def _get_ntp(self):
    """
    Getter method for ntp, mapped from YANG variable /devices/device/ntp/ntp (string)

    YANG Description: string
    """
    return self.__ntp
      
  def _set_ntp(self, v, load=False):
    """
    Setter method for ntp, mapped from YANG variable /devices/device/ntp/ntp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ntp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ntp() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ntp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ntp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__ntp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ntp(self):
    self.__ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_ntp_source_interface(self):
    """
    Getter method for ntp_source_interface, mapped from YANG variable /devices/device/ntp/ntp_source_interface (string)

    YANG Description: string
    """
    return self.__ntp_source_interface
      
  def _set_ntp_source_interface(self, v, load=False):
    """
    Setter method for ntp_source_interface, mapped from YANG variable /devices/device/ntp/ntp_source_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ntp_source_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ntp_source_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ntp-source-interface", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ntp_source_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp-source-interface", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__ntp_source_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ntp_source_interface(self):
    self.__ntp_source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="ntp-source-interface", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /devices/device/ntp/vrf (string)

    YANG Description: string
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /devices/device/ntp/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_update_calendar(self):
    """
    Getter method for update_calendar, mapped from YANG variable /devices/device/ntp/update_calendar (boolean)

    YANG Description: update-calendar: True/False
    """
    return self.__update_calendar
      
  def _set_update_calendar(self, v, load=False):
    """
    Setter method for update_calendar, mapped from YANG variable /devices/device/ntp/update_calendar (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_calendar is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_calendar() directly.

    YANG Description: update-calendar: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-calendar", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_calendar must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-calendar", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__update_calendar = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_calendar(self):
    self.__update_calendar = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-calendar", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_ntp_server(self):
    """
    Getter method for ntp_server, mapped from YANG variable /devices/device/ntp/ntp_server (list)
    """
    return self.__ntp_server
      
  def _set_ntp_server(self, v, load=False):
    """
    Setter method for ntp_server, mapped from YANG variable /devices/device/ntp/ntp_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ntp_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ntp_server() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ntp_server_address",ntp_server.ntp_server, yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ntp-server-address'), is_container='list', yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ntp_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ntp_server_address",ntp_server.ntp_server, yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ntp-server-address'), is_container='list', yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)""",
        })

    self.__ntp_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ntp_server(self):
    self.__ntp_server = YANGDynClass(base=YANGListType("ntp_server_address",ntp_server.ntp_server, yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ntp-server-address'), is_container='list', yang_name="ntp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)

  ntp = __builtin__.property(_get_ntp, _set_ntp)
  ntp_source_interface = __builtin__.property(_get_ntp_source_interface, _set_ntp_source_interface)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  update_calendar = __builtin__.property(_get_update_calendar, _set_update_calendar)
  ntp_server = __builtin__.property(_get_ntp_server, _set_ntp_server)


  _pyangbind_elements = collections.OrderedDict([('ntp', ntp), ('ntp_source_interface', ntp_source_interface), ('vrf', vrf), ('update_calendar', update_calendar), ('ntp_server', ntp_server), ])


