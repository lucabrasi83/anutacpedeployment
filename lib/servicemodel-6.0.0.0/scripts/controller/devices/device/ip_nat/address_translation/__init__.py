
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import pool
import interface
class address_translation(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/ip-nat/address-translation. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__nat_list','__value','__side','__address_translation','__network','__inside_global_ip','__route_map_name','__prefix_length','__pool','__interface',)

  _yang_name = 'address-translation'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nat_list = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {}, u'route-map': {}, u'list': {}},), is_leaf=True, yang_name="nat-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__route_map_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__network = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__inside_global_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="inside-global-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__prefix_length = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-length", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__interface = YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__side = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inside': {}, u'outside': {}},), is_leaf=True, yang_name="side", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__pool = YANGDynClass(base=YANGListType("pool_name",pool.pool, yang_name="pool", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-name'), is_container='list', yang_name="pool", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__address_translation = YANGDynClass(base=unicode, is_leaf=True, yang_name="address-translation", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'ip-nat', u'address-translation']

  def _get_nat_list(self):
    """
    Getter method for nat_list, mapped from YANG variable /devices/device/ip_nat/address_translation/nat_list (enumeration)

    YANG Description: list
route-map
static

    """
    return self.__nat_list
      
  def _set_nat_list(self, v, load=False):
    """
    Setter method for nat_list, mapped from YANG variable /devices/device/ip_nat/address_translation/nat_list (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nat_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nat_list() directly.

    YANG Description: list
route-map
static

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {}, u'route-map': {}, u'list': {}},), is_leaf=True, yang_name="nat-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nat_list must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {}, u'route-map': {}, u'list': {}},), is_leaf=True, yang_name="nat-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__nat_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nat_list(self):
    self.__nat_list = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {}, u'route-map': {}, u'list': {}},), is_leaf=True, yang_name="nat-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /devices/device/ip_nat/address_translation/value (string)

    YANG Description: string
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /devices/device/ip_nat/address_translation/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_side(self):
    """
    Getter method for side, mapped from YANG variable /devices/device/ip_nat/address_translation/side (enumeration)

    YANG Description: inside
outside

    """
    return self.__side
      
  def _set_side(self, v, load=False):
    """
    Setter method for side, mapped from YANG variable /devices/device/ip_nat/address_translation/side (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_side is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_side() directly.

    YANG Description: inside
outside

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inside': {}, u'outside': {}},), is_leaf=True, yang_name="side", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """side must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inside': {}, u'outside': {}},), is_leaf=True, yang_name="side", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__side = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_side(self):
    self.__side = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inside': {}, u'outside': {}},), is_leaf=True, yang_name="side", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_address_translation(self):
    """
    Getter method for address_translation, mapped from YANG variable /devices/device/ip_nat/address_translation/address_translation (string)

    YANG Description: string
    """
    return self.__address_translation
      
  def _set_address_translation(self, v, load=False):
    """
    Setter method for address_translation, mapped from YANG variable /devices/device/ip_nat/address_translation/address_translation (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address_translation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address_translation() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="address-translation", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address_translation must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="address-translation", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__address_translation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address_translation(self):
    self.__address_translation = YANGDynClass(base=unicode, is_leaf=True, yang_name="address-translation", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /devices/device/ip_nat/address_translation/network (boolean)

    YANG Description: network: True/False
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /devices/device/ip_nat/address_translation/network (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.

    YANG Description: network: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_inside_global_ip(self):
    """
    Getter method for inside_global_ip, mapped from YANG variable /devices/device/ip_nat/address_translation/inside_global_ip (string)

    YANG Description: string
    """
    return self.__inside_global_ip
      
  def _set_inside_global_ip(self, v, load=False):
    """
    Setter method for inside_global_ip, mapped from YANG variable /devices/device/ip_nat/address_translation/inside_global_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inside_global_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inside_global_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="inside-global-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inside_global_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="inside-global-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__inside_global_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inside_global_ip(self):
    self.__inside_global_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="inside-global-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_route_map_name(self):
    """
    Getter method for route_map_name, mapped from YANG variable /devices/device/ip_nat/address_translation/route_map_name (string)

    YANG Description: Route Map Name
    """
    return self.__route_map_name
      
  def _set_route_map_name(self, v, load=False):
    """
    Setter method for route_map_name, mapped from YANG variable /devices/device/ip_nat/address_translation/route_map_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_map_name() directly.

    YANG Description: Route Map Name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="route-map-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_map_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__route_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_map_name(self):
    self.__route_map_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_prefix_length(self):
    """
    Getter method for prefix_length, mapped from YANG variable /devices/device/ip_nat/address_translation/prefix_length (string)

    YANG Description: string
    """
    return self.__prefix_length
      
  def _set_prefix_length(self, v, load=False):
    """
    Setter method for prefix_length, mapped from YANG variable /devices/device/ip_nat/address_translation/prefix_length (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_length() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-length", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_length must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-length", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__prefix_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_length(self):
    self.__prefix_length = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-length", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_pool(self):
    """
    Getter method for pool, mapped from YANG variable /devices/device/ip_nat/address_translation/pool (list)
    """
    return self.__pool
      
  def _set_pool(self, v, load=False):
    """
    Setter method for pool, mapped from YANG variable /devices/device/ip_nat/address_translation/pool (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pool is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pool() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("pool_name",pool.pool, yang_name="pool", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-name'), is_container='list', yang_name="pool", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pool must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("pool_name",pool.pool, yang_name="pool", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-name'), is_container='list', yang_name="pool", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__pool = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pool(self):
    self.__pool = YANGDynClass(base=YANGListType("pool_name",pool.pool, yang_name="pool", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-name'), is_container='list', yang_name="pool", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /devices/device/ip_nat/address_translation/interface (list)
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /devices/device/ip_nat/address_translation/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  nat_list = __builtin__.property(_get_nat_list, _set_nat_list)
  value = __builtin__.property(_get_value, _set_value)
  side = __builtin__.property(_get_side, _set_side)
  address_translation = __builtin__.property(_get_address_translation, _set_address_translation)
  network = __builtin__.property(_get_network, _set_network)
  inside_global_ip = __builtin__.property(_get_inside_global_ip, _set_inside_global_ip)
  route_map_name = __builtin__.property(_get_route_map_name, _set_route_map_name)
  prefix_length = __builtin__.property(_get_prefix_length, _set_prefix_length)
  pool = __builtin__.property(_get_pool, _set_pool)
  interface = __builtin__.property(_get_interface, _set_interface)


  _pyangbind_elements = collections.OrderedDict([('nat_list', nat_list), ('value', value), ('side', side), ('address_translation', address_translation), ('network', network), ('inside_global_ip', inside_global_ip), ('route_map_name', route_map_name), ('prefix_length', prefix_length), ('pool', pool), ('interface', interface), ])


