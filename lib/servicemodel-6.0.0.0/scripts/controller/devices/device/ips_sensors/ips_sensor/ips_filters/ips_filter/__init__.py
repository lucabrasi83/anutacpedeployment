
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ips_filter(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/ips-sensors/ips-sensor/ips-filters/ips-filter. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__filter_number','__ips_location','__ips_severity','__os_list','__protocol_list','__application_list','__ips_status','__ips_action','__ips_quarantine','__ips_expiry','__ips_quarantine_log','__ips_log_packet','__ips_log',)

  _yang_name = 'ips-filter'
  _module_name = 'firewall'
  _namespace = 'http://anutanetworks.com/firewall'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ips_quarantine_log = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__protocol_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__application_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="application-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__os_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="os-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_log_packet = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log-packet", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__filter_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="filter-number", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    self.__ips_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-status", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_severity = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-severity", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_action = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-action", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_quarantine = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__ips_expiry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ips-expiry", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    self.__ips_log = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'ips-sensors', u'ips-sensor', u'ips-filters', u'ips-filter']

  def _get_filter_number(self):
    """
    Getter method for filter_number, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/filter_number (uint32)

    YANG Description: 0..4294967295
    """
    return self.__filter_number
      
  def _set_filter_number(self, v, load=False):
    """
    Setter method for filter_number, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/filter_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_filter_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_filter_number() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="filter-number", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """filter_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="filter-number", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)""",
        })

    self.__filter_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_filter_number(self):
    self.__filter_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="filter-number", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)


  def _get_ips_location(self):
    """
    Getter method for ips_location, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_location (string)

    YANG Description: string
    """
    return self.__ips_location
      
  def _set_ips_location(self, v, load=False):
    """
    Setter method for ips_location, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_location() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_location(self):
    self.__ips_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_severity(self):
    """
    Getter method for ips_severity, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_severity (string)

    YANG Description: string
    """
    return self.__ips_severity
      
  def _set_ips_severity(self, v, load=False):
    """
    Setter method for ips_severity, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_severity (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_severity() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-severity", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_severity must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-severity", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_severity(self):
    self.__ips_severity = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-severity", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_os_list(self):
    """
    Getter method for os_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/os_list (string)

    YANG Description: string
    """
    return self.__os_list
      
  def _set_os_list(self, v, load=False):
    """
    Setter method for os_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/os_list (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_os_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_os_list() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="os-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """os_list must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="os-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__os_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_os_list(self):
    self.__os_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="os-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_protocol_list(self):
    """
    Getter method for protocol_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/protocol_list (string)

    YANG Description: string
    """
    return self.__protocol_list
      
  def _set_protocol_list(self, v, load=False):
    """
    Setter method for protocol_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/protocol_list (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_list() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="protocol-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_list must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__protocol_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_list(self):
    self.__protocol_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_application_list(self):
    """
    Getter method for application_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/application_list (string)

    YANG Description: string
    """
    return self.__application_list
      
  def _set_application_list(self, v, load=False):
    """
    Setter method for application_list, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/application_list (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_application_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_application_list() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="application-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """application_list must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="application-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__application_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_application_list(self):
    self.__application_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="application-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_status(self):
    """
    Getter method for ips_status, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_status (string)

    YANG Description: string
    """
    return self.__ips_status
      
  def _set_ips_status(self, v, load=False):
    """
    Setter method for ips_status, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_status() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-status", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-status", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_status(self):
    self.__ips_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-status", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_action(self):
    """
    Getter method for ips_action, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_action (string)

    YANG Description: string
    """
    return self.__ips_action
      
  def _set_ips_action(self, v, load=False):
    """
    Setter method for ips_action, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_action (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_action() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-action", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_action must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-action", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_action(self):
    self.__ips_action = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-action", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_quarantine(self):
    """
    Getter method for ips_quarantine, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_quarantine (string)

    YANG Description: string
    """
    return self.__ips_quarantine
      
  def _set_ips_quarantine(self, v, load=False):
    """
    Setter method for ips_quarantine, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_quarantine (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_quarantine is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_quarantine() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-quarantine", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_quarantine must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_quarantine = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_quarantine(self):
    self.__ips_quarantine = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_expiry(self):
    """
    Getter method for ips_expiry, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_expiry (uint32)

    YANG Description: 0..4294967295
    """
    return self.__ips_expiry
      
  def _set_ips_expiry(self, v, load=False):
    """
    Setter method for ips_expiry, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_expiry (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_expiry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_expiry() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ips-expiry", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_expiry must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ips-expiry", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)""",
        })

    self.__ips_expiry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_expiry(self):
    self.__ips_expiry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ips-expiry", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)


  def _get_ips_quarantine_log(self):
    """
    Getter method for ips_quarantine_log, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_quarantine_log (string)

    YANG Description: string
    """
    return self.__ips_quarantine_log
      
  def _set_ips_quarantine_log(self, v, load=False):
    """
    Setter method for ips_quarantine_log, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_quarantine_log (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_quarantine_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_quarantine_log() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-quarantine-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_quarantine_log must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_quarantine_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_quarantine_log(self):
    self.__ips_quarantine_log = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-quarantine-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_log_packet(self):
    """
    Getter method for ips_log_packet, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_log_packet (string)

    YANG Description: string
    """
    return self.__ips_log_packet
      
  def _set_ips_log_packet(self, v, load=False):
    """
    Setter method for ips_log_packet, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_log_packet (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_log_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_log_packet() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-log-packet", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_log_packet must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log-packet", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_log_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_log_packet(self):
    self.__ips_log_packet = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log-packet", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_ips_log(self):
    """
    Getter method for ips_log, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_log (string)

    YANG Description: string
    """
    return self.__ips_log
      
  def _set_ips_log(self, v, load=False):
    """
    Setter method for ips_log, mapped from YANG variable /devices/device/ips_sensors/ips_sensor/ips_filters/ips_filter/ips_log (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ips_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ips_log() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ips-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ips_log must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__ips_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ips_log(self):
    self.__ips_log = YANGDynClass(base=unicode, is_leaf=True, yang_name="ips-log", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)

  filter_number = __builtin__.property(_get_filter_number, _set_filter_number)
  ips_location = __builtin__.property(_get_ips_location, _set_ips_location)
  ips_severity = __builtin__.property(_get_ips_severity, _set_ips_severity)
  os_list = __builtin__.property(_get_os_list, _set_os_list)
  protocol_list = __builtin__.property(_get_protocol_list, _set_protocol_list)
  application_list = __builtin__.property(_get_application_list, _set_application_list)
  ips_status = __builtin__.property(_get_ips_status, _set_ips_status)
  ips_action = __builtin__.property(_get_ips_action, _set_ips_action)
  ips_quarantine = __builtin__.property(_get_ips_quarantine, _set_ips_quarantine)
  ips_expiry = __builtin__.property(_get_ips_expiry, _set_ips_expiry)
  ips_quarantine_log = __builtin__.property(_get_ips_quarantine_log, _set_ips_quarantine_log)
  ips_log_packet = __builtin__.property(_get_ips_log_packet, _set_ips_log_packet)
  ips_log = __builtin__.property(_get_ips_log, _set_ips_log)


  _pyangbind_elements = collections.OrderedDict([('filter_number', filter_number), ('ips_location', ips_location), ('ips_severity', ips_severity), ('os_list', os_list), ('protocol_list', protocol_list), ('application_list', application_list), ('ips_status', ips_status), ('ips_action', ips_action), ('ips_quarantine', ips_quarantine), ('ips_expiry', ips_expiry), ('ips_quarantine_log', ips_quarantine_log), ('ips_log_packet', ips_log_packet), ('ips_log', ips_log), ])


