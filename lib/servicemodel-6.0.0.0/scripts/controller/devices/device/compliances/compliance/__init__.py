
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import policy_results
class compliance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/compliances/compliance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__template','__message','__job','__status','__last_compliance_run','__last_compliance_success','__policy_results',)

  _yang_name = 'compliance'
  _module_name = 'devicemanagement'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ncx:compliance-status', is_config=True)
    self.__last_compliance_success = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-success", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__policy_results = YANGDynClass(base=policy_results.policy_results, is_container='container', yang_name="policy-results", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__job = YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__last_compliance_run = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__template = YANGDynClass(base=unicode, is_leaf=True, yang_name="template", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'compliances', u'compliance']

  def _get_template(self):
    """
    Getter method for template, mapped from YANG variable /devices/device/compliances/compliance/template (string)

    YANG Description: string
    """
    return self.__template
      
  def _set_template(self, v, load=False):
    """
    Setter method for template, mapped from YANG variable /devices/device/compliances/compliance/template (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_template is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_template() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="template", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """template must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="template", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__template = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_template(self):
    self.__template = YANGDynClass(base=unicode, is_leaf=True, yang_name="template", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /devices/device/compliances/compliance/message (string)

    YANG Description: string
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /devices/device/compliances/compliance/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_job(self):
    """
    Getter method for job, mapped from YANG variable /devices/device/compliances/compliance/job (string)

    YANG Description: string
    """
    return self.__job
      
  def _set_job(self, v, load=False):
    """
    Setter method for job, mapped from YANG variable /devices/device/compliances/compliance/job (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__job = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job(self):
    self.__job = YANGDynClass(base=unicode, is_leaf=True, yang_name="job", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /devices/device/compliances/compliance/status (ncx:compliance-status)

    YANG Description: COMPLIANT
NON_COMPLIANT
NONE

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /devices/device/compliances/compliance/status (ncx:compliance-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: COMPLIANT
NON_COMPLIANT
NONE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ncx:compliance-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with ncx:compliance-status""",
          'defined-type': "ncx:compliance-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ncx:compliance-status', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMPLIANT': {}, u'NON_COMPLIANT': {}, u'NONE': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ncx:compliance-status', is_config=True)


  def _get_last_compliance_run(self):
    """
    Getter method for last_compliance_run, mapped from YANG variable /devices/device/compliances/compliance/last_compliance_run (string)

    YANG Description: string
    """
    return self.__last_compliance_run
      
  def _set_last_compliance_run(self, v, load=False):
    """
    Setter method for last_compliance_run, mapped from YANG variable /devices/device/compliances/compliance/last_compliance_run (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_compliance_run is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_compliance_run() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-compliance-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_compliance_run must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__last_compliance_run = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_compliance_run(self):
    self.__last_compliance_run = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_last_compliance_success(self):
    """
    Getter method for last_compliance_success, mapped from YANG variable /devices/device/compliances/compliance/last_compliance_success (string)

    YANG Description: string
    """
    return self.__last_compliance_success
      
  def _set_last_compliance_success(self, v, load=False):
    """
    Setter method for last_compliance_success, mapped from YANG variable /devices/device/compliances/compliance/last_compliance_success (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_compliance_success is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_compliance_success() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-compliance-success", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_compliance_success must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-success", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__last_compliance_success = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_compliance_success(self):
    self.__last_compliance_success = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-compliance-success", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_policy_results(self):
    """
    Getter method for policy_results, mapped from YANG variable /devices/device/compliances/compliance/policy_results (container)
    """
    return self.__policy_results
      
  def _set_policy_results(self, v, load=False):
    """
    Setter method for policy_results, mapped from YANG variable /devices/device/compliances/compliance/policy_results (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_results is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_results() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=policy_results.policy_results, is_container='container', yang_name="policy-results", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_results must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=policy_results.policy_results, is_container='container', yang_name="policy-results", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__policy_results = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_results(self):
    self.__policy_results = YANGDynClass(base=policy_results.policy_results, is_container='container', yang_name="policy-results", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  template = __builtin__.property(_get_template, _set_template)
  message = __builtin__.property(_get_message, _set_message)
  job = __builtin__.property(_get_job, _set_job)
  status = __builtin__.property(_get_status, _set_status)
  last_compliance_run = __builtin__.property(_get_last_compliance_run, _set_last_compliance_run)
  last_compliance_success = __builtin__.property(_get_last_compliance_success, _set_last_compliance_success)
  policy_results = __builtin__.property(_get_policy_results, _set_policy_results)


  _pyangbind_elements = collections.OrderedDict([('template', template), ('message', message), ('job', job), ('status', status), ('last_compliance_run', last_compliance_run), ('last_compliance_success', last_compliance_success), ('policy_results', policy_results), ])


