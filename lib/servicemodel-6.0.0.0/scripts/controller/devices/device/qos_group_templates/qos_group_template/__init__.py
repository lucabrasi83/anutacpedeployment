
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class qos_group_template(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/qos-group-templates/qos-group-template. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__policy_name','__rate_limit1','__rate_limit2','__rate_limit3','__cir_rate1','__cir_rate2','__cir_rate3',)

  _yang_name = 'qos-group-template'
  _module_name = 'qos'
  _namespace = 'http://anutanetworks.com/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__rate_limit1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__rate_limit3 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__rate_limit2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    self.__cir_rate1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__cir_rate2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__cir_rate3 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'qos-group-templates', u'qos-group-template']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_policy_name(self):
    """
    Getter method for policy_name, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/policy_name (leafref)

    YANG Description: policy-name
    """
    return self.__policy_name
      
  def _set_policy_name(self, v, load=False):
    """
    Setter method for policy_name, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/policy_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_name() directly.

    YANG Description: policy-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="policy-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)""",
        })

    self.__policy_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_name(self):
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)


  def _get_rate_limit1(self):
    """
    Getter method for rate_limit1, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit1 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rate_limit1
      
  def _set_rate_limit1(self, v, load=False):
    """
    Setter method for rate_limit1, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit1() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__rate_limit1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit1(self):
    self.__rate_limit1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_rate_limit2(self):
    """
    Getter method for rate_limit2, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit2 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rate_limit2
      
  def _set_rate_limit2(self, v, load=False):
    """
    Setter method for rate_limit2, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit2() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__rate_limit2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit2(self):
    self.__rate_limit2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_rate_limit3(self):
    """
    Getter method for rate_limit3, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit3 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rate_limit3
      
  def _set_rate_limit3(self, v, load=False):
    """
    Setter method for rate_limit3, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/rate_limit3 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rate_limit3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rate_limit3() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rate_limit3 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__rate_limit3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rate_limit3(self):
    self.__rate_limit3 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rate-limit3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_cir_rate1(self):
    """
    Getter method for cir_rate1, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate1 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__cir_rate1
      
  def _set_cir_rate1(self, v, load=False):
    """
    Setter method for cir_rate1, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_rate1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_rate1() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_rate1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__cir_rate1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_rate1(self):
    self.__cir_rate1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate1", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_cir_rate2(self):
    """
    Getter method for cir_rate2, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate2 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__cir_rate2
      
  def _set_cir_rate2(self, v, load=False):
    """
    Setter method for cir_rate2, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_rate2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_rate2() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_rate2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__cir_rate2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_rate2(self):
    self.__cir_rate2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate2", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_cir_rate3(self):
    """
    Getter method for cir_rate3, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate3 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__cir_rate3
      
  def _set_cir_rate3(self, v, load=False):
    """
    Setter method for cir_rate3, mapped from YANG variable /devices/device/qos_group_templates/qos_group_template/cir_rate3 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir_rate3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir_rate3() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir_rate3 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__cir_rate3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir_rate3(self):
    self.__cir_rate3 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cir-rate3", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  policy_name = __builtin__.property(_get_policy_name, _set_policy_name)
  rate_limit1 = __builtin__.property(_get_rate_limit1, _set_rate_limit1)
  rate_limit2 = __builtin__.property(_get_rate_limit2, _set_rate_limit2)
  rate_limit3 = __builtin__.property(_get_rate_limit3, _set_rate_limit3)
  cir_rate1 = __builtin__.property(_get_cir_rate1, _set_cir_rate1)
  cir_rate2 = __builtin__.property(_get_cir_rate2, _set_cir_rate2)
  cir_rate3 = __builtin__.property(_get_cir_rate3, _set_cir_rate3)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('policy_name', policy_name), ('rate_limit1', rate_limit1), ('rate_limit2', rate_limit2), ('rate_limit3', rate_limit3), ('cir_rate1', cir_rate1), ('cir_rate2', cir_rate2), ('cir_rate3', cir_rate3), ])


