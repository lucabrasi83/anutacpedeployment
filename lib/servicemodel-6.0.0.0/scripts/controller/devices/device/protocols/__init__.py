
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import cifs
import smb2
import smb3
import http
import oracle_forms
import mapi
import nfs
import citrix
import lotus_notes
class protocols(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__cifs','__smb2','__smb3','__http','__oracle_forms','__mapi','__nfs','__citrix','__lotus_notes',)

  _yang_name = 'protocols'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__http = YANGDynClass(base=http.http, is_container='container', yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__cifs = YANGDynClass(base=cifs.cifs, is_container='container', yang_name="cifs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__oracle_forms = YANGDynClass(base=oracle_forms.oracle_forms, is_container='container', yang_name="oracle-forms", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__mapi = YANGDynClass(base=mapi.mapi, is_container='container', yang_name="mapi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__smb2 = YANGDynClass(base=smb2.smb2, is_container='container', yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__smb3 = YANGDynClass(base=smb3.smb3, is_container='container', yang_name="smb3", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__nfs = YANGDynClass(base=nfs.nfs, is_container='container', yang_name="nfs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__citrix = YANGDynClass(base=citrix.citrix, is_container='container', yang_name="citrix", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__lotus_notes = YANGDynClass(base=lotus_notes.lotus_notes, is_container='container', yang_name="lotus-notes", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols']

  def _get_cifs(self):
    """
    Getter method for cifs, mapped from YANG variable /devices/device/protocols/cifs (container)
    """
    return self.__cifs
      
  def _set_cifs(self, v, load=False):
    """
    Setter method for cifs, mapped from YANG variable /devices/device/protocols/cifs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cifs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=cifs.cifs, is_container='container', yang_name="cifs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cifs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cifs.cifs, is_container='container', yang_name="cifs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__cifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cifs(self):
    self.__cifs = YANGDynClass(base=cifs.cifs, is_container='container', yang_name="cifs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_smb2(self):
    """
    Getter method for smb2, mapped from YANG variable /devices/device/protocols/smb2 (container)
    """
    return self.__smb2
      
  def _set_smb2(self, v, load=False):
    """
    Setter method for smb2, mapped from YANG variable /devices/device/protocols/smb2 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=smb2.smb2, is_container='container', yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=smb2.smb2, is_container='container', yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__smb2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2(self):
    self.__smb2 = YANGDynClass(base=smb2.smb2, is_container='container', yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_smb3(self):
    """
    Getter method for smb3, mapped from YANG variable /devices/device/protocols/smb3 (container)
    """
    return self.__smb3
      
  def _set_smb3(self, v, load=False):
    """
    Setter method for smb3, mapped from YANG variable /devices/device/protocols/smb3 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb3() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=smb3.smb3, is_container='container', yang_name="smb3", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb3 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=smb3.smb3, is_container='container', yang_name="smb3", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__smb3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb3(self):
    self.__smb3 = YANGDynClass(base=smb3.smb3, is_container='container', yang_name="smb3", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_http(self):
    """
    Getter method for http, mapped from YANG variable /devices/device/protocols/http (container)
    """
    return self.__http
      
  def _set_http(self, v, load=False):
    """
    Setter method for http, mapped from YANG variable /devices/device/protocols/http (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=http.http, is_container='container', yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=http.http, is_container='container', yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__http = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http(self):
    self.__http = YANGDynClass(base=http.http, is_container='container', yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_oracle_forms(self):
    """
    Getter method for oracle_forms, mapped from YANG variable /devices/device/protocols/oracle_forms (container)
    """
    return self.__oracle_forms
      
  def _set_oracle_forms(self, v, load=False):
    """
    Setter method for oracle_forms, mapped from YANG variable /devices/device/protocols/oracle_forms (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oracle_forms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oracle_forms() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=oracle_forms.oracle_forms, is_container='container', yang_name="oracle-forms", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oracle_forms must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=oracle_forms.oracle_forms, is_container='container', yang_name="oracle-forms", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__oracle_forms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oracle_forms(self):
    self.__oracle_forms = YANGDynClass(base=oracle_forms.oracle_forms, is_container='container', yang_name="oracle-forms", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_mapi(self):
    """
    Getter method for mapi, mapped from YANG variable /devices/device/protocols/mapi (container)
    """
    return self.__mapi
      
  def _set_mapi(self, v, load=False):
    """
    Setter method for mapi, mapped from YANG variable /devices/device/protocols/mapi (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=mapi.mapi, is_container='container', yang_name="mapi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mapi.mapi, is_container='container', yang_name="mapi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__mapi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi(self):
    self.__mapi = YANGDynClass(base=mapi.mapi, is_container='container', yang_name="mapi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_nfs(self):
    """
    Getter method for nfs, mapped from YANG variable /devices/device/protocols/nfs (container)
    """
    return self.__nfs
      
  def _set_nfs(self, v, load=False):
    """
    Setter method for nfs, mapped from YANG variable /devices/device/protocols/nfs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=nfs.nfs, is_container='container', yang_name="nfs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nfs.nfs, is_container='container', yang_name="nfs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__nfs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs(self):
    self.__nfs = YANGDynClass(base=nfs.nfs, is_container='container', yang_name="nfs", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_citrix(self):
    """
    Getter method for citrix, mapped from YANG variable /devices/device/protocols/citrix (container)
    """
    return self.__citrix
      
  def _set_citrix(self, v, load=False):
    """
    Setter method for citrix, mapped from YANG variable /devices/device/protocols/citrix (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_citrix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_citrix() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=citrix.citrix, is_container='container', yang_name="citrix", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """citrix must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=citrix.citrix, is_container='container', yang_name="citrix", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__citrix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_citrix(self):
    self.__citrix = YANGDynClass(base=citrix.citrix, is_container='container', yang_name="citrix", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_lotus_notes(self):
    """
    Getter method for lotus_notes, mapped from YANG variable /devices/device/protocols/lotus_notes (container)
    """
    return self.__lotus_notes
      
  def _set_lotus_notes(self, v, load=False):
    """
    Setter method for lotus_notes, mapped from YANG variable /devices/device/protocols/lotus_notes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lotus_notes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lotus_notes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=lotus_notes.lotus_notes, is_container='container', yang_name="lotus-notes", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lotus_notes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lotus_notes.lotus_notes, is_container='container', yang_name="lotus-notes", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__lotus_notes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lotus_notes(self):
    self.__lotus_notes = YANGDynClass(base=lotus_notes.lotus_notes, is_container='container', yang_name="lotus-notes", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

  cifs = __builtin__.property(_get_cifs, _set_cifs)
  smb2 = __builtin__.property(_get_smb2, _set_smb2)
  smb3 = __builtin__.property(_get_smb3, _set_smb3)
  http = __builtin__.property(_get_http, _set_http)
  oracle_forms = __builtin__.property(_get_oracle_forms, _set_oracle_forms)
  mapi = __builtin__.property(_get_mapi, _set_mapi)
  nfs = __builtin__.property(_get_nfs, _set_nfs)
  citrix = __builtin__.property(_get_citrix, _set_citrix)
  lotus_notes = __builtin__.property(_get_lotus_notes, _set_lotus_notes)


  _pyangbind_elements = collections.OrderedDict([('cifs', cifs), ('smb2', smb2), ('smb3', smb3), ('http', http), ('oracle_forms', oracle_forms), ('mapi', mapi), ('nfs', nfs), ('citrix', citrix), ('lotus_notes', lotus_notes), ])


