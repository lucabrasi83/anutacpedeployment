
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class mapi(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/mapi. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__mapi_enable','__mapi_port','__outlook_anywhr','__ex365domain','__mapi_encrypted','__mapi_ntlm_auth','__mapi_encrypted_delegation','__mapi_native_krb','__mapi_encyprted_ntlm_bypass','__mapi_multi_auth','__mapi_prepop','__mapi_prepop_max_connections','__mapi_prepop_poll_interval','__mapi_prepop_timeout','__mapi_port_remap',)

  _yang_name = 'mapi'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__outlook_anywhr = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto-detect': {}, u'enable': {}, u'ex365domain': {}},), is_leaf=True, yang_name="outlook-anywhr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_port_remap = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-port-remap", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_multi_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-multi-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_encrypted_delegation = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encrypted-delegation", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_prepop = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-connections': {}, u'enable': {}, u'timeout': {}, u'poll-interval': {}},), is_leaf=True, yang_name="mapi-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__ex365domain = YANGDynClass(base=unicode, is_leaf=True, yang_name="ex365domain", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__mapi_prepop_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__mapi_prepop_max_connections = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-max-connections", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__mapi_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__mapi_ntlm_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-ntlm-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_prepop_poll_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mapi-prepop-poll-interval", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__mapi_encrypted = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'delegation': {}, u'native-krb': {}, u'multi-auth': {}, u'ntlm-bypass': {}, u'ntlm-auth': {}},), is_leaf=True, yang_name="mapi-encrypted", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__mapi_encyprted_ntlm_bypass = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encyprted-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'mapi']

  def _get_mapi_enable(self):
    """
    Getter method for mapi_enable, mapped from YANG variable /devices/device/protocols/mapi/mapi_enable (enumeration)

    YANG Description: enable

    """
    return self.__mapi_enable
      
  def _set_mapi_enable(self, v, load=False):
    """
    Setter method for mapi_enable, mapped from YANG variable /devices/device/protocols/mapi/mapi_enable (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_enable() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_enable must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_enable(self):
    self.__mapi_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_port(self):
    """
    Getter method for mapi_port, mapped from YANG variable /devices/device/protocols/mapi/mapi_port (uint16)

    YANG Description: 0..65535
    """
    return self.__mapi_port
      
  def _set_mapi_port(self, v, load=False):
    """
    Setter method for mapi_port, mapped from YANG variable /devices/device/protocols/mapi/mapi_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_port() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__mapi_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_port(self):
    self.__mapi_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_outlook_anywhr(self):
    """
    Getter method for outlook_anywhr, mapped from YANG variable /devices/device/protocols/mapi/outlook_anywhr (enumeration)

    YANG Description: enable
auto-detect
ex365domain

    """
    return self.__outlook_anywhr
      
  def _set_outlook_anywhr(self, v, load=False):
    """
    Setter method for outlook_anywhr, mapped from YANG variable /devices/device/protocols/mapi/outlook_anywhr (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_outlook_anywhr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_outlook_anywhr() directly.

    YANG Description: enable
auto-detect
ex365domain

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto-detect': {}, u'enable': {}, u'ex365domain': {}},), is_leaf=True, yang_name="outlook-anywhr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """outlook_anywhr must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto-detect': {}, u'enable': {}, u'ex365domain': {}},), is_leaf=True, yang_name="outlook-anywhr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__outlook_anywhr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_outlook_anywhr(self):
    self.__outlook_anywhr = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto-detect': {}, u'enable': {}, u'ex365domain': {}},), is_leaf=True, yang_name="outlook-anywhr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_ex365domain(self):
    """
    Getter method for ex365domain, mapped from YANG variable /devices/device/protocols/mapi/ex365domain (string)

    YANG Description: Excahnge 365 domain name list. Takes comma separated values if there are multiple domains
    """
    return self.__ex365domain
      
  def _set_ex365domain(self, v, load=False):
    """
    Setter method for ex365domain, mapped from YANG variable /devices/device/protocols/mapi/ex365domain (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ex365domain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ex365domain() directly.

    YANG Description: Excahnge 365 domain name list. Takes comma separated values if there are multiple domains
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ex365domain", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ex365domain must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ex365domain", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__ex365domain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ex365domain(self):
    self.__ex365domain = YANGDynClass(base=unicode, is_leaf=True, yang_name="ex365domain", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_mapi_encrypted(self):
    """
    Getter method for mapi_encrypted, mapped from YANG variable /devices/device/protocols/mapi/mapi_encrypted (enumeration)

    YANG Description: enable
ntlm-auth
delegation
native-krb
ntlm-bypass
multi-auth

    """
    return self.__mapi_encrypted
      
  def _set_mapi_encrypted(self, v, load=False):
    """
    Setter method for mapi_encrypted, mapped from YANG variable /devices/device/protocols/mapi/mapi_encrypted (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_encrypted is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_encrypted() directly.

    YANG Description: enable
ntlm-auth
delegation
native-krb
ntlm-bypass
multi-auth

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'delegation': {}, u'native-krb': {}, u'multi-auth': {}, u'ntlm-bypass': {}, u'ntlm-auth': {}},), is_leaf=True, yang_name="mapi-encrypted", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_encrypted must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'delegation': {}, u'native-krb': {}, u'multi-auth': {}, u'ntlm-bypass': {}, u'ntlm-auth': {}},), is_leaf=True, yang_name="mapi-encrypted", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_encrypted = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_encrypted(self):
    self.__mapi_encrypted = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'delegation': {}, u'native-krb': {}, u'multi-auth': {}, u'ntlm-bypass': {}, u'ntlm-auth': {}},), is_leaf=True, yang_name="mapi-encrypted", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_ntlm_auth(self):
    """
    Getter method for mapi_ntlm_auth, mapped from YANG variable /devices/device/protocols/mapi/mapi_ntlm_auth (enumeration)

    YANG Description: enable

    """
    return self.__mapi_ntlm_auth
      
  def _set_mapi_ntlm_auth(self, v, load=False):
    """
    Setter method for mapi_ntlm_auth, mapped from YANG variable /devices/device/protocols/mapi/mapi_ntlm_auth (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_ntlm_auth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_ntlm_auth() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-ntlm-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_ntlm_auth must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-ntlm-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_ntlm_auth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_ntlm_auth(self):
    self.__mapi_ntlm_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-ntlm-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_encrypted_delegation(self):
    """
    Getter method for mapi_encrypted_delegation, mapped from YANG variable /devices/device/protocols/mapi/mapi_encrypted_delegation (enumeration)

    YANG Description: enable

    """
    return self.__mapi_encrypted_delegation
      
  def _set_mapi_encrypted_delegation(self, v, load=False):
    """
    Setter method for mapi_encrypted_delegation, mapped from YANG variable /devices/device/protocols/mapi/mapi_encrypted_delegation (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_encrypted_delegation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_encrypted_delegation() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encrypted-delegation", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_encrypted_delegation must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encrypted-delegation", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_encrypted_delegation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_encrypted_delegation(self):
    self.__mapi_encrypted_delegation = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encrypted-delegation", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_native_krb(self):
    """
    Getter method for mapi_native_krb, mapped from YANG variable /devices/device/protocols/mapi/mapi_native_krb (enumeration)

    YANG Description: enable

    """
    return self.__mapi_native_krb
      
  def _set_mapi_native_krb(self, v, load=False):
    """
    Setter method for mapi_native_krb, mapped from YANG variable /devices/device/protocols/mapi/mapi_native_krb (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_native_krb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_native_krb() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_native_krb must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_native_krb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_native_krb(self):
    self.__mapi_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_encyprted_ntlm_bypass(self):
    """
    Getter method for mapi_encyprted_ntlm_bypass, mapped from YANG variable /devices/device/protocols/mapi/mapi_encyprted_ntlm_bypass (enumeration)

    YANG Description: enable

    """
    return self.__mapi_encyprted_ntlm_bypass
      
  def _set_mapi_encyprted_ntlm_bypass(self, v, load=False):
    """
    Setter method for mapi_encyprted_ntlm_bypass, mapped from YANG variable /devices/device/protocols/mapi/mapi_encyprted_ntlm_bypass (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_encyprted_ntlm_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_encyprted_ntlm_bypass() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encyprted-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_encyprted_ntlm_bypass must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encyprted-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_encyprted_ntlm_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_encyprted_ntlm_bypass(self):
    self.__mapi_encyprted_ntlm_bypass = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-encyprted-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_multi_auth(self):
    """
    Getter method for mapi_multi_auth, mapped from YANG variable /devices/device/protocols/mapi/mapi_multi_auth (enumeration)

    YANG Description: enable

    """
    return self.__mapi_multi_auth
      
  def _set_mapi_multi_auth(self, v, load=False):
    """
    Setter method for mapi_multi_auth, mapped from YANG variable /devices/device/protocols/mapi/mapi_multi_auth (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_multi_auth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_multi_auth() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-multi-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_multi_auth must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-multi-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_multi_auth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_multi_auth(self):
    self.__mapi_multi_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-multi-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_prepop(self):
    """
    Getter method for mapi_prepop, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop (enumeration)

    YANG Description: enable
max-connections
poll-interval
timeout

    """
    return self.__mapi_prepop
      
  def _set_mapi_prepop(self, v, load=False):
    """
    Setter method for mapi_prepop, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_prepop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_prepop() directly.

    YANG Description: enable
max-connections
poll-interval
timeout

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-connections': {}, u'enable': {}, u'timeout': {}, u'poll-interval': {}},), is_leaf=True, yang_name="mapi-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_prepop must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-connections': {}, u'enable': {}, u'timeout': {}, u'poll-interval': {}},), is_leaf=True, yang_name="mapi-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_prepop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_prepop(self):
    self.__mapi_prepop = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-connections': {}, u'enable': {}, u'timeout': {}, u'poll-interval': {}},), is_leaf=True, yang_name="mapi-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_mapi_prepop_max_connections(self):
    """
    Getter method for mapi_prepop_max_connections, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_max_connections (uint16)

    YANG Description: 0..65535
    """
    return self.__mapi_prepop_max_connections
      
  def _set_mapi_prepop_max_connections(self, v, load=False):
    """
    Setter method for mapi_prepop_max_connections, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_max_connections (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_prepop_max_connections is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_prepop_max_connections() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-max-connections", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_prepop_max_connections must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-max-connections", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__mapi_prepop_max_connections = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_prepop_max_connections(self):
    self.__mapi_prepop_max_connections = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-max-connections", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_mapi_prepop_poll_interval(self):
    """
    Getter method for mapi_prepop_poll_interval, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_poll_interval (uint32)

    YANG Description: Poll Interval in minutes
    """
    return self.__mapi_prepop_poll_interval
      
  def _set_mapi_prepop_poll_interval(self, v, load=False):
    """
    Setter method for mapi_prepop_poll_interval, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_poll_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_prepop_poll_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_prepop_poll_interval() directly.

    YANG Description: Poll Interval in minutes
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mapi-prepop-poll-interval", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_prepop_poll_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mapi-prepop-poll-interval", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__mapi_prepop_poll_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_prepop_poll_interval(self):
    self.__mapi_prepop_poll_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mapi-prepop-poll-interval", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_mapi_prepop_timeout(self):
    """
    Getter method for mapi_prepop_timeout, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_timeout (uint16)

    YANG Description: Timeout in hours
    """
    return self.__mapi_prepop_timeout
      
  def _set_mapi_prepop_timeout(self, v, load=False):
    """
    Setter method for mapi_prepop_timeout, mapped from YANG variable /devices/device/protocols/mapi/mapi_prepop_timeout (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_prepop_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_prepop_timeout() directly.

    YANG Description: Timeout in hours
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_prepop_timeout must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__mapi_prepop_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_prepop_timeout(self):
    self.__mapi_prepop_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mapi-prepop-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_mapi_port_remap(self):
    """
    Getter method for mapi_port_remap, mapped from YANG variable /devices/device/protocols/mapi/mapi_port_remap (enumeration)

    YANG Description: enable

    """
    return self.__mapi_port_remap
      
  def _set_mapi_port_remap(self, v, load=False):
    """
    Setter method for mapi_port_remap, mapped from YANG variable /devices/device/protocols/mapi/mapi_port_remap (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapi_port_remap is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapi_port_remap() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-port-remap", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapi_port_remap must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-port-remap", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__mapi_port_remap = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapi_port_remap(self):
    self.__mapi_port_remap = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="mapi-port-remap", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

  mapi_enable = __builtin__.property(_get_mapi_enable, _set_mapi_enable)
  mapi_port = __builtin__.property(_get_mapi_port, _set_mapi_port)
  outlook_anywhr = __builtin__.property(_get_outlook_anywhr, _set_outlook_anywhr)
  ex365domain = __builtin__.property(_get_ex365domain, _set_ex365domain)
  mapi_encrypted = __builtin__.property(_get_mapi_encrypted, _set_mapi_encrypted)
  mapi_ntlm_auth = __builtin__.property(_get_mapi_ntlm_auth, _set_mapi_ntlm_auth)
  mapi_encrypted_delegation = __builtin__.property(_get_mapi_encrypted_delegation, _set_mapi_encrypted_delegation)
  mapi_native_krb = __builtin__.property(_get_mapi_native_krb, _set_mapi_native_krb)
  mapi_encyprted_ntlm_bypass = __builtin__.property(_get_mapi_encyprted_ntlm_bypass, _set_mapi_encyprted_ntlm_bypass)
  mapi_multi_auth = __builtin__.property(_get_mapi_multi_auth, _set_mapi_multi_auth)
  mapi_prepop = __builtin__.property(_get_mapi_prepop, _set_mapi_prepop)
  mapi_prepop_max_connections = __builtin__.property(_get_mapi_prepop_max_connections, _set_mapi_prepop_max_connections)
  mapi_prepop_poll_interval = __builtin__.property(_get_mapi_prepop_poll_interval, _set_mapi_prepop_poll_interval)
  mapi_prepop_timeout = __builtin__.property(_get_mapi_prepop_timeout, _set_mapi_prepop_timeout)
  mapi_port_remap = __builtin__.property(_get_mapi_port_remap, _set_mapi_port_remap)


  _pyangbind_elements = collections.OrderedDict([('mapi_enable', mapi_enable), ('mapi_port', mapi_port), ('outlook_anywhr', outlook_anywhr), ('ex365domain', ex365domain), ('mapi_encrypted', mapi_encrypted), ('mapi_ntlm_auth', mapi_ntlm_auth), ('mapi_encrypted_delegation', mapi_encrypted_delegation), ('mapi_native_krb', mapi_native_krb), ('mapi_encyprted_ntlm_bypass', mapi_encyprted_ntlm_bypass), ('mapi_multi_auth', mapi_multi_auth), ('mapi_prepop', mapi_prepop), ('mapi_prepop_max_connections', mapi_prepop_max_connections), ('mapi_prepop_poll_interval', mapi_prepop_poll_interval), ('mapi_prepop_timeout', mapi_prepop_timeout), ('mapi_port_remap', mapi_port_remap), ])


