
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class smb2(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/smb2. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__smb2','__decoder_check','__dump_list_limit','__smb2_signing','__smb2_signing_ntlm_bypass','__smb2_signing_mode_type','__smb2_native_krb',)

  _yang_name = 'smb2'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__smb2_signing_ntlm_bypass = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__smb2_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'downgrade': {}, u'enable': {}},), is_leaf=True, yang_name="smb2-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__smb2 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dump_list_limit': {}, u'enable': {}, u'decoder-check': {}},), is_leaf=True, yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__smb2_signing = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__dump_list_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dump_list_limit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__decoder_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="decoder-check", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__smb2_signing_mode_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'delegation': {}, u'transparent': {}},), is_leaf=True, yang_name="smb2-signing-mode-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'smb2']

  def _get_smb2(self):
    """
    Getter method for smb2, mapped from YANG variable /devices/device/protocols/smb2/smb2 (enumeration)

    YANG Description: enable
decoder-check
dump_list_limit

    """
    return self.__smb2
      
  def _set_smb2(self, v, load=False):
    """
    Setter method for smb2, mapped from YANG variable /devices/device/protocols/smb2/smb2 (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2() directly.

    YANG Description: enable
decoder-check
dump_list_limit

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dump_list_limit': {}, u'enable': {}, u'decoder-check': {}},), is_leaf=True, yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2 must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dump_list_limit': {}, u'enable': {}, u'decoder-check': {}},), is_leaf=True, yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__smb2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2(self):
    self.__smb2 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dump_list_limit': {}, u'enable': {}, u'decoder-check': {}},), is_leaf=True, yang_name="smb2", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_decoder_check(self):
    """
    Getter method for decoder_check, mapped from YANG variable /devices/device/protocols/smb2/decoder_check (enumeration)

    YANG Description: enable

    """
    return self.__decoder_check
      
  def _set_decoder_check(self, v, load=False):
    """
    Setter method for decoder_check, mapped from YANG variable /devices/device/protocols/smb2/decoder_check (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_decoder_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_decoder_check() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="decoder-check", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """decoder_check must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="decoder-check", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__decoder_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_decoder_check(self):
    self.__decoder_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="decoder-check", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_dump_list_limit(self):
    """
    Getter method for dump_list_limit, mapped from YANG variable /devices/device/protocols/smb2/dump_list_limit (uint16)

    YANG Description: Number of items to dump from a given data structure
    """
    return self.__dump_list_limit
      
  def _set_dump_list_limit(self, v, load=False):
    """
    Setter method for dump_list_limit, mapped from YANG variable /devices/device/protocols/smb2/dump_list_limit (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dump_list_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dump_list_limit() directly.

    YANG Description: Number of items to dump from a given data structure
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dump_list_limit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dump_list_limit must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dump_list_limit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__dump_list_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dump_list_limit(self):
    self.__dump_list_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dump_list_limit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_smb2_signing(self):
    """
    Getter method for smb2_signing, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing (enumeration)

    YANG Description: enable

    """
    return self.__smb2_signing
      
  def _set_smb2_signing(self, v, load=False):
    """
    Setter method for smb2_signing, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2_signing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2_signing() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2_signing must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__smb2_signing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2_signing(self):
    self.__smb2_signing = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_smb2_signing_ntlm_bypass(self):
    """
    Getter method for smb2_signing_ntlm_bypass, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing_ntlm_bypass (enumeration)

    YANG Description: enable

    """
    return self.__smb2_signing_ntlm_bypass
      
  def _set_smb2_signing_ntlm_bypass(self, v, load=False):
    """
    Setter method for smb2_signing_ntlm_bypass, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing_ntlm_bypass (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2_signing_ntlm_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2_signing_ntlm_bypass() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2_signing_ntlm_bypass must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__smb2_signing_ntlm_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2_signing_ntlm_bypass(self):
    self.__smb2_signing_ntlm_bypass = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="smb2-signing-ntlm-bypass", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_smb2_signing_mode_type(self):
    """
    Getter method for smb2_signing_mode_type, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing_mode_type (enumeration)

    YANG Description: transparent
delegation

    """
    return self.__smb2_signing_mode_type
      
  def _set_smb2_signing_mode_type(self, v, load=False):
    """
    Setter method for smb2_signing_mode_type, mapped from YANG variable /devices/device/protocols/smb2/smb2_signing_mode_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2_signing_mode_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2_signing_mode_type() directly.

    YANG Description: transparent
delegation

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'delegation': {}, u'transparent': {}},), is_leaf=True, yang_name="smb2-signing-mode-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2_signing_mode_type must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'delegation': {}, u'transparent': {}},), is_leaf=True, yang_name="smb2-signing-mode-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__smb2_signing_mode_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2_signing_mode_type(self):
    self.__smb2_signing_mode_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'delegation': {}, u'transparent': {}},), is_leaf=True, yang_name="smb2-signing-mode-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_smb2_native_krb(self):
    """
    Getter method for smb2_native_krb, mapped from YANG variable /devices/device/protocols/smb2/smb2_native_krb (enumeration)

    YANG Description: enable
downgrade

    """
    return self.__smb2_native_krb
      
  def _set_smb2_native_krb(self, v, load=False):
    """
    Setter method for smb2_native_krb, mapped from YANG variable /devices/device/protocols/smb2/smb2_native_krb (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smb2_native_krb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smb2_native_krb() directly.

    YANG Description: enable
downgrade

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'downgrade': {}, u'enable': {}},), is_leaf=True, yang_name="smb2-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smb2_native_krb must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'downgrade': {}, u'enable': {}},), is_leaf=True, yang_name="smb2-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__smb2_native_krb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smb2_native_krb(self):
    self.__smb2_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'downgrade': {}, u'enable': {}},), is_leaf=True, yang_name="smb2-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

  smb2 = __builtin__.property(_get_smb2, _set_smb2)
  decoder_check = __builtin__.property(_get_decoder_check, _set_decoder_check)
  dump_list_limit = __builtin__.property(_get_dump_list_limit, _set_dump_list_limit)
  smb2_signing = __builtin__.property(_get_smb2_signing, _set_smb2_signing)
  smb2_signing_ntlm_bypass = __builtin__.property(_get_smb2_signing_ntlm_bypass, _set_smb2_signing_ntlm_bypass)
  smb2_signing_mode_type = __builtin__.property(_get_smb2_signing_mode_type, _set_smb2_signing_mode_type)
  smb2_native_krb = __builtin__.property(_get_smb2_native_krb, _set_smb2_native_krb)


  _pyangbind_elements = collections.OrderedDict([('smb2', smb2), ('decoder_check', decoder_check), ('dump_list_limit', dump_list_limit), ('smb2_signing', smb2_signing), ('smb2_signing_ntlm_bypass', smb2_signing_ntlm_bypass), ('smb2_signing_mode_type', smb2_signing_mode_type), ('smb2_native_krb', smb2_native_krb), ])


