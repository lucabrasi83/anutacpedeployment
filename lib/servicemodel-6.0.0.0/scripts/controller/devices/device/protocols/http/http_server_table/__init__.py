
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class http_server_table(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/http/http-server-table. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__server_table','__subnet','__hostname','__obj_pref_table','__parse_prefetch','__url_learning','__reuse_auth','__strip_auth_hdr','__stream_split','__gratuitous_401','__force_nego_ntlm','__strip_compress','__insert_cookie','__insrt_keep_aliv','__fpse','__webdav','__fsshttp',)

  _yang_name = 'http-server-table'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__gratuitous_401 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="gratuitous-401", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__subnet = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all-ipv6': {}, u'all-ipv4': {}},),], is_leaf=True, yang_name="subnet", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__insert_cookie = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insert-cookie", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__strip_compress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-compress", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__webdav = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="webdav", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__obj_pref_table = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="obj-pref-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__reuse_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="reuse-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__url_learning = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="url-learning", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__hostname = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}},),], is_leaf=True, yang_name="hostname", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__strip_auth_hdr = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-auth-hdr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__force_nego_ntlm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="force-nego-ntlm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__parse_prefetch = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="parse-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__insrt_keep_aliv = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insrt-keep-aliv", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__stream_split = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="stream-split", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__fsshttp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fsshttp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__server_table = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'subnet': {}, u'hostname': {}},), is_leaf=True, yang_name="server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__fpse = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fpse", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'http', u'http-server-table']

  def _get_server_table(self):
    """
    Getter method for server_table, mapped from YANG variable /devices/device/protocols/http/http_server_table/server_table (enumeration)

    YANG Description: default
subnet
hostname

    """
    return self.__server_table
      
  def _set_server_table(self, v, load=False):
    """
    Setter method for server_table, mapped from YANG variable /devices/device/protocols/http/http_server_table/server_table (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_server_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_server_table() directly.

    YANG Description: default
subnet
hostname

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'subnet': {}, u'hostname': {}},), is_leaf=True, yang_name="server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """server_table must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'subnet': {}, u'hostname': {}},), is_leaf=True, yang_name="server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__server_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_server_table(self):
    self.__server_table = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'subnet': {}, u'hostname': {}},), is_leaf=True, yang_name="server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_subnet(self):
    """
    Getter method for subnet, mapped from YANG variable /devices/device/protocols/http/http_server_table/subnet (union)

    YANG Description: Union Input types:
inet:ipv4-prefix
enumeration

    """
    return self.__subnet
      
  def _set_subnet(self, v, load=False):
    """
    Setter method for subnet, mapped from YANG variable /devices/device/protocols/http/http_server_table/subnet (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subnet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subnet() directly.

    YANG Description: Union Input types:
inet:ipv4-prefix
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all-ipv6': {}, u'all-ipv4': {}},),], is_leaf=True, yang_name="subnet", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subnet must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all-ipv6': {}, u'all-ipv4': {}},),], is_leaf=True, yang_name="subnet", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__subnet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subnet(self):
    self.__subnet = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all-ipv6': {}, u'all-ipv4': {}},),], is_leaf=True, yang_name="subnet", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_hostname(self):
    """
    Getter method for hostname, mapped from YANG variable /devices/device/protocols/http/http_server_table/hostname (union)

    YANG Description: Union Input types:
string
enumeration

    """
    return self.__hostname
      
  def _set_hostname(self, v, load=False):
    """
    Setter method for hostname, mapped from YANG variable /devices/device/protocols/http/http_server_table/hostname (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hostname is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hostname() directly.

    YANG Description: Union Input types:
string
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}},),], is_leaf=True, yang_name="hostname", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hostname must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}},),], is_leaf=True, yang_name="hostname", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__hostname = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hostname(self):
    self.__hostname = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}},),], is_leaf=True, yang_name="hostname", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_obj_pref_table(self):
    """
    Getter method for obj_pref_table, mapped from YANG variable /devices/device/protocols/http/http_server_table/obj_pref_table (enumeration)

    YANG Description: yes
no

    """
    return self.__obj_pref_table
      
  def _set_obj_pref_table(self, v, load=False):
    """
    Setter method for obj_pref_table, mapped from YANG variable /devices/device/protocols/http/http_server_table/obj_pref_table (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_obj_pref_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_obj_pref_table() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="obj-pref-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """obj_pref_table must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="obj-pref-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__obj_pref_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_obj_pref_table(self):
    self.__obj_pref_table = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="obj-pref-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_parse_prefetch(self):
    """
    Getter method for parse_prefetch, mapped from YANG variable /devices/device/protocols/http/http_server_table/parse_prefetch (enumeration)

    YANG Description: yes
no

    """
    return self.__parse_prefetch
      
  def _set_parse_prefetch(self, v, load=False):
    """
    Setter method for parse_prefetch, mapped from YANG variable /devices/device/protocols/http/http_server_table/parse_prefetch (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parse_prefetch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parse_prefetch() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="parse-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parse_prefetch must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="parse-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__parse_prefetch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parse_prefetch(self):
    self.__parse_prefetch = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="parse-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_url_learning(self):
    """
    Getter method for url_learning, mapped from YANG variable /devices/device/protocols/http/http_server_table/url_learning (enumeration)

    YANG Description: yes
no

    """
    return self.__url_learning
      
  def _set_url_learning(self, v, load=False):
    """
    Setter method for url_learning, mapped from YANG variable /devices/device/protocols/http/http_server_table/url_learning (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_url_learning is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_url_learning() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="url-learning", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """url_learning must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="url-learning", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__url_learning = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_url_learning(self):
    self.__url_learning = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="url-learning", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_reuse_auth(self):
    """
    Getter method for reuse_auth, mapped from YANG variable /devices/device/protocols/http/http_server_table/reuse_auth (enumeration)

    YANG Description: yes
no

    """
    return self.__reuse_auth
      
  def _set_reuse_auth(self, v, load=False):
    """
    Setter method for reuse_auth, mapped from YANG variable /devices/device/protocols/http/http_server_table/reuse_auth (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reuse_auth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reuse_auth() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="reuse-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reuse_auth must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="reuse-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__reuse_auth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reuse_auth(self):
    self.__reuse_auth = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="reuse-auth", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_strip_auth_hdr(self):
    """
    Getter method for strip_auth_hdr, mapped from YANG variable /devices/device/protocols/http/http_server_table/strip_auth_hdr (enumeration)

    YANG Description: yes
no

    """
    return self.__strip_auth_hdr
      
  def _set_strip_auth_hdr(self, v, load=False):
    """
    Setter method for strip_auth_hdr, mapped from YANG variable /devices/device/protocols/http/http_server_table/strip_auth_hdr (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_strip_auth_hdr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_strip_auth_hdr() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-auth-hdr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """strip_auth_hdr must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-auth-hdr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__strip_auth_hdr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_strip_auth_hdr(self):
    self.__strip_auth_hdr = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-auth-hdr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_stream_split(self):
    """
    Getter method for stream_split, mapped from YANG variable /devices/device/protocols/http/http_server_table/stream_split (enumeration)

    YANG Description: yes
no

    """
    return self.__stream_split
      
  def _set_stream_split(self, v, load=False):
    """
    Setter method for stream_split, mapped from YANG variable /devices/device/protocols/http/http_server_table/stream_split (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stream_split is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stream_split() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="stream-split", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stream_split must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="stream-split", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__stream_split = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stream_split(self):
    self.__stream_split = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="stream-split", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_gratuitous_401(self):
    """
    Getter method for gratuitous_401, mapped from YANG variable /devices/device/protocols/http/http_server_table/gratuitous_401 (enumeration)

    YANG Description: yes
no

    """
    return self.__gratuitous_401
      
  def _set_gratuitous_401(self, v, load=False):
    """
    Setter method for gratuitous_401, mapped from YANG variable /devices/device/protocols/http/http_server_table/gratuitous_401 (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gratuitous_401 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gratuitous_401() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="gratuitous-401", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gratuitous_401 must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="gratuitous-401", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__gratuitous_401 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gratuitous_401(self):
    self.__gratuitous_401 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="gratuitous-401", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_force_nego_ntlm(self):
    """
    Getter method for force_nego_ntlm, mapped from YANG variable /devices/device/protocols/http/http_server_table/force_nego_ntlm (enumeration)

    YANG Description: yes
no

    """
    return self.__force_nego_ntlm
      
  def _set_force_nego_ntlm(self, v, load=False):
    """
    Setter method for force_nego_ntlm, mapped from YANG variable /devices/device/protocols/http/http_server_table/force_nego_ntlm (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_force_nego_ntlm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_force_nego_ntlm() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="force-nego-ntlm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """force_nego_ntlm must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="force-nego-ntlm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__force_nego_ntlm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_force_nego_ntlm(self):
    self.__force_nego_ntlm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="force-nego-ntlm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_strip_compress(self):
    """
    Getter method for strip_compress, mapped from YANG variable /devices/device/protocols/http/http_server_table/strip_compress (enumeration)

    YANG Description: yes
no

    """
    return self.__strip_compress
      
  def _set_strip_compress(self, v, load=False):
    """
    Setter method for strip_compress, mapped from YANG variable /devices/device/protocols/http/http_server_table/strip_compress (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_strip_compress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_strip_compress() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-compress", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """strip_compress must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-compress", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__strip_compress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_strip_compress(self):
    self.__strip_compress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="strip-compress", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_insert_cookie(self):
    """
    Getter method for insert_cookie, mapped from YANG variable /devices/device/protocols/http/http_server_table/insert_cookie (enumeration)

    YANG Description: yes
no

    """
    return self.__insert_cookie
      
  def _set_insert_cookie(self, v, load=False):
    """
    Setter method for insert_cookie, mapped from YANG variable /devices/device/protocols/http/http_server_table/insert_cookie (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_insert_cookie is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_insert_cookie() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insert-cookie", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """insert_cookie must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insert-cookie", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__insert_cookie = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_insert_cookie(self):
    self.__insert_cookie = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insert-cookie", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_insrt_keep_aliv(self):
    """
    Getter method for insrt_keep_aliv, mapped from YANG variable /devices/device/protocols/http/http_server_table/insrt_keep_aliv (enumeration)

    YANG Description: yes
no

    """
    return self.__insrt_keep_aliv
      
  def _set_insrt_keep_aliv(self, v, load=False):
    """
    Setter method for insrt_keep_aliv, mapped from YANG variable /devices/device/protocols/http/http_server_table/insrt_keep_aliv (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_insrt_keep_aliv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_insrt_keep_aliv() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insrt-keep-aliv", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """insrt_keep_aliv must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insrt-keep-aliv", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__insrt_keep_aliv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_insrt_keep_aliv(self):
    self.__insrt_keep_aliv = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="insrt-keep-aliv", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_fpse(self):
    """
    Getter method for fpse, mapped from YANG variable /devices/device/protocols/http/http_server_table/fpse (enumeration)

    YANG Description: yes
no
*

    """
    return self.__fpse
      
  def _set_fpse(self, v, load=False):
    """
    Setter method for fpse, mapped from YANG variable /devices/device/protocols/http/http_server_table/fpse (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fpse is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fpse() directly.

    YANG Description: yes
no
*

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fpse", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fpse must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fpse", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__fpse = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fpse(self):
    self.__fpse = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fpse", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_webdav(self):
    """
    Getter method for webdav, mapped from YANG variable /devices/device/protocols/http/http_server_table/webdav (enumeration)

    YANG Description: yes
no
*

    """
    return self.__webdav
      
  def _set_webdav(self, v, load=False):
    """
    Setter method for webdav, mapped from YANG variable /devices/device/protocols/http/http_server_table/webdav (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_webdav is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_webdav() directly.

    YANG Description: yes
no
*

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="webdav", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """webdav must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="webdav", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__webdav = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_webdav(self):
    self.__webdav = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="webdav", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_fsshttp(self):
    """
    Getter method for fsshttp, mapped from YANG variable /devices/device/protocols/http/http_server_table/fsshttp (enumeration)

    YANG Description: yes
no
*

    """
    return self.__fsshttp
      
  def _set_fsshttp(self, v, load=False):
    """
    Setter method for fsshttp, mapped from YANG variable /devices/device/protocols/http/http_server_table/fsshttp (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fsshttp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fsshttp() directly.

    YANG Description: yes
no
*

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fsshttp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fsshttp must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fsshttp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__fsshttp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fsshttp(self):
    self.__fsshttp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'*': {}, u'no': {}},), is_leaf=True, yang_name="fsshttp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

  server_table = __builtin__.property(_get_server_table, _set_server_table)
  subnet = __builtin__.property(_get_subnet, _set_subnet)
  hostname = __builtin__.property(_get_hostname, _set_hostname)
  obj_pref_table = __builtin__.property(_get_obj_pref_table, _set_obj_pref_table)
  parse_prefetch = __builtin__.property(_get_parse_prefetch, _set_parse_prefetch)
  url_learning = __builtin__.property(_get_url_learning, _set_url_learning)
  reuse_auth = __builtin__.property(_get_reuse_auth, _set_reuse_auth)
  strip_auth_hdr = __builtin__.property(_get_strip_auth_hdr, _set_strip_auth_hdr)
  stream_split = __builtin__.property(_get_stream_split, _set_stream_split)
  gratuitous_401 = __builtin__.property(_get_gratuitous_401, _set_gratuitous_401)
  force_nego_ntlm = __builtin__.property(_get_force_nego_ntlm, _set_force_nego_ntlm)
  strip_compress = __builtin__.property(_get_strip_compress, _set_strip_compress)
  insert_cookie = __builtin__.property(_get_insert_cookie, _set_insert_cookie)
  insrt_keep_aliv = __builtin__.property(_get_insrt_keep_aliv, _set_insrt_keep_aliv)
  fpse = __builtin__.property(_get_fpse, _set_fpse)
  webdav = __builtin__.property(_get_webdav, _set_webdav)
  fsshttp = __builtin__.property(_get_fsshttp, _set_fsshttp)


  _pyangbind_elements = collections.OrderedDict([('server_table', server_table), ('subnet', subnet), ('hostname', hostname), ('obj_pref_table', obj_pref_table), ('parse_prefetch', parse_prefetch), ('url_learning', url_learning), ('reuse_auth', reuse_auth), ('strip_auth_hdr', strip_auth_hdr), ('stream_split', stream_split), ('gratuitous_401', gratuitous_401), ('force_nego_ntlm', force_nego_ntlm), ('strip_compress', strip_compress), ('insert_cookie', insert_cookie), ('insrt_keep_aliv', insrt_keep_aliv), ('fpse', fpse), ('webdav', webdav), ('fsshttp', fsshttp), ])


