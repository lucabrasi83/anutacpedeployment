
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import http_server_table
class http(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/http. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__http','__http_prepop','__http_prepop_list','__http_prepop_verify_svr_cert','__metadata_resp_extension','__metadata_resp_max_time','__metadata_resp_min_time','__metadata_resp_mode','__auto_config','__auto_config_selection','__http_native_krb','__http_prefetch','__extension','__tag','__tag_attribute','__http_server_table',)

  _yang_name = 'http'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auto_config_selection = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reuse-auth': {}, u'strip-auth-hdr': {}, u'force-nego-ntlm': {}, u'WebDAV': {}, u'insert-cookie': {}, u'stream-split': {}, u'url-learning': {}, u'insrt-keep-aliv': {}, u'gratuitous-401': {}, u'FSSHTTP': {}, u'obj-pref-table': {}, u'parse-prefetch': {}, u'FPSE': {}, u'strip-compress': {}},), is_leaf=True, yang_name="auto-config-selection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__tag_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="tag-attribute", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__http_prepop_verify_svr_cert = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-prepop-verify-svr-cert", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__http_prepop = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'verify-svr-cert': {}, u'list': {}},), is_leaf=True, yang_name="http-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__metadata_resp_min_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-min-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__extension = YANGDynClass(base=unicode, is_leaf=True, yang_name="extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__auto_config = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="auto-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__metadata_resp_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}, u'use-list': {}, u'none': {}},), is_leaf=True, yang_name="metadata-resp-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__metadata_resp_max_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-max-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__metadata_resp_extension = YANGDynClass(base=unicode, is_leaf=True, yang_name="metadata-resp-extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__tag = YANGDynClass(base=unicode, is_leaf=True, yang_name="tag", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__http_prepop_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="http-prepop-list", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__http = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prepop': {}, u'enable': {}},), is_leaf=True, yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__http_prefetch = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tag': {}, u'extension': {}},), is_leaf=True, yang_name="http-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__http_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__http_server_table = YANGDynClass(base=YANGListType("server_table",http_server_table.http_server_table, yang_name="http-server-table", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-table'), is_container='list', yang_name="http-server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'http']

  def _get_http(self):
    """
    Getter method for http, mapped from YANG variable /devices/device/protocols/http/http (enumeration)

    YANG Description: enable
prepop

    """
    return self.__http
      
  def _set_http(self, v, load=False):
    """
    Setter method for http, mapped from YANG variable /devices/device/protocols/http/http (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http() directly.

    YANG Description: enable
prepop

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prepop': {}, u'enable': {}},), is_leaf=True, yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prepop': {}, u'enable': {}},), is_leaf=True, yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__http = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http(self):
    self.__http = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prepop': {}, u'enable': {}},), is_leaf=True, yang_name="http", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_http_prepop(self):
    """
    Getter method for http_prepop, mapped from YANG variable /devices/device/protocols/http/http_prepop (enumeration)

    YANG Description: list
verify-svr-cert

    """
    return self.__http_prepop
      
  def _set_http_prepop(self, v, load=False):
    """
    Setter method for http_prepop, mapped from YANG variable /devices/device/protocols/http/http_prepop (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_prepop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_prepop() directly.

    YANG Description: list
verify-svr-cert

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'verify-svr-cert': {}, u'list': {}},), is_leaf=True, yang_name="http-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_prepop must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'verify-svr-cert': {}, u'list': {}},), is_leaf=True, yang_name="http-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__http_prepop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_prepop(self):
    self.__http_prepop = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'verify-svr-cert': {}, u'list': {}},), is_leaf=True, yang_name="http-prepop", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_http_prepop_list(self):
    """
    Getter method for http_prepop_list, mapped from YANG variable /devices/device/protocols/http/http_prepop_list (string)

    YANG Description: List name
    """
    return self.__http_prepop_list
      
  def _set_http_prepop_list(self, v, load=False):
    """
    Setter method for http_prepop_list, mapped from YANG variable /devices/device/protocols/http/http_prepop_list (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_prepop_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_prepop_list() directly.

    YANG Description: List name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="http-prepop-list", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_prepop_list must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="http-prepop-list", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__http_prepop_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_prepop_list(self):
    self.__http_prepop_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="http-prepop-list", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_http_prepop_verify_svr_cert(self):
    """
    Getter method for http_prepop_verify_svr_cert, mapped from YANG variable /devices/device/protocols/http/http_prepop_verify_svr_cert (enumeration)

    YANG Description: enable

    """
    return self.__http_prepop_verify_svr_cert
      
  def _set_http_prepop_verify_svr_cert(self, v, load=False):
    """
    Setter method for http_prepop_verify_svr_cert, mapped from YANG variable /devices/device/protocols/http/http_prepop_verify_svr_cert (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_prepop_verify_svr_cert is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_prepop_verify_svr_cert() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-prepop-verify-svr-cert", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_prepop_verify_svr_cert must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-prepop-verify-svr-cert", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__http_prepop_verify_svr_cert = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_prepop_verify_svr_cert(self):
    self.__http_prepop_verify_svr_cert = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-prepop-verify-svr-cert", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_metadata_resp_extension(self):
    """
    Getter method for metadata_resp_extension, mapped from YANG variable /devices/device/protocols/http/metadata_resp_extension (string)

    YANG Description: string
    """
    return self.__metadata_resp_extension
      
  def _set_metadata_resp_extension(self, v, load=False):
    """
    Setter method for metadata_resp_extension, mapped from YANG variable /devices/device/protocols/http/metadata_resp_extension (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_resp_extension is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_resp_extension() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="metadata-resp-extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_resp_extension must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="metadata-resp-extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__metadata_resp_extension = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_resp_extension(self):
    self.__metadata_resp_extension = YANGDynClass(base=unicode, is_leaf=True, yang_name="metadata-resp-extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_metadata_resp_max_time(self):
    """
    Getter method for metadata_resp_max_time, mapped from YANG variable /devices/device/protocols/http/metadata_resp_max_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__metadata_resp_max_time
      
  def _set_metadata_resp_max_time(self, v, load=False):
    """
    Setter method for metadata_resp_max_time, mapped from YANG variable /devices/device/protocols/http/metadata_resp_max_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_resp_max_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_resp_max_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-max-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_resp_max_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-max-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__metadata_resp_max_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_resp_max_time(self):
    self.__metadata_resp_max_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-max-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_metadata_resp_min_time(self):
    """
    Getter method for metadata_resp_min_time, mapped from YANG variable /devices/device/protocols/http/metadata_resp_min_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__metadata_resp_min_time
      
  def _set_metadata_resp_min_time(self, v, load=False):
    """
    Setter method for metadata_resp_min_time, mapped from YANG variable /devices/device/protocols/http/metadata_resp_min_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_resp_min_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_resp_min_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-min-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_resp_min_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-min-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__metadata_resp_min_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_resp_min_time(self):
    self.__metadata_resp_min_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metadata-resp-min-time", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_metadata_resp_mode(self):
    """
    Getter method for metadata_resp_mode, mapped from YANG variable /devices/device/protocols/http/metadata_resp_mode (enumeration)

    YANG Description: all
use-list
none

    """
    return self.__metadata_resp_mode
      
  def _set_metadata_resp_mode(self, v, load=False):
    """
    Setter method for metadata_resp_mode, mapped from YANG variable /devices/device/protocols/http/metadata_resp_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metadata_resp_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metadata_resp_mode() directly.

    YANG Description: all
use-list
none

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}, u'use-list': {}, u'none': {}},), is_leaf=True, yang_name="metadata-resp-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metadata_resp_mode must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}, u'use-list': {}, u'none': {}},), is_leaf=True, yang_name="metadata-resp-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__metadata_resp_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metadata_resp_mode(self):
    self.__metadata_resp_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'all': {}, u'use-list': {}, u'none': {}},), is_leaf=True, yang_name="metadata-resp-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_auto_config(self):
    """
    Getter method for auto_config, mapped from YANG variable /devices/device/protocols/http/auto_config (enumeration)

    YANG Description: enable

    """
    return self.__auto_config
      
  def _set_auto_config(self, v, load=False):
    """
    Setter method for auto_config, mapped from YANG variable /devices/device/protocols/http/auto_config (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_config() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="auto-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_config must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="auto-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__auto_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_config(self):
    self.__auto_config = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="auto-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_auto_config_selection(self):
    """
    Getter method for auto_config_selection, mapped from YANG variable /devices/device/protocols/http/auto_config_selection (enumeration)

    YANG Description: obj-pref-table
parse-prefetch
url-learning
reuse-auth
stream-split
strip-auth-hdr
gratuitous-401
force-nego-ntlm
strip-compress
insert-cookie
insrt-keep-aliv
FPSE
WebDAV
FSSHTTP

    """
    return self.__auto_config_selection
      
  def _set_auto_config_selection(self, v, load=False):
    """
    Setter method for auto_config_selection, mapped from YANG variable /devices/device/protocols/http/auto_config_selection (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_config_selection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_config_selection() directly.

    YANG Description: obj-pref-table
parse-prefetch
url-learning
reuse-auth
stream-split
strip-auth-hdr
gratuitous-401
force-nego-ntlm
strip-compress
insert-cookie
insrt-keep-aliv
FPSE
WebDAV
FSSHTTP

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reuse-auth': {}, u'strip-auth-hdr': {}, u'force-nego-ntlm': {}, u'WebDAV': {}, u'insert-cookie': {}, u'stream-split': {}, u'url-learning': {}, u'insrt-keep-aliv': {}, u'gratuitous-401': {}, u'FSSHTTP': {}, u'obj-pref-table': {}, u'parse-prefetch': {}, u'FPSE': {}, u'strip-compress': {}},), is_leaf=True, yang_name="auto-config-selection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_config_selection must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reuse-auth': {}, u'strip-auth-hdr': {}, u'force-nego-ntlm': {}, u'WebDAV': {}, u'insert-cookie': {}, u'stream-split': {}, u'url-learning': {}, u'insrt-keep-aliv': {}, u'gratuitous-401': {}, u'FSSHTTP': {}, u'obj-pref-table': {}, u'parse-prefetch': {}, u'FPSE': {}, u'strip-compress': {}},), is_leaf=True, yang_name="auto-config-selection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__auto_config_selection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_config_selection(self):
    self.__auto_config_selection = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reuse-auth': {}, u'strip-auth-hdr': {}, u'force-nego-ntlm': {}, u'WebDAV': {}, u'insert-cookie': {}, u'stream-split': {}, u'url-learning': {}, u'insrt-keep-aliv': {}, u'gratuitous-401': {}, u'FSSHTTP': {}, u'obj-pref-table': {}, u'parse-prefetch': {}, u'FPSE': {}, u'strip-compress': {}},), is_leaf=True, yang_name="auto-config-selection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_http_native_krb(self):
    """
    Getter method for http_native_krb, mapped from YANG variable /devices/device/protocols/http/http_native_krb (enumeration)

    YANG Description: enable

    """
    return self.__http_native_krb
      
  def _set_http_native_krb(self, v, load=False):
    """
    Setter method for http_native_krb, mapped from YANG variable /devices/device/protocols/http/http_native_krb (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_native_krb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_native_krb() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_native_krb must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__http_native_krb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_native_krb(self):
    self.__http_native_krb = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="http-native-krb", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_http_prefetch(self):
    """
    Getter method for http_prefetch, mapped from YANG variable /devices/device/protocols/http/http_prefetch (enumeration)

    YANG Description: extension
tag

    """
    return self.__http_prefetch
      
  def _set_http_prefetch(self, v, load=False):
    """
    Setter method for http_prefetch, mapped from YANG variable /devices/device/protocols/http/http_prefetch (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_prefetch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_prefetch() directly.

    YANG Description: extension
tag

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tag': {}, u'extension': {}},), is_leaf=True, yang_name="http-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_prefetch must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tag': {}, u'extension': {}},), is_leaf=True, yang_name="http-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__http_prefetch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_prefetch(self):
    self.__http_prefetch = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tag': {}, u'extension': {}},), is_leaf=True, yang_name="http-prefetch", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_extension(self):
    """
    Getter method for extension, mapped from YANG variable /devices/device/protocols/http/extension (string)

    YANG Description: string
    """
    return self.__extension
      
  def _set_extension(self, v, load=False):
    """
    Setter method for extension, mapped from YANG variable /devices/device/protocols/http/extension (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_extension is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_extension() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """extension must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__extension = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_extension(self):
    self.__extension = YANGDynClass(base=unicode, is_leaf=True, yang_name="extension", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /devices/device/protocols/http/tag (string)

    YANG Description: string
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /devices/device/protocols/http/tag (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tag", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tag", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=unicode, is_leaf=True, yang_name="tag", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_tag_attribute(self):
    """
    Getter method for tag_attribute, mapped from YANG variable /devices/device/protocols/http/tag_attribute (string)

    YANG Description: string
    """
    return self.__tag_attribute
      
  def _set_tag_attribute(self, v, load=False):
    """
    Setter method for tag_attribute, mapped from YANG variable /devices/device/protocols/http/tag_attribute (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag_attribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag_attribute() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tag-attribute", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag_attribute must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tag-attribute", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__tag_attribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag_attribute(self):
    self.__tag_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="tag-attribute", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_http_server_table(self):
    """
    Getter method for http_server_table, mapped from YANG variable /devices/device/protocols/http/http_server_table (list)
    """
    return self.__http_server_table
      
  def _set_http_server_table(self, v, load=False):
    """
    Setter method for http_server_table, mapped from YANG variable /devices/device/protocols/http/http_server_table (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_server_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_server_table() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("server_table",http_server_table.http_server_table, yang_name="http-server-table", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-table'), is_container='list', yang_name="http-server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_server_table must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("server_table",http_server_table.http_server_table, yang_name="http-server-table", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-table'), is_container='list', yang_name="http-server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__http_server_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_server_table(self):
    self.__http_server_table = YANGDynClass(base=YANGListType("server_table",http_server_table.http_server_table, yang_name="http-server-table", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-table'), is_container='list', yang_name="http-server-table", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

  http = __builtin__.property(_get_http, _set_http)
  http_prepop = __builtin__.property(_get_http_prepop, _set_http_prepop)
  http_prepop_list = __builtin__.property(_get_http_prepop_list, _set_http_prepop_list)
  http_prepop_verify_svr_cert = __builtin__.property(_get_http_prepop_verify_svr_cert, _set_http_prepop_verify_svr_cert)
  metadata_resp_extension = __builtin__.property(_get_metadata_resp_extension, _set_metadata_resp_extension)
  metadata_resp_max_time = __builtin__.property(_get_metadata_resp_max_time, _set_metadata_resp_max_time)
  metadata_resp_min_time = __builtin__.property(_get_metadata_resp_min_time, _set_metadata_resp_min_time)
  metadata_resp_mode = __builtin__.property(_get_metadata_resp_mode, _set_metadata_resp_mode)
  auto_config = __builtin__.property(_get_auto_config, _set_auto_config)
  auto_config_selection = __builtin__.property(_get_auto_config_selection, _set_auto_config_selection)
  http_native_krb = __builtin__.property(_get_http_native_krb, _set_http_native_krb)
  http_prefetch = __builtin__.property(_get_http_prefetch, _set_http_prefetch)
  extension = __builtin__.property(_get_extension, _set_extension)
  tag = __builtin__.property(_get_tag, _set_tag)
  tag_attribute = __builtin__.property(_get_tag_attribute, _set_tag_attribute)
  http_server_table = __builtin__.property(_get_http_server_table, _set_http_server_table)


  _pyangbind_elements = collections.OrderedDict([('http', http), ('http_prepop', http_prepop), ('http_prepop_list', http_prepop_list), ('http_prepop_verify_svr_cert', http_prepop_verify_svr_cert), ('metadata_resp_extension', metadata_resp_extension), ('metadata_resp_max_time', metadata_resp_max_time), ('metadata_resp_min_time', metadata_resp_min_time), ('metadata_resp_mode', metadata_resp_mode), ('auto_config', auto_config), ('auto_config_selection', auto_config_selection), ('http_native_krb', http_native_krb), ('http_prefetch', http_prefetch), ('extension', extension), ('tag', tag), ('tag_attribute', tag_attribute), ('http_server_table', http_server_table), ])


