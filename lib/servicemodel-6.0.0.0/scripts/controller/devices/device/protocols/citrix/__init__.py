
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class citrix(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/citrix. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__citrix_optimization','__ica_port','__session_reliability_port','__secure_ica_encryption','__client_device_mapping','__auto_msi','__multiport_ica','__priority_0_port','__priority_1_port','__priority_2_port','__priority_3_port',)

  _yang_name = 'citrix'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority_1_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-1-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__multiport_ica = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="multiport-ica", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    self.__client_device_mapping = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="client-device-mapping", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    self.__priority_3_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-3-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__secure_ica_encryption = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="secure-ica-encryption", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    self.__ica_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ica-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__priority_0_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-0-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__citrix_optimization = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="citrix-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    self.__session_reliability_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="session-reliability-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__priority_2_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority-2-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__auto_msi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="auto-msi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'citrix']

  def _get_citrix_optimization(self):
    """
    Getter method for citrix_optimization, mapped from YANG variable /devices/device/protocols/citrix/citrix_optimization (settings-def)

    YANG Description: enable
disable

    """
    return self.__citrix_optimization
      
  def _set_citrix_optimization(self, v, load=False):
    """
    Setter method for citrix_optimization, mapped from YANG variable /devices/device/protocols/citrix/citrix_optimization (settings-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_citrix_optimization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_citrix_optimization() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="citrix-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """citrix_optimization must be of a type compatible with settings-def""",
          'defined-type': "wanoptimizer:settings-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="citrix-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)""",
        })

    self.__citrix_optimization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_citrix_optimization(self):
    self.__citrix_optimization = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="citrix-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)


  def _get_ica_port(self):
    """
    Getter method for ica_port, mapped from YANG variable /devices/device/protocols/citrix/ica_port (uint16)

    YANG Description: Value must be between 0 and 65535
    """
    return self.__ica_port
      
  def _set_ica_port(self, v, load=False):
    """
    Setter method for ica_port, mapped from YANG variable /devices/device/protocols/citrix/ica_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ica_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ica_port() directly.

    YANG Description: Value must be between 0 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ica-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ica_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ica-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__ica_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ica_port(self):
    self.__ica_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ica-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_session_reliability_port(self):
    """
    Getter method for session_reliability_port, mapped from YANG variable /devices/device/protocols/citrix/session_reliability_port (uint16)

    YANG Description: Value must be between 0 and 65535
    """
    return self.__session_reliability_port
      
  def _set_session_reliability_port(self, v, load=False):
    """
    Setter method for session_reliability_port, mapped from YANG variable /devices/device/protocols/citrix/session_reliability_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_reliability_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_reliability_port() directly.

    YANG Description: Value must be between 0 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="session-reliability-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_reliability_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="session-reliability-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__session_reliability_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_reliability_port(self):
    self.__session_reliability_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="session-reliability-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_secure_ica_encryption(self):
    """
    Getter method for secure_ica_encryption, mapped from YANG variable /devices/device/protocols/citrix/secure_ica_encryption (settings-def)

    YANG Description: enable
disable

    """
    return self.__secure_ica_encryption
      
  def _set_secure_ica_encryption(self, v, load=False):
    """
    Setter method for secure_ica_encryption, mapped from YANG variable /devices/device/protocols/citrix/secure_ica_encryption (settings-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secure_ica_encryption is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secure_ica_encryption() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="secure-ica-encryption", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secure_ica_encryption must be of a type compatible with settings-def""",
          'defined-type': "wanoptimizer:settings-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="secure-ica-encryption", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)""",
        })

    self.__secure_ica_encryption = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secure_ica_encryption(self):
    self.__secure_ica_encryption = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="secure-ica-encryption", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)


  def _get_client_device_mapping(self):
    """
    Getter method for client_device_mapping, mapped from YANG variable /devices/device/protocols/citrix/client_device_mapping (settings-def)

    YANG Description: enable
disable

    """
    return self.__client_device_mapping
      
  def _set_client_device_mapping(self, v, load=False):
    """
    Setter method for client_device_mapping, mapped from YANG variable /devices/device/protocols/citrix/client_device_mapping (settings-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_client_device_mapping is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_client_device_mapping() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="client-device-mapping", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """client_device_mapping must be of a type compatible with settings-def""",
          'defined-type': "wanoptimizer:settings-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="client-device-mapping", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)""",
        })

    self.__client_device_mapping = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_client_device_mapping(self):
    self.__client_device_mapping = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="client-device-mapping", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)


  def _get_auto_msi(self):
    """
    Getter method for auto_msi, mapped from YANG variable /devices/device/protocols/citrix/auto_msi (settings-def)

    YANG Description: enable
disable

    """
    return self.__auto_msi
      
  def _set_auto_msi(self, v, load=False):
    """
    Setter method for auto_msi, mapped from YANG variable /devices/device/protocols/citrix/auto_msi (settings-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_msi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_msi() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="auto-msi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_msi must be of a type compatible with settings-def""",
          'defined-type': "wanoptimizer:settings-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="auto-msi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)""",
        })

    self.__auto_msi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_msi(self):
    self.__auto_msi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="auto-msi", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)


  def _get_multiport_ica(self):
    """
    Getter method for multiport_ica, mapped from YANG variable /devices/device/protocols/citrix/multiport_ica (settings-def)

    YANG Description: enable
disable

    """
    return self.__multiport_ica
      
  def _set_multiport_ica(self, v, load=False):
    """
    Setter method for multiport_ica, mapped from YANG variable /devices/device/protocols/citrix/multiport_ica (settings-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multiport_ica is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multiport_ica() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="multiport-ica", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multiport_ica must be of a type compatible with settings-def""",
          'defined-type': "wanoptimizer:settings-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="multiport-ica", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)""",
        })

    self.__multiport_ica = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multiport_ica(self):
    self.__multiport_ica = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="multiport-ica", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='settings-def', is_config=True)


  def _get_priority_0_port(self):
    """
    Getter method for priority_0_port, mapped from YANG variable /devices/device/protocols/citrix/priority_0_port (uint16)

    YANG Description: Value must be between 1 and 65535
    """
    return self.__priority_0_port
      
  def _set_priority_0_port(self, v, load=False):
    """
    Setter method for priority_0_port, mapped from YANG variable /devices/device/protocols/citrix/priority_0_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_0_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_0_port() directly.

    YANG Description: Value must be between 1 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-0-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_0_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-0-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__priority_0_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_0_port(self):
    self.__priority_0_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-0-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_priority_1_port(self):
    """
    Getter method for priority_1_port, mapped from YANG variable /devices/device/protocols/citrix/priority_1_port (uint16)

    YANG Description: Value must be between 1 and 65535
    """
    return self.__priority_1_port
      
  def _set_priority_1_port(self, v, load=False):
    """
    Setter method for priority_1_port, mapped from YANG variable /devices/device/protocols/citrix/priority_1_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_1_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_1_port() directly.

    YANG Description: Value must be between 1 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-1-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_1_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-1-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__priority_1_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_1_port(self):
    self.__priority_1_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-1-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_priority_2_port(self):
    """
    Getter method for priority_2_port, mapped from YANG variable /devices/device/protocols/citrix/priority_2_port (uint16)

    YANG Description: Value must be between 1 and 65535
    """
    return self.__priority_2_port
      
  def _set_priority_2_port(self, v, load=False):
    """
    Setter method for priority_2_port, mapped from YANG variable /devices/device/protocols/citrix/priority_2_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_2_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_2_port() directly.

    YANG Description: Value must be between 1 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority-2-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_2_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority-2-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__priority_2_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_2_port(self):
    self.__priority_2_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="priority-2-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_priority_3_port(self):
    """
    Getter method for priority_3_port, mapped from YANG variable /devices/device/protocols/citrix/priority_3_port (uint16)

    YANG Description: Value must be between 1 and 65535
    """
    return self.__priority_3_port
      
  def _set_priority_3_port(self, v, load=False):
    """
    Setter method for priority_3_port, mapped from YANG variable /devices/device/protocols/citrix/priority_3_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_3_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_3_port() directly.

    YANG Description: Value must be between 1 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-3-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_3_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-3-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__priority_3_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_3_port(self):
    self.__priority_3_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="priority-3-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)

  citrix_optimization = __builtin__.property(_get_citrix_optimization, _set_citrix_optimization)
  ica_port = __builtin__.property(_get_ica_port, _set_ica_port)
  session_reliability_port = __builtin__.property(_get_session_reliability_port, _set_session_reliability_port)
  secure_ica_encryption = __builtin__.property(_get_secure_ica_encryption, _set_secure_ica_encryption)
  client_device_mapping = __builtin__.property(_get_client_device_mapping, _set_client_device_mapping)
  auto_msi = __builtin__.property(_get_auto_msi, _set_auto_msi)
  multiport_ica = __builtin__.property(_get_multiport_ica, _set_multiport_ica)
  priority_0_port = __builtin__.property(_get_priority_0_port, _set_priority_0_port)
  priority_1_port = __builtin__.property(_get_priority_1_port, _set_priority_1_port)
  priority_2_port = __builtin__.property(_get_priority_2_port, _set_priority_2_port)
  priority_3_port = __builtin__.property(_get_priority_3_port, _set_priority_3_port)


  _pyangbind_elements = collections.OrderedDict([('citrix_optimization', citrix_optimization), ('ica_port', ica_port), ('session_reliability_port', session_reliability_port), ('secure_ica_encryption', secure_ica_encryption), ('client_device_mapping', client_device_mapping), ('auto_msi', auto_msi), ('multiport_ica', multiport_ica), ('priority_0_port', priority_0_port), ('priority_1_port', priority_1_port), ('priority_2_port', priority_2_port), ('priority_3_port', priority_3_port), ])


