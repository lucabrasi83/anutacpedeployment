
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import nfs_server
class nfs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/protocols/nfs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__nfs_enable','__nfs_v2_v4_alarm','__nfs_alarm','__nfs_default_server','__policy','__read_ahead','__transfer_size','__read_dir','__read_size','__threshold_multiple','__write','__write_maxdata','__nfs_default_volume','__default_volume_policy','__nfs_server',)

  _yang_name = 'nfs'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__nfs_default_volume = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'policy': {}, u'perm-cache': {}, u'root-squash': {}},), is_leaf=True, yang_name="nfs-default-volume", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__default_volume_policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="default-volume-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__nfs_v2_v4_alarm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-v2-v4-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__write_maxdata = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="write-maxdata", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__read_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="read-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__transfer_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transfer-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__write = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-data': {}, u'optimize': {}},), is_leaf=True, yang_name="write", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__nfs_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__read_dir = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'optimize': {}, u'read-size': {}},), is_leaf=True, yang_name="read-dir", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__nfs_alarm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'clear': {}},), is_leaf=True, yang_name="nfs-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__nfs_server = YANGDynClass(base=YANGListType("server_name",nfs_server.nfs_server, yang_name="nfs-server", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-name'), is_container='list', yang_name="nfs-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    self.__threshold_multiple = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="threshold-multiple", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint8', is_config=True)
    self.__read_ahead = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'small-files': {}, u'transfer-size': {}},), is_leaf=True, yang_name="read-ahead", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__nfs_default_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-ahead': {}, u'read-dir': {}, u'write': {}, u'threshold': {}, u'direntry-map': {}, u'policy': {}},), is_leaf=True, yang_name="nfs-default-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'protocols', u'nfs']

  def _get_nfs_enable(self):
    """
    Getter method for nfs_enable, mapped from YANG variable /devices/device/protocols/nfs/nfs_enable (enumeration)

    YANG Description: enable

    """
    return self.__nfs_enable
      
  def _set_nfs_enable(self, v, load=False):
    """
    Setter method for nfs_enable, mapped from YANG variable /devices/device/protocols/nfs/nfs_enable (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_enable() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_enable must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__nfs_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_enable(self):
    self.__nfs_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_nfs_v2_v4_alarm(self):
    """
    Getter method for nfs_v2_v4_alarm, mapped from YANG variable /devices/device/protocols/nfs/nfs_v2_v4_alarm (enumeration)

    YANG Description: enable

    """
    return self.__nfs_v2_v4_alarm
      
  def _set_nfs_v2_v4_alarm(self, v, load=False):
    """
    Setter method for nfs_v2_v4_alarm, mapped from YANG variable /devices/device/protocols/nfs/nfs_v2_v4_alarm (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_v2_v4_alarm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_v2_v4_alarm() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-v2-v4-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_v2_v4_alarm must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-v2-v4-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__nfs_v2_v4_alarm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_v2_v4_alarm(self):
    self.__nfs_v2_v4_alarm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="nfs-v2-v4-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_nfs_alarm(self):
    """
    Getter method for nfs_alarm, mapped from YANG variable /devices/device/protocols/nfs/nfs_alarm (enumeration)

    YANG Description: clear

    """
    return self.__nfs_alarm
      
  def _set_nfs_alarm(self, v, load=False):
    """
    Setter method for nfs_alarm, mapped from YANG variable /devices/device/protocols/nfs/nfs_alarm (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_alarm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_alarm() directly.

    YANG Description: clear

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'clear': {}},), is_leaf=True, yang_name="nfs-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_alarm must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'clear': {}},), is_leaf=True, yang_name="nfs-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__nfs_alarm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_alarm(self):
    self.__nfs_alarm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'clear': {}},), is_leaf=True, yang_name="nfs-alarm", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_nfs_default_server(self):
    """
    Getter method for nfs_default_server, mapped from YANG variable /devices/device/protocols/nfs/nfs_default_server (enumeration)

    YANG Description: direntry-map
policy
read-ahead
read-dir
threshold
write

    """
    return self.__nfs_default_server
      
  def _set_nfs_default_server(self, v, load=False):
    """
    Setter method for nfs_default_server, mapped from YANG variable /devices/device/protocols/nfs/nfs_default_server (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_default_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_default_server() directly.

    YANG Description: direntry-map
policy
read-ahead
read-dir
threshold
write

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-ahead': {}, u'read-dir': {}, u'write': {}, u'threshold': {}, u'direntry-map': {}, u'policy': {}},), is_leaf=True, yang_name="nfs-default-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_default_server must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-ahead': {}, u'read-dir': {}, u'write': {}, u'threshold': {}, u'direntry-map': {}, u'policy': {}},), is_leaf=True, yang_name="nfs-default-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__nfs_default_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_default_server(self):
    self.__nfs_default_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-ahead': {}, u'read-dir': {}, u'write': {}, u'threshold': {}, u'direntry-map': {}, u'policy': {}},), is_leaf=True, yang_name="nfs-default-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_policy(self):
    """
    Getter method for policy, mapped from YANG variable /devices/device/protocols/nfs/policy (enumeration)

    YANG Description: custom
global_rw
read_only

    """
    return self.__policy
      
  def _set_policy(self, v, load=False):
    """
    Setter method for policy, mapped from YANG variable /devices/device/protocols/nfs/policy (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy() directly.

    YANG Description: custom
global_rw
read_only

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy(self):
    self.__policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_read_ahead(self):
    """
    Getter method for read_ahead, mapped from YANG variable /devices/device/protocols/nfs/read_ahead (enumeration)

    YANG Description: small-files
transfer-size

    """
    return self.__read_ahead
      
  def _set_read_ahead(self, v, load=False):
    """
    Setter method for read_ahead, mapped from YANG variable /devices/device/protocols/nfs/read_ahead (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_read_ahead is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_read_ahead() directly.

    YANG Description: small-files
transfer-size

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'small-files': {}, u'transfer-size': {}},), is_leaf=True, yang_name="read-ahead", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """read_ahead must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'small-files': {}, u'transfer-size': {}},), is_leaf=True, yang_name="read-ahead", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__read_ahead = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_read_ahead(self):
    self.__read_ahead = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'small-files': {}, u'transfer-size': {}},), is_leaf=True, yang_name="read-ahead", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_transfer_size(self):
    """
    Getter method for transfer_size, mapped from YANG variable /devices/device/protocols/nfs/transfer_size (uint32)

    YANG Description: transfer size
    """
    return self.__transfer_size
      
  def _set_transfer_size(self, v, load=False):
    """
    Setter method for transfer_size, mapped from YANG variable /devices/device/protocols/nfs/transfer_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transfer_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transfer_size() directly.

    YANG Description: transfer size
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transfer-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transfer_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transfer-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__transfer_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transfer_size(self):
    self.__transfer_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transfer-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_read_dir(self):
    """
    Getter method for read_dir, mapped from YANG variable /devices/device/protocols/nfs/read_dir (enumeration)

    YANG Description: optimize
read-size

    """
    return self.__read_dir
      
  def _set_read_dir(self, v, load=False):
    """
    Setter method for read_dir, mapped from YANG variable /devices/device/protocols/nfs/read_dir (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_read_dir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_read_dir() directly.

    YANG Description: optimize
read-size

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'optimize': {}, u'read-size': {}},), is_leaf=True, yang_name="read-dir", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """read_dir must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'optimize': {}, u'read-size': {}},), is_leaf=True, yang_name="read-dir", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__read_dir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_read_dir(self):
    self.__read_dir = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'optimize': {}, u'read-size': {}},), is_leaf=True, yang_name="read-dir", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_read_size(self):
    """
    Getter method for read_size, mapped from YANG variable /devices/device/protocols/nfs/read_size (uint32)

    YANG Description: 0..4294967295
    """
    return self.__read_size
      
  def _set_read_size(self, v, load=False):
    """
    Setter method for read_size, mapped from YANG variable /devices/device/protocols/nfs/read_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_read_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_read_size() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="read-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """read_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="read-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__read_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_read_size(self):
    self.__read_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="read-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_threshold_multiple(self):
    """
    Getter method for threshold_multiple, mapped from YANG variable /devices/device/protocols/nfs/threshold_multiple (uint8)

    YANG Description: 0..255
    """
    return self.__threshold_multiple
      
  def _set_threshold_multiple(self, v, load=False):
    """
    Setter method for threshold_multiple, mapped from YANG variable /devices/device/protocols/nfs/threshold_multiple (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_threshold_multiple is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_threshold_multiple() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="threshold-multiple", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """threshold_multiple must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="threshold-multiple", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint8', is_config=True)""",
        })

    self.__threshold_multiple = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_threshold_multiple(self):
    self.__threshold_multiple = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="threshold-multiple", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint8', is_config=True)


  def _get_write(self):
    """
    Getter method for write, mapped from YANG variable /devices/device/protocols/nfs/write (enumeration)

    YANG Description: optimize
max-data

    """
    return self.__write
      
  def _set_write(self, v, load=False):
    """
    Setter method for write, mapped from YANG variable /devices/device/protocols/nfs/write (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_write is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_write() directly.

    YANG Description: optimize
max-data

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-data': {}, u'optimize': {}},), is_leaf=True, yang_name="write", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """write must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-data': {}, u'optimize': {}},), is_leaf=True, yang_name="write", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__write = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_write(self):
    self.__write = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'max-data': {}, u'optimize': {}},), is_leaf=True, yang_name="write", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_write_maxdata(self):
    """
    Getter method for write_maxdata, mapped from YANG variable /devices/device/protocols/nfs/write_maxdata (uint32)

    YANG Description: size of max data
    """
    return self.__write_maxdata
      
  def _set_write_maxdata(self, v, load=False):
    """
    Setter method for write_maxdata, mapped from YANG variable /devices/device/protocols/nfs/write_maxdata (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_write_maxdata is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_write_maxdata() directly.

    YANG Description: size of max data
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="write-maxdata", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """write_maxdata must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="write-maxdata", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__write_maxdata = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_write_maxdata(self):
    self.__write_maxdata = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="write-maxdata", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_nfs_default_volume(self):
    """
    Getter method for nfs_default_volume, mapped from YANG variable /devices/device/protocols/nfs/nfs_default_volume (enumeration)

    YANG Description: perm-cache
policy
root-squash

    """
    return self.__nfs_default_volume
      
  def _set_nfs_default_volume(self, v, load=False):
    """
    Setter method for nfs_default_volume, mapped from YANG variable /devices/device/protocols/nfs/nfs_default_volume (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_default_volume is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_default_volume() directly.

    YANG Description: perm-cache
policy
root-squash

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'policy': {}, u'perm-cache': {}, u'root-squash': {}},), is_leaf=True, yang_name="nfs-default-volume", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_default_volume must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'policy': {}, u'perm-cache': {}, u'root-squash': {}},), is_leaf=True, yang_name="nfs-default-volume", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__nfs_default_volume = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_default_volume(self):
    self.__nfs_default_volume = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'policy': {}, u'perm-cache': {}, u'root-squash': {}},), is_leaf=True, yang_name="nfs-default-volume", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_default_volume_policy(self):
    """
    Getter method for default_volume_policy, mapped from YANG variable /devices/device/protocols/nfs/default_volume_policy (enumeration)

    YANG Description: custom
global_rw
read_only

    """
    return self.__default_volume_policy
      
  def _set_default_volume_policy(self, v, load=False):
    """
    Setter method for default_volume_policy, mapped from YANG variable /devices/device/protocols/nfs/default_volume_policy (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_volume_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_volume_policy() directly.

    YANG Description: custom
global_rw
read_only

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="default-volume-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_volume_policy must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="default-volume-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__default_volume_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_volume_policy(self):
    self.__default_volume_policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global_rw': {}, u'read_only': {}, u'custom': {}},), is_leaf=True, yang_name="default-volume-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_nfs_server(self):
    """
    Getter method for nfs_server, mapped from YANG variable /devices/device/protocols/nfs/nfs_server (list)
    """
    return self.__nfs_server
      
  def _set_nfs_server(self, v, load=False):
    """
    Setter method for nfs_server, mapped from YANG variable /devices/device/protocols/nfs/nfs_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nfs_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nfs_server() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("server_name",nfs_server.nfs_server, yang_name="nfs-server", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-name'), is_container='list', yang_name="nfs-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nfs_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("server_name",nfs_server.nfs_server, yang_name="nfs-server", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-name'), is_container='list', yang_name="nfs-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__nfs_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nfs_server(self):
    self.__nfs_server = YANGDynClass(base=YANGListType("server_name",nfs_server.nfs_server, yang_name="nfs-server", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server-name'), is_container='list', yang_name="nfs-server", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

  nfs_enable = __builtin__.property(_get_nfs_enable, _set_nfs_enable)
  nfs_v2_v4_alarm = __builtin__.property(_get_nfs_v2_v4_alarm, _set_nfs_v2_v4_alarm)
  nfs_alarm = __builtin__.property(_get_nfs_alarm, _set_nfs_alarm)
  nfs_default_server = __builtin__.property(_get_nfs_default_server, _set_nfs_default_server)
  policy = __builtin__.property(_get_policy, _set_policy)
  read_ahead = __builtin__.property(_get_read_ahead, _set_read_ahead)
  transfer_size = __builtin__.property(_get_transfer_size, _set_transfer_size)
  read_dir = __builtin__.property(_get_read_dir, _set_read_dir)
  read_size = __builtin__.property(_get_read_size, _set_read_size)
  threshold_multiple = __builtin__.property(_get_threshold_multiple, _set_threshold_multiple)
  write = __builtin__.property(_get_write, _set_write)
  write_maxdata = __builtin__.property(_get_write_maxdata, _set_write_maxdata)
  nfs_default_volume = __builtin__.property(_get_nfs_default_volume, _set_nfs_default_volume)
  default_volume_policy = __builtin__.property(_get_default_volume_policy, _set_default_volume_policy)
  nfs_server = __builtin__.property(_get_nfs_server, _set_nfs_server)


  _pyangbind_elements = collections.OrderedDict([('nfs_enable', nfs_enable), ('nfs_v2_v4_alarm', nfs_v2_v4_alarm), ('nfs_alarm', nfs_alarm), ('nfs_default_server', nfs_default_server), ('policy', policy), ('read_ahead', read_ahead), ('transfer_size', transfer_size), ('read_dir', read_dir), ('read_size', read_size), ('threshold_multiple', threshold_multiple), ('write', write), ('write_maxdata', write_maxdata), ('nfs_default_volume', nfs_default_volume), ('default_volume_policy', default_volume_policy), ('nfs_server', nfs_server), ])


