
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import black_lst_peer
import cipher_string
import crl
import fallback_no_enc
class secure_peering(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/secure-peering. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__black_lst_peer','__cipher_string','__crl','__fallback_no_enc',)

  _yang_name = 'secure-peering'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__black_lst_peer = YANGDynClass(base=black_lst_peer.black_lst_peer, is_container='container', yang_name="black-lst-peer", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__fallback_no_enc = YANGDynClass(base=fallback_no_enc.fallback_no_enc, is_container='container', yang_name="fallback-no-enc", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__crl = YANGDynClass(base=crl.crl, is_container='container', yang_name="crl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__cipher_string = YANGDynClass(base=YANGListType("cipher_number",cipher_string.cipher_string, yang_name="cipher-string", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cipher-number'), is_container='list', yang_name="cipher-string", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'secure-peering']

  def _get_black_lst_peer(self):
    """
    Getter method for black_lst_peer, mapped from YANG variable /devices/device/secure_peering/black_lst_peer (container)
    """
    return self.__black_lst_peer
      
  def _set_black_lst_peer(self, v, load=False):
    """
    Setter method for black_lst_peer, mapped from YANG variable /devices/device/secure_peering/black_lst_peer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_black_lst_peer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_black_lst_peer() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=black_lst_peer.black_lst_peer, is_container='container', yang_name="black-lst-peer", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """black_lst_peer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=black_lst_peer.black_lst_peer, is_container='container', yang_name="black-lst-peer", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__black_lst_peer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_black_lst_peer(self):
    self.__black_lst_peer = YANGDynClass(base=black_lst_peer.black_lst_peer, is_container='container', yang_name="black-lst-peer", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_cipher_string(self):
    """
    Getter method for cipher_string, mapped from YANG variable /devices/device/secure_peering/cipher_string (list)
    """
    return self.__cipher_string
      
  def _set_cipher_string(self, v, load=False):
    """
    Setter method for cipher_string, mapped from YANG variable /devices/device/secure_peering/cipher_string (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cipher_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cipher_string() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("cipher_number",cipher_string.cipher_string, yang_name="cipher-string", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cipher-number'), is_container='list', yang_name="cipher-string", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cipher_string must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cipher_number",cipher_string.cipher_string, yang_name="cipher-string", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cipher-number'), is_container='list', yang_name="cipher-string", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__cipher_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cipher_string(self):
    self.__cipher_string = YANGDynClass(base=YANGListType("cipher_number",cipher_string.cipher_string, yang_name="cipher-string", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cipher-number'), is_container='list', yang_name="cipher-string", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)


  def _get_crl(self):
    """
    Getter method for crl, mapped from YANG variable /devices/device/secure_peering/crl (container)
    """
    return self.__crl
      
  def _set_crl(self, v, load=False):
    """
    Setter method for crl, mapped from YANG variable /devices/device/secure_peering/crl (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_crl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_crl() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=crl.crl, is_container='container', yang_name="crl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """crl must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=crl.crl, is_container='container', yang_name="crl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__crl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_crl(self):
    self.__crl = YANGDynClass(base=crl.crl, is_container='container', yang_name="crl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_fallback_no_enc(self):
    """
    Getter method for fallback_no_enc, mapped from YANG variable /devices/device/secure_peering/fallback_no_enc (container)
    """
    return self.__fallback_no_enc
      
  def _set_fallback_no_enc(self, v, load=False):
    """
    Setter method for fallback_no_enc, mapped from YANG variable /devices/device/secure_peering/fallback_no_enc (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fallback_no_enc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fallback_no_enc() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=fallback_no_enc.fallback_no_enc, is_container='container', yang_name="fallback-no-enc", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fallback_no_enc must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fallback_no_enc.fallback_no_enc, is_container='container', yang_name="fallback-no-enc", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__fallback_no_enc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fallback_no_enc(self):
    self.__fallback_no_enc = YANGDynClass(base=fallback_no_enc.fallback_no_enc, is_container='container', yang_name="fallback-no-enc", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

  black_lst_peer = __builtin__.property(_get_black_lst_peer, _set_black_lst_peer)
  cipher_string = __builtin__.property(_get_cipher_string, _set_cipher_string)
  crl = __builtin__.property(_get_crl, _set_crl)
  fallback_no_enc = __builtin__.property(_get_fallback_no_enc, _set_fallback_no_enc)


  _pyangbind_elements = collections.OrderedDict([('black_lst_peer', black_lst_peer), ('cipher_string', cipher_string), ('crl', crl), ('fallback_no_enc', fallback_no_enc), ])


