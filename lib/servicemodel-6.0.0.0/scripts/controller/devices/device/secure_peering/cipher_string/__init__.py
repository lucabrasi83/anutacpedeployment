
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class cipher_string(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/secure-peering/cipher-string. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__cipher_number','__cipher_string_option',)

  _yang_name = 'cipher-string'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cipher_string_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES': {}, u'DEFAULT': {}, u'TLSv1': {}, u'AES128': {}, u'SHA1': {}, u'NULL': {}, u'AES256-SHA': {}, u'3DES': {}, u'SHA256': {}, u'TLSv1.2': {}, u'AES128-SHA': {}, u'AES256': {}, u'MEDIUM': {}, u'NULL-MD5': {}, u'aRSA': {}, u'RC4-SHA': {}, u'NULL-SHA': {}, u'HIGH': {}, u'SHA': {}, u'SSLv3': {}, u'SHA384': {}, u'MD5': {}, u'DES-CBC3-SHA': {}, u'AESGCM': {}, u'RC4': {}, u'RSA': {}, u'eNULL': {}, u'RC4-MD5': {}, u'kRSA': {}},), is_leaf=True, yang_name="cipher-string-option", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__cipher_number = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'end': {}},),], is_leaf=True, yang_name="cipher-number", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'secure-peering', u'cipher-string']

  def _get_cipher_number(self):
    """
    Getter method for cipher_number, mapped from YANG variable /devices/device/secure_peering/cipher_string/cipher_number (union)

    YANG Description: Cipher numer for the cipher string. valid values : 1 to N or 'end'
    """
    return self.__cipher_number
      
  def _set_cipher_number(self, v, load=False):
    """
    Setter method for cipher_number, mapped from YANG variable /devices/device/secure_peering/cipher_string/cipher_number (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cipher_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cipher_number() directly.

    YANG Description: Cipher numer for the cipher string. valid values : 1 to N or 'end'
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'end': {}},),], is_leaf=True, yang_name="cipher-number", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cipher_number must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'end': {}},),], is_leaf=True, yang_name="cipher-number", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__cipher_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cipher_number(self):
    self.__cipher_number = YANGDynClass(base=[RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'end': {}},),], is_leaf=True, yang_name="cipher-number", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_cipher_string_option(self):
    """
    Getter method for cipher_string_option, mapped from YANG variable /devices/device/secure_peering/cipher_string/cipher_string_option (enumeration)

    YANG Description: Cipher String Options. If DEFAULT cipher list specified, must be at number 1.
    """
    return self.__cipher_string_option
      
  def _set_cipher_string_option(self, v, load=False):
    """
    Setter method for cipher_string_option, mapped from YANG variable /devices/device/secure_peering/cipher_string/cipher_string_option (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cipher_string_option is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cipher_string_option() directly.

    YANG Description: Cipher String Options. If DEFAULT cipher list specified, must be at number 1.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES': {}, u'DEFAULT': {}, u'TLSv1': {}, u'AES128': {}, u'SHA1': {}, u'NULL': {}, u'AES256-SHA': {}, u'3DES': {}, u'SHA256': {}, u'TLSv1.2': {}, u'AES128-SHA': {}, u'AES256': {}, u'MEDIUM': {}, u'NULL-MD5': {}, u'aRSA': {}, u'RC4-SHA': {}, u'NULL-SHA': {}, u'HIGH': {}, u'SHA': {}, u'SSLv3': {}, u'SHA384': {}, u'MD5': {}, u'DES-CBC3-SHA': {}, u'AESGCM': {}, u'RC4': {}, u'RSA': {}, u'eNULL': {}, u'RC4-MD5': {}, u'kRSA': {}},), is_leaf=True, yang_name="cipher-string-option", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cipher_string_option must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES': {}, u'DEFAULT': {}, u'TLSv1': {}, u'AES128': {}, u'SHA1': {}, u'NULL': {}, u'AES256-SHA': {}, u'3DES': {}, u'SHA256': {}, u'TLSv1.2': {}, u'AES128-SHA': {}, u'AES256': {}, u'MEDIUM': {}, u'NULL-MD5': {}, u'aRSA': {}, u'RC4-SHA': {}, u'NULL-SHA': {}, u'HIGH': {}, u'SHA': {}, u'SSLv3': {}, u'SHA384': {}, u'MD5': {}, u'DES-CBC3-SHA': {}, u'AESGCM': {}, u'RC4': {}, u'RSA': {}, u'eNULL': {}, u'RC4-MD5': {}, u'kRSA': {}},), is_leaf=True, yang_name="cipher-string-option", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__cipher_string_option = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cipher_string_option(self):
    self.__cipher_string_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES': {}, u'DEFAULT': {}, u'TLSv1': {}, u'AES128': {}, u'SHA1': {}, u'NULL': {}, u'AES256-SHA': {}, u'3DES': {}, u'SHA256': {}, u'TLSv1.2': {}, u'AES128-SHA': {}, u'AES256': {}, u'MEDIUM': {}, u'NULL-MD5': {}, u'aRSA': {}, u'RC4-SHA': {}, u'NULL-SHA': {}, u'HIGH': {}, u'SHA': {}, u'SSLv3': {}, u'SHA384': {}, u'MD5': {}, u'DES-CBC3-SHA': {}, u'AESGCM': {}, u'RC4': {}, u'RSA': {}, u'eNULL': {}, u'RC4-MD5': {}, u'kRSA': {}},), is_leaf=True, yang_name="cipher-string-option", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

  cipher_number = __builtin__.property(_get_cipher_number, _set_cipher_number)
  cipher_string_option = __builtin__.property(_get_cipher_string_option, _set_cipher_string_option)


  _pyangbind_elements = collections.OrderedDict([('cipher_number', cipher_number), ('cipher_string_option', cipher_string_option), ])


