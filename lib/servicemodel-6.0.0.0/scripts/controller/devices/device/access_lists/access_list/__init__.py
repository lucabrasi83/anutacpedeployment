
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import acl_rules
class access_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/access-lists/access-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__mode','__start_remark','__end_remark','__acl_type','__acl_rules','__source_zone','__dest_zone','__virtual_device_name',)

  _yang_name = 'access-list'
  _module_name = 'acl'
  _namespace = 'http://anutanetworks.com/acl'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dest_zone = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    self.__source_zone = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__start_remark = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__virtual_device_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-device-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'firewall': {}, u'router': {}},), is_leaf=True, yang_name="mode", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='mode-type', is_config=True)
    self.__end_remark = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__acl_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extended': {}, u'standard': {}},), is_leaf=True, yang_name="acl-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    self.__acl_rules = YANGDynClass(base=acl_rules.acl_rules, is_container='container', yang_name="acl-rules", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'access-lists', u'access-list']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/access_lists/access_list/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/access_lists/access_list/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /devices/device/access_lists/access_list/mode (mode-type)

    YANG Description: router
firewall

    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /devices/device/access_lists/access_list/mode (mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: router
firewall

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'firewall': {}, u'router': {}},), is_leaf=True, yang_name="mode", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with mode-type""",
          'defined-type': "acl:mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'firewall': {}, u'router': {}},), is_leaf=True, yang_name="mode", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='mode-type', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'firewall': {}, u'router': {}},), is_leaf=True, yang_name="mode", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='mode-type', is_config=True)


  def _get_start_remark(self):
    """
    Getter method for start_remark, mapped from YANG variable /devices/device/access_lists/access_list/start_remark (string)

    YANG Description: string
    """
    return self.__start_remark
      
  def _set_start_remark(self, v, load=False):
    """
    Setter method for start_remark, mapped from YANG variable /devices/device/access_lists/access_list/start_remark (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_remark is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_remark() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_remark must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__start_remark = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_remark(self):
    self.__start_remark = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_end_remark(self):
    """
    Getter method for end_remark, mapped from YANG variable /devices/device/access_lists/access_list/end_remark (string)

    YANG Description: string
    """
    return self.__end_remark
      
  def _set_end_remark(self, v, load=False):
    """
    Setter method for end_remark, mapped from YANG variable /devices/device/access_lists/access_list/end_remark (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_remark is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_remark() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="end-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_remark must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="end-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__end_remark = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_remark(self):
    self.__end_remark = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-remark", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_acl_type(self):
    """
    Getter method for acl_type, mapped from YANG variable /devices/device/access_lists/access_list/acl_type (enumeration)

    YANG Description: standard
extended

    """
    return self.__acl_type
      
  def _set_acl_type(self, v, load=False):
    """
    Setter method for acl_type, mapped from YANG variable /devices/device/access_lists/access_list/acl_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_type() directly.

    YANG Description: standard
extended

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extended': {}, u'standard': {}},), is_leaf=True, yang_name="acl-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_type must be of a type compatible with enumeration""",
          'defined-type': "acl:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extended': {}, u'standard': {}},), is_leaf=True, yang_name="acl-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)""",
        })

    self.__acl_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_type(self):
    self.__acl_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extended': {}, u'standard': {}},), is_leaf=True, yang_name="acl-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)


  def _get_acl_rules(self):
    """
    Getter method for acl_rules, mapped from YANG variable /devices/device/access_lists/access_list/acl_rules (container)
    """
    return self.__acl_rules
      
  def _set_acl_rules(self, v, load=False):
    """
    Setter method for acl_rules, mapped from YANG variable /devices/device/access_lists/access_list/acl_rules (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_rules is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_rules() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=acl_rules.acl_rules, is_container='container', yang_name="acl-rules", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_rules must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=acl_rules.acl_rules, is_container='container', yang_name="acl-rules", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='container', is_config=True)""",
        })

    self.__acl_rules = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_rules(self):
    self.__acl_rules = YANGDynClass(base=acl_rules.acl_rules, is_container='container', yang_name="acl-rules", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='container', is_config=True)


  def _get_source_zone(self):
    """
    Getter method for source_zone, mapped from YANG variable /devices/device/access_lists/access_list/source_zone (leafref)

    YANG Description: source-zone
    """
    return self.__source_zone
      
  def _set_source_zone(self, v, load=False):
    """
    Setter method for source_zone, mapped from YANG variable /devices/device/access_lists/access_list/source_zone (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_zone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_zone() directly.

    YANG Description: source-zone
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_zone must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)""",
        })

    self.__source_zone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_zone(self):
    self.__source_zone = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)


  def _get_dest_zone(self):
    """
    Getter method for dest_zone, mapped from YANG variable /devices/device/access_lists/access_list/dest_zone (leafref)

    YANG Description: dest-zone
    """
    return self.__dest_zone
      
  def _set_dest_zone(self, v, load=False):
    """
    Setter method for dest_zone, mapped from YANG variable /devices/device/access_lists/access_list/dest_zone (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_zone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_zone() directly.

    YANG Description: dest-zone
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dest-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_zone must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)""",
        })

    self.__dest_zone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_zone(self):
    self.__dest_zone = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-zone", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)


  def _get_virtual_device_name(self):
    """
    Getter method for virtual_device_name, mapped from YANG variable /devices/device/access_lists/access_list/virtual_device_name (leafref)

    YANG Description: virtual-device-name
    """
    return self.__virtual_device_name
      
  def _set_virtual_device_name(self, v, load=False):
    """
    Setter method for virtual_device_name, mapped from YANG variable /devices/device/access_lists/access_list/virtual_device_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_device_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_device_name() directly.

    YANG Description: virtual-device-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="virtual-device-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_device_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-device-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)""",
        })

    self.__virtual_device_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_device_name(self):
    self.__virtual_device_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-device-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  mode = __builtin__.property(_get_mode, _set_mode)
  start_remark = __builtin__.property(_get_start_remark, _set_start_remark)
  end_remark = __builtin__.property(_get_end_remark, _set_end_remark)
  acl_type = __builtin__.property(_get_acl_type, _set_acl_type)
  acl_rules = __builtin__.property(_get_acl_rules, _set_acl_rules)
  source_zone = __builtin__.property(_get_source_zone, _set_source_zone)
  dest_zone = __builtin__.property(_get_dest_zone, _set_dest_zone)
  virtual_device_name = __builtin__.property(_get_virtual_device_name, _set_virtual_device_name)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('mode', mode), ('start_remark', start_remark), ('end_remark', end_remark), ('acl_type', acl_type), ('acl_rules', acl_rules), ('source_zone', source_zone), ('dest_zone', dest_zone), ('virtual_device_name', virtual_device_name), ])


