
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import af_interface
import network
import distribute_list
import summary_metric
import redistribute
class address_family(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/eigrp/router-eigrp/address-family. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__as_number','__vrf_name','__cast','__router_id','__nsf','__eigrp_stub','__summary','__redistributed','__topology_base','__internal_route_distance','__external_route_distance','__af_interface','__network','__distribute_list','__summary_metric','__redistribute',)

  _yang_name = 'address-family'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__router_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__as_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__redistribute = YANGDynClass(base=YANGListType("protocol",redistribute.redistribute, yang_name="redistribute", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='protocol'), is_container='list', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__redistributed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistributed", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__network = YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__topology_base = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="topology-base", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__distribute_list = YANGDynClass(base=YANGListType("filter interface",distribute_list.distribute_list, yang_name="distribute-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='filter interface'), is_container='list', yang_name="distribute-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__af_interface = YANGDynClass(base=YANGListType("interface",af_interface.af_interface, yang_name="af-interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="af-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__nsf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__summary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__external_route_distance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="external-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__cast = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unicast': {}, u'multicast': {}},), is_leaf=True, yang_name="cast", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='cast', is_config=True)
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__summary_metric = YANGDynClass(base=YANGListType("summary",summary_metric.summary_metric, yang_name="summary-metric", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary'), is_container='list', yang_name="summary-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__internal_route_distance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="internal-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__eigrp_stub = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'redistributed': {}, u'connected': {}, u'summary': {}},), is_leaf=True, yang_name="eigrp-stub", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'eigrp', u'router-eigrp', u'address-family']

  def _get_as_number(self):
    """
    Getter method for as_number, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/as_number (uint16)

    YANG Description: 1..65535
    """
    return self.__as_number
      
  def _set_as_number(self, v, load=False):
    """
    Setter method for as_number, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/as_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_number() directly.

    YANG Description: 1..65535
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__as_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_number(self):
    self.__as_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_vrf_name(self):
    """
    Getter method for vrf_name, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/vrf_name (leafref)

    YANG Description: vrf-name
    """
    return self.__vrf_name
      
  def _set_vrf_name(self, v, load=False):
    """
    Setter method for vrf_name, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/vrf_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_name() directly.

    YANG Description: vrf-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_name(self):
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_cast(self):
    """
    Getter method for cast, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/cast (cast)

    YANG Description: multicast
unicast

    """
    return self.__cast
      
  def _set_cast(self, v, load=False):
    """
    Setter method for cast, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/cast (cast)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cast() directly.

    YANG Description: multicast
unicast

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unicast': {}, u'multicast': {}},), is_leaf=True, yang_name="cast", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='cast', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cast must be of a type compatible with cast""",
          'defined-type': "l3features:cast",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unicast': {}, u'multicast': {}},), is_leaf=True, yang_name="cast", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='cast', is_config=True)""",
        })

    self.__cast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cast(self):
    self.__cast = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unicast': {}, u'multicast': {}},), is_leaf=True, yang_name="cast", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='cast', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/router_id (string)

    YANG Description: string
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/router_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_nsf(self):
    """
    Getter method for nsf, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/nsf (boolean)

    YANG Description: nsf: True/False
    """
    return self.__nsf
      
  def _set_nsf(self, v, load=False):
    """
    Setter method for nsf, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/nsf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsf() directly.

    YANG Description: nsf: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="nsf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__nsf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsf(self):
    self.__nsf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_eigrp_stub(self):
    """
    Getter method for eigrp_stub, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/eigrp_stub (enumeration)

    YANG Description: connected
summary
redistributed

    """
    return self.__eigrp_stub
      
  def _set_eigrp_stub(self, v, load=False):
    """
    Setter method for eigrp_stub, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/eigrp_stub (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eigrp_stub is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eigrp_stub() directly.

    YANG Description: connected
summary
redistributed

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'redistributed': {}, u'connected': {}, u'summary': {}},), is_leaf=True, yang_name="eigrp-stub", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eigrp_stub must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'redistributed': {}, u'connected': {}, u'summary': {}},), is_leaf=True, yang_name="eigrp-stub", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__eigrp_stub = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eigrp_stub(self):
    self.__eigrp_stub = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'redistributed': {}, u'connected': {}, u'summary': {}},), is_leaf=True, yang_name="eigrp-stub", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_summary(self):
    """
    Getter method for summary, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/summary (boolean)

    YANG Description: summary: True/False
    """
    return self.__summary
      
  def _set_summary(self, v, load=False):
    """
    Setter method for summary, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/summary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary() directly.

    YANG Description: summary: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary(self):
    self.__summary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_redistributed(self):
    """
    Getter method for redistributed, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/redistributed (boolean)

    YANG Description: redistributed: True/False
    """
    return self.__redistributed
      
  def _set_redistributed(self, v, load=False):
    """
    Setter method for redistributed, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/redistributed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redistributed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redistributed() directly.

    YANG Description: redistributed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="redistributed", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redistributed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistributed", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__redistributed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redistributed(self):
    self.__redistributed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistributed", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_topology_base(self):
    """
    Getter method for topology_base, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/topology_base (boolean)

    YANG Description: topology-base: True/False
    """
    return self.__topology_base
      
  def _set_topology_base(self, v, load=False):
    """
    Setter method for topology_base, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/topology_base (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_topology_base is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_topology_base() directly.

    YANG Description: topology-base: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="topology-base", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """topology_base must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="topology-base", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__topology_base = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_topology_base(self):
    self.__topology_base = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="topology-base", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_internal_route_distance(self):
    """
    Getter method for internal_route_distance, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/internal_route_distance (uint16)

    YANG Description: 1..255
    """
    return self.__internal_route_distance
      
  def _set_internal_route_distance(self, v, load=False):
    """
    Setter method for internal_route_distance, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/internal_route_distance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_internal_route_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_internal_route_distance() directly.

    YANG Description: 1..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="internal-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """internal_route_distance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="internal-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__internal_route_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_internal_route_distance(self):
    self.__internal_route_distance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="internal-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_external_route_distance(self):
    """
    Getter method for external_route_distance, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/external_route_distance (uint16)

    YANG Description: 1..255
    """
    return self.__external_route_distance
      
  def _set_external_route_distance(self, v, load=False):
    """
    Setter method for external_route_distance, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/external_route_distance (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_external_route_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_external_route_distance() directly.

    YANG Description: 1..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="external-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """external_route_distance must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="external-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__external_route_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_external_route_distance(self):
    self.__external_route_distance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="external-route-distance", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_af_interface(self):
    """
    Getter method for af_interface, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/af_interface (list)
    """
    return self.__af_interface
      
  def _set_af_interface(self, v, load=False):
    """
    Setter method for af_interface, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/af_interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_af_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_af_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("interface",af_interface.af_interface, yang_name="af-interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="af-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """af_interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface",af_interface.af_interface, yang_name="af-interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="af-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__af_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_af_interface(self):
    self.__af_interface = YANGDynClass(base=YANGListType("interface",af_interface.af_interface, yang_name="af-interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="af-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/network (list)
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/network (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_distribute_list(self):
    """
    Getter method for distribute_list, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/distribute_list (list)
    """
    return self.__distribute_list
      
  def _set_distribute_list(self, v, load=False):
    """
    Setter method for distribute_list, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/distribute_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_distribute_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_distribute_list() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("filter interface",distribute_list.distribute_list, yang_name="distribute-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='filter interface'), is_container='list', yang_name="distribute-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """distribute_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("filter interface",distribute_list.distribute_list, yang_name="distribute-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='filter interface'), is_container='list', yang_name="distribute-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__distribute_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_distribute_list(self):
    self.__distribute_list = YANGDynClass(base=YANGListType("filter interface",distribute_list.distribute_list, yang_name="distribute-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='filter interface'), is_container='list', yang_name="distribute-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_summary_metric(self):
    """
    Getter method for summary_metric, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/summary_metric (list)
    """
    return self.__summary_metric
      
  def _set_summary_metric(self, v, load=False):
    """
    Setter method for summary_metric, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/summary_metric (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_metric() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("summary",summary_metric.summary_metric, yang_name="summary-metric", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary'), is_container='list', yang_name="summary-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_metric must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("summary",summary_metric.summary_metric, yang_name="summary-metric", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary'), is_container='list', yang_name="summary-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__summary_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_metric(self):
    self.__summary_metric = YANGDynClass(base=YANGListType("summary",summary_metric.summary_metric, yang_name="summary-metric", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary'), is_container='list', yang_name="summary-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_redistribute(self):
    """
    Getter method for redistribute, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/redistribute (list)
    """
    return self.__redistribute
      
  def _set_redistribute(self, v, load=False):
    """
    Setter method for redistribute, mapped from YANG variable /devices/device/eigrp/router_eigrp/address_family/redistribute (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redistribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redistribute() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("protocol",redistribute.redistribute, yang_name="redistribute", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='protocol'), is_container='list', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redistribute must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("protocol",redistribute.redistribute, yang_name="redistribute", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='protocol'), is_container='list', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__redistribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redistribute(self):
    self.__redistribute = YANGDynClass(base=YANGListType("protocol",redistribute.redistribute, yang_name="redistribute", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='protocol'), is_container='list', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  as_number = __builtin__.property(_get_as_number, _set_as_number)
  vrf_name = __builtin__.property(_get_vrf_name, _set_vrf_name)
  cast = __builtin__.property(_get_cast, _set_cast)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  nsf = __builtin__.property(_get_nsf, _set_nsf)
  eigrp_stub = __builtin__.property(_get_eigrp_stub, _set_eigrp_stub)
  summary = __builtin__.property(_get_summary, _set_summary)
  redistributed = __builtin__.property(_get_redistributed, _set_redistributed)
  topology_base = __builtin__.property(_get_topology_base, _set_topology_base)
  internal_route_distance = __builtin__.property(_get_internal_route_distance, _set_internal_route_distance)
  external_route_distance = __builtin__.property(_get_external_route_distance, _set_external_route_distance)
  af_interface = __builtin__.property(_get_af_interface, _set_af_interface)
  network = __builtin__.property(_get_network, _set_network)
  distribute_list = __builtin__.property(_get_distribute_list, _set_distribute_list)
  summary_metric = __builtin__.property(_get_summary_metric, _set_summary_metric)
  redistribute = __builtin__.property(_get_redistribute, _set_redistribute)


  _pyangbind_elements = collections.OrderedDict([('as_number', as_number), ('vrf_name', vrf_name), ('cast', cast), ('router_id', router_id), ('nsf', nsf), ('eigrp_stub', eigrp_stub), ('summary', summary), ('redistributed', redistributed), ('topology_base', topology_base), ('internal_route_distance', internal_route_distance), ('external_route_distance', external_route_distance), ('af_interface', af_interface), ('network', network), ('distribute_list', distribute_list), ('summary_metric', summary_metric), ('redistribute', redistribute), ])


