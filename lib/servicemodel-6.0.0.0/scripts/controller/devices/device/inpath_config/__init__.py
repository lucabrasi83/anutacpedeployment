
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import in_path_interface_bundle
class inpath_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/inpath-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__inpath_enable','__inpath_peering','__oobtransparency','__oobtransparency_port','__oobtransparency_mode','__inpath_simplified_routing','__inpath_lsp','__asymmetric_routing_detection','__asymmetric_routing_pass_through','__asym_route_tab_flush','__in_path_interface_bundle',)

  _yang_name = 'inpath-config'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oobtransparency = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'oobtransparency-mode': {}, u'oobtransparency-port': {}},), is_leaf=True, yang_name="oobtransparency", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__inpath_lsp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-lsp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__asym_route_tab_flush = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'flush': {}},), is_leaf=True, yang_name="asym-route-tab-flush", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__inpath_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__oobtransparency_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="oobtransparency-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__in_path_interface_bundle = YANGDynClass(base=YANGListType("bundle_name",in_path_interface_bundle.in_path_interface_bundle, yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bundle-name'), is_container='list', yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    self.__asymmetric_routing_pass_through = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-pass-through", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__inpath_peering = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto': {}, u'oobtransparency': {}},), is_leaf=True, yang_name="inpath-peering", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__asymmetric_routing_detection = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-detection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__oobtransparency_mode = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {}, u'destination': {}, u'full': {}},),], is_leaf=True, yang_name="oobtransparency-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__inpath_simplified_routing = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dest-source': {}, u'none': {}, u'mac-def-gw-only': {}, u'all': {}, u'dest-only': {}},), is_leaf=True, yang_name="inpath-simplified-routing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'inpath-config']

  def _get_inpath_enable(self):
    """
    Getter method for inpath_enable, mapped from YANG variable /devices/device/inpath_config/inpath_enable (enumeration)

    YANG Description: enable inpath: Enable/Disable
    """
    return self.__inpath_enable
      
  def _set_inpath_enable(self, v, load=False):
    """
    Setter method for inpath_enable, mapped from YANG variable /devices/device/inpath_config/inpath_enable (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inpath_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inpath_enable() directly.

    YANG Description: enable inpath: Enable/Disable
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inpath_enable must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__inpath_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inpath_enable(self):
    self.__inpath_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-enable", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_inpath_peering(self):
    """
    Getter method for inpath_peering, mapped from YANG variable /devices/device/inpath_config/inpath_peering (enumeration)

    YANG Description: auto inpath peering options
    """
    return self.__inpath_peering
      
  def _set_inpath_peering(self, v, load=False):
    """
    Setter method for inpath_peering, mapped from YANG variable /devices/device/inpath_config/inpath_peering (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inpath_peering is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inpath_peering() directly.

    YANG Description: auto inpath peering options
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto': {}, u'oobtransparency': {}},), is_leaf=True, yang_name="inpath-peering", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inpath_peering must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto': {}, u'oobtransparency': {}},), is_leaf=True, yang_name="inpath-peering", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__inpath_peering = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inpath_peering(self):
    self.__inpath_peering = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'auto': {}, u'oobtransparency': {}},), is_leaf=True, yang_name="inpath-peering", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_oobtransparency(self):
    """
    Getter method for oobtransparency, mapped from YANG variable /devices/device/inpath_config/oobtransparency (enumeration)

    YANG Description: oobtransparency-port
oobtransparency-mode

    """
    return self.__oobtransparency
      
  def _set_oobtransparency(self, v, load=False):
    """
    Setter method for oobtransparency, mapped from YANG variable /devices/device/inpath_config/oobtransparency (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oobtransparency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oobtransparency() directly.

    YANG Description: oobtransparency-port
oobtransparency-mode

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'oobtransparency-mode': {}, u'oobtransparency-port': {}},), is_leaf=True, yang_name="oobtransparency", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oobtransparency must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'oobtransparency-mode': {}, u'oobtransparency-port': {}},), is_leaf=True, yang_name="oobtransparency", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__oobtransparency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oobtransparency(self):
    self.__oobtransparency = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'oobtransparency-mode': {}, u'oobtransparency-port': {}},), is_leaf=True, yang_name="oobtransparency", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_oobtransparency_port(self):
    """
    Getter method for oobtransparency_port, mapped from YANG variable /devices/device/inpath_config/oobtransparency_port (uint16)

    YANG Description: 0..65535
    """
    return self.__oobtransparency_port
      
  def _set_oobtransparency_port(self, v, load=False):
    """
    Setter method for oobtransparency_port, mapped from YANG variable /devices/device/inpath_config/oobtransparency_port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oobtransparency_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oobtransparency_port() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="oobtransparency-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oobtransparency_port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="oobtransparency-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__oobtransparency_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oobtransparency_port(self):
    self.__oobtransparency_port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="oobtransparency-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_oobtransparency_mode(self):
    """
    Getter method for oobtransparency_mode, mapped from YANG variable /devices/device/inpath_config/oobtransparency_mode (union)

    YANG Description: Union Input types:
string
enumeration

    """
    return self.__oobtransparency_mode
      
  def _set_oobtransparency_mode(self, v, load=False):
    """
    Setter method for oobtransparency_mode, mapped from YANG variable /devices/device/inpath_config/oobtransparency_mode (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oobtransparency_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oobtransparency_mode() directly.

    YANG Description: Union Input types:
string
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {}, u'destination': {}, u'full': {}},),], is_leaf=True, yang_name="oobtransparency-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oobtransparency_mode must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {}, u'destination': {}, u'full': {}},),], is_leaf=True, yang_name="oobtransparency-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__oobtransparency_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oobtransparency_mode(self):
    self.__oobtransparency_mode = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {}, u'destination': {}, u'full': {}},),], is_leaf=True, yang_name="oobtransparency-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_inpath_simplified_routing(self):
    """
    Getter method for inpath_simplified_routing, mapped from YANG variable /devices/device/inpath_config/inpath_simplified_routing (enumeration)

    YANG Description: none
dest-only
dest-source
all
mac-def-gw-only

    """
    return self.__inpath_simplified_routing
      
  def _set_inpath_simplified_routing(self, v, load=False):
    """
    Setter method for inpath_simplified_routing, mapped from YANG variable /devices/device/inpath_config/inpath_simplified_routing (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inpath_simplified_routing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inpath_simplified_routing() directly.

    YANG Description: none
dest-only
dest-source
all
mac-def-gw-only

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dest-source': {}, u'none': {}, u'mac-def-gw-only': {}, u'all': {}, u'dest-only': {}},), is_leaf=True, yang_name="inpath-simplified-routing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inpath_simplified_routing must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dest-source': {}, u'none': {}, u'mac-def-gw-only': {}, u'all': {}, u'dest-only': {}},), is_leaf=True, yang_name="inpath-simplified-routing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__inpath_simplified_routing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inpath_simplified_routing(self):
    self.__inpath_simplified_routing = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'dest-source': {}, u'none': {}, u'mac-def-gw-only': {}, u'all': {}, u'dest-only': {}},), is_leaf=True, yang_name="inpath-simplified-routing", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_inpath_lsp(self):
    """
    Getter method for inpath_lsp, mapped from YANG variable /devices/device/inpath_config/inpath_lsp (enumeration)

    YANG Description: enable inpath lsp: Enable/Disable
    """
    return self.__inpath_lsp
      
  def _set_inpath_lsp(self, v, load=False):
    """
    Setter method for inpath_lsp, mapped from YANG variable /devices/device/inpath_config/inpath_lsp (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inpath_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inpath_lsp() directly.

    YANG Description: enable inpath lsp: Enable/Disable
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-lsp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inpath_lsp must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-lsp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__inpath_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inpath_lsp(self):
    self.__inpath_lsp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="inpath-lsp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_asymmetric_routing_detection(self):
    """
    Getter method for asymmetric_routing_detection, mapped from YANG variable /devices/device/inpath_config/asymmetric_routing_detection (enumeration)

    YANG Description: enable asymmetric routing detection: Enable/Disable
    """
    return self.__asymmetric_routing_detection
      
  def _set_asymmetric_routing_detection(self, v, load=False):
    """
    Setter method for asymmetric_routing_detection, mapped from YANG variable /devices/device/inpath_config/asymmetric_routing_detection (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_asymmetric_routing_detection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_asymmetric_routing_detection() directly.

    YANG Description: enable asymmetric routing detection: Enable/Disable
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-detection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """asymmetric_routing_detection must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-detection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__asymmetric_routing_detection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_asymmetric_routing_detection(self):
    self.__asymmetric_routing_detection = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-detection", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_asymmetric_routing_pass_through(self):
    """
    Getter method for asymmetric_routing_pass_through, mapped from YANG variable /devices/device/inpath_config/asymmetric_routing_pass_through (enumeration)

    YANG Description: enable asymmetric routing pass-through: Enable/Disable
    """
    return self.__asymmetric_routing_pass_through
      
  def _set_asymmetric_routing_pass_through(self, v, load=False):
    """
    Setter method for asymmetric_routing_pass_through, mapped from YANG variable /devices/device/inpath_config/asymmetric_routing_pass_through (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_asymmetric_routing_pass_through is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_asymmetric_routing_pass_through() directly.

    YANG Description: enable asymmetric routing pass-through: Enable/Disable
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-pass-through", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """asymmetric_routing_pass_through must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-pass-through", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__asymmetric_routing_pass_through = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_asymmetric_routing_pass_through(self):
    self.__asymmetric_routing_pass_through = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="asymmetric-routing-pass-through", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_asym_route_tab_flush(self):
    """
    Getter method for asym_route_tab_flush, mapped from YANG variable /devices/device/inpath_config/asym_route_tab_flush (enumeration)

    YANG Description: asym-route-tab flush
    """
    return self.__asym_route_tab_flush
      
  def _set_asym_route_tab_flush(self, v, load=False):
    """
    Setter method for asym_route_tab_flush, mapped from YANG variable /devices/device/inpath_config/asym_route_tab_flush (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_asym_route_tab_flush is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_asym_route_tab_flush() directly.

    YANG Description: asym-route-tab flush
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'flush': {}},), is_leaf=True, yang_name="asym-route-tab-flush", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """asym_route_tab_flush must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'flush': {}},), is_leaf=True, yang_name="asym-route-tab-flush", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__asym_route_tab_flush = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_asym_route_tab_flush(self):
    self.__asym_route_tab_flush = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'flush': {}},), is_leaf=True, yang_name="asym-route-tab-flush", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_in_path_interface_bundle(self):
    """
    Getter method for in_path_interface_bundle, mapped from YANG variable /devices/device/inpath_config/in_path_interface_bundle (list)
    """
    return self.__in_path_interface_bundle
      
  def _set_in_path_interface_bundle(self, v, load=False):
    """
    Setter method for in_path_interface_bundle, mapped from YANG variable /devices/device/inpath_config/in_path_interface_bundle (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_in_path_interface_bundle is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_in_path_interface_bundle() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("bundle_name",in_path_interface_bundle.in_path_interface_bundle, yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bundle-name'), is_container='list', yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """in_path_interface_bundle must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("bundle_name",in_path_interface_bundle.in_path_interface_bundle, yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bundle-name'), is_container='list', yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__in_path_interface_bundle = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_in_path_interface_bundle(self):
    self.__in_path_interface_bundle = YANGDynClass(base=YANGListType("bundle_name",in_path_interface_bundle.in_path_interface_bundle, yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bundle-name'), is_container='list', yang_name="in-path-interface-bundle", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

  inpath_enable = __builtin__.property(_get_inpath_enable, _set_inpath_enable)
  inpath_peering = __builtin__.property(_get_inpath_peering, _set_inpath_peering)
  oobtransparency = __builtin__.property(_get_oobtransparency, _set_oobtransparency)
  oobtransparency_port = __builtin__.property(_get_oobtransparency_port, _set_oobtransparency_port)
  oobtransparency_mode = __builtin__.property(_get_oobtransparency_mode, _set_oobtransparency_mode)
  inpath_simplified_routing = __builtin__.property(_get_inpath_simplified_routing, _set_inpath_simplified_routing)
  inpath_lsp = __builtin__.property(_get_inpath_lsp, _set_inpath_lsp)
  asymmetric_routing_detection = __builtin__.property(_get_asymmetric_routing_detection, _set_asymmetric_routing_detection)
  asymmetric_routing_pass_through = __builtin__.property(_get_asymmetric_routing_pass_through, _set_asymmetric_routing_pass_through)
  asym_route_tab_flush = __builtin__.property(_get_asym_route_tab_flush, _set_asym_route_tab_flush)
  in_path_interface_bundle = __builtin__.property(_get_in_path_interface_bundle, _set_in_path_interface_bundle)


  _pyangbind_elements = collections.OrderedDict([('inpath_enable', inpath_enable), ('inpath_peering', inpath_peering), ('oobtransparency', oobtransparency), ('oobtransparency_port', oobtransparency_port), ('oobtransparency_mode', oobtransparency_mode), ('inpath_simplified_routing', inpath_simplified_routing), ('inpath_lsp', inpath_lsp), ('asymmetric_routing_detection', asymmetric_routing_detection), ('asymmetric_routing_pass_through', asymmetric_routing_pass_through), ('asym_route_tab_flush', asym_route_tab_flush), ('in_path_interface_bundle', in_path_interface_bundle), ])


