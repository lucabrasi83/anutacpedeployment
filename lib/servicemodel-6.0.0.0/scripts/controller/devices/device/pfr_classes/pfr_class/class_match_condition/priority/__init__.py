
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class priority(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/pfr-classes/pfr-class/class-match-condition/priority. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__priority_value','__priority_type','__threshold_value',)

  _yang_name = 'priority'
  _module_name = 'qos'
  _namespace = 'http://anutanetworks.com/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__priority_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)
    self.__threshold_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="threshold-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__priority_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loss': {}, u'jitter': {}, u'one-way-delay': {}},), is_leaf=True, yang_name="priority-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='pfr-priority-type-def', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'pfr-classes', u'pfr-class', u'class-match-condition', u'priority']

  def _get_priority_value(self):
    """
    Getter method for priority_value, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/priority_value (priority-def)

    YANG Description: 1..10000000
    """
    return self.__priority_value
      
  def _set_priority_value(self, v, load=False):
    """
    Setter method for priority_value, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/priority_value (priority-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_value() directly.

    YANG Description: 1..10000000
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_value must be of a type compatible with priority-def""",
          'defined-type': "qos:priority-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)""",
        })

    self.__priority_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_value(self):
    self.__priority_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)


  def _get_priority_type(self):
    """
    Getter method for priority_type, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/priority_type (pfr-priority-type-def)

    YANG Description: jitter
loss
one-way-delay

    """
    return self.__priority_type
      
  def _set_priority_type(self, v, load=False):
    """
    Setter method for priority_type, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/priority_type (pfr-priority-type-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_type() directly.

    YANG Description: jitter
loss
one-way-delay

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loss': {}, u'jitter': {}, u'one-way-delay': {}},), is_leaf=True, yang_name="priority-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='pfr-priority-type-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_type must be of a type compatible with pfr-priority-type-def""",
          'defined-type': "qos:pfr-priority-type-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loss': {}, u'jitter': {}, u'one-way-delay': {}},), is_leaf=True, yang_name="priority-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='pfr-priority-type-def', is_config=True)""",
        })

    self.__priority_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_type(self):
    self.__priority_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loss': {}, u'jitter': {}, u'one-way-delay': {}},), is_leaf=True, yang_name="priority-type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='pfr-priority-type-def', is_config=True)


  def _get_threshold_value(self):
    """
    Getter method for threshold_value, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/threshold_value (uint32)

    YANG Description: 0..4294967295
    """
    return self.__threshold_value
      
  def _set_threshold_value(self, v, load=False):
    """
    Setter method for threshold_value, mapped from YANG variable /devices/device/pfr_classes/pfr_class/class_match_condition/priority/threshold_value (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_threshold_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_threshold_value() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="threshold-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """threshold_value must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="threshold-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__threshold_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_threshold_value(self):
    self.__threshold_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="threshold-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)

  priority_value = __builtin__.property(_get_priority_value, _set_priority_value)
  priority_type = __builtin__.property(_get_priority_type, _set_priority_type)
  threshold_value = __builtin__.property(_get_threshold_value, _set_threshold_value)


  _pyangbind_elements = collections.OrderedDict([('priority_value', priority_value), ('priority_type', priority_type), ('threshold_value', threshold_value), ])


