
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class crypto_policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/crypto-policies/crypto-policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__policy_number','__ike_version','__auth_type','__ike_encryption_type','__hash','__group','__life_time','__keepalive','__pfs','__fvrf','__proposal',)

  _yang_name = 'crypto-policy'
  _module_name = 'dmvpn'
  _namespace = 'http://anutanetworks.com/dmvpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rsa-sig': {}, u'pre-share': {}},), is_leaf=True, yang_name="auth-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='auth-mode', is_config=True)
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__policy_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-number", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keepalive", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__pfs = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pfs", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    self.__ike_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)
    self.__fvrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="fvrf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__hash = YANGDynClass(base=unicode, is_leaf=True, yang_name="hash", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__proposal = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="proposal", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='union', is_config=True)
    self.__life_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'crypto-policies', u'crypto-policy']

  def _get_policy_number(self):
    """
    Getter method for policy_number, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/policy_number (string)

    YANG Description: string
    """
    return self.__policy_number
      
  def _set_policy_number(self, v, load=False):
    """
    Setter method for policy_number, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/policy_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_number() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="policy-number", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-number", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__policy_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_number(self):
    self.__policy_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-number", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_ike_version(self):
    """
    Getter method for ike_version, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/ike_version (string)

    YANG Description: string
    """
    return self.__ike_version
      
  def _set_ike_version(self, v, load=False):
    """
    Setter method for ike_version, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/ike_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__ike_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_version(self):
    self.__ike_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ike-version", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/auth_type (auth-mode)

    YANG Description: pre-share
rsa-sig

    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/auth_type (auth-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: pre-share
rsa-sig

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rsa-sig': {}, u'pre-share': {}},), is_leaf=True, yang_name="auth-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='auth-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with auth-mode""",
          'defined-type': "dmvpn:auth-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rsa-sig': {}, u'pre-share': {}},), is_leaf=True, yang_name="auth-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='auth-mode', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rsa-sig': {}, u'pre-share': {}},), is_leaf=True, yang_name="auth-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='auth-mode', is_config=True)


  def _get_ike_encryption_type(self):
    """
    Getter method for ike_encryption_type, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/ike_encryption_type (encryption-mode)

    YANG Description: AES256
AES128
AES192
DES
3DES
aes-cbc-128
aes-cbc-192
aes-cbc-256
aes-gcm-128
aes-gcm-256

    """
    return self.__ike_encryption_type
      
  def _set_ike_encryption_type(self, v, load=False):
    """
    Setter method for ike_encryption_type, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/ike_encryption_type (encryption-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ike_encryption_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ike_encryption_type() directly.

    YANG Description: AES256
AES128
AES192
DES
3DES
aes-cbc-128
aes-cbc-192
aes-cbc-256
aes-gcm-128
aes-gcm-256

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ike_encryption_type must be of a type compatible with encryption-mode""",
          'defined-type': "dmvpn:encryption-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)""",
        })

    self.__ike_encryption_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ike_encryption_type(self):
    self.__ike_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'aes-cbc-192': {}, u'3DES': {}, u'AES256': {}, u'aes-cbc-256': {}, u'aes-gcm-256': {}, u'DES': {}, u'AES128': {}, u'AES192': {}, u'aes-gcm-128': {}, u'aes-cbc-128': {}},), is_leaf=True, yang_name="ike-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode', is_config=True)


  def _get_hash(self):
    """
    Getter method for hash, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/hash (string)

    YANG Description: string
    """
    return self.__hash
      
  def _set_hash(self, v, load=False):
    """
    Setter method for hash, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/hash (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hash is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hash() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="hash", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hash must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="hash", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__hash = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hash(self):
    self.__hash = YANGDynClass(base=unicode, is_leaf=True, yang_name="hash", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_group(self):
    """
    Getter method for group, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/group (uint32)

    YANG Description: 0..4294967295
    """
    return self.__group
      
  def _set_group(self, v, load=False):
    """
    Setter method for group, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group(self):
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="group", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_life_time(self):
    """
    Getter method for life_time, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/life_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__life_time
      
  def _set_life_time(self, v, load=False):
    """
    Setter method for life_time, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/life_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_life_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_life_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """life_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__life_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_life_time(self):
    self.__life_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="life-time", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_keepalive(self):
    """
    Getter method for keepalive, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/keepalive (uint32)

    YANG Description: 0..4294967295
    """
    return self.__keepalive
      
  def _set_keepalive(self, v, load=False):
    """
    Setter method for keepalive, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/keepalive (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keepalive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keepalive() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keepalive", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keepalive must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keepalive", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__keepalive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keepalive(self):
    self.__keepalive = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keepalive", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_pfs(self):
    """
    Getter method for pfs, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/pfs (boolean)

    YANG Description: pfs: True/False
    """
    return self.__pfs
      
  def _set_pfs(self, v, load=False):
    """
    Setter method for pfs, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/pfs (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pfs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pfs() directly.

    YANG Description: pfs: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pfs", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pfs must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pfs", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)""",
        })

    self.__pfs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pfs(self):
    self.__pfs = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pfs", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)


  def _get_fvrf(self):
    """
    Getter method for fvrf, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/fvrf (string)

    YANG Description: string
    """
    return self.__fvrf
      
  def _set_fvrf(self, v, load=False):
    """
    Setter method for fvrf, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/fvrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fvrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fvrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="fvrf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fvrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="fvrf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__fvrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fvrf(self):
    self.__fvrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="fvrf", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_proposal(self):
    """
    Getter method for proposal, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/proposal (union)

    YANG Description: Union Input types:
leafref
string

    """
    return self.__proposal
      
  def _set_proposal(self, v, load=False):
    """
    Setter method for proposal, mapped from YANG variable /devices/device/crypto_policies/crypto_policy/proposal (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_proposal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_proposal() directly.

    YANG Description: Union Input types:
leafref
string

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,unicode,], is_leaf=True, yang_name="proposal", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """proposal must be of a type compatible with union""",
          'defined-type': "dmvpn:union",
          'generated-type': """YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="proposal", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='union', is_config=True)""",
        })

    self.__proposal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_proposal(self):
    self.__proposal = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="proposal", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='union', is_config=True)

  policy_number = __builtin__.property(_get_policy_number, _set_policy_number)
  ike_version = __builtin__.property(_get_ike_version, _set_ike_version)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  ike_encryption_type = __builtin__.property(_get_ike_encryption_type, _set_ike_encryption_type)
  hash = __builtin__.property(_get_hash, _set_hash)
  group = __builtin__.property(_get_group, _set_group)
  life_time = __builtin__.property(_get_life_time, _set_life_time)
  keepalive = __builtin__.property(_get_keepalive, _set_keepalive)
  pfs = __builtin__.property(_get_pfs, _set_pfs)
  fvrf = __builtin__.property(_get_fvrf, _set_fvrf)
  proposal = __builtin__.property(_get_proposal, _set_proposal)


  _pyangbind_elements = collections.OrderedDict([('policy_number', policy_number), ('ike_version', ike_version), ('auth_type', auth_type), ('ike_encryption_type', ike_encryption_type), ('hash', hash), ('group', group), ('life_time', life_time), ('keepalive', keepalive), ('pfs', pfs), ('fvrf', fvrf), ('proposal', proposal), ])


