
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import prefix_lists
import policy_statements
import communities
class policy_options(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/policy-options. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__prefix_lists','__policy_statements','__communities',)

  _yang_name = 'policy-options'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__prefix_lists = YANGDynClass(base=prefix_lists.prefix_lists, is_container='container', yang_name="prefix-lists", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__policy_statements = YANGDynClass(base=policy_statements.policy_statements, is_container='container', yang_name="policy-statements", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'policy-options']

  def _get_prefix_lists(self):
    """
    Getter method for prefix_lists, mapped from YANG variable /devices/device/policy_options/prefix_lists (container)
    """
    return self.__prefix_lists
      
  def _set_prefix_lists(self, v, load=False):
    """
    Setter method for prefix_lists, mapped from YANG variable /devices/device/policy_options/prefix_lists (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_lists is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_lists() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=prefix_lists.prefix_lists, is_container='container', yang_name="prefix-lists", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_lists must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=prefix_lists.prefix_lists, is_container='container', yang_name="prefix-lists", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__prefix_lists = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_lists(self):
    self.__prefix_lists = YANGDynClass(base=prefix_lists.prefix_lists, is_container='container', yang_name="prefix-lists", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_policy_statements(self):
    """
    Getter method for policy_statements, mapped from YANG variable /devices/device/policy_options/policy_statements (container)
    """
    return self.__policy_statements
      
  def _set_policy_statements(self, v, load=False):
    """
    Setter method for policy_statements, mapped from YANG variable /devices/device/policy_options/policy_statements (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_statements is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_statements() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=policy_statements.policy_statements, is_container='container', yang_name="policy-statements", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_statements must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=policy_statements.policy_statements, is_container='container', yang_name="policy-statements", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__policy_statements = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_statements(self):
    self.__policy_statements = YANGDynClass(base=policy_statements.policy_statements, is_container='container', yang_name="policy-statements", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_communities(self):
    """
    Getter method for communities, mapped from YANG variable /devices/device/policy_options/communities (container)
    """
    return self.__communities
      
  def _set_communities(self, v, load=False):
    """
    Setter method for communities, mapped from YANG variable /devices/device/policy_options/communities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_communities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_communities() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=communities.communities, is_container='container', yang_name="communities", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """communities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__communities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_communities(self):
    self.__communities = YANGDynClass(base=communities.communities, is_container='container', yang_name="communities", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

  prefix_lists = __builtin__.property(_get_prefix_lists, _set_prefix_lists)
  policy_statements = __builtin__.property(_get_policy_statements, _set_policy_statements)
  communities = __builtin__.property(_get_communities, _set_communities)


  _pyangbind_elements = collections.OrderedDict([('prefix_lists', prefix_lists), ('policy_statements', policy_statements), ('communities', communities), ])


