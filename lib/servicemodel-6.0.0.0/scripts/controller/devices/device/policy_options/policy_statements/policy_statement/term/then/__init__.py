
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class then(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/policy-options/policy-statements/policy-statement/term/then. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Action to take if 'from' condition is matched
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__action','__next_term','__next_policy',)

  _yang_name = 'then'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'accept': {}, u'reject': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__next_term = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-term", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__next_policy = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'policy-options', u'policy-statements', u'policy-statement', u'term', u'then']

  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/action (enumeration)

    YANG Description: accept
reject

    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.

    YANG Description: accept
reject

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'accept': {}, u'reject': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'accept': {}, u'reject': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'accept': {}, u'reject': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_next_term(self):
    """
    Getter method for next_term, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/next_term (boolean)

    YANG Description: next-term: True/False
    """
    return self.__next_term
      
  def _set_next_term(self, v, load=False):
    """
    Setter method for next_term, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/next_term (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_term is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_term() directly.

    YANG Description: next-term: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="next-term", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_term must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-term", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__next_term = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_term(self):
    self.__next_term = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-term", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_next_policy(self):
    """
    Getter method for next_policy, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/next_policy (boolean)

    YANG Description: next-policy: True/False
    """
    return self.__next_policy
      
  def _set_next_policy(self, v, load=False):
    """
    Setter method for next_policy, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/then/next_policy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_policy() directly.

    YANG Description: next-policy: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="next-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_policy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__next_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_policy(self):
    self.__next_policy = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="next-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)

  action = __builtin__.property(_get_action, _set_action)
  next_term = __builtin__.property(_get_next_term, _set_next_term)
  next_policy = __builtin__.property(_get_next_policy, _set_next_policy)


  _pyangbind_elements = collections.OrderedDict([('action', action), ('next_term', next_term), ('next_policy', next_policy), ])


