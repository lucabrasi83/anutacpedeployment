
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class from_(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/policy-options/policy-statements/policy-statement/term/from. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Match criteria
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__protocol','__community','__prefix_list_filter','__prefix_match_condition','__family',)

  _yang_name = 'from'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__prefix_list_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list-filter", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__prefix_match_condition = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'orlonger': {}, u'exact': {}, u'longer': {}},), is_leaf=True, yang_name="prefix-match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__family = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'policy-options', u'policy-statements', u'policy-statement', u'term', u'from']

  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/protocol (string)

    YANG Description: string
    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/protocol (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_community(self):
    """
    Getter method for community, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/community (string)

    YANG Description: string
    """
    return self.__community
      
  def _set_community(self, v, load=False):
    """
    Setter method for community, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community(self):
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_prefix_list_filter(self):
    """
    Getter method for prefix_list_filter, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/prefix_list_filter (string)

    YANG Description: string
    """
    return self.__prefix_list_filter
      
  def _set_prefix_list_filter(self, v, load=False):
    """
    Setter method for prefix_list_filter, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/prefix_list_filter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_list_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_list_filter() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-list-filter", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_list_filter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list-filter", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__prefix_list_filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_list_filter(self):
    self.__prefix_list_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list-filter", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_prefix_match_condition(self):
    """
    Getter method for prefix_match_condition, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/prefix_match_condition (enumeration)

    YANG Description: exact
longer
orlonger

    """
    return self.__prefix_match_condition
      
  def _set_prefix_match_condition(self, v, load=False):
    """
    Setter method for prefix_match_condition, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/prefix_match_condition (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_match_condition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_match_condition() directly.

    YANG Description: exact
longer
orlonger

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'orlonger': {}, u'exact': {}, u'longer': {}},), is_leaf=True, yang_name="prefix-match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_match_condition must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'orlonger': {}, u'exact': {}, u'longer': {}},), is_leaf=True, yang_name="prefix-match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__prefix_match_condition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_match_condition(self):
    self.__prefix_match_condition = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'orlonger': {}, u'exact': {}, u'longer': {}},), is_leaf=True, yang_name="prefix-match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_family(self):
    """
    Getter method for family, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/family (enumeration)

    YANG Description: inet
inet6

    """
    return self.__family
      
  def _set_family(self, v, load=False):
    """
    Setter method for family, mapped from YANG variable /devices/device/policy_options/policy_statements/policy_statement/term/from/family (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_family() directly.

    YANG Description: inet
inet6

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """family must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_family(self):
    self.__family = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)

  protocol = __builtin__.property(_get_protocol, _set_protocol)
  community = __builtin__.property(_get_community, _set_community)
  prefix_list_filter = __builtin__.property(_get_prefix_list_filter, _set_prefix_list_filter)
  prefix_match_condition = __builtin__.property(_get_prefix_match_condition, _set_prefix_match_condition)
  family = __builtin__.property(_get_family, _set_family)


  _pyangbind_elements = collections.OrderedDict([('protocol', protocol), ('community', community), ('prefix_list_filter', prefix_list_filter), ('prefix_match_condition', prefix_match_condition), ('family', family), ])


