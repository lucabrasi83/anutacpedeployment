
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class module(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/modules/module. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__switch_number','__module_number','__id','__module_device','__module_type','__module_status','__module_model','__ip_address','__serial_number','__credential_set','__device_type',)

  _yang_name = 'module'
  _module_name = 'devicemodule'
  _namespace = 'http://anutanetworks.com/devicemodule'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__credential_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    self.__switch_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="switch-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)
    self.__module_model = YANGDynClass(base=unicode, is_leaf=True, yang_name="module-model", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)
    self.__module_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="module-status", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-status', is_config=True)
    self.__ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-address", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='inet:ipv4-address', is_config=True)
    self.__module_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="module-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)
    self.__module_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACE30': {}, u'ACE20': {}, u'SRE': {}, u'ALSW': {}, u'NM_WAE': {}, u'ACE10': {}, u'RPSW': {}, u'WS-SVC-ASA': {}, u'LINE_CARD': {}, u'FWSM': {}},), is_leaf=True, yang_name="module-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-type', is_config=True)
    self.__device_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)
    self.__module_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="module-device", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'modules', u'module']

  def _get_switch_number(self):
    """
    Getter method for switch_number, mapped from YANG variable /devices/device/modules/module/switch_number (uint8)

    YANG Description: 0..128
    """
    return self.__switch_number
      
  def _set_switch_number(self, v, load=False):
    """
    Setter method for switch_number, mapped from YANG variable /devices/device/modules/module/switch_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switch_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switch_number() directly.

    YANG Description: 0..128
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="switch-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switch_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="switch-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)""",
        })

    self.__switch_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switch_number(self):
    self.__switch_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="switch-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)


  def _get_module_number(self):
    """
    Getter method for module_number, mapped from YANG variable /devices/device/modules/module/module_number (uint8)

    YANG Description: 0..128
    """
    return self.__module_number
      
  def _set_module_number(self, v, load=False):
    """
    Setter method for module_number, mapped from YANG variable /devices/device/modules/module/module_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_number() directly.

    YANG Description: 0..128
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="module-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="module-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)""",
        })

    self.__module_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_number(self):
    self.__module_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..128']}), is_leaf=True, yang_name="module-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='uint8', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /devices/device/modules/module/id (string)

    YANG Description: Autogenerated key for identifying module
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /devices/device/modules/module/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Autogenerated key for identifying module
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)


  def _get_module_device(self):
    """
    Getter method for module_device, mapped from YANG variable /devices/device/modules/module/module_device (leafref)

    YANG Description: module-device
    """
    return self.__module_device
      
  def _set_module_device(self, v, load=False):
    """
    Setter method for module_device, mapped from YANG variable /devices/device/modules/module/module_device (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_device() directly.

    YANG Description: module-device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="module-device", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_device must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="module-device", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)""",
        })

    self.__module_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_device(self):
    self.__module_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="module-device", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)


  def _get_module_type(self):
    """
    Getter method for module_type, mapped from YANG variable /devices/device/modules/module/module_type (module-type)

    YANG Description: ACE10
ACE20
ACE30
FWSM
SRE
NM_WAE
WS-SVC-ASA
RPSW
ALSW
LINE_CARD

    """
    return self.__module_type
      
  def _set_module_type(self, v, load=False):
    """
    Setter method for module_type, mapped from YANG variable /devices/device/modules/module/module_type (module-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_type() directly.

    YANG Description: ACE10
ACE20
ACE30
FWSM
SRE
NM_WAE
WS-SVC-ASA
RPSW
ALSW
LINE_CARD

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACE30': {}, u'ACE20': {}, u'SRE': {}, u'ALSW': {}, u'NM_WAE': {}, u'ACE10': {}, u'RPSW': {}, u'WS-SVC-ASA': {}, u'LINE_CARD': {}, u'FWSM': {}},), is_leaf=True, yang_name="module-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_type must be of a type compatible with module-type""",
          'defined-type': "devicemodule:module-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACE30': {}, u'ACE20': {}, u'SRE': {}, u'ALSW': {}, u'NM_WAE': {}, u'ACE10': {}, u'RPSW': {}, u'WS-SVC-ASA': {}, u'LINE_CARD': {}, u'FWSM': {}},), is_leaf=True, yang_name="module-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-type', is_config=True)""",
        })

    self.__module_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_type(self):
    self.__module_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACE30': {}, u'ACE20': {}, u'SRE': {}, u'ALSW': {}, u'NM_WAE': {}, u'ACE10': {}, u'RPSW': {}, u'WS-SVC-ASA': {}, u'LINE_CARD': {}, u'FWSM': {}},), is_leaf=True, yang_name="module-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-type', is_config=True)


  def _get_module_status(self):
    """
    Getter method for module_status, mapped from YANG variable /devices/device/modules/module/module_status (module-status)

    YANG Description: ENABLED
DISABLED

    """
    return self.__module_status
      
  def _set_module_status(self, v, load=False):
    """
    Setter method for module_status, mapped from YANG variable /devices/device/modules/module/module_status (module-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_status() directly.

    YANG Description: ENABLED
DISABLED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="module-status", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_status must be of a type compatible with module-status""",
          'defined-type': "devicemodule:module-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="module-status", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-status', is_config=True)""",
        })

    self.__module_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_status(self):
    self.__module_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="module-status", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='module-status', is_config=True)


  def _get_module_model(self):
    """
    Getter method for module_model, mapped from YANG variable /devices/device/modules/module/module_model (string)

    YANG Description: string
    """
    return self.__module_model
      
  def _set_module_model(self, v, load=False):
    """
    Setter method for module_model, mapped from YANG variable /devices/device/modules/module/module_model (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_model is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_model() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="module-model", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_model must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="module-model", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)""",
        })

    self.__module_model = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_model(self):
    self.__module_model = YANGDynClass(base=unicode, is_leaf=True, yang_name="module-model", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)


  def _get_ip_address(self):
    """
    Getter method for ip_address, mapped from YANG variable /devices/device/modules/module/ip_address (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__ip_address
      
  def _set_ip_address(self, v, load=False):
    """
    Setter method for ip_address, mapped from YANG variable /devices/device/modules/module/ip_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_address() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-address", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-address", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_address(self):
    self.__ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-address", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='inet:ipv4-address', is_config=True)


  def _get_serial_number(self):
    """
    Getter method for serial_number, mapped from YANG variable /devices/device/modules/module/serial_number (string)

    YANG Description: string
    """
    return self.__serial_number
      
  def _set_serial_number(self, v, load=False):
    """
    Setter method for serial_number, mapped from YANG variable /devices/device/modules/module/serial_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serial_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="serial-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serial_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)""",
        })

    self.__serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serial_number(self):
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='string', is_config=True)


  def _get_credential_set(self):
    """
    Getter method for credential_set, mapped from YANG variable /devices/device/modules/module/credential_set (leafref)

    YANG Description: credential-set
    """
    return self.__credential_set
      
  def _set_credential_set(self, v, load=False):
    """
    Setter method for credential_set, mapped from YANG variable /devices/device/modules/module/credential_set (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credential_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credential_set() directly.

    YANG Description: credential-set
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="credential-set", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credential_set must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)""",
        })

    self.__credential_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credential_set(self):
    self.__credential_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)


  def _get_device_type(self):
    """
    Getter method for device_type, mapped from YANG variable /devices/device/modules/module/device_type (leafref)

    YANG Description: device-type
    """
    return self.__device_type
      
  def _set_device_type(self, v, load=False):
    """
    Setter method for device_type, mapped from YANG variable /devices/device/modules/module/device_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_type() directly.

    YANG Description: device-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)""",
        })

    self.__device_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_type(self):
    self.__device_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type", module_name="devicemodule", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/devicemodule', defining_module='devicemodule', yang_type='leafref', is_config=True)

  switch_number = __builtin__.property(_get_switch_number, _set_switch_number)
  module_number = __builtin__.property(_get_module_number, _set_module_number)
  id = __builtin__.property(_get_id, _set_id)
  module_device = __builtin__.property(_get_module_device, _set_module_device)
  module_type = __builtin__.property(_get_module_type, _set_module_type)
  module_status = __builtin__.property(_get_module_status, _set_module_status)
  module_model = __builtin__.property(_get_module_model, _set_module_model)
  ip_address = __builtin__.property(_get_ip_address, _set_ip_address)
  serial_number = __builtin__.property(_get_serial_number, _set_serial_number)
  credential_set = __builtin__.property(_get_credential_set, _set_credential_set)
  device_type = __builtin__.property(_get_device_type, _set_device_type)


  _pyangbind_elements = collections.OrderedDict([('switch_number', switch_number), ('module_number', module_number), ('id', id), ('module_device', module_device), ('module_type', module_type), ('module_status', module_status), ('module_model', module_model), ('ip_address', ip_address), ('serial_number', serial_number), ('credential_set', credential_set), ('device_type', device_type), ])


