
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import pool_members
import health_monitors
class rservice_pool(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/rservice-pools/rservice-pool. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__domain_number','__partition','__priority_group_activation','__load_balancing_method','__protocol','__pool_members','__health_monitors',)

  _yang_name = 'rservice-pool'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'tcp': {}, u'https': {}},), is_leaf=True, yang_name="protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='protocol-def', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__health_monitors = YANGDynClass(base=health_monitors.health_monitors, is_container='container', yang_name="health-monitors", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__priority_group_activation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority-group-activation", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__pool_members = YANGDynClass(base=pool_members.pool_members, is_container='container', yang_name="pool-members", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__load_balancing_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'predictive(member)': {}, u'ratio(member)': {}, u'least-connections(member)': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'rservice-pools', u'rservice-pool']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_domain_number(self):
    """
    Getter method for domain_number, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/domain_number (leafref)

    YANG Description: domain-number
    """
    return self.__domain_number
      
  def _set_domain_number(self, v, load=False):
    """
    Setter method for domain_number, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/domain_number (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_number() directly.

    YANG Description: domain-number
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_number must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__domain_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_number(self):
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_partition(self):
    """
    Getter method for partition, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/partition (leafref)

    YANG Description: partition
    """
    return self.__partition
      
  def _set_partition(self, v, load=False):
    """
    Setter method for partition, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/partition (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partition() directly.

    YANG Description: partition
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partition must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__partition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partition(self):
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_priority_group_activation(self):
    """
    Getter method for priority_group_activation, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/priority_group_activation (uint32)

    YANG Description: 0..4294967295
    """
    return self.__priority_group_activation
      
  def _set_priority_group_activation(self, v, load=False):
    """
    Setter method for priority_group_activation, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/priority_group_activation (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_group_activation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_group_activation() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority-group-activation", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_group_activation must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority-group-activation", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)""",
        })

    self.__priority_group_activation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_group_activation(self):
    self.__priority_group_activation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="priority-group-activation", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)


  def _get_load_balancing_method(self):
    """
    Getter method for load_balancing_method, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/load_balancing_method (enumeration)

    YANG Description: round-robin
least-connections(member)
predictive(member)
ratio(member)

    """
    return self.__load_balancing_method
      
  def _set_load_balancing_method(self, v, load=False):
    """
    Setter method for load_balancing_method, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/load_balancing_method (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_load_balancing_method is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_load_balancing_method() directly.

    YANG Description: round-robin
least-connections(member)
predictive(member)
ratio(member)

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'predictive(member)': {}, u'ratio(member)': {}, u'least-connections(member)': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """load_balancing_method must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'predictive(member)': {}, u'ratio(member)': {}, u'least-connections(member)': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__load_balancing_method = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_load_balancing_method(self):
    self.__load_balancing_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'predictive(member)': {}, u'ratio(member)': {}, u'least-connections(member)': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/protocol (protocol-def)

    YANG Description: http
https
tcp
udp

    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/protocol (protocol-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: http
https
tcp
udp

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'tcp': {}, u'https': {}},), is_leaf=True, yang_name="protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='protocol-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with protocol-def""",
          'defined-type': "loadbalancer:protocol-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'tcp': {}, u'https': {}},), is_leaf=True, yang_name="protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='protocol-def', is_config=True)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'tcp': {}, u'https': {}},), is_leaf=True, yang_name="protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='protocol-def', is_config=True)


  def _get_pool_members(self):
    """
    Getter method for pool_members, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members (container)
    """
    return self.__pool_members
      
  def _set_pool_members(self, v, load=False):
    """
    Setter method for pool_members, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pool_members is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pool_members() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=pool_members.pool_members, is_container='container', yang_name="pool-members", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pool_members must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pool_members.pool_members, is_container='container', yang_name="pool-members", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__pool_members = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pool_members(self):
    self.__pool_members = YANGDynClass(base=pool_members.pool_members, is_container='container', yang_name="pool-members", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)


  def _get_health_monitors(self):
    """
    Getter method for health_monitors, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/health_monitors (container)
    """
    return self.__health_monitors
      
  def _set_health_monitors(self, v, load=False):
    """
    Setter method for health_monitors, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/health_monitors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_health_monitors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_health_monitors() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=health_monitors.health_monitors, is_container='container', yang_name="health-monitors", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """health_monitors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=health_monitors.health_monitors, is_container='container', yang_name="health-monitors", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__health_monitors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_health_monitors(self):
    self.__health_monitors = YANGDynClass(base=health_monitors.health_monitors, is_container='container', yang_name="health-monitors", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  domain_number = __builtin__.property(_get_domain_number, _set_domain_number)
  partition = __builtin__.property(_get_partition, _set_partition)
  priority_group_activation = __builtin__.property(_get_priority_group_activation, _set_priority_group_activation)
  load_balancing_method = __builtin__.property(_get_load_balancing_method, _set_load_balancing_method)
  protocol = __builtin__.property(_get_protocol, _set_protocol)
  pool_members = __builtin__.property(_get_pool_members, _set_pool_members)
  health_monitors = __builtin__.property(_get_health_monitors, _set_health_monitors)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('domain_number', domain_number), ('partition', partition), ('priority_group_activation', priority_group_activation), ('load_balancing_method', load_balancing_method), ('protocol', protocol), ('pool_members', pool_members), ('health_monitors', health_monitors), ])


