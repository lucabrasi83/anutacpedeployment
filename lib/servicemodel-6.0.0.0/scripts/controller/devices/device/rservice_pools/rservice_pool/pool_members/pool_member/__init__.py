
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class pool_member(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/rservice-pools/rservice-pool/pool-members/pool-member. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__real_server_ip','__service_port',)

  _yang_name = 'pool-member'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__real_server_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="real-server-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__service_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="service-port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'rservice-pools', u'rservice-pool', u'pool-members', u'pool-member']

  def _get_real_server_ip(self):
    """
    Getter method for real_server_ip, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members/pool_member/real_server_ip (leafref)

    YANG Description: real-server-ip
    """
    return self.__real_server_ip
      
  def _set_real_server_ip(self, v, load=False):
    """
    Setter method for real_server_ip, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members/pool_member/real_server_ip (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_real_server_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_real_server_ip() directly.

    YANG Description: real-server-ip
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="real-server-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """real_server_ip must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="real-server-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__real_server_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_real_server_ip(self):
    self.__real_server_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="real-server-ip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_service_port(self):
    """
    Getter method for service_port, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members/pool_member/service_port (uint32)

    YANG Description: 0..4294967295
    """
    return self.__service_port
      
  def _set_service_port(self, v, load=False):
    """
    Setter method for service_port, mapped from YANG variable /devices/device/rservice_pools/rservice_pool/pool_members/pool_member/service_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_port() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="service-port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="service-port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)""",
        })

    self.__service_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_port(self):
    self.__service_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="service-port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)

  real_server_ip = __builtin__.property(_get_real_server_ip, _set_real_server_ip)
  service_port = __builtin__.property(_get_service_port, _set_service_port)


  _pyangbind_elements = collections.OrderedDict([('real_server_ip', real_server_ip), ('service_port', service_port), ])


