
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class eem_cpu_threshold(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/eem-script/eem-cpu-threshold. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__rising_threshold','__rising_threshold_interval','__falling_threshold','__falling_threshold_interval','__variable1','__variable2','__variable3',)

  _yang_name = 'eem-cpu-threshold'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__variable1 = YANGDynClass(base=unicode, default=unicode("$_syslog_msg"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__variable3 = YANGDynClass(base=unicode, default=unicode("$id"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__variable2 = YANGDynClass(base=unicode, default=unicode("$_regexp_result"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__rising_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="rising-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__falling_threshold_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="falling-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__falling_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="falling-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__rising_threshold_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="rising-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'eem-script', u'eem-cpu-threshold']

  def _get_rising_threshold(self):
    """
    Getter method for rising_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/rising_threshold (uint16)

    YANG Description: 1..100
    """
    return self.__rising_threshold
      
  def _set_rising_threshold(self, v, load=False):
    """
    Setter method for rising_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/rising_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rising_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rising_threshold() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="rising-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rising_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="rising-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__rising_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rising_threshold(self):
    self.__rising_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="rising-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_rising_threshold_interval(self):
    """
    Getter method for rising_threshold_interval, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/rising_threshold_interval (uint32)

    YANG Description: 5..86400
    """
    return self.__rising_threshold_interval
      
  def _set_rising_threshold_interval(self, v, load=False):
    """
    Setter method for rising_threshold_interval, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/rising_threshold_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rising_threshold_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rising_threshold_interval() directly.

    YANG Description: 5..86400
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="rising-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rising_threshold_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="rising-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__rising_threshold_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rising_threshold_interval(self):
    self.__rising_threshold_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="rising-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_falling_threshold(self):
    """
    Getter method for falling_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/falling_threshold (uint16)

    YANG Description: 1..100
    """
    return self.__falling_threshold
      
  def _set_falling_threshold(self, v, load=False):
    """
    Setter method for falling_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/falling_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_falling_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_falling_threshold() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="falling-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """falling_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="falling-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__falling_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_falling_threshold(self):
    self.__falling_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="falling-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_falling_threshold_interval(self):
    """
    Getter method for falling_threshold_interval, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/falling_threshold_interval (uint32)

    YANG Description: 5..86400
    """
    return self.__falling_threshold_interval
      
  def _set_falling_threshold_interval(self, v, load=False):
    """
    Setter method for falling_threshold_interval, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/falling_threshold_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_falling_threshold_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_falling_threshold_interval() directly.

    YANG Description: 5..86400
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="falling-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """falling_threshold_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="falling-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__falling_threshold_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_falling_threshold_interval(self):
    self.__falling_threshold_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5..86400']}), is_leaf=True, yang_name="falling-threshold-interval", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_variable1(self):
    """
    Getter method for variable1, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable1 (string)

    YANG Description: string
    """
    return self.__variable1
      
  def _set_variable1(self, v, load=False):
    """
    Setter method for variable1, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$_syslog_msg"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$_syslog_msg"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable1(self):
    self.__variable1 = YANGDynClass(base=unicode, default=unicode("$_syslog_msg"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_variable2(self):
    """
    Getter method for variable2, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable2 (string)

    YANG Description: string
    """
    return self.__variable2
      
  def _set_variable2(self, v, load=False):
    """
    Setter method for variable2, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$_regexp_result"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$_regexp_result"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable2(self):
    self.__variable2 = YANGDynClass(base=unicode, default=unicode("$_regexp_result"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_variable3(self):
    """
    Getter method for variable3, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable3 (string)

    YANG Description: string
    """
    return self.__variable3
      
  def _set_variable3(self, v, load=False):
    """
    Setter method for variable3, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold/variable3 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable3() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$id"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable3 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$id"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable3(self):
    self.__variable3 = YANGDynClass(base=unicode, default=unicode("$id"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

  rising_threshold = __builtin__.property(_get_rising_threshold, _set_rising_threshold)
  rising_threshold_interval = __builtin__.property(_get_rising_threshold_interval, _set_rising_threshold_interval)
  falling_threshold = __builtin__.property(_get_falling_threshold, _set_falling_threshold)
  falling_threshold_interval = __builtin__.property(_get_falling_threshold_interval, _set_falling_threshold_interval)
  variable1 = __builtin__.property(_get_variable1, _set_variable1)
  variable2 = __builtin__.property(_get_variable2, _set_variable2)
  variable3 = __builtin__.property(_get_variable3, _set_variable3)


  _pyangbind_elements = collections.OrderedDict([('rising_threshold', rising_threshold), ('rising_threshold_interval', rising_threshold_interval), ('falling_threshold', falling_threshold), ('falling_threshold_interval', falling_threshold_interval), ('variable1', variable1), ('variable2', variable2), ('variable3', variable3), ])


