
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import eem_if_errors
import eem_bgp_adj
import eem_eigrp_adj
import eem_ospf_adj
import eem_cpu_threshold
import eem_mem_threshold
class eem_script(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/eem-script. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__eem_if_errors','__eem_bgp_adj','__eem_eigrp_adj','__eem_ospf_adj','__eem_cpu_threshold','__eem_mem_threshold',)

  _yang_name = 'eem-script'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__eem_if_errors = YANGDynClass(base=eem_if_errors.eem_if_errors, is_container='container', yang_name="eem-if-errors", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__eem_mem_threshold = YANGDynClass(base=eem_mem_threshold.eem_mem_threshold, is_container='container', yang_name="eem-mem-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__eem_bgp_adj = YANGDynClass(base=eem_bgp_adj.eem_bgp_adj, is_container='container', yang_name="eem-bgp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__eem_eigrp_adj = YANGDynClass(base=eem_eigrp_adj.eem_eigrp_adj, is_container='container', yang_name="eem-eigrp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__eem_ospf_adj = YANGDynClass(base=eem_ospf_adj.eem_ospf_adj, is_container='container', yang_name="eem-ospf-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__eem_cpu_threshold = YANGDynClass(base=eem_cpu_threshold.eem_cpu_threshold, is_container='container', yang_name="eem-cpu-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'eem-script']

  def _get_eem_if_errors(self):
    """
    Getter method for eem_if_errors, mapped from YANG variable /devices/device/eem_script/eem_if_errors (container)
    """
    return self.__eem_if_errors
      
  def _set_eem_if_errors(self, v, load=False):
    """
    Setter method for eem_if_errors, mapped from YANG variable /devices/device/eem_script/eem_if_errors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_if_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_if_errors() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_if_errors.eem_if_errors, is_container='container', yang_name="eem-if-errors", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_if_errors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_if_errors.eem_if_errors, is_container='container', yang_name="eem-if-errors", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_if_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_if_errors(self):
    self.__eem_if_errors = YANGDynClass(base=eem_if_errors.eem_if_errors, is_container='container', yang_name="eem-if-errors", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_eem_bgp_adj(self):
    """
    Getter method for eem_bgp_adj, mapped from YANG variable /devices/device/eem_script/eem_bgp_adj (container)
    """
    return self.__eem_bgp_adj
      
  def _set_eem_bgp_adj(self, v, load=False):
    """
    Setter method for eem_bgp_adj, mapped from YANG variable /devices/device/eem_script/eem_bgp_adj (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_bgp_adj is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_bgp_adj() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_bgp_adj.eem_bgp_adj, is_container='container', yang_name="eem-bgp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_bgp_adj must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_bgp_adj.eem_bgp_adj, is_container='container', yang_name="eem-bgp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_bgp_adj = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_bgp_adj(self):
    self.__eem_bgp_adj = YANGDynClass(base=eem_bgp_adj.eem_bgp_adj, is_container='container', yang_name="eem-bgp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_eem_eigrp_adj(self):
    """
    Getter method for eem_eigrp_adj, mapped from YANG variable /devices/device/eem_script/eem_eigrp_adj (container)
    """
    return self.__eem_eigrp_adj
      
  def _set_eem_eigrp_adj(self, v, load=False):
    """
    Setter method for eem_eigrp_adj, mapped from YANG variable /devices/device/eem_script/eem_eigrp_adj (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_eigrp_adj is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_eigrp_adj() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_eigrp_adj.eem_eigrp_adj, is_container='container', yang_name="eem-eigrp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_eigrp_adj must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_eigrp_adj.eem_eigrp_adj, is_container='container', yang_name="eem-eigrp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_eigrp_adj = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_eigrp_adj(self):
    self.__eem_eigrp_adj = YANGDynClass(base=eem_eigrp_adj.eem_eigrp_adj, is_container='container', yang_name="eem-eigrp-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_eem_ospf_adj(self):
    """
    Getter method for eem_ospf_adj, mapped from YANG variable /devices/device/eem_script/eem_ospf_adj (container)
    """
    return self.__eem_ospf_adj
      
  def _set_eem_ospf_adj(self, v, load=False):
    """
    Setter method for eem_ospf_adj, mapped from YANG variable /devices/device/eem_script/eem_ospf_adj (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_ospf_adj is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_ospf_adj() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_ospf_adj.eem_ospf_adj, is_container='container', yang_name="eem-ospf-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_ospf_adj must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_ospf_adj.eem_ospf_adj, is_container='container', yang_name="eem-ospf-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_ospf_adj = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_ospf_adj(self):
    self.__eem_ospf_adj = YANGDynClass(base=eem_ospf_adj.eem_ospf_adj, is_container='container', yang_name="eem-ospf-adj", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_eem_cpu_threshold(self):
    """
    Getter method for eem_cpu_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold (container)
    """
    return self.__eem_cpu_threshold
      
  def _set_eem_cpu_threshold(self, v, load=False):
    """
    Setter method for eem_cpu_threshold, mapped from YANG variable /devices/device/eem_script/eem_cpu_threshold (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_cpu_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_cpu_threshold() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_cpu_threshold.eem_cpu_threshold, is_container='container', yang_name="eem-cpu-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_cpu_threshold must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_cpu_threshold.eem_cpu_threshold, is_container='container', yang_name="eem-cpu-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_cpu_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_cpu_threshold(self):
    self.__eem_cpu_threshold = YANGDynClass(base=eem_cpu_threshold.eem_cpu_threshold, is_container='container', yang_name="eem-cpu-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_eem_mem_threshold(self):
    """
    Getter method for eem_mem_threshold, mapped from YANG variable /devices/device/eem_script/eem_mem_threshold (container)
    """
    return self.__eem_mem_threshold
      
  def _set_eem_mem_threshold(self, v, load=False):
    """
    Setter method for eem_mem_threshold, mapped from YANG variable /devices/device/eem_script/eem_mem_threshold (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eem_mem_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eem_mem_threshold() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=eem_mem_threshold.eem_mem_threshold, is_container='container', yang_name="eem-mem-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eem_mem_threshold must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=eem_mem_threshold.eem_mem_threshold, is_container='container', yang_name="eem-mem-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__eem_mem_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eem_mem_threshold(self):
    self.__eem_mem_threshold = YANGDynClass(base=eem_mem_threshold.eem_mem_threshold, is_container='container', yang_name="eem-mem-threshold", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

  eem_if_errors = __builtin__.property(_get_eem_if_errors, _set_eem_if_errors)
  eem_bgp_adj = __builtin__.property(_get_eem_bgp_adj, _set_eem_bgp_adj)
  eem_eigrp_adj = __builtin__.property(_get_eem_eigrp_adj, _set_eem_eigrp_adj)
  eem_ospf_adj = __builtin__.property(_get_eem_ospf_adj, _set_eem_ospf_adj)
  eem_cpu_threshold = __builtin__.property(_get_eem_cpu_threshold, _set_eem_cpu_threshold)
  eem_mem_threshold = __builtin__.property(_get_eem_mem_threshold, _set_eem_mem_threshold)


  _pyangbind_elements = collections.OrderedDict([('eem_if_errors', eem_if_errors), ('eem_bgp_adj', eem_bgp_adj), ('eem_eigrp_adj', eem_eigrp_adj), ('eem_ospf_adj', eem_ospf_adj), ('eem_cpu_threshold', eem_cpu_threshold), ('eem_mem_threshold', eem_mem_threshold), ])


