
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/eem-script/eem-if-errors/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__if_tag','__interface_name','__correlate','__variable1','__variable2','__variable3',)

  _yang_name = 'interface'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__correlate = YANGDynClass(base=unicode, default=unicode("event if_1"), is_leaf=True, yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__variable1 = YANGDynClass(base=unicode, default=unicode("$_interface_name"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__variable3 = YANGDynClass(base=unicode, default=unicode("$_interface_value"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__variable2 = YANGDynClass(base=unicode, default=unicode("$_interface_delta_value"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__if_tag = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'eem-script', u'eem-if-errors', u'interface']

  def _get_if_tag(self):
    """
    Getter method for if_tag, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/if_tag (string)

    YANG Description: Interface Tag
    """
    return self.__if_tag
      
  def _set_if_tag(self, v, load=False):
    """
    Setter method for if_tag, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/if_tag (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_tag() directly.

    YANG Description: Interface Tag
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="if-tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_tag must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="if-tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__if_tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_tag(self):
    self.__if_tag = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/interface_name (leafref)

    YANG Description: interface-name
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/interface_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: interface-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_correlate(self):
    """
    Getter method for correlate, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/correlate (string)

    YANG Description: string
    """
    return self.__correlate
      
  def _set_correlate(self, v, load=False):
    """
    Setter method for correlate, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/correlate (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_correlate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_correlate() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("event if_1"), is_leaf=True, yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """correlate must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("event if_1"), is_leaf=True, yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__correlate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_correlate(self):
    self.__correlate = YANGDynClass(base=unicode, default=unicode("event if_1"), is_leaf=True, yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_variable1(self):
    """
    Getter method for variable1, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable1 (string)

    YANG Description: string
    """
    return self.__variable1
      
  def _set_variable1(self, v, load=False):
    """
    Setter method for variable1, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$_interface_name"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$_interface_name"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable1(self):
    self.__variable1 = YANGDynClass(base=unicode, default=unicode("$_interface_name"), is_leaf=True, yang_name="variable1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_variable2(self):
    """
    Getter method for variable2, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable2 (string)

    YANG Description: string
    """
    return self.__variable2
      
  def _set_variable2(self, v, load=False):
    """
    Setter method for variable2, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$_interface_delta_value"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$_interface_delta_value"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable2(self):
    self.__variable2 = YANGDynClass(base=unicode, default=unicode("$_interface_delta_value"), is_leaf=True, yang_name="variable2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_variable3(self):
    """
    Getter method for variable3, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable3 (string)

    YANG Description: string
    """
    return self.__variable3
      
  def _set_variable3(self, v, load=False):
    """
    Setter method for variable3, mapped from YANG variable /devices/device/eem_script/eem_if_errors/interface/variable3 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_variable3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_variable3() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("$_interface_value"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """variable3 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("$_interface_value"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__variable3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_variable3(self):
    self.__variable3 = YANGDynClass(base=unicode, default=unicode("$_interface_value"), is_leaf=True, yang_name="variable3", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

  if_tag = __builtin__.property(_get_if_tag, _set_if_tag)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  correlate = __builtin__.property(_get_correlate, _set_correlate)
  variable1 = __builtin__.property(_get_variable1, _set_variable1)
  variable2 = __builtin__.property(_get_variable2, _set_variable2)
  variable3 = __builtin__.property(_get_variable3, _set_variable3)


  _pyangbind_elements = collections.OrderedDict([('if_tag', if_tag), ('interface_name', interface_name), ('correlate', correlate), ('variable1', variable1), ('variable2', variable2), ('variable3', variable3), ])


