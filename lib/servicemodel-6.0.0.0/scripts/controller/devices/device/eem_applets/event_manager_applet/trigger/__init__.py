
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import correlate
class trigger(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/eem-applets/event-manager-applet/trigger. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__delay_time','__occurrences_no','__period','__period_start','__correlate',)

  _yang_name = 'trigger'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__period_start = YANGDynClass(base=unicode, is_leaf=True, yang_name="period-start", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__delay_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="delay-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__occurrences_no = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="occurrences-no", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__period = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="period", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__correlate = YANGDynClass(base=correlate.correlate, is_container='container', yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'eem-applets', u'event-manager-applet', u'trigger']

  def _get_delay_time(self):
    """
    Getter method for delay_time, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/delay_time (uint32)

    YANG Description: Time to delay raising event after all conditions met
    """
    return self.__delay_time
      
  def _set_delay_time(self, v, load=False):
    """
    Setter method for delay_time, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/delay_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_time() directly.

    YANG Description: Time to delay raising event after all conditions met
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="delay-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="delay-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__delay_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_time(self):
    self.__delay_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="delay-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_occurrences_no(self):
    """
    Getter method for occurrences_no, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/occurrences_no (uint32)

    YANG Description: The number of occurrences before raising the event
    """
    return self.__occurrences_no
      
  def _set_occurrences_no(self, v, load=False):
    """
    Setter method for occurrences_no, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/occurrences_no (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_occurrences_no is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_occurrences_no() directly.

    YANG Description: The number of occurrences before raising the event
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="occurrences-no", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """occurrences_no must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="occurrences-no", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__occurrences_no = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_occurrences_no(self):
    self.__occurrences_no = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="occurrences-no", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_period(self):
    """
    Getter method for period, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/period (uint32)

    YANG Description: Number of occurrences must occur within this time period
    """
    return self.__period
      
  def _set_period(self, v, load=False):
    """
    Setter method for period, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/period (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_period() directly.

    YANG Description: Number of occurrences must occur within this time period
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="period", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """period must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="period", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_period(self):
    self.__period = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="period", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_period_start(self):
    """
    Getter method for period_start, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/period_start (string)

    YANG Description: Cron entry string
    """
    return self.__period_start
      
  def _set_period_start(self, v, load=False):
    """
    Setter method for period_start, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/period_start (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_period_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_period_start() directly.

    YANG Description: Cron entry string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="period-start", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """period_start must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="period-start", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__period_start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_period_start(self):
    self.__period_start = YANGDynClass(base=unicode, is_leaf=True, yang_name="period-start", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_correlate(self):
    """
    Getter method for correlate, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/correlate (container)
    """
    return self.__correlate
      
  def _set_correlate(self, v, load=False):
    """
    Setter method for correlate, mapped from YANG variable /devices/device/eem_applets/event_manager_applet/trigger/correlate (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_correlate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_correlate() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=correlate.correlate, is_container='container', yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """correlate must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=correlate.correlate, is_container='container', yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__correlate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_correlate(self):
    self.__correlate = YANGDynClass(base=correlate.correlate, is_container='container', yang_name="correlate", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

  delay_time = __builtin__.property(_get_delay_time, _set_delay_time)
  occurrences_no = __builtin__.property(_get_occurrences_no, _set_occurrences_no)
  period = __builtin__.property(_get_period, _set_period)
  period_start = __builtin__.property(_get_period_start, _set_period_start)
  correlate = __builtin__.property(_get_correlate, _set_correlate)


  _pyangbind_elements = collections.OrderedDict([('delay_time', delay_time), ('occurrences_no', occurrences_no), ('period', period), ('period_start', period_start), ('correlate', correlate), ])


