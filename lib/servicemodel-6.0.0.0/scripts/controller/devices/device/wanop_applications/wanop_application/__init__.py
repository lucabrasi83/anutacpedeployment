
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class wanop_application(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/wanop-applications/wanop-application. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__group','__business_crit','__category','__description','__traffic_type','__transport_prot','__dscp','__vlan','__local_port','__remote_port','__local_net','__remote_net','__app_prot',)

  _yang_name = 'wanop-application'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__category = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Remote Access': {}, u'Networking': {}, u'Database': {}, u'Collaboration': {}, u'Streaming Media': {}, u'File Transfer': {}, u'Other': {}, u'Games': {}, u'Network Monitoring': {}, u'Web Services': {}, u'Messaging': {}, u'VPN and Tunneling': {}, u'Mail': {}, u'Social Networking': {}, u'Proxy': {}},), is_leaf=True, yang_name="category", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__remote_net = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__app_prot = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="app-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Business Video': {}, u'Recreational': {}, u'Business Standard': {}, u'Business Productivity': {}, u'Custom Applications': {}, u'Business Bulk': {}, u'Business VDI': {}, u'Standard Bulk': {}, u'Business Critical': {}, u'Business Voice': {}},), is_leaf=True, yang_name="group", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__local_port = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__business_crit = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Low Criticality': {}, u'High Criticality': {}, u'Highest Criticality': {}, u'Lowest Criticality': {}, u'Medium Criticality': {}},), is_leaf=True, yang_name="business-crit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..4094']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__dscp = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..63']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="dscp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__local_net = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__traffic_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Passthrough': {}, u'Optimized': {}, u'Any': {}},), is_leaf=True, yang_name="traffic-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__transport_prot = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ICMP': {}, u'EGP': {}, u'CRUDP': {}, u'MICP': {}, u'EIGRP': {}, u'ENCAP': {}, u'Sprite-RPC': {}, u'Shim6': {}, u'RVB': {}, u'PIM': {}, u'PRM': {}, u'SPS': {}, u'XNS-IDP': {}, u'IDPR': {}, u'ARIS': {}, u'PVP': {}, u'UTI': {}, u'A/N': {}, u'MPLS-in-IP': {}, u'MUX': {}, u'NVP-II': {}, u'IPX-in-IP': {}, u'BNA': {}, u'DCCP': {}, u'IFNP': {}, u'TP++': {}, u'IPsec ESP': {}, u'RSVP-E2E-IGNORE': {}, u'SECURE-VMTP': {}, u'FC': {}, u'SNP': {}, u'CFTP': {}, u'OSPFIGP': {}, u'QNX': {}, u'CPHB': {}, u'IPv6-Frag': {}, u'DDX': {}, u'CRTP': {}, u'IGMP': {}, u'Mobility Header': {}, u'TTP': {}, u'HMP': {}, u'NARP': {}, u'TCP': {}, u'IPv6-ICMP': {}, u'TCF': {}, u'IDRP': {}, u'SDRP': {}, u'PTP': {}, u'SWIPE': {}, u'TRUNK-2': {}, u'BBN-RCC-MON': {}, u'DDP': {}, u'DSR': {}, u'LEAF-1': {}, u'LEAF-2': {}, u'IPLT': {}, u'IPv6-NoNxt': {}, u'TLSP': {}, u'SAT-MON': {}, u'MERIT-INP': {}, u'LARP': {}, u'MOBILE': {}, u'ROHC': {}, u'WB-EXPAK': {}, u'GRE': {}, u'IPv4': {}, u'CBT': {}, u'IPv6': {}, u'STP': {}, u'SCTP': {}, u'RSVP': {}, u'VMTP': {}, u'WESP': {}, u'KRYPTOLAN': {}, u'SMP': {}, u'CPNX': {}, u'IPComp': {}, u'IGP': {}, u'IDPR-CMTP': {}, u'IPsec AH': {}, u'NSFNET-IGP': {}, u'GGP': {}, u'AX.25': {}, u'PIPE': {}, u'DGP': {}, u'ETHERIP': {}, u'Compaq-Peer': {}, u'GMTP': {}, u'SSC-SP': {}, u'RDP': {}, u'XTP': {}, u'SSCOPMCE': {}, u'ISO-TP4': {}, u'SRP': {}, u'XNET': {}, u'manet': {}, u'PNNI': {}, u'WB-MON': {}, u'IPIP': {}, u'ST': {}, u'SM': {}, u'I-NLSP': {}, u'IRTP': {}, u'PUP': {}, u'Any': {}, u'ISO-IP': {}, u'ARGUS': {}, u'VINES': {}, u'WSN': {}, u'VISA': {}, u'BR-SAT-MON': {}, u'3PC': {}, u'HIP': {}, u'ISIS over IPv4': {}, u'DCN-MEAS': {}, u'MFE-NSP': {}, u'UDPLite': {}, u'PGM': {}, u'VRRP': {}, u'CHAOS': {}, u'TRUNK-1': {}, u'NET-BLT': {}, u'FIRE': {}, u'SKIP': {}, u'MTP': {}, u'EMCON': {}, u'HOPOPT': {}, u'IPPC': {}, u'IL': {}, u'L2TP': {}, u'IATP': {}, u'IPv6-Route': {}, u'UDP': {}, u'SAT-EXPAK': {}, u'SCPS': {}, u'IPCV': {}, u'IPv6-Opts': {}, u'SUN-ND': {}},),], is_leaf=True, yang_name="transport-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__remote_port = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'wanop-applications', u'wanop-application']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/wanop_applications/wanop_application/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/wanop_applications/wanop_application/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_group(self):
    """
    Getter method for group, mapped from YANG variable /devices/device/wanop_applications/wanop_application/group (enumeration)

    YANG Description: Business Bulk
Business Critical
Business Productivity
Business Standard
Business VDI
Business Video
Business Voice
Recreational
Standard Bulk
Custom Applications

    """
    return self.__group
      
  def _set_group(self, v, load=False):
    """
    Setter method for group, mapped from YANG variable /devices/device/wanop_applications/wanop_application/group (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group() directly.

    YANG Description: Business Bulk
Business Critical
Business Productivity
Business Standard
Business VDI
Business Video
Business Voice
Recreational
Standard Bulk
Custom Applications

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Business Video': {}, u'Recreational': {}, u'Business Standard': {}, u'Business Productivity': {}, u'Custom Applications': {}, u'Business Bulk': {}, u'Business VDI': {}, u'Standard Bulk': {}, u'Business Critical': {}, u'Business Voice': {}},), is_leaf=True, yang_name="group", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Business Video': {}, u'Recreational': {}, u'Business Standard': {}, u'Business Productivity': {}, u'Custom Applications': {}, u'Business Bulk': {}, u'Business VDI': {}, u'Standard Bulk': {}, u'Business Critical': {}, u'Business Voice': {}},), is_leaf=True, yang_name="group", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group(self):
    self.__group = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Business Video': {}, u'Recreational': {}, u'Business Standard': {}, u'Business Productivity': {}, u'Custom Applications': {}, u'Business Bulk': {}, u'Business VDI': {}, u'Standard Bulk': {}, u'Business Critical': {}, u'Business Voice': {}},), is_leaf=True, yang_name="group", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_business_crit(self):
    """
    Getter method for business_crit, mapped from YANG variable /devices/device/wanop_applications/wanop_application/business_crit (enumeration)

    YANG Description: Lowest Criticality
Low Criticality
Medium Criticality
High Criticality
Highest Criticality

    """
    return self.__business_crit
      
  def _set_business_crit(self, v, load=False):
    """
    Setter method for business_crit, mapped from YANG variable /devices/device/wanop_applications/wanop_application/business_crit (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_business_crit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_business_crit() directly.

    YANG Description: Lowest Criticality
Low Criticality
Medium Criticality
High Criticality
Highest Criticality

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Low Criticality': {}, u'High Criticality': {}, u'Highest Criticality': {}, u'Lowest Criticality': {}, u'Medium Criticality': {}},), is_leaf=True, yang_name="business-crit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """business_crit must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Low Criticality': {}, u'High Criticality': {}, u'Highest Criticality': {}, u'Lowest Criticality': {}, u'Medium Criticality': {}},), is_leaf=True, yang_name="business-crit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__business_crit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_business_crit(self):
    self.__business_crit = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Low Criticality': {}, u'High Criticality': {}, u'Highest Criticality': {}, u'Lowest Criticality': {}, u'Medium Criticality': {}},), is_leaf=True, yang_name="business-crit", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_category(self):
    """
    Getter method for category, mapped from YANG variable /devices/device/wanop_applications/wanop_application/category (enumeration)

    YANG Description: Collaboration
Database
File Transfer
Games
Mail
Messaging
Network Monitoring
Networking
Proxy
Remote Access
Social Networking
Streaming Media
VPN and Tunneling
Web Services
Other

    """
    return self.__category
      
  def _set_category(self, v, load=False):
    """
    Setter method for category, mapped from YANG variable /devices/device/wanop_applications/wanop_application/category (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_category is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_category() directly.

    YANG Description: Collaboration
Database
File Transfer
Games
Mail
Messaging
Network Monitoring
Networking
Proxy
Remote Access
Social Networking
Streaming Media
VPN and Tunneling
Web Services
Other

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Remote Access': {}, u'Networking': {}, u'Database': {}, u'Collaboration': {}, u'Streaming Media': {}, u'File Transfer': {}, u'Other': {}, u'Games': {}, u'Network Monitoring': {}, u'Web Services': {}, u'Messaging': {}, u'VPN and Tunneling': {}, u'Mail': {}, u'Social Networking': {}, u'Proxy': {}},), is_leaf=True, yang_name="category", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """category must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Remote Access': {}, u'Networking': {}, u'Database': {}, u'Collaboration': {}, u'Streaming Media': {}, u'File Transfer': {}, u'Other': {}, u'Games': {}, u'Network Monitoring': {}, u'Web Services': {}, u'Messaging': {}, u'VPN and Tunneling': {}, u'Mail': {}, u'Social Networking': {}, u'Proxy': {}},), is_leaf=True, yang_name="category", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__category = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_category(self):
    self.__category = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Remote Access': {}, u'Networking': {}, u'Database': {}, u'Collaboration': {}, u'Streaming Media': {}, u'File Transfer': {}, u'Other': {}, u'Games': {}, u'Network Monitoring': {}, u'Web Services': {}, u'Messaging': {}, u'VPN and Tunneling': {}, u'Mail': {}, u'Social Networking': {}, u'Proxy': {}},), is_leaf=True, yang_name="category", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/wanop_applications/wanop_application/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/wanop_applications/wanop_application/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_traffic_type(self):
    """
    Getter method for traffic_type, mapped from YANG variable /devices/device/wanop_applications/wanop_application/traffic_type (enumeration)

    YANG Description: Any
Optimized
Passthrough

    """
    return self.__traffic_type
      
  def _set_traffic_type(self, v, load=False):
    """
    Setter method for traffic_type, mapped from YANG variable /devices/device/wanop_applications/wanop_application/traffic_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_type() directly.

    YANG Description: Any
Optimized
Passthrough

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Passthrough': {}, u'Optimized': {}, u'Any': {}},), is_leaf=True, yang_name="traffic-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_type must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Passthrough': {}, u'Optimized': {}, u'Any': {}},), is_leaf=True, yang_name="traffic-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__traffic_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_type(self):
    self.__traffic_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Passthrough': {}, u'Optimized': {}, u'Any': {}},), is_leaf=True, yang_name="traffic-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_transport_prot(self):
    """
    Getter method for transport_prot, mapped from YANG variable /devices/device/wanop_applications/wanop_application/transport_prot (union)

    YANG Description: Union Input types:
string
enumeration

    """
    return self.__transport_prot
      
  def _set_transport_prot(self, v, load=False):
    """
    Setter method for transport_prot, mapped from YANG variable /devices/device/wanop_applications/wanop_application/transport_prot (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_prot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_prot() directly.

    YANG Description: Union Input types:
string
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ICMP': {}, u'EGP': {}, u'CRUDP': {}, u'MICP': {}, u'EIGRP': {}, u'ENCAP': {}, u'Sprite-RPC': {}, u'Shim6': {}, u'RVB': {}, u'PIM': {}, u'PRM': {}, u'SPS': {}, u'XNS-IDP': {}, u'IDPR': {}, u'ARIS': {}, u'PVP': {}, u'UTI': {}, u'A/N': {}, u'MPLS-in-IP': {}, u'MUX': {}, u'NVP-II': {}, u'IPX-in-IP': {}, u'BNA': {}, u'DCCP': {}, u'IFNP': {}, u'TP++': {}, u'IPsec ESP': {}, u'RSVP-E2E-IGNORE': {}, u'SECURE-VMTP': {}, u'FC': {}, u'SNP': {}, u'CFTP': {}, u'OSPFIGP': {}, u'QNX': {}, u'CPHB': {}, u'IPv6-Frag': {}, u'DDX': {}, u'CRTP': {}, u'IGMP': {}, u'Mobility Header': {}, u'TTP': {}, u'HMP': {}, u'NARP': {}, u'TCP': {}, u'IPv6-ICMP': {}, u'TCF': {}, u'IDRP': {}, u'SDRP': {}, u'PTP': {}, u'SWIPE': {}, u'TRUNK-2': {}, u'BBN-RCC-MON': {}, u'DDP': {}, u'DSR': {}, u'LEAF-1': {}, u'LEAF-2': {}, u'IPLT': {}, u'IPv6-NoNxt': {}, u'TLSP': {}, u'SAT-MON': {}, u'MERIT-INP': {}, u'LARP': {}, u'MOBILE': {}, u'ROHC': {}, u'WB-EXPAK': {}, u'GRE': {}, u'IPv4': {}, u'CBT': {}, u'IPv6': {}, u'STP': {}, u'SCTP': {}, u'RSVP': {}, u'VMTP': {}, u'WESP': {}, u'KRYPTOLAN': {}, u'SMP': {}, u'CPNX': {}, u'IPComp': {}, u'IGP': {}, u'IDPR-CMTP': {}, u'IPsec AH': {}, u'NSFNET-IGP': {}, u'GGP': {}, u'AX.25': {}, u'PIPE': {}, u'DGP': {}, u'ETHERIP': {}, u'Compaq-Peer': {}, u'GMTP': {}, u'SSC-SP': {}, u'RDP': {}, u'XTP': {}, u'SSCOPMCE': {}, u'ISO-TP4': {}, u'SRP': {}, u'XNET': {}, u'manet': {}, u'PNNI': {}, u'WB-MON': {}, u'IPIP': {}, u'ST': {}, u'SM': {}, u'I-NLSP': {}, u'IRTP': {}, u'PUP': {}, u'Any': {}, u'ISO-IP': {}, u'ARGUS': {}, u'VINES': {}, u'WSN': {}, u'VISA': {}, u'BR-SAT-MON': {}, u'3PC': {}, u'HIP': {}, u'ISIS over IPv4': {}, u'DCN-MEAS': {}, u'MFE-NSP': {}, u'UDPLite': {}, u'PGM': {}, u'VRRP': {}, u'CHAOS': {}, u'TRUNK-1': {}, u'NET-BLT': {}, u'FIRE': {}, u'SKIP': {}, u'MTP': {}, u'EMCON': {}, u'HOPOPT': {}, u'IPPC': {}, u'IL': {}, u'L2TP': {}, u'IATP': {}, u'IPv6-Route': {}, u'UDP': {}, u'SAT-EXPAK': {}, u'SCPS': {}, u'IPCV': {}, u'IPv6-Opts': {}, u'SUN-ND': {}},),], is_leaf=True, yang_name="transport-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_prot must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ICMP': {}, u'EGP': {}, u'CRUDP': {}, u'MICP': {}, u'EIGRP': {}, u'ENCAP': {}, u'Sprite-RPC': {}, u'Shim6': {}, u'RVB': {}, u'PIM': {}, u'PRM': {}, u'SPS': {}, u'XNS-IDP': {}, u'IDPR': {}, u'ARIS': {}, u'PVP': {}, u'UTI': {}, u'A/N': {}, u'MPLS-in-IP': {}, u'MUX': {}, u'NVP-II': {}, u'IPX-in-IP': {}, u'BNA': {}, u'DCCP': {}, u'IFNP': {}, u'TP++': {}, u'IPsec ESP': {}, u'RSVP-E2E-IGNORE': {}, u'SECURE-VMTP': {}, u'FC': {}, u'SNP': {}, u'CFTP': {}, u'OSPFIGP': {}, u'QNX': {}, u'CPHB': {}, u'IPv6-Frag': {}, u'DDX': {}, u'CRTP': {}, u'IGMP': {}, u'Mobility Header': {}, u'TTP': {}, u'HMP': {}, u'NARP': {}, u'TCP': {}, u'IPv6-ICMP': {}, u'TCF': {}, u'IDRP': {}, u'SDRP': {}, u'PTP': {}, u'SWIPE': {}, u'TRUNK-2': {}, u'BBN-RCC-MON': {}, u'DDP': {}, u'DSR': {}, u'LEAF-1': {}, u'LEAF-2': {}, u'IPLT': {}, u'IPv6-NoNxt': {}, u'TLSP': {}, u'SAT-MON': {}, u'MERIT-INP': {}, u'LARP': {}, u'MOBILE': {}, u'ROHC': {}, u'WB-EXPAK': {}, u'GRE': {}, u'IPv4': {}, u'CBT': {}, u'IPv6': {}, u'STP': {}, u'SCTP': {}, u'RSVP': {}, u'VMTP': {}, u'WESP': {}, u'KRYPTOLAN': {}, u'SMP': {}, u'CPNX': {}, u'IPComp': {}, u'IGP': {}, u'IDPR-CMTP': {}, u'IPsec AH': {}, u'NSFNET-IGP': {}, u'GGP': {}, u'AX.25': {}, u'PIPE': {}, u'DGP': {}, u'ETHERIP': {}, u'Compaq-Peer': {}, u'GMTP': {}, u'SSC-SP': {}, u'RDP': {}, u'XTP': {}, u'SSCOPMCE': {}, u'ISO-TP4': {}, u'SRP': {}, u'XNET': {}, u'manet': {}, u'PNNI': {}, u'WB-MON': {}, u'IPIP': {}, u'ST': {}, u'SM': {}, u'I-NLSP': {}, u'IRTP': {}, u'PUP': {}, u'Any': {}, u'ISO-IP': {}, u'ARGUS': {}, u'VINES': {}, u'WSN': {}, u'VISA': {}, u'BR-SAT-MON': {}, u'3PC': {}, u'HIP': {}, u'ISIS over IPv4': {}, u'DCN-MEAS': {}, u'MFE-NSP': {}, u'UDPLite': {}, u'PGM': {}, u'VRRP': {}, u'CHAOS': {}, u'TRUNK-1': {}, u'NET-BLT': {}, u'FIRE': {}, u'SKIP': {}, u'MTP': {}, u'EMCON': {}, u'HOPOPT': {}, u'IPPC': {}, u'IL': {}, u'L2TP': {}, u'IATP': {}, u'IPv6-Route': {}, u'UDP': {}, u'SAT-EXPAK': {}, u'SCPS': {}, u'IPCV': {}, u'IPv6-Opts': {}, u'SUN-ND': {}},),], is_leaf=True, yang_name="transport-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__transport_prot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_prot(self):
    self.__transport_prot = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ICMP': {}, u'EGP': {}, u'CRUDP': {}, u'MICP': {}, u'EIGRP': {}, u'ENCAP': {}, u'Sprite-RPC': {}, u'Shim6': {}, u'RVB': {}, u'PIM': {}, u'PRM': {}, u'SPS': {}, u'XNS-IDP': {}, u'IDPR': {}, u'ARIS': {}, u'PVP': {}, u'UTI': {}, u'A/N': {}, u'MPLS-in-IP': {}, u'MUX': {}, u'NVP-II': {}, u'IPX-in-IP': {}, u'BNA': {}, u'DCCP': {}, u'IFNP': {}, u'TP++': {}, u'IPsec ESP': {}, u'RSVP-E2E-IGNORE': {}, u'SECURE-VMTP': {}, u'FC': {}, u'SNP': {}, u'CFTP': {}, u'OSPFIGP': {}, u'QNX': {}, u'CPHB': {}, u'IPv6-Frag': {}, u'DDX': {}, u'CRTP': {}, u'IGMP': {}, u'Mobility Header': {}, u'TTP': {}, u'HMP': {}, u'NARP': {}, u'TCP': {}, u'IPv6-ICMP': {}, u'TCF': {}, u'IDRP': {}, u'SDRP': {}, u'PTP': {}, u'SWIPE': {}, u'TRUNK-2': {}, u'BBN-RCC-MON': {}, u'DDP': {}, u'DSR': {}, u'LEAF-1': {}, u'LEAF-2': {}, u'IPLT': {}, u'IPv6-NoNxt': {}, u'TLSP': {}, u'SAT-MON': {}, u'MERIT-INP': {}, u'LARP': {}, u'MOBILE': {}, u'ROHC': {}, u'WB-EXPAK': {}, u'GRE': {}, u'IPv4': {}, u'CBT': {}, u'IPv6': {}, u'STP': {}, u'SCTP': {}, u'RSVP': {}, u'VMTP': {}, u'WESP': {}, u'KRYPTOLAN': {}, u'SMP': {}, u'CPNX': {}, u'IPComp': {}, u'IGP': {}, u'IDPR-CMTP': {}, u'IPsec AH': {}, u'NSFNET-IGP': {}, u'GGP': {}, u'AX.25': {}, u'PIPE': {}, u'DGP': {}, u'ETHERIP': {}, u'Compaq-Peer': {}, u'GMTP': {}, u'SSC-SP': {}, u'RDP': {}, u'XTP': {}, u'SSCOPMCE': {}, u'ISO-TP4': {}, u'SRP': {}, u'XNET': {}, u'manet': {}, u'PNNI': {}, u'WB-MON': {}, u'IPIP': {}, u'ST': {}, u'SM': {}, u'I-NLSP': {}, u'IRTP': {}, u'PUP': {}, u'Any': {}, u'ISO-IP': {}, u'ARGUS': {}, u'VINES': {}, u'WSN': {}, u'VISA': {}, u'BR-SAT-MON': {}, u'3PC': {}, u'HIP': {}, u'ISIS over IPv4': {}, u'DCN-MEAS': {}, u'MFE-NSP': {}, u'UDPLite': {}, u'PGM': {}, u'VRRP': {}, u'CHAOS': {}, u'TRUNK-1': {}, u'NET-BLT': {}, u'FIRE': {}, u'SKIP': {}, u'MTP': {}, u'EMCON': {}, u'HOPOPT': {}, u'IPPC': {}, u'IL': {}, u'L2TP': {}, u'IATP': {}, u'IPv6-Route': {}, u'UDP': {}, u'SAT-EXPAK': {}, u'SCPS': {}, u'IPCV': {}, u'IPv6-Opts': {}, u'SUN-ND': {}},),], is_leaf=True, yang_name="transport-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_dscp(self):
    """
    Getter method for dscp, mapped from YANG variable /devices/device/wanop_applications/wanop_application/dscp (union)

    YANG Description: ranges from 0 to 63
    """
    return self.__dscp
      
  def _set_dscp(self, v, load=False):
    """
    Setter method for dscp, mapped from YANG variable /devices/device/wanop_applications/wanop_application/dscp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dscp() directly.

    YANG Description: ranges from 0 to 63
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..63']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="dscp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dscp must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..63']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="dscp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dscp(self):
    self.__dscp = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..63']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="dscp", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /devices/device/wanop_applications/wanop_application/vlan (union)

    YANG Description: Union Input types:
uint16
enumeration

    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /devices/device/wanop_applications/wanop_application/vlan (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: Union Input types:
uint16
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..4094']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..4094']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..4094']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_local_port(self):
    """
    Getter method for local_port, mapped from YANG variable /devices/device/wanop_applications/wanop_application/local_port (union)

    YANG Description: Local port or portlabel of traffic to match
    """
    return self.__local_port
      
  def _set_local_port(self, v, load=False):
    """
    Setter method for local_port, mapped from YANG variable /devices/device/wanop_applications/wanop_application/local_port (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_port() directly.

    YANG Description: Local port or portlabel of traffic to match
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,unicode,], is_leaf=True, yang_name="local-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_port must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__local_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_port(self):
    self.__local_port = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_remote_port(self):
    """
    Getter method for remote_port, mapped from YANG variable /devices/device/wanop_applications/wanop_application/remote_port (union)

    YANG Description: Remote port or portlabel of traffic to match
    """
    return self.__remote_port
      
  def _set_remote_port(self, v, load=False):
    """
    Setter method for remote_port, mapped from YANG variable /devices/device/wanop_applications/wanop_application/remote_port (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_port() directly.

    YANG Description: Remote port or portlabel of traffic to match
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,unicode,], is_leaf=True, yang_name="remote-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_port must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__remote_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_port(self):
    self.__remote_port = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-port", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_local_net(self):
    """
    Getter method for local_net, mapped from YANG variable /devices/device/wanop_applications/wanop_application/local_net (union)

    YANG Description:  Local subnet or hostlabel of traffic to match
    """
    return self.__local_net
      
  def _set_local_net(self, v, load=False):
    """
    Setter method for local_net, mapped from YANG variable /devices/device/wanop_applications/wanop_application/local_net (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_net is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_net() directly.

    YANG Description:  Local subnet or hostlabel of traffic to match
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,unicode,], is_leaf=True, yang_name="local-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_net must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__local_net = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_net(self):
    self.__local_net = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="local-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_remote_net(self):
    """
    Getter method for remote_net, mapped from YANG variable /devices/device/wanop_applications/wanop_application/remote_net (union)

    YANG Description:  Local subnet or hostlabel of traffic to match
    """
    return self.__remote_net
      
  def _set_remote_net(self, v, load=False):
    """
    Setter method for remote_net, mapped from YANG variable /devices/device/wanop_applications/wanop_application/remote_net (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_net is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_net() directly.

    YANG Description:  Local subnet or hostlabel of traffic to match
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,unicode,], is_leaf=True, yang_name="remote-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_net must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__remote_net = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_net(self):
    self.__remote_net = YANGDynClass(base=[unicode,unicode,], is_leaf=True, yang_name="remote-net", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)


  def _get_app_prot(self):
    """
    Getter method for app_prot, mapped from YANG variable /devices/device/wanop_applications/wanop_application/app_prot (union)

    YANG Description: Union Input types:
string
enumeration

    """
    return self.__app_prot
      
  def _set_app_prot(self, v, load=False):
    """
    Setter method for app_prot, mapped from YANG variable /devices/device/wanop_applications/wanop_application/app_prot (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_app_prot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_app_prot() directly.

    YANG Description: Union Input types:
string
enumeration

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="app-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """app_prot must be of a type compatible with union""",
          'defined-type': "wanoptimizer:union",
          'generated-type': """YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="app-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)""",
        })

    self.__app_prot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_app_prot(self):
    self.__app_prot = YANGDynClass(base=[unicode,RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Any': {}},),], is_leaf=True, yang_name="app-prot", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='union', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  group = __builtin__.property(_get_group, _set_group)
  business_crit = __builtin__.property(_get_business_crit, _set_business_crit)
  category = __builtin__.property(_get_category, _set_category)
  description = __builtin__.property(_get_description, _set_description)
  traffic_type = __builtin__.property(_get_traffic_type, _set_traffic_type)
  transport_prot = __builtin__.property(_get_transport_prot, _set_transport_prot)
  dscp = __builtin__.property(_get_dscp, _set_dscp)
  vlan = __builtin__.property(_get_vlan, _set_vlan)
  local_port = __builtin__.property(_get_local_port, _set_local_port)
  remote_port = __builtin__.property(_get_remote_port, _set_remote_port)
  local_net = __builtin__.property(_get_local_net, _set_local_net)
  remote_net = __builtin__.property(_get_remote_net, _set_remote_net)
  app_prot = __builtin__.property(_get_app_prot, _set_app_prot)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('group', group), ('business_crit', business_crit), ('category', category), ('description', description), ('traffic_type', traffic_type), ('transport_prot', transport_prot), ('dscp', dscp), ('vlan', vlan), ('local_port', local_port), ('remote_port', remote_port), ('local_net', local_net), ('remote_net', remote_net), ('app_prot', app_prot), ])


