
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ip_prefixlist_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/ip-prefixlist-list/ip-prefixlist/ip-prefixlist-entries/ip-prefixlist-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__rule_num','__prefix_name','__subnet','__compare','__num','__condition',)

  _yang_name = 'ip-prefixlist-entry'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__subnet = YANGDynClass(base=unicode, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__compare = YANGDynClass(base=unicode, is_leaf=True, yang_name="compare", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__num = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__rule_num = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rule-num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__prefix_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__condition = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='condition', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'ip-prefixlist-list', u'ip-prefixlist', u'ip-prefixlist-entries', u'ip-prefixlist-entry']

  def _get_rule_num(self):
    """
    Getter method for rule_num, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/rule_num (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rule_num
      
  def _set_rule_num(self, v, load=False):
    """
    Setter method for rule_num, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/rule_num (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rule_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rule_num() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rule-num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rule_num must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rule-num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__rule_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rule_num(self):
    self.__rule_num = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rule-num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_prefix_name(self):
    """
    Getter method for prefix_name, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/prefix_name (string)

    YANG Description: string
    """
    return self.__prefix_name
      
  def _set_prefix_name(self, v, load=False):
    """
    Setter method for prefix_name, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/prefix_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__prefix_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_name(self):
    self.__prefix_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_subnet(self):
    """
    Getter method for subnet, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/subnet (string)

    YANG Description: string
    """
    return self.__subnet
      
  def _set_subnet(self, v, load=False):
    """
    Setter method for subnet, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/subnet (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subnet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subnet() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subnet must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__subnet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subnet(self):
    self.__subnet = YANGDynClass(base=unicode, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_compare(self):
    """
    Getter method for compare, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/compare (string)

    YANG Description: string
    """
    return self.__compare
      
  def _set_compare(self, v, load=False):
    """
    Setter method for compare, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/compare (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compare is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compare() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="compare", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compare must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="compare", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__compare = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compare(self):
    self.__compare = YANGDynClass(base=unicode, is_leaf=True, yang_name="compare", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_num(self):
    """
    Getter method for num, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/num (uint32)

    YANG Description: 0..4294967295
    """
    return self.__num
      
  def _set_num(self, v, load=False):
    """
    Setter method for num, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/num (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num(self):
    self.__num = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_condition(self):
    """
    Getter method for condition, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/condition (condition)

    YANG Description: permit
deny

    """
    return self.__condition
      
  def _set_condition(self, v, load=False):
    """
    Setter method for condition, mapped from YANG variable /devices/device/ip_prefixlist_list/ip_prefixlist/ip_prefixlist_entries/ip_prefixlist_entry/condition (condition)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition() directly.

    YANG Description: permit
deny

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='condition', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition must be of a type compatible with condition""",
          'defined-type': "l3features:condition",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='condition', is_config=True)""",
        })

    self.__condition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition(self):
    self.__condition = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='condition', is_config=True)

  rule_num = __builtin__.property(_get_rule_num, _set_rule_num)
  prefix_name = __builtin__.property(_get_prefix_name, _set_prefix_name)
  subnet = __builtin__.property(_get_subnet, _set_subnet)
  compare = __builtin__.property(_get_compare, _set_compare)
  num = __builtin__.property(_get_num, _set_num)
  condition = __builtin__.property(_get_condition, _set_condition)


  _pyangbind_elements = collections.OrderedDict([('rule_num', rule_num), ('prefix_name', prefix_name), ('subnet', subnet), ('compare', compare), ('num', num), ('condition', condition), ])


