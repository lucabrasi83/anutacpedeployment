
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class match_condition(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/route-maps/route-map/route-map-entries/match-condition. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__condition_type','__value',)

  _yang_name = 'match-condition'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extcommunity': {}, u'source-protocol': {}, u'metric': {}, u'address': {}, u'community': {}, u'acl': {}, u'prefix-list': {}, u'tag': {}, u'as-path': {}, u'interface': {}, u'next-hop': {}, u'route-source': {}},), is_leaf=True, yang_name="condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'route-maps', u'route-map', u'route-map-entries', u'match-condition']

  def _get_condition_type(self):
    """
    Getter method for condition_type, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition/condition_type (enumeration)

    YANG Description: interface
tag
acl
prefix-list
route-source
source-protocol
community
metric
as-path
next-hop
address
extcommunity

    """
    return self.__condition_type
      
  def _set_condition_type(self, v, load=False):
    """
    Setter method for condition_type, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition/condition_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_condition_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_condition_type() directly.

    YANG Description: interface
tag
acl
prefix-list
route-source
source-protocol
community
metric
as-path
next-hop
address
extcommunity

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extcommunity': {}, u'source-protocol': {}, u'metric': {}, u'address': {}, u'community': {}, u'acl': {}, u'prefix-list': {}, u'tag': {}, u'as-path': {}, u'interface': {}, u'next-hop': {}, u'route-source': {}},), is_leaf=True, yang_name="condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """condition_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extcommunity': {}, u'source-protocol': {}, u'metric': {}, u'address': {}, u'community': {}, u'acl': {}, u'prefix-list': {}, u'tag': {}, u'as-path': {}, u'interface': {}, u'next-hop': {}, u'route-source': {}},), is_leaf=True, yang_name="condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__condition_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_condition_type(self):
    self.__condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'extcommunity': {}, u'source-protocol': {}, u'metric': {}, u'address': {}, u'community': {}, u'acl': {}, u'prefix-list': {}, u'tag': {}, u'as-path': {}, u'interface': {}, u'next-hop': {}, u'route-source': {}},), is_leaf=True, yang_name="condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition/value (string)

    YANG Description: string
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=unicode, is_leaf=True, yang_name="value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

  condition_type = __builtin__.property(_get_condition_type, _set_condition_type)
  value = __builtin__.property(_get_value, _set_value)


  _pyangbind_elements = collections.OrderedDict([('condition_type', condition_type), ('value', value), ])


