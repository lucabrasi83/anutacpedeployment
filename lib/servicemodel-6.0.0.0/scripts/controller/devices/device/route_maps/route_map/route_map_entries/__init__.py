
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import match_condition
import set_action
class route_map_entries(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/route-maps/route-map/route-map-entries. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__seq','__action','__prefix_list','__next_hop_value','__local_preference_value','__community_attribute','__as_path_prepend','__weight','__match_condition_type','__route_type_value','__description','__match_condition','__set_action',)

  _yang_name = 'route-map-entries'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__match_condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prefix-list': {}, u'route-type': {}},), is_leaf=True, yang_name="match-condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__seq = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__set_action = YANGDynClass(base=YANGListType("set_type value",set_action.set_action, yang_name="set-action", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='set-type value'), is_container='list', yang_name="set-action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__route_type_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-type-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__as_path_prepend = YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-prepend", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__next_hop_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="next-hop-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__match_condition = YANGDynClass(base=YANGListType("condition_type value",match_condition.match_condition, yang_name="match-condition", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='condition-type value'), is_container='list', yang_name="match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='action-type', is_config=True)
    self.__prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__community_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="community-attribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__local_preference_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-preference-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'route-maps', u'route-map', u'route-map-entries']

  def _get_seq(self):
    """
    Getter method for seq, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/seq (uint32)

    YANG Description: 0..4294967295
    """
    return self.__seq
      
  def _set_seq(self, v, load=False):
    """
    Setter method for seq, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/seq (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__seq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq(self):
    self.__seq = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seq", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/action (action-type)

    YANG Description: permit
deny

    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/action (action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.

    YANG Description: permit
deny

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with action-type""",
          'defined-type': "l3features:action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='action-type', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='action-type', is_config=True)


  def _get_prefix_list(self):
    """
    Getter method for prefix_list, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/prefix_list (leafref)

    YANG Description: prefix-list
    """
    return self.__prefix_list
      
  def _set_prefix_list(self, v, load=False):
    """
    Setter method for prefix_list, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/prefix_list (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_list() directly.

    YANG Description: prefix-list
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_list must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__prefix_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_list(self):
    self.__prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_next_hop_value(self):
    """
    Getter method for next_hop_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/next_hop_value (string)

    YANG Description: string
    """
    return self.__next_hop_value
      
  def _set_next_hop_value(self, v, load=False):
    """
    Setter method for next_hop_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/next_hop_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="next-hop-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="next-hop-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__next_hop_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_value(self):
    self.__next_hop_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="next-hop-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_local_preference_value(self):
    """
    Getter method for local_preference_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/local_preference_value (uint32)

    YANG Description: 0..4294967295
    """
    return self.__local_preference_value
      
  def _set_local_preference_value(self, v, load=False):
    """
    Setter method for local_preference_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/local_preference_value (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_preference_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_preference_value() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-preference-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_preference_value must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-preference-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__local_preference_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_preference_value(self):
    self.__local_preference_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-preference-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_community_attribute(self):
    """
    Getter method for community_attribute, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/community_attribute (string)

    YANG Description: string
    """
    return self.__community_attribute
      
  def _set_community_attribute(self, v, load=False):
    """
    Setter method for community_attribute, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/community_attribute (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community_attribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community_attribute() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community-attribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community_attribute must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community-attribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__community_attribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community_attribute(self):
    self.__community_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="community-attribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_as_path_prepend(self):
    """
    Getter method for as_path_prepend, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/as_path_prepend (string)

    YANG Description: string
    """
    return self.__as_path_prepend
      
  def _set_as_path_prepend(self, v, load=False):
    """
    Setter method for as_path_prepend, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/as_path_prepend (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_path_prepend is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_path_prepend() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="as-path-prepend", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_path_prepend must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-prepend", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__as_path_prepend = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_path_prepend(self):
    self.__as_path_prepend = YANGDynClass(base=unicode, is_leaf=True, yang_name="as-path-prepend", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/weight (uint32)

    YANG Description: 0..4294967295
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/weight (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="weight", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_match_condition_type(self):
    """
    Getter method for match_condition_type, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition_type (enumeration)

    YANG Description: prefix-list
route-type

    """
    return self.__match_condition_type
      
  def _set_match_condition_type(self, v, load=False):
    """
    Setter method for match_condition_type, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_condition_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_condition_type() directly.

    YANG Description: prefix-list
route-type

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prefix-list': {}, u'route-type': {}},), is_leaf=True, yang_name="match-condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_condition_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prefix-list': {}, u'route-type': {}},), is_leaf=True, yang_name="match-condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__match_condition_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_condition_type(self):
    self.__match_condition_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'prefix-list': {}, u'route-type': {}},), is_leaf=True, yang_name="match-condition-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_route_type_value(self):
    """
    Getter method for route_type_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/route_type_value (string)

    YANG Description: string
    """
    return self.__route_type_value
      
  def _set_route_type_value(self, v, load=False):
    """
    Setter method for route_type_value, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/route_type_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_type_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_type_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="route-type-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_type_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="route-type-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__route_type_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_type_value(self):
    self.__route_type_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-type-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_match_condition(self):
    """
    Getter method for match_condition, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition (list)
    """
    return self.__match_condition
      
  def _set_match_condition(self, v, load=False):
    """
    Setter method for match_condition, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/match_condition (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_condition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_condition() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("condition_type value",match_condition.match_condition, yang_name="match-condition", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='condition-type value'), is_container='list', yang_name="match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_condition must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("condition_type value",match_condition.match_condition, yang_name="match-condition", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='condition-type value'), is_container='list', yang_name="match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__match_condition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_condition(self):
    self.__match_condition = YANGDynClass(base=YANGListType("condition_type value",match_condition.match_condition, yang_name="match-condition", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='condition-type value'), is_container='list', yang_name="match-condition", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_set_action(self):
    """
    Getter method for set_action, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/set_action (list)
    """
    return self.__set_action
      
  def _set_set_action(self, v, load=False):
    """
    Setter method for set_action, mapped from YANG variable /devices/device/route_maps/route_map/route_map_entries/set_action (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_action() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("set_type value",set_action.set_action, yang_name="set-action", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='set-type value'), is_container='list', yang_name="set-action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_action must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("set_type value",set_action.set_action, yang_name="set-action", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='set-type value'), is_container='list', yang_name="set-action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__set_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_action(self):
    self.__set_action = YANGDynClass(base=YANGListType("set_type value",set_action.set_action, yang_name="set-action", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='set-type value'), is_container='list', yang_name="set-action", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  seq = __builtin__.property(_get_seq, _set_seq)
  action = __builtin__.property(_get_action, _set_action)
  prefix_list = __builtin__.property(_get_prefix_list, _set_prefix_list)
  next_hop_value = __builtin__.property(_get_next_hop_value, _set_next_hop_value)
  local_preference_value = __builtin__.property(_get_local_preference_value, _set_local_preference_value)
  community_attribute = __builtin__.property(_get_community_attribute, _set_community_attribute)
  as_path_prepend = __builtin__.property(_get_as_path_prepend, _set_as_path_prepend)
  weight = __builtin__.property(_get_weight, _set_weight)
  match_condition_type = __builtin__.property(_get_match_condition_type, _set_match_condition_type)
  route_type_value = __builtin__.property(_get_route_type_value, _set_route_type_value)
  description = __builtin__.property(_get_description, _set_description)
  match_condition = __builtin__.property(_get_match_condition, _set_match_condition)
  set_action = __builtin__.property(_get_set_action, _set_set_action)


  _pyangbind_elements = collections.OrderedDict([('seq', seq), ('action', action), ('prefix_list', prefix_list), ('next_hop_value', next_hop_value), ('local_preference_value', local_preference_value), ('community_attribute', community_attribute), ('as_path_prepend', as_path_prepend), ('weight', weight), ('match_condition_type', match_condition_type), ('route_type_value', route_type_value), ('description', description), ('match_condition', match_condition), ('set_action', set_action), ])


