
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class vty_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vty-configs/vty-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__protocol','__network_mask','__min_vty','__max_vty','__acl_rule_number','__vrf','__auth_type','__timeout','__transport_types_in','__transport_types_out','__logging_synchronous','__privilege_level','__history_size','__login_local','__no_privilege_level','__no_password',)

  _yang_name = 'vty-config'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__auth_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-type", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ssh': {}, u'telnet': {}},), is_leaf=True, yang_name="protocol", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__no_password = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__acl_rule_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-rule-number", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__transport_types_in = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    self.__logging_synchronous = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="logging-synchronous", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__login_local = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="login-local", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__min_vty = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="min-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="timeout", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint16', is_config=True)
    self.__transport_types_out = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-out", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__history_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-size", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    self.__network_mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="network-mask", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__no_privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    self.__max_vty = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="max-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vty-configs', u'vty-config']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/vty_configs/vty_config/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/vty_configs/vty_config/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /devices/device/vty_configs/vty_config/protocol (enumeration)

    YANG Description: telnet
ssh

    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /devices/device/vty_configs/vty_config/protocol (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: telnet
ssh

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ssh': {}, u'telnet': {}},), is_leaf=True, yang_name="protocol", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ssh': {}, u'telnet': {}},), is_leaf=True, yang_name="protocol", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ssh': {}, u'telnet': {}},), is_leaf=True, yang_name="protocol", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_network_mask(self):
    """
    Getter method for network_mask, mapped from YANG variable /devices/device/vty_configs/vty_config/network_mask (string)

    YANG Description: string
    """
    return self.__network_mask
      
  def _set_network_mask(self, v, load=False):
    """
    Setter method for network_mask, mapped from YANG variable /devices/device/vty_configs/vty_config/network_mask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network_mask() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="network-mask", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network_mask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="network-mask", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__network_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network_mask(self):
    self.__network_mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="network-mask", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_min_vty(self):
    """
    Getter method for min_vty, mapped from YANG variable /devices/device/vty_configs/vty_config/min_vty (int8)

    YANG Description: -128..127
    """
    return self.__min_vty
      
  def _set_min_vty(self, v, load=False):
    """
    Setter method for min_vty, mapped from YANG variable /devices/device/vty_configs/vty_config/min_vty (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_vty is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_vty() directly.

    YANG Description: -128..127
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="min-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_vty must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="min-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)""",
        })

    self.__min_vty = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_vty(self):
    self.__min_vty = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="min-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)


  def _get_max_vty(self):
    """
    Getter method for max_vty, mapped from YANG variable /devices/device/vty_configs/vty_config/max_vty (int8)

    YANG Description: -128..127
    """
    return self.__max_vty
      
  def _set_max_vty(self, v, load=False):
    """
    Setter method for max_vty, mapped from YANG variable /devices/device/vty_configs/vty_config/max_vty (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_vty is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_vty() directly.

    YANG Description: -128..127
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="max-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_vty must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="max-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)""",
        })

    self.__max_vty = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_vty(self):
    self.__max_vty = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="max-vty", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='int8', is_config=True)


  def _get_acl_rule_number(self):
    """
    Getter method for acl_rule_number, mapped from YANG variable /devices/device/vty_configs/vty_config/acl_rule_number (string)

    YANG Description: string
    """
    return self.__acl_rule_number
      
  def _set_acl_rule_number(self, v, load=False):
    """
    Setter method for acl_rule_number, mapped from YANG variable /devices/device/vty_configs/vty_config/acl_rule_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_rule_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_rule_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="acl-rule-number", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_rule_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-rule-number", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__acl_rule_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_rule_number(self):
    self.__acl_rule_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-rule-number", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /devices/device/vty_configs/vty_config/vrf (string)

    YANG Description: string
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /devices/device/vty_configs/vty_config/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_auth_type(self):
    """
    Getter method for auth_type, mapped from YANG variable /devices/device/vty_configs/vty_config/auth_type (string)

    YANG Description: string
    """
    return self.__auth_type
      
  def _set_auth_type(self, v, load=False):
    """
    Setter method for auth_type, mapped from YANG variable /devices/device/vty_configs/vty_config/auth_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-type", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-type", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_type(self):
    self.__auth_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-type", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_timeout(self):
    """
    Getter method for timeout, mapped from YANG variable /devices/device/vty_configs/vty_config/timeout (uint16)

    YANG Description: 0..35791
    """
    return self.__timeout
      
  def _set_timeout(self, v, load=False):
    """
    Setter method for timeout, mapped from YANG variable /devices/device/vty_configs/vty_config/timeout (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timeout() directly.

    YANG Description: 0..35791
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="timeout", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timeout must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="timeout", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint16', is_config=True)""",
        })

    self.__timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timeout(self):
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="timeout", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint16', is_config=True)


  def _get_transport_types_in(self):
    """
    Getter method for transport_types_in, mapped from YANG variable /devices/device/vty_configs/vty_config/transport_types_in (string)

    YANG Description: string
    """
    return self.__transport_types_in
      
  def _set_transport_types_in(self, v, load=False):
    """
    Setter method for transport_types_in, mapped from YANG variable /devices/device/vty_configs/vty_config/transport_types_in (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_types_in is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_types_in() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="transport-types-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_types_in must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__transport_types_in = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_types_in(self):
    self.__transport_types_in = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_transport_types_out(self):
    """
    Getter method for transport_types_out, mapped from YANG variable /devices/device/vty_configs/vty_config/transport_types_out (string)

    YANG Description: string
    """
    return self.__transport_types_out
      
  def _set_transport_types_out(self, v, load=False):
    """
    Setter method for transport_types_out, mapped from YANG variable /devices/device/vty_configs/vty_config/transport_types_out (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_types_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_types_out() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="transport-types-out", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_types_out must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-out", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__transport_types_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_types_out(self):
    self.__transport_types_out = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-types-out", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_logging_synchronous(self):
    """
    Getter method for logging_synchronous, mapped from YANG variable /devices/device/vty_configs/vty_config/logging_synchronous (boolean)

    YANG Description: logging-synchronous: True/False
    """
    return self.__logging_synchronous
      
  def _set_logging_synchronous(self, v, load=False):
    """
    Setter method for logging_synchronous, mapped from YANG variable /devices/device/vty_configs/vty_config/logging_synchronous (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_logging_synchronous is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_logging_synchronous() directly.

    YANG Description: logging-synchronous: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="logging-synchronous", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """logging_synchronous must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="logging-synchronous", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__logging_synchronous = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_logging_synchronous(self):
    self.__logging_synchronous = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="logging-synchronous", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_privilege_level(self):
    """
    Getter method for privilege_level, mapped from YANG variable /devices/device/vty_configs/vty_config/privilege_level (uint32)

    YANG Description: 0..4294967295
    """
    return self.__privilege_level
      
  def _set_privilege_level(self, v, load=False):
    """
    Setter method for privilege_level, mapped from YANG variable /devices/device/vty_configs/vty_config/privilege_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_privilege_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_privilege_level() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """privilege_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)""",
        })

    self.__privilege_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_privilege_level(self):
    self.__privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)


  def _get_history_size(self):
    """
    Getter method for history_size, mapped from YANG variable /devices/device/vty_configs/vty_config/history_size (uint32)

    YANG Description: 0..4294967295
    """
    return self.__history_size
      
  def _set_history_size(self, v, load=False):
    """
    Setter method for history_size, mapped from YANG variable /devices/device/vty_configs/vty_config/history_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_history_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_history_size() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-size", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """history_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-size", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)""",
        })

    self.__history_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_history_size(self):
    self.__history_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-size", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)


  def _get_login_local(self):
    """
    Getter method for login_local, mapped from YANG variable /devices/device/vty_configs/vty_config/login_local (boolean)

    YANG Description: login-local: True/False
    """
    return self.__login_local
      
  def _set_login_local(self, v, load=False):
    """
    Setter method for login_local, mapped from YANG variable /devices/device/vty_configs/vty_config/login_local (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_login_local is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_login_local() directly.

    YANG Description: login-local: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="login-local", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """login_local must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="login-local", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__login_local = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_login_local(self):
    self.__login_local = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="login-local", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_no_privilege_level(self):
    """
    Getter method for no_privilege_level, mapped from YANG variable /devices/device/vty_configs/vty_config/no_privilege_level (uint32)

    YANG Description: 0..4294967295
    """
    return self.__no_privilege_level
      
  def _set_no_privilege_level(self, v, load=False):
    """
    Setter method for no_privilege_level, mapped from YANG variable /devices/device/vty_configs/vty_config/no_privilege_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_privilege_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_privilege_level() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_privilege_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)""",
        })

    self.__no_privilege_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_privilege_level(self):
    self.__no_privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)


  def _get_no_password(self):
    """
    Getter method for no_password, mapped from YANG variable /devices/device/vty_configs/vty_config/no_password (boolean)

    YANG Description: no-password: True/False
    """
    return self.__no_password
      
  def _set_no_password(self, v, load=False):
    """
    Setter method for no_password, mapped from YANG variable /devices/device/vty_configs/vty_config/no_password (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_password() directly.

    YANG Description: no-password: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="no-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_password must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__no_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_password(self):
    self.__no_password = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  protocol = __builtin__.property(_get_protocol, _set_protocol)
  network_mask = __builtin__.property(_get_network_mask, _set_network_mask)
  min_vty = __builtin__.property(_get_min_vty, _set_min_vty)
  max_vty = __builtin__.property(_get_max_vty, _set_max_vty)
  acl_rule_number = __builtin__.property(_get_acl_rule_number, _set_acl_rule_number)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  auth_type = __builtin__.property(_get_auth_type, _set_auth_type)
  timeout = __builtin__.property(_get_timeout, _set_timeout)
  transport_types_in = __builtin__.property(_get_transport_types_in, _set_transport_types_in)
  transport_types_out = __builtin__.property(_get_transport_types_out, _set_transport_types_out)
  logging_synchronous = __builtin__.property(_get_logging_synchronous, _set_logging_synchronous)
  privilege_level = __builtin__.property(_get_privilege_level, _set_privilege_level)
  history_size = __builtin__.property(_get_history_size, _set_history_size)
  login_local = __builtin__.property(_get_login_local, _set_login_local)
  no_privilege_level = __builtin__.property(_get_no_privilege_level, _set_no_privilege_level)
  no_password = __builtin__.property(_get_no_password, _set_no_password)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('protocol', protocol), ('network_mask', network_mask), ('min_vty', min_vty), ('max_vty', max_vty), ('acl_rule_number', acl_rule_number), ('vrf', vrf), ('auth_type', auth_type), ('timeout', timeout), ('transport_types_in', transport_types_in), ('transport_types_out', transport_types_out), ('logging_synchronous', logging_synchronous), ('privilege_level', privilege_level), ('history_size', history_size), ('login_local', login_local), ('no_privilege_level', no_privilege_level), ('no_password', no_password), ])


