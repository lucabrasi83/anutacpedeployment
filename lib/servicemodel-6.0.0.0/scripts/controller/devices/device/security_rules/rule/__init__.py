
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import to_zone
import from_zone
import source
import destination
import log_option
import source_user
import category
import application
import service
import hip_profiles
class rule(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/security-rules/rule. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__description','__action','__log_start','__log_end','__negate_source','__negate_destination','__device_group','__fromzone','__tozone','__source_address','__destination_address','__app_member','__rulebase_type','__enable_option','__nat_option','__to_zone','__from_zone','__source','__destination','__log_option','__source_user','__category','__application','__service','__hip_profiles',)

  _yang_name = 'rule'
  _module_name = 'acl'
  _namespace = 'http://anutanetworks.com/acl'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__negate_source = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    self.__device_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-group", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__hip_profiles = YANGDynClass(base=YANGListType("member",hip_profiles.hip_profiles, yang_name="hip-profiles", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="hip-profiles", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__negate_destination = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    self.__log_start = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-start", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    self.__destination_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__log_option = YANGDynClass(base=YANGListType("option",log_option.log_option, yang_name="log-option", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='option'), is_container='list', yang_name="log-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__enable_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'count': {}, u'url-filter': {}, u'log': {}},), is_leaf=True, yang_name="enable-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    self.__category = YANGDynClass(base=YANGListType("member",category.category, yang_name="category", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="category", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__to_zone = YANGDynClass(base=YANGListType("zone",to_zone.to_zone, yang_name="to-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="to-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__service = YANGDynClass(base=YANGListType("member",service.service, yang_name="service", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="service", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__application = YANGDynClass(base=YANGListType("member",application.application, yang_name="application", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="application", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__destination = YANGDynClass(base=YANGListType("destination_address",destination.destination, yang_name="destination", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='destination-address'), is_container='list', yang_name="destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__from_zone = YANGDynClass(base=YANGListType("zone",from_zone.from_zone, yang_name="from-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="from-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__source_user = YANGDynClass(base=YANGListType("member",source_user.source_user, yang_name="source-user", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="source-user", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__source = YANGDynClass(base=YANGListType("source_address",source.source, yang_name="source", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-address'), is_container='list', yang_name="source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    self.__rulebase_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pre-rulebase': {}, u'rulebase': {}, u'post-rulebase': {}},), is_leaf=True, yang_name="rulebase-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    self.__source_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__nat_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'src': {}, u'dst': {}},), is_leaf=True, yang_name="nat-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    self.__fromzone = YANGDynClass(base=unicode, is_leaf=True, yang_name="fromzone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__app_member = YANGDynClass(base=unicode, is_leaf=True, yang_name="app-member", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__tozone = YANGDynClass(base=unicode, is_leaf=True, yang_name="tozone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'drop': {}, u'reset-both': {}, u'allow': {}, u'reset-server': {}, u'reset-client': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    self.__log_end = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-end", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'security-rules', u'rule']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/security_rules/rule/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/security_rules/rule/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/security_rules/rule/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/security_rules/rule/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /devices/device/security_rules/rule/action (enumeration)

    YANG Description: allow
deny
drop
reset-both
reset-client
reset-server
permit

    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /devices/device/security_rules/rule/action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.

    YANG Description: allow
deny
drop
reset-both
reset-client
reset-server
permit

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'drop': {}, u'reset-both': {}, u'allow': {}, u'reset-server': {}, u'reset-client': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with enumeration""",
          'defined-type': "acl:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'drop': {}, u'reset-both': {}, u'allow': {}, u'reset-server': {}, u'reset-client': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'drop': {}, u'reset-both': {}, u'allow': {}, u'reset-server': {}, u'reset-client': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)


  def _get_log_start(self):
    """
    Getter method for log_start, mapped from YANG variable /devices/device/security_rules/rule/log_start (yes-no)

    YANG Description: yes
no

    """
    return self.__log_start
      
  def _set_log_start(self, v, load=False):
    """
    Setter method for log_start, mapped from YANG variable /devices/device/security_rules/rule/log_start (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_start() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-start", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_start must be of a type compatible with yes-no""",
          'defined-type': "acl:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-start", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)""",
        })

    self.__log_start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_start(self):
    self.__log_start = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-start", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)


  def _get_log_end(self):
    """
    Getter method for log_end, mapped from YANG variable /devices/device/security_rules/rule/log_end (yes-no)

    YANG Description: yes
no

    """
    return self.__log_end
      
  def _set_log_end(self, v, load=False):
    """
    Setter method for log_end, mapped from YANG variable /devices/device/security_rules/rule/log_end (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_end is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_end() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-end", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_end must be of a type compatible with yes-no""",
          'defined-type': "acl:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-end", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)""",
        })

    self.__log_end = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_end(self):
    self.__log_end = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="log-end", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)


  def _get_negate_source(self):
    """
    Getter method for negate_source, mapped from YANG variable /devices/device/security_rules/rule/negate_source (yes-no)

    YANG Description: yes
no

    """
    return self.__negate_source
      
  def _set_negate_source(self, v, load=False):
    """
    Setter method for negate_source, mapped from YANG variable /devices/device/security_rules/rule/negate_source (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_negate_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_negate_source() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """negate_source must be of a type compatible with yes-no""",
          'defined-type': "acl:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)""",
        })

    self.__negate_source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_negate_source(self):
    self.__negate_source = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)


  def _get_negate_destination(self):
    """
    Getter method for negate_destination, mapped from YANG variable /devices/device/security_rules/rule/negate_destination (yes-no)

    YANG Description: yes
no

    """
    return self.__negate_destination
      
  def _set_negate_destination(self, v, load=False):
    """
    Setter method for negate_destination, mapped from YANG variable /devices/device/security_rules/rule/negate_destination (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_negate_destination is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_negate_destination() directly.

    YANG Description: yes
no

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """negate_destination must be of a type compatible with yes-no""",
          'defined-type': "acl:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)""",
        })

    self.__negate_destination = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_negate_destination(self):
    self.__negate_destination = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {}, u'no': {}},), is_leaf=True, yang_name="negate-destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='yes-no', is_config=True)


  def _get_device_group(self):
    """
    Getter method for device_group, mapped from YANG variable /devices/device/security_rules/rule/device_group (string)

    YANG Description: string
    """
    return self.__device_group
      
  def _set_device_group(self, v, load=False):
    """
    Setter method for device_group, mapped from YANG variable /devices/device/security_rules/rule/device_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_group() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-group", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-group", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__device_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_group(self):
    self.__device_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-group", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_fromzone(self):
    """
    Getter method for fromzone, mapped from YANG variable /devices/device/security_rules/rule/fromzone (string)

    YANG Description: string
    """
    return self.__fromzone
      
  def _set_fromzone(self, v, load=False):
    """
    Setter method for fromzone, mapped from YANG variable /devices/device/security_rules/rule/fromzone (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fromzone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fromzone() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="fromzone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fromzone must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="fromzone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__fromzone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fromzone(self):
    self.__fromzone = YANGDynClass(base=unicode, is_leaf=True, yang_name="fromzone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_tozone(self):
    """
    Getter method for tozone, mapped from YANG variable /devices/device/security_rules/rule/tozone (string)

    YANG Description: string
    """
    return self.__tozone
      
  def _set_tozone(self, v, load=False):
    """
    Setter method for tozone, mapped from YANG variable /devices/device/security_rules/rule/tozone (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tozone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tozone() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tozone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tozone must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tozone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__tozone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tozone(self):
    self.__tozone = YANGDynClass(base=unicode, is_leaf=True, yang_name="tozone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_source_address(self):
    """
    Getter method for source_address, mapped from YANG variable /devices/device/security_rules/rule/source_address (string)

    YANG Description: string
    """
    return self.__source_address
      
  def _set_source_address(self, v, load=False):
    """
    Setter method for source_address, mapped from YANG variable /devices/device/security_rules/rule/source_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__source_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address(self):
    self.__source_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_destination_address(self):
    """
    Getter method for destination_address, mapped from YANG variable /devices/device/security_rules/rule/destination_address (string)

    YANG Description: string
    """
    return self.__destination_address
      
  def _set_destination_address(self, v, load=False):
    """
    Setter method for destination_address, mapped from YANG variable /devices/device/security_rules/rule/destination_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_destination_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_destination_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="destination-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """destination_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__destination_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_destination_address(self):
    self.__destination_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="destination-address", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_app_member(self):
    """
    Getter method for app_member, mapped from YANG variable /devices/device/security_rules/rule/app_member (string)

    YANG Description: string
    """
    return self.__app_member
      
  def _set_app_member(self, v, load=False):
    """
    Setter method for app_member, mapped from YANG variable /devices/device/security_rules/rule/app_member (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_app_member is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_app_member() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="app-member", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """app_member must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="app-member", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)""",
        })

    self.__app_member = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_app_member(self):
    self.__app_member = YANGDynClass(base=unicode, is_leaf=True, yang_name="app-member", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='string', is_config=True)


  def _get_rulebase_type(self):
    """
    Getter method for rulebase_type, mapped from YANG variable /devices/device/security_rules/rule/rulebase_type (enumeration)

    YANG Description: pre-rulebase
post-rulebase
rulebase

    """
    return self.__rulebase_type
      
  def _set_rulebase_type(self, v, load=False):
    """
    Setter method for rulebase_type, mapped from YANG variable /devices/device/security_rules/rule/rulebase_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rulebase_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rulebase_type() directly.

    YANG Description: pre-rulebase
post-rulebase
rulebase

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pre-rulebase': {}, u'rulebase': {}, u'post-rulebase': {}},), is_leaf=True, yang_name="rulebase-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rulebase_type must be of a type compatible with enumeration""",
          'defined-type': "acl:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pre-rulebase': {}, u'rulebase': {}, u'post-rulebase': {}},), is_leaf=True, yang_name="rulebase-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)""",
        })

    self.__rulebase_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rulebase_type(self):
    self.__rulebase_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pre-rulebase': {}, u'rulebase': {}, u'post-rulebase': {}},), is_leaf=True, yang_name="rulebase-type", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)


  def _get_enable_option(self):
    """
    Getter method for enable_option, mapped from YANG variable /devices/device/security_rules/rule/enable_option (enumeration)

    YANG Description: log
count
url-filter

    """
    return self.__enable_option
      
  def _set_enable_option(self, v, load=False):
    """
    Setter method for enable_option, mapped from YANG variable /devices/device/security_rules/rule/enable_option (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_option is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_option() directly.

    YANG Description: log
count
url-filter

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'count': {}, u'url-filter': {}, u'log': {}},), is_leaf=True, yang_name="enable-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_option must be of a type compatible with enumeration""",
          'defined-type': "acl:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'count': {}, u'url-filter': {}, u'log': {}},), is_leaf=True, yang_name="enable-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)""",
        })

    self.__enable_option = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_option(self):
    self.__enable_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'count': {}, u'url-filter': {}, u'log': {}},), is_leaf=True, yang_name="enable-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)


  def _get_nat_option(self):
    """
    Getter method for nat_option, mapped from YANG variable /devices/device/security_rules/rule/nat_option (enumeration)

    YANG Description: src
dst

    """
    return self.__nat_option
      
  def _set_nat_option(self, v, load=False):
    """
    Setter method for nat_option, mapped from YANG variable /devices/device/security_rules/rule/nat_option (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nat_option is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nat_option() directly.

    YANG Description: src
dst

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'src': {}, u'dst': {}},), is_leaf=True, yang_name="nat-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nat_option must be of a type compatible with enumeration""",
          'defined-type': "acl:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'src': {}, u'dst': {}},), is_leaf=True, yang_name="nat-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)""",
        })

    self.__nat_option = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nat_option(self):
    self.__nat_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'src': {}, u'dst': {}},), is_leaf=True, yang_name="nat-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='enumeration', is_config=True)


  def _get_to_zone(self):
    """
    Getter method for to_zone, mapped from YANG variable /devices/device/security_rules/rule/to_zone (list)
    """
    return self.__to_zone
      
  def _set_to_zone(self, v, load=False):
    """
    Setter method for to_zone, mapped from YANG variable /devices/device/security_rules/rule/to_zone (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_to_zone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_to_zone() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("zone",to_zone.to_zone, yang_name="to-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="to-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """to_zone must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("zone",to_zone.to_zone, yang_name="to-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="to-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__to_zone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_to_zone(self):
    self.__to_zone = YANGDynClass(base=YANGListType("zone",to_zone.to_zone, yang_name="to-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="to-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_from_zone(self):
    """
    Getter method for from_zone, mapped from YANG variable /devices/device/security_rules/rule/from_zone (list)
    """
    return self.__from_zone
      
  def _set_from_zone(self, v, load=False):
    """
    Setter method for from_zone, mapped from YANG variable /devices/device/security_rules/rule/from_zone (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_from_zone is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_from_zone() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("zone",from_zone.from_zone, yang_name="from-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="from-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """from_zone must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("zone",from_zone.from_zone, yang_name="from-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="from-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__from_zone = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_from_zone(self):
    self.__from_zone = YANGDynClass(base=YANGListType("zone",from_zone.from_zone, yang_name="from-zone", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='zone'), is_container='list', yang_name="from-zone", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_source(self):
    """
    Getter method for source, mapped from YANG variable /devices/device/security_rules/rule/source (list)
    """
    return self.__source
      
  def _set_source(self, v, load=False):
    """
    Setter method for source, mapped from YANG variable /devices/device/security_rules/rule/source (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("source_address",source.source, yang_name="source", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-address'), is_container='list', yang_name="source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("source_address",source.source, yang_name="source", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-address'), is_container='list', yang_name="source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source(self):
    self.__source = YANGDynClass(base=YANGListType("source_address",source.source, yang_name="source", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-address'), is_container='list', yang_name="source", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_destination(self):
    """
    Getter method for destination, mapped from YANG variable /devices/device/security_rules/rule/destination (list)
    """
    return self.__destination
      
  def _set_destination(self, v, load=False):
    """
    Setter method for destination, mapped from YANG variable /devices/device/security_rules/rule/destination (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_destination is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_destination() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("destination_address",destination.destination, yang_name="destination", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='destination-address'), is_container='list', yang_name="destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """destination must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("destination_address",destination.destination, yang_name="destination", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='destination-address'), is_container='list', yang_name="destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__destination = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_destination(self):
    self.__destination = YANGDynClass(base=YANGListType("destination_address",destination.destination, yang_name="destination", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='destination-address'), is_container='list', yang_name="destination", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_log_option(self):
    """
    Getter method for log_option, mapped from YANG variable /devices/device/security_rules/rule/log_option (list)
    """
    return self.__log_option
      
  def _set_log_option(self, v, load=False):
    """
    Setter method for log_option, mapped from YANG variable /devices/device/security_rules/rule/log_option (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_option is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_option() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("option",log_option.log_option, yang_name="log-option", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='option'), is_container='list', yang_name="log-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_option must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("option",log_option.log_option, yang_name="log-option", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='option'), is_container='list', yang_name="log-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__log_option = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_option(self):
    self.__log_option = YANGDynClass(base=YANGListType("option",log_option.log_option, yang_name="log-option", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='option'), is_container='list', yang_name="log-option", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_source_user(self):
    """
    Getter method for source_user, mapped from YANG variable /devices/device/security_rules/rule/source_user (list)
    """
    return self.__source_user
      
  def _set_source_user(self, v, load=False):
    """
    Setter method for source_user, mapped from YANG variable /devices/device/security_rules/rule/source_user (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_user() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("member",source_user.source_user, yang_name="source-user", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="source-user", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_user must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("member",source_user.source_user, yang_name="source-user", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="source-user", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__source_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_user(self):
    self.__source_user = YANGDynClass(base=YANGListType("member",source_user.source_user, yang_name="source-user", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="source-user", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_category(self):
    """
    Getter method for category, mapped from YANG variable /devices/device/security_rules/rule/category (list)
    """
    return self.__category
      
  def _set_category(self, v, load=False):
    """
    Setter method for category, mapped from YANG variable /devices/device/security_rules/rule/category (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_category is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_category() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("member",category.category, yang_name="category", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="category", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """category must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("member",category.category, yang_name="category", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="category", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__category = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_category(self):
    self.__category = YANGDynClass(base=YANGListType("member",category.category, yang_name="category", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="category", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_application(self):
    """
    Getter method for application, mapped from YANG variable /devices/device/security_rules/rule/application (list)
    """
    return self.__application
      
  def _set_application(self, v, load=False):
    """
    Setter method for application, mapped from YANG variable /devices/device/security_rules/rule/application (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_application is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_application() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("member",application.application, yang_name="application", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="application", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """application must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("member",application.application, yang_name="application", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="application", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__application = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_application(self):
    self.__application = YANGDynClass(base=YANGListType("member",application.application, yang_name="application", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="application", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_service(self):
    """
    Getter method for service, mapped from YANG variable /devices/device/security_rules/rule/service (list)
    """
    return self.__service
      
  def _set_service(self, v, load=False):
    """
    Setter method for service, mapped from YANG variable /devices/device/security_rules/rule/service (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("member",service.service, yang_name="service", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="service", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("member",service.service, yang_name="service", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="service", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__service = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service(self):
    self.__service = YANGDynClass(base=YANGListType("member",service.service, yang_name="service", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="service", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)


  def _get_hip_profiles(self):
    """
    Getter method for hip_profiles, mapped from YANG variable /devices/device/security_rules/rule/hip_profiles (list)
    """
    return self.__hip_profiles
      
  def _set_hip_profiles(self, v, load=False):
    """
    Setter method for hip_profiles, mapped from YANG variable /devices/device/security_rules/rule/hip_profiles (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hip_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hip_profiles() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("member",hip_profiles.hip_profiles, yang_name="hip-profiles", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="hip-profiles", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hip_profiles must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("member",hip_profiles.hip_profiles, yang_name="hip-profiles", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="hip-profiles", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)""",
        })

    self.__hip_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hip_profiles(self):
    self.__hip_profiles = YANGDynClass(base=YANGListType("member",hip_profiles.hip_profiles, yang_name="hip-profiles", module_name="acl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='member'), is_container='list', yang_name="hip-profiles", module_name="acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/acl', defining_module='acl', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  action = __builtin__.property(_get_action, _set_action)
  log_start = __builtin__.property(_get_log_start, _set_log_start)
  log_end = __builtin__.property(_get_log_end, _set_log_end)
  negate_source = __builtin__.property(_get_negate_source, _set_negate_source)
  negate_destination = __builtin__.property(_get_negate_destination, _set_negate_destination)
  device_group = __builtin__.property(_get_device_group, _set_device_group)
  fromzone = __builtin__.property(_get_fromzone, _set_fromzone)
  tozone = __builtin__.property(_get_tozone, _set_tozone)
  source_address = __builtin__.property(_get_source_address, _set_source_address)
  destination_address = __builtin__.property(_get_destination_address, _set_destination_address)
  app_member = __builtin__.property(_get_app_member, _set_app_member)
  rulebase_type = __builtin__.property(_get_rulebase_type, _set_rulebase_type)
  enable_option = __builtin__.property(_get_enable_option, _set_enable_option)
  nat_option = __builtin__.property(_get_nat_option, _set_nat_option)
  to_zone = __builtin__.property(_get_to_zone, _set_to_zone)
  from_zone = __builtin__.property(_get_from_zone, _set_from_zone)
  source = __builtin__.property(_get_source, _set_source)
  destination = __builtin__.property(_get_destination, _set_destination)
  log_option = __builtin__.property(_get_log_option, _set_log_option)
  source_user = __builtin__.property(_get_source_user, _set_source_user)
  category = __builtin__.property(_get_category, _set_category)
  application = __builtin__.property(_get_application, _set_application)
  service = __builtin__.property(_get_service, _set_service)
  hip_profiles = __builtin__.property(_get_hip_profiles, _set_hip_profiles)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('description', description), ('action', action), ('log_start', log_start), ('log_end', log_end), ('negate_source', negate_source), ('negate_destination', negate_destination), ('device_group', device_group), ('fromzone', fromzone), ('tozone', tozone), ('source_address', source_address), ('destination_address', destination_address), ('app_member', app_member), ('rulebase_type', rulebase_type), ('enable_option', enable_option), ('nat_option', nat_option), ('to_zone', to_zone), ('from_zone', from_zone), ('source', source), ('destination', destination), ('log_option', log_option), ('source_user', source_user), ('category', category), ('application', application), ('service', service), ('hip_profiles', hip_profiles), ])


