
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import server_certificate
import ca_certificate
import persistence
import protection
class virtual_server(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/virtual-servers/virtual-server. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__vip','__domain_number','__partition','__name','__port','__l4_protocol','__state','__pool','__load_balancing_method','__server_certificate','__ca_certificate','__persistence','__protection',)

  _yang_name = 'virtual-server'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__l4_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'https': {}, u'tcp': {}},), default=unicode("tcp"), is_leaf=True, yang_name="l4-protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__protection = YANGDynClass(base=protection.protection, is_container='container', yang_name="protection", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {}, u'enabled': {}},), default=unicode("enabled"), is_leaf=True, yang_name="state", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    self.__ca_certificate = YANGDynClass(base=ca_certificate.ca_certificate, is_container='container', yang_name="ca-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__vip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="vip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)
    self.__server_certificate = YANGDynClass(base=server_certificate.server_certificate, is_container='container', yang_name="server-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__persistence = YANGDynClass(base=persistence.persistence, is_container='container', yang_name="persistence", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    self.__pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__load_balancing_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'least-response-time': {}, u'least-connections': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'virtual-servers', u'virtual-server']

  def _get_vip(self):
    """
    Getter method for vip, mapped from YANG variable /devices/device/virtual_servers/virtual_server/vip (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__vip
      
  def _set_vip(self, v, load=False):
    """
    Setter method for vip, mapped from YANG variable /devices/device/virtual_servers/virtual_server/vip (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vip() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="vip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vip must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="vip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__vip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vip(self):
    self.__vip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="vip", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='inet:ip-address', is_config=True)


  def _get_domain_number(self):
    """
    Getter method for domain_number, mapped from YANG variable /devices/device/virtual_servers/virtual_server/domain_number (leafref)

    YANG Description: domain-number
    """
    return self.__domain_number
      
  def _set_domain_number(self, v, load=False):
    """
    Setter method for domain_number, mapped from YANG variable /devices/device/virtual_servers/virtual_server/domain_number (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_number() directly.

    YANG Description: domain-number
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_number must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__domain_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_number(self):
    self.__domain_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-number", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_partition(self):
    """
    Getter method for partition, mapped from YANG variable /devices/device/virtual_servers/virtual_server/partition (leafref)

    YANG Description: partition
    """
    return self.__partition
      
  def _set_partition(self, v, load=False):
    """
    Setter method for partition, mapped from YANG variable /devices/device/virtual_servers/virtual_server/partition (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partition() directly.

    YANG Description: partition
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partition must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__partition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partition(self):
    self.__partition = YANGDynClass(base=unicode, is_leaf=True, yang_name="partition", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/virtual_servers/virtual_server/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/virtual_servers/virtual_server/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_port(self):
    """
    Getter method for port, mapped from YANG variable /devices/device/virtual_servers/virtual_server/port (uint32)

    YANG Description: 0..4294967295
    """
    return self.__port
      
  def _set_port(self, v, load=False):
    """
    Setter method for port, mapped from YANG variable /devices/device/virtual_servers/virtual_server/port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)""",
        })

    self.__port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port(self):
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)


  def _get_l4_protocol(self):
    """
    Getter method for l4_protocol, mapped from YANG variable /devices/device/virtual_servers/virtual_server/l4_protocol (enumeration)

    YANG Description: tcp
udp
http
https

    """
    return self.__l4_protocol
      
  def _set_l4_protocol(self, v, load=False):
    """
    Setter method for l4_protocol, mapped from YANG variable /devices/device/virtual_servers/virtual_server/l4_protocol (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l4_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l4_protocol() directly.

    YANG Description: tcp
udp
http
https

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'https': {}, u'tcp': {}},), default=unicode("tcp"), is_leaf=True, yang_name="l4-protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l4_protocol must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'https': {}, u'tcp': {}},), default=unicode("tcp"), is_leaf=True, yang_name="l4-protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__l4_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l4_protocol(self):
    self.__l4_protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {}, u'http': {}, u'https': {}, u'tcp': {}},), default=unicode("tcp"), is_leaf=True, yang_name="l4-protocol", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /devices/device/virtual_servers/virtual_server/state (enumeration)

    YANG Description: enabled
disabled

    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /devices/device/virtual_servers/virtual_server/state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: enabled
disabled

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {}, u'enabled': {}},), default=unicode("enabled"), is_leaf=True, yang_name="state", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {}, u'enabled': {}},), default=unicode("enabled"), is_leaf=True, yang_name="state", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {}, u'enabled': {}},), default=unicode("enabled"), is_leaf=True, yang_name="state", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_pool(self):
    """
    Getter method for pool, mapped from YANG variable /devices/device/virtual_servers/virtual_server/pool (leafref)

    YANG Description: pool
    """
    return self.__pool
      
  def _set_pool(self, v, load=False):
    """
    Setter method for pool, mapped from YANG variable /devices/device/virtual_servers/virtual_server/pool (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pool is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pool() directly.

    YANG Description: pool
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pool", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pool must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pool", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__pool = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pool(self):
    self.__pool = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_load_balancing_method(self):
    """
    Getter method for load_balancing_method, mapped from YANG variable /devices/device/virtual_servers/virtual_server/load_balancing_method (enumeration)

    YANG Description: round-robin
least-connections
least-response-time

    """
    return self.__load_balancing_method
      
  def _set_load_balancing_method(self, v, load=False):
    """
    Setter method for load_balancing_method, mapped from YANG variable /devices/device/virtual_servers/virtual_server/load_balancing_method (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_load_balancing_method is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_load_balancing_method() directly.

    YANG Description: round-robin
least-connections
least-response-time

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'least-response-time': {}, u'least-connections': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """load_balancing_method must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'least-response-time': {}, u'least-connections': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__load_balancing_method = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_load_balancing_method(self):
    self.__load_balancing_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'round-robin': {}, u'least-response-time': {}, u'least-connections': {}},), is_leaf=True, yang_name="load-balancing-method", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_server_certificate(self):
    """
    Getter method for server_certificate, mapped from YANG variable /devices/device/virtual_servers/virtual_server/server_certificate (container)
    """
    return self.__server_certificate
      
  def _set_server_certificate(self, v, load=False):
    """
    Setter method for server_certificate, mapped from YANG variable /devices/device/virtual_servers/virtual_server/server_certificate (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_server_certificate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_server_certificate() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=server_certificate.server_certificate, is_container='container', yang_name="server-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """server_certificate must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=server_certificate.server_certificate, is_container='container', yang_name="server-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__server_certificate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_server_certificate(self):
    self.__server_certificate = YANGDynClass(base=server_certificate.server_certificate, is_container='container', yang_name="server-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)


  def _get_ca_certificate(self):
    """
    Getter method for ca_certificate, mapped from YANG variable /devices/device/virtual_servers/virtual_server/ca_certificate (container)
    """
    return self.__ca_certificate
      
  def _set_ca_certificate(self, v, load=False):
    """
    Setter method for ca_certificate, mapped from YANG variable /devices/device/virtual_servers/virtual_server/ca_certificate (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ca_certificate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ca_certificate() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=ca_certificate.ca_certificate, is_container='container', yang_name="ca-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ca_certificate must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ca_certificate.ca_certificate, is_container='container', yang_name="ca-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__ca_certificate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ca_certificate(self):
    self.__ca_certificate = YANGDynClass(base=ca_certificate.ca_certificate, is_container='container', yang_name="ca-certificate", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)


  def _get_persistence(self):
    """
    Getter method for persistence, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence (container)
    """
    return self.__persistence
      
  def _set_persistence(self, v, load=False):
    """
    Setter method for persistence, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_persistence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_persistence() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=persistence.persistence, is_container='container', yang_name="persistence", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """persistence must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=persistence.persistence, is_container='container', yang_name="persistence", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__persistence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_persistence(self):
    self.__persistence = YANGDynClass(base=persistence.persistence, is_container='container', yang_name="persistence", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)


  def _get_protection(self):
    """
    Getter method for protection, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection (container)
    """
    return self.__protection
      
  def _set_protection(self, v, load=False):
    """
    Setter method for protection, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protection() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=protection.protection, is_container='container', yang_name="protection", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protection must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=protection.protection, is_container='container', yang_name="protection", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)""",
        })

    self.__protection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protection(self):
    self.__protection = YANGDynClass(base=protection.protection, is_container='container', yang_name="protection", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='container', is_config=True)

  vip = __builtin__.property(_get_vip, _set_vip)
  domain_number = __builtin__.property(_get_domain_number, _set_domain_number)
  partition = __builtin__.property(_get_partition, _set_partition)
  name = __builtin__.property(_get_name, _set_name)
  port = __builtin__.property(_get_port, _set_port)
  l4_protocol = __builtin__.property(_get_l4_protocol, _set_l4_protocol)
  state = __builtin__.property(_get_state, _set_state)
  pool = __builtin__.property(_get_pool, _set_pool)
  load_balancing_method = __builtin__.property(_get_load_balancing_method, _set_load_balancing_method)
  server_certificate = __builtin__.property(_get_server_certificate, _set_server_certificate)
  ca_certificate = __builtin__.property(_get_ca_certificate, _set_ca_certificate)
  persistence = __builtin__.property(_get_persistence, _set_persistence)
  protection = __builtin__.property(_get_protection, _set_protection)


  _pyangbind_elements = collections.OrderedDict([('vip', vip), ('domain_number', domain_number), ('partition', partition), ('name', name), ('port', port), ('l4_protocol', l4_protocol), ('state', state), ('pool', pool), ('load_balancing_method', load_balancing_method), ('server_certificate', server_certificate), ('ca_certificate', ca_certificate), ('persistence', persistence), ('protection', protection), ])


