
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class protection(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/virtual-servers/virtual-server/protection. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__redirect_url','__backup_virtual_server','__disable_primary_when_down',)

  _yang_name = 'protection'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__disable_primary_when_down = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-primary-when-down", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)
    self.__backup_virtual_server = YANGDynClass(base=unicode, is_leaf=True, yang_name="backup-virtual-server", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    self.__redirect_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="redirect-url", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'virtual-servers', u'virtual-server', u'protection']

  def _get_redirect_url(self):
    """
    Getter method for redirect_url, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/redirect_url (string)

    YANG Description: URL to which to redirect traffic if the virtual server becomes unavailable.
WARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy.
If it does, requests are continuously redirected to the unavailable virtual server. 
    """
    return self.__redirect_url
      
  def _set_redirect_url(self, v, load=False):
    """
    Setter method for redirect_url, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/redirect_url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redirect_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redirect_url() directly.

    YANG Description: URL to which to redirect traffic if the virtual server becomes unavailable.
WARNING! Make sure that the domain in the URL does not match the domain specified for a content switching policy.
If it does, requests are continuously redirected to the unavailable virtual server. 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="redirect-url", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redirect_url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="redirect-url", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__redirect_url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redirect_url(self):
    self.__redirect_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="redirect-url", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_backup_virtual_server(self):
    """
    Getter method for backup_virtual_server, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/backup_virtual_server (leafref)

    YANG Description: Name of the backup virtual server to which to forward requests
if the primary virtual server goes DOWN or reaches its spillover threshold.
    """
    return self.__backup_virtual_server
      
  def _set_backup_virtual_server(self, v, load=False):
    """
    Setter method for backup_virtual_server, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/backup_virtual_server (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_virtual_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_virtual_server() directly.

    YANG Description: Name of the backup virtual server to which to forward requests
if the primary virtual server goes DOWN or reaches its spillover threshold.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="backup-virtual-server", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_virtual_server must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="backup-virtual-server", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)""",
        })

    self.__backup_virtual_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_virtual_server(self):
    self.__backup_virtual_server = YANGDynClass(base=unicode, is_leaf=True, yang_name="backup-virtual-server", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='leafref', is_config=True)


  def _get_disable_primary_when_down(self):
    """
    Getter method for disable_primary_when_down, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/disable_primary_when_down (boolean)

    YANG Description: If the primary virtual server goes down, do not allow it to return to primary status until manually enabled.
    """
    return self.__disable_primary_when_down
      
  def _set_disable_primary_when_down(self, v, load=False):
    """
    Setter method for disable_primary_when_down, mapped from YANG variable /devices/device/virtual_servers/virtual_server/protection/disable_primary_when_down (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_primary_when_down is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_primary_when_down() directly.

    YANG Description: If the primary virtual server goes down, do not allow it to return to primary status until manually enabled.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-primary-when-down", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_primary_when_down must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-primary-when-down", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)""",
        })

    self.__disable_primary_when_down = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_primary_when_down(self):
    self.__disable_primary_when_down = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-primary-when-down", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='boolean', is_config=True)

  redirect_url = __builtin__.property(_get_redirect_url, _set_redirect_url)
  backup_virtual_server = __builtin__.property(_get_backup_virtual_server, _set_backup_virtual_server)
  disable_primary_when_down = __builtin__.property(_get_disable_primary_when_down, _set_disable_primary_when_down)


  _pyangbind_elements = collections.OrderedDict([('redirect_url', redirect_url), ('backup_virtual_server', backup_virtual_server), ('disable_primary_when_down', disable_primary_when_down), ])


