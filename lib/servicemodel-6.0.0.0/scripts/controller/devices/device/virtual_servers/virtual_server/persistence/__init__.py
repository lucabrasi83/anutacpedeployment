
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class persistence(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/virtual-servers/virtual-server/persistence. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__type','__time_out','__cookie_name','__netmask','__ipv6_mask_length','__expression','__response_expression',)

  _yang_name = 'persistence'
  _module_name = 'loadbalancer'
  _namespace = 'http://anutanetworks.com/loadbalancer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ipv6_mask_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ipv6-mask-length", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint16', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cookie-insert': {}, u'source-ip': {}, u'src-ip-dest-ip': {}, u'rule': {}, u'dest-ip': {}},), is_leaf=True, yang_name="type", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    self.__cookie_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cookie-name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__netmask = YANGDynClass(base=unicode, is_leaf=True, yang_name="netmask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__time_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="time-out", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    self.__expression = YANGDynClass(base=unicode, is_leaf=True, yang_name="expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    self.__response_expression = YANGDynClass(base=unicode, is_leaf=True, yang_name="response-expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'virtual-servers', u'virtual-server', u'persistence']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/type (enumeration)

    YANG Description: cookie-insert
source-ip
rule
dest-ip
src-ip-dest-ip

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: cookie-insert
source-ip
rule
dest-ip
src-ip-dest-ip

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cookie-insert': {}, u'source-ip': {}, u'src-ip-dest-ip': {}, u'rule': {}, u'dest-ip': {}},), is_leaf=True, yang_name="type", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with enumeration""",
          'defined-type': "loadbalancer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cookie-insert': {}, u'source-ip': {}, u'src-ip-dest-ip': {}, u'rule': {}, u'dest-ip': {}},), is_leaf=True, yang_name="type", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cookie-insert': {}, u'source-ip': {}, u'src-ip-dest-ip': {}, u'rule': {}, u'dest-ip': {}},), is_leaf=True, yang_name="type", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='enumeration', is_config=True)


  def _get_time_out(self):
    """
    Getter method for time_out, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/time_out (uint32)

    YANG Description: Timeout in minutes.
    """
    return self.__time_out
      
  def _set_time_out(self, v, load=False):
    """
    Setter method for time_out, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/time_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_out() directly.

    YANG Description: Timeout in minutes.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="time-out", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="time-out", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)""",
        })

    self.__time_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_out(self):
    self.__time_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="time-out", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint32', is_config=True)


  def _get_cookie_name(self):
    """
    Getter method for cookie_name, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/cookie_name (string)

    YANG Description: string
    """
    return self.__cookie_name
      
  def _set_cookie_name(self, v, load=False):
    """
    Setter method for cookie_name, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/cookie_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cookie_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cookie_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cookie-name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cookie_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cookie-name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__cookie_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cookie_name(self):
    self.__cookie_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cookie-name", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_netmask(self):
    """
    Getter method for netmask, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/netmask (string)

    YANG Description: string
    """
    return self.__netmask
      
  def _set_netmask(self, v, load=False):
    """
    Setter method for netmask, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/netmask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_netmask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_netmask() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="netmask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """netmask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="netmask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__netmask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_netmask(self):
    self.__netmask = YANGDynClass(base=unicode, is_leaf=True, yang_name="netmask", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_ipv6_mask_length(self):
    """
    Getter method for ipv6_mask_length, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/ipv6_mask_length (uint16)

    YANG Description: 0..65535
    """
    return self.__ipv6_mask_length
      
  def _set_ipv6_mask_length(self, v, load=False):
    """
    Setter method for ipv6_mask_length, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/ipv6_mask_length (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6_mask_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6_mask_length() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ipv6-mask-length", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6_mask_length must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ipv6-mask-length", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint16', is_config=True)""",
        })

    self.__ipv6_mask_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6_mask_length(self):
    self.__ipv6_mask_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ipv6-mask-length", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='uint16', is_config=True)


  def _get_expression(self):
    """
    Getter method for expression, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/expression (string)

    YANG Description: string
    """
    return self.__expression
      
  def _set_expression(self, v, load=False):
    """
    Setter method for expression, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/expression (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_expression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_expression() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """expression must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__expression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_expression(self):
    self.__expression = YANGDynClass(base=unicode, is_leaf=True, yang_name="expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)


  def _get_response_expression(self):
    """
    Getter method for response_expression, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/response_expression (string)

    YANG Description: string
    """
    return self.__response_expression
      
  def _set_response_expression(self, v, load=False):
    """
    Setter method for response_expression, mapped from YANG variable /devices/device/virtual_servers/virtual_server/persistence/response_expression (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_response_expression is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_response_expression() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="response-expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """response_expression must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="response-expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)""",
        })

    self.__response_expression = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_response_expression(self):
    self.__response_expression = YANGDynClass(base=unicode, is_leaf=True, yang_name="response-expression", module_name="loadbalancer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/loadbalancer', defining_module='loadbalancer', yang_type='string', is_config=True)

  type = __builtin__.property(_get_type, _set_type)
  time_out = __builtin__.property(_get_time_out, _set_time_out)
  cookie_name = __builtin__.property(_get_cookie_name, _set_cookie_name)
  netmask = __builtin__.property(_get_netmask, _set_netmask)
  ipv6_mask_length = __builtin__.property(_get_ipv6_mask_length, _set_ipv6_mask_length)
  expression = __builtin__.property(_get_expression, _set_expression)
  response_expression = __builtin__.property(_get_response_expression, _set_response_expression)


  _pyangbind_elements = collections.OrderedDict([('type', type), ('time_out', time_out), ('cookie_name', cookie_name), ('netmask', netmask), ('ipv6_mask_length', ipv6_mask_length), ('expression', expression), ('response_expression', response_expression), ])


