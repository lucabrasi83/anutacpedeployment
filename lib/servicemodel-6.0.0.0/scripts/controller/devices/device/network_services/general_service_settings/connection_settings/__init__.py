
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class connection_settings(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/network-services/general-service-settings/connection-settings. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__half_Open_connection_limit_per_source_ip','__maximum_connection_pool_size',)

  _yang_name = 'connection-settings'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__half_Open_connection_limit_per_source_ip = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="half-Open-connection-limit-per-source-ip", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    self.__maximum_connection_pool_size = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1024']}), is_leaf=True, yang_name="maximum-connection-pool-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'network-services', u'general-service-settings', u'connection-settings']

  def _get_half_Open_connection_limit_per_source_ip(self):
    """
    Getter method for half_Open_connection_limit_per_source_ip, mapped from YANG variable /devices/device/network_services/general_service_settings/connection_settings/half_Open_connection_limit_per_source_ip (uint16)

    YANG Description: Value must be between 0 and 65535
    """
    return self.__half_Open_connection_limit_per_source_ip
      
  def _set_half_Open_connection_limit_per_source_ip(self, v, load=False):
    """
    Setter method for half_Open_connection_limit_per_source_ip, mapped from YANG variable /devices/device/network_services/general_service_settings/connection_settings/half_Open_connection_limit_per_source_ip (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_half_Open_connection_limit_per_source_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_half_Open_connection_limit_per_source_ip() directly.

    YANG Description: Value must be between 0 and 65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="half-Open-connection-limit-per-source-ip", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """half_Open_connection_limit_per_source_ip must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="half-Open-connection-limit-per-source-ip", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__half_Open_connection_limit_per_source_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_half_Open_connection_limit_per_source_ip(self):
    self.__half_Open_connection_limit_per_source_ip = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="half-Open-connection-limit-per-source-ip", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)


  def _get_maximum_connection_pool_size(self):
    """
    Getter method for maximum_connection_pool_size, mapped from YANG variable /devices/device/network_services/general_service_settings/connection_settings/maximum_connection_pool_size (uint16)

    YANG Description: Value must be between 0 and 1024
    """
    return self.__maximum_connection_pool_size
      
  def _set_maximum_connection_pool_size(self, v, load=False):
    """
    Setter method for maximum_connection_pool_size, mapped from YANG variable /devices/device/network_services/general_service_settings/connection_settings/maximum_connection_pool_size (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_connection_pool_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_connection_pool_size() directly.

    YANG Description: Value must be between 0 and 1024
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1024']}), is_leaf=True, yang_name="maximum-connection-pool-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_connection_pool_size must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1024']}), is_leaf=True, yang_name="maximum-connection-pool-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)""",
        })

    self.__maximum_connection_pool_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_connection_pool_size(self):
    self.__maximum_connection_pool_size = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1024']}), is_leaf=True, yang_name="maximum-connection-pool-size", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint16', is_config=True)

  half_Open_connection_limit_per_source_ip = __builtin__.property(_get_half_Open_connection_limit_per_source_ip, _set_half_Open_connection_limit_per_source_ip)
  maximum_connection_pool_size = __builtin__.property(_get_maximum_connection_pool_size, _set_maximum_connection_pool_size)


  _pyangbind_elements = collections.OrderedDict([('half_Open_connection_limit_per_source_ip', half_Open_connection_limit_per_source_ip), ('maximum_connection_pool_size', maximum_connection_pool_size), ])


