
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import device_interface
class port_channel(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/port-channels/port-channel. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__po_index','__description','__member_ports','__clag_agg_ports_list','__device_interface',)

  _yang_name = 'port-channel'
  _module_name = 'l2features'
  _namespace = 'http://anutanetworks.com/l2features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__device_interface = YANGDynClass(base=YANGListType("interface",device_interface.device_interface, yang_name="device-interface", module_name="l2features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="device-interface", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='list', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__po_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="po-index", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint16', is_config=True)
    self.__clag_agg_ports_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="clag-agg-ports-list", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__member_ports = YANGDynClass(base=unicode, is_leaf=True, yang_name="member-ports", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'port-channels', u'port-channel']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/port_channels/port_channel/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/port_channels/port_channel/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_po_index(self):
    """
    Getter method for po_index, mapped from YANG variable /devices/device/port_channels/port_channel/po_index (uint16)

    YANG Description: 0..65535
    """
    return self.__po_index
      
  def _set_po_index(self, v, load=False):
    """
    Setter method for po_index, mapped from YANG variable /devices/device/port_channels/port_channel/po_index (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_po_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_po_index() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="po-index", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """po_index must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="po-index", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint16', is_config=True)""",
        })

    self.__po_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_po_index(self):
    self.__po_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="po-index", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint16', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/port_channels/port_channel/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/port_channels/port_channel/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_member_ports(self):
    """
    Getter method for member_ports, mapped from YANG variable /devices/device/port_channels/port_channel/member_ports (string)

    YANG Description: string
    """
    return self.__member_ports
      
  def _set_member_ports(self, v, load=False):
    """
    Setter method for member_ports, mapped from YANG variable /devices/device/port_channels/port_channel/member_ports (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_member_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_member_ports() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="member-ports", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """member_ports must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="member-ports", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__member_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_member_ports(self):
    self.__member_ports = YANGDynClass(base=unicode, is_leaf=True, yang_name="member-ports", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_clag_agg_ports_list(self):
    """
    Getter method for clag_agg_ports_list, mapped from YANG variable /devices/device/port_channels/port_channel/clag_agg_ports_list (string)

    YANG Description: string
    """
    return self.__clag_agg_ports_list
      
  def _set_clag_agg_ports_list(self, v, load=False):
    """
    Setter method for clag_agg_ports_list, mapped from YANG variable /devices/device/port_channels/port_channel/clag_agg_ports_list (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clag_agg_ports_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clag_agg_ports_list() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="clag-agg-ports-list", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clag_agg_ports_list must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="clag-agg-ports-list", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__clag_agg_ports_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clag_agg_ports_list(self):
    self.__clag_agg_ports_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="clag-agg-ports-list", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_device_interface(self):
    """
    Getter method for device_interface, mapped from YANG variable /devices/device/port_channels/port_channel/device_interface (list)
    """
    return self.__device_interface
      
  def _set_device_interface(self, v, load=False):
    """
    Setter method for device_interface, mapped from YANG variable /devices/device/port_channels/port_channel/device_interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("interface",device_interface.device_interface, yang_name="device-interface", module_name="l2features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="device-interface", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface",device_interface.device_interface, yang_name="device-interface", module_name="l2features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="device-interface", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='list', is_config=True)""",
        })

    self.__device_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_interface(self):
    self.__device_interface = YANGDynClass(base=YANGListType("interface",device_interface.device_interface, yang_name="device-interface", module_name="l2features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface'), is_container='list', yang_name="device-interface", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  po_index = __builtin__.property(_get_po_index, _set_po_index)
  description = __builtin__.property(_get_description, _set_description)
  member_ports = __builtin__.property(_get_member_ports, _set_member_ports)
  clag_agg_ports_list = __builtin__.property(_get_clag_agg_ports_list, _set_clag_agg_ports_list)
  device_interface = __builtin__.property(_get_device_interface, _set_device_interface)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('po_index', po_index), ('description', description), ('member_ports', member_ports), ('clag_agg_ports_list', clag_agg_ports_list), ('device_interface', device_interface), ])


