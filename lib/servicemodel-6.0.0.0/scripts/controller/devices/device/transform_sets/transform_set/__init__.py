
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class transform_set(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/transform-sets/transform-set. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__transform_set','__ipsec_encryption_type','__ipsec_authentication_type','__mode',)

  _yang_name = 'transform-set'
  _module_name = 'dmvpn'
  _namespace = 'http://anutanetworks.com/dmvpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__transform_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__ipsec_authentication_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-sha384-hmac': {}, u'esp-sha512-hmac': {}, u'esp-sha256-hmac': {}, u'esp-md5-hmac': {}, u'esp-sha-hmac': {}},), is_leaf=True, yang_name="ipsec-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode-ipsec', is_config=True)
    self.__ipsec_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-aes 192': {}, u'esp-des': {}, u'esp-gcm 192': {}, u'esp-aes 256': {}, u'esp-gcm 128': {}, u'esp-3des': {}, u'esp-gcm 256': {}, u'esp-aes 128': {}, u'esp-aes': {}},), is_leaf=True, yang_name="ipsec-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode-ipsec', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tunnel': {}, u'transport': {}},), is_leaf=True, yang_name="mode", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='transform-mode', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'transform-sets', u'transform-set']

  def _get_transform_set(self):
    """
    Getter method for transform_set, mapped from YANG variable /devices/device/transform_sets/transform_set/transform_set (string)

    YANG Description: string
    """
    return self.__transform_set
      
  def _set_transform_set(self, v, load=False):
    """
    Setter method for transform_set, mapped from YANG variable /devices/device/transform_sets/transform_set/transform_set (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transform_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transform_set() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transform_set must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__transform_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transform_set(self):
    self.__transform_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="transform-set", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_ipsec_encryption_type(self):
    """
    Getter method for ipsec_encryption_type, mapped from YANG variable /devices/device/transform_sets/transform_set/ipsec_encryption_type (encryption-mode-ipsec)

    YANG Description: esp-aes
esp-3des
esp-des
esp-aes 128
esp-aes 192
esp-aes 256
esp-gcm 128
esp-gcm 192
esp-gcm 256

    """
    return self.__ipsec_encryption_type
      
  def _set_ipsec_encryption_type(self, v, load=False):
    """
    Setter method for ipsec_encryption_type, mapped from YANG variable /devices/device/transform_sets/transform_set/ipsec_encryption_type (encryption-mode-ipsec)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipsec_encryption_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipsec_encryption_type() directly.

    YANG Description: esp-aes
esp-3des
esp-des
esp-aes 128
esp-aes 192
esp-aes 256
esp-gcm 128
esp-gcm 192
esp-gcm 256

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-aes 192': {}, u'esp-des': {}, u'esp-gcm 192': {}, u'esp-aes 256': {}, u'esp-gcm 128': {}, u'esp-3des': {}, u'esp-gcm 256': {}, u'esp-aes 128': {}, u'esp-aes': {}},), is_leaf=True, yang_name="ipsec-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode-ipsec', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipsec_encryption_type must be of a type compatible with encryption-mode-ipsec""",
          'defined-type': "dmvpn:encryption-mode-ipsec",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-aes 192': {}, u'esp-des': {}, u'esp-gcm 192': {}, u'esp-aes 256': {}, u'esp-gcm 128': {}, u'esp-3des': {}, u'esp-gcm 256': {}, u'esp-aes 128': {}, u'esp-aes': {}},), is_leaf=True, yang_name="ipsec-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode-ipsec', is_config=True)""",
        })

    self.__ipsec_encryption_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipsec_encryption_type(self):
    self.__ipsec_encryption_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-aes 192': {}, u'esp-des': {}, u'esp-gcm 192': {}, u'esp-aes 256': {}, u'esp-gcm 128': {}, u'esp-3des': {}, u'esp-gcm 256': {}, u'esp-aes 128': {}, u'esp-aes': {}},), is_leaf=True, yang_name="ipsec-encryption-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='encryption-mode-ipsec', is_config=True)


  def _get_ipsec_authentication_type(self):
    """
    Getter method for ipsec_authentication_type, mapped from YANG variable /devices/device/transform_sets/transform_set/ipsec_authentication_type (authentication-mode-ipsec)

    YANG Description: esp-md5-hmac
esp-sha-hmac
esp-sha256-hmac
esp-sha384-hmac
esp-sha512-hmac

    """
    return self.__ipsec_authentication_type
      
  def _set_ipsec_authentication_type(self, v, load=False):
    """
    Setter method for ipsec_authentication_type, mapped from YANG variable /devices/device/transform_sets/transform_set/ipsec_authentication_type (authentication-mode-ipsec)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipsec_authentication_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipsec_authentication_type() directly.

    YANG Description: esp-md5-hmac
esp-sha-hmac
esp-sha256-hmac
esp-sha384-hmac
esp-sha512-hmac

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-sha384-hmac': {}, u'esp-sha512-hmac': {}, u'esp-sha256-hmac': {}, u'esp-md5-hmac': {}, u'esp-sha-hmac': {}},), is_leaf=True, yang_name="ipsec-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode-ipsec', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipsec_authentication_type must be of a type compatible with authentication-mode-ipsec""",
          'defined-type': "dmvpn:authentication-mode-ipsec",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-sha384-hmac': {}, u'esp-sha512-hmac': {}, u'esp-sha256-hmac': {}, u'esp-md5-hmac': {}, u'esp-sha-hmac': {}},), is_leaf=True, yang_name="ipsec-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode-ipsec', is_config=True)""",
        })

    self.__ipsec_authentication_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipsec_authentication_type(self):
    self.__ipsec_authentication_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'esp-sha384-hmac': {}, u'esp-sha512-hmac': {}, u'esp-sha256-hmac': {}, u'esp-md5-hmac': {}, u'esp-sha-hmac': {}},), is_leaf=True, yang_name="ipsec-authentication-type", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='authentication-mode-ipsec', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /devices/device/transform_sets/transform_set/mode (transform-mode)

    YANG Description: transport
tunnel

    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /devices/device/transform_sets/transform_set/mode (transform-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: transport
tunnel

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tunnel': {}, u'transport': {}},), is_leaf=True, yang_name="mode", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='transform-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with transform-mode""",
          'defined-type': "dmvpn:transform-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tunnel': {}, u'transport': {}},), is_leaf=True, yang_name="mode", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='transform-mode', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'tunnel': {}, u'transport': {}},), is_leaf=True, yang_name="mode", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='transform-mode', is_config=True)

  transform_set = __builtin__.property(_get_transform_set, _set_transform_set)
  ipsec_encryption_type = __builtin__.property(_get_ipsec_encryption_type, _set_ipsec_encryption_type)
  ipsec_authentication_type = __builtin__.property(_get_ipsec_authentication_type, _set_ipsec_authentication_type)
  mode = __builtin__.property(_get_mode, _set_mode)


  _pyangbind_elements = collections.OrderedDict([('transform_set', transform_set), ('ipsec_encryption_type', ipsec_encryption_type), ('ipsec_authentication_type', ipsec_authentication_type), ('mode', mode), ])


