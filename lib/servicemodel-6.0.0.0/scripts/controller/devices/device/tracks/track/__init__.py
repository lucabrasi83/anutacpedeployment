
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import object_list
class track(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/tracks/track. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__track_number','__track_type','__ip_type','__entry_number','__list_type','__boolean_type','__delay_down_time','__delay_up_time','__object_list',)

  _yang_name = 'track'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__boolean_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'and': {}, u'or': {}},), default=unicode("or"), is_leaf=True, yang_name="boolean-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__delay_up_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-up-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__track_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ip': {}, u'list': {}},), default=unicode("ip"), is_leaf=True, yang_name="track-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__object_list = YANGDynClass(base=YANGListType("object_number",object_list.object_list, yang_name="object-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='object-number'), is_container='list', yang_name="object-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__track_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1000']}), is_leaf=True, yang_name="track-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__list_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'threshold': {}, u'boolean': {}},), default=unicode("boolean"), is_leaf=True, yang_name="list-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__entry_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="entry-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__ip_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'route': {}, u'sla': {}},), default=unicode("sla"), is_leaf=True, yang_name="ip-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__delay_down_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-down-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'tracks', u'track']

  def _get_track_number(self):
    """
    Getter method for track_number, mapped from YANG variable /devices/device/tracks/track/track_number (uint16)

    YANG Description: Enter number with in the range: 0..1000
    """
    return self.__track_number
      
  def _set_track_number(self, v, load=False):
    """
    Setter method for track_number, mapped from YANG variable /devices/device/tracks/track/track_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track_number() directly.

    YANG Description: Enter number with in the range: 0..1000
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1000']}), is_leaf=True, yang_name="track-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1000']}), is_leaf=True, yang_name="track-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__track_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track_number(self):
    self.__track_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..1000']}), is_leaf=True, yang_name="track-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_track_type(self):
    """
    Getter method for track_type, mapped from YANG variable /devices/device/tracks/track/track_type (enumeration)

    YANG Description: object type to be tracked
    """
    return self.__track_type
      
  def _set_track_type(self, v, load=False):
    """
    Setter method for track_type, mapped from YANG variable /devices/device/tracks/track/track_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_track_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_track_type() directly.

    YANG Description: object type to be tracked
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ip': {}, u'list': {}},), default=unicode("ip"), is_leaf=True, yang_name="track-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """track_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ip': {}, u'list': {}},), default=unicode("ip"), is_leaf=True, yang_name="track-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__track_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_track_type(self):
    self.__track_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ip': {}, u'list': {}},), default=unicode("ip"), is_leaf=True, yang_name="track-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_ip_type(self):
    """
    Getter method for ip_type, mapped from YANG variable /devices/device/tracks/track/ip_type (enumeration)

    YANG Description: ip type
    """
    return self.__ip_type
      
  def _set_ip_type(self, v, load=False):
    """
    Setter method for ip_type, mapped from YANG variable /devices/device/tracks/track/ip_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_type() directly.

    YANG Description: ip type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'route': {}, u'sla': {}},), default=unicode("sla"), is_leaf=True, yang_name="ip-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'route': {}, u'sla': {}},), default=unicode("sla"), is_leaf=True, yang_name="ip-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__ip_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_type(self):
    self.__ip_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'route': {}, u'sla': {}},), default=unicode("sla"), is_leaf=True, yang_name="ip-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_entry_number(self):
    """
    Getter method for entry_number, mapped from YANG variable /devices/device/tracks/track/entry_number (leafref)

    YANG Description: entry-number
    """
    return self.__entry_number
      
  def _set_entry_number(self, v, load=False):
    """
    Setter method for entry_number, mapped from YANG variable /devices/device/tracks/track/entry_number (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entry_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entry_number() directly.

    YANG Description: entry-number
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entry-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entry_number must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entry-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__entry_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entry_number(self):
    self.__entry_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="entry-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_list_type(self):
    """
    Getter method for list_type, mapped from YANG variable /devices/device/tracks/track/list_type (enumeration)

    YANG Description: list type
    """
    return self.__list_type
      
  def _set_list_type(self, v, load=False):
    """
    Setter method for list_type, mapped from YANG variable /devices/device/tracks/track/list_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_list_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_list_type() directly.

    YANG Description: list type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'threshold': {}, u'boolean': {}},), default=unicode("boolean"), is_leaf=True, yang_name="list-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """list_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'threshold': {}, u'boolean': {}},), default=unicode("boolean"), is_leaf=True, yang_name="list-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__list_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_list_type(self):
    self.__list_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'threshold': {}, u'boolean': {}},), default=unicode("boolean"), is_leaf=True, yang_name="list-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_boolean_type(self):
    """
    Getter method for boolean_type, mapped from YANG variable /devices/device/tracks/track/boolean_type (enumeration)

    YANG Description: boolean type
    """
    return self.__boolean_type
      
  def _set_boolean_type(self, v, load=False):
    """
    Setter method for boolean_type, mapped from YANG variable /devices/device/tracks/track/boolean_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_boolean_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_boolean_type() directly.

    YANG Description: boolean type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'and': {}, u'or': {}},), default=unicode("or"), is_leaf=True, yang_name="boolean-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """boolean_type must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'and': {}, u'or': {}},), default=unicode("or"), is_leaf=True, yang_name="boolean-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__boolean_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_boolean_type(self):
    self.__boolean_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'and': {}, u'or': {}},), default=unicode("or"), is_leaf=True, yang_name="boolean-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_delay_down_time(self):
    """
    Getter method for delay_down_time, mapped from YANG variable /devices/device/tracks/track/delay_down_time (uint16)

    YANG Description: delay-down-time to change notification
    """
    return self.__delay_down_time
      
  def _set_delay_down_time(self, v, load=False):
    """
    Setter method for delay_down_time, mapped from YANG variable /devices/device/tracks/track/delay_down_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_down_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_down_time() directly.

    YANG Description: delay-down-time to change notification
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-down-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_down_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-down-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__delay_down_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_down_time(self):
    self.__delay_down_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-down-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_delay_up_time(self):
    """
    Getter method for delay_up_time, mapped from YANG variable /devices/device/tracks/track/delay_up_time (uint16)

    YANG Description: delay-up-time to change notification
    """
    return self.__delay_up_time
      
  def _set_delay_up_time(self, v, load=False):
    """
    Setter method for delay_up_time, mapped from YANG variable /devices/device/tracks/track/delay_up_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_up_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_up_time() directly.

    YANG Description: delay-up-time to change notification
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-up-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_up_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-up-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__delay_up_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_up_time(self):
    self.__delay_up_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="delay-up-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_object_list(self):
    """
    Getter method for object_list, mapped from YANG variable /devices/device/tracks/track/object_list (list)
    """
    return self.__object_list
      
  def _set_object_list(self, v, load=False):
    """
    Setter method for object_list, mapped from YANG variable /devices/device/tracks/track/object_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_object_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_object_list() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("object_number",object_list.object_list, yang_name="object-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='object-number'), is_container='list', yang_name="object-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """object_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("object_number",object_list.object_list, yang_name="object-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='object-number'), is_container='list', yang_name="object-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__object_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_object_list(self):
    self.__object_list = YANGDynClass(base=YANGListType("object_number",object_list.object_list, yang_name="object-list", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='object-number'), is_container='list', yang_name="object-list", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  track_number = __builtin__.property(_get_track_number, _set_track_number)
  track_type = __builtin__.property(_get_track_type, _set_track_type)
  ip_type = __builtin__.property(_get_ip_type, _set_ip_type)
  entry_number = __builtin__.property(_get_entry_number, _set_entry_number)
  list_type = __builtin__.property(_get_list_type, _set_list_type)
  boolean_type = __builtin__.property(_get_boolean_type, _set_boolean_type)
  delay_down_time = __builtin__.property(_get_delay_down_time, _set_delay_down_time)
  delay_up_time = __builtin__.property(_get_delay_up_time, _set_delay_up_time)
  object_list = __builtin__.property(_get_object_list, _set_object_list)


  _pyangbind_elements = collections.OrderedDict([('track_number', track_number), ('track_type', track_type), ('ip_type', ip_type), ('entry_number', entry_number), ('list_type', list_type), ('boolean_type', boolean_type), ('delay_down_time', delay_down_time), ('delay_up_time', delay_up_time), ('object_list', object_list), ])


