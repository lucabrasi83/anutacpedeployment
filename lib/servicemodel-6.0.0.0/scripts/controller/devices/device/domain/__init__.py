
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import mcbr
import monitor_interval_dscp
class domain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/domain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__role','__domain_name','__vrf_name','__transit_id','__source_interface','__site_prefix_list','__load_balance','__advanced','__channel_unreachable_timer','__enterprise_prefix_list','__hub_ip','__master_ip','__password','__mcbr','__monitor_interval_dscp',)

  _yang_name = 'domain'
  _module_name = 'dmvpn'
  _namespace = 'http://anutanetworks.com/dmvpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__load_balance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="load-balance", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__enterprise_prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__site_prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    self.__transit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transit-id", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    self.__channel_unreachable_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel-unreachable-timer", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint16', is_config=True)
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__monitor_interval_dscp = YANGDynClass(base=YANGListType("dscp",monitor_interval_dscp.monitor_interval_dscp, yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='dscp'), is_container='list', yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    self.__role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transit': {}, u'mcbr': {}, u'border-router': {}, u'hub-master': {}},), is_leaf=True, yang_name="role", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='enumeration', is_config=True)
    self.__master_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="master-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)
    self.__mcbr = YANGDynClass(base=YANGListType("source_interface_border",mcbr.mcbr, yang_name="mcbr", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-interface-border'), is_container='list', yang_name="mcbr", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)
    self.__hub_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="hub-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)
    self.__advanced = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advanced", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'domain']

  def _get_role(self):
    """
    Getter method for role, mapped from YANG variable /devices/device/domain/role (enumeration)

    YANG Description: hub-master
transit
mcbr
border-router

    """
    return self.__role
      
  def _set_role(self, v, load=False):
    """
    Setter method for role, mapped from YANG variable /devices/device/domain/role (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role() directly.

    YANG Description: hub-master
transit
mcbr
border-router

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transit': {}, u'mcbr': {}, u'border-router': {}, u'hub-master': {}},), is_leaf=True, yang_name="role", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role must be of a type compatible with enumeration""",
          'defined-type': "dmvpn:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transit': {}, u'mcbr': {}, u'border-router': {}, u'hub-master': {}},), is_leaf=True, yang_name="role", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='enumeration', is_config=True)""",
        })

    self.__role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role(self):
    self.__role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transit': {}, u'mcbr': {}, u'border-router': {}, u'hub-master': {}},), is_leaf=True, yang_name="role", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='enumeration', is_config=True)


  def _get_domain_name(self):
    """
    Getter method for domain_name, mapped from YANG variable /devices/device/domain/domain_name (string)

    YANG Description: string
    """
    return self.__domain_name
      
  def _set_domain_name(self, v, load=False):
    """
    Setter method for domain_name, mapped from YANG variable /devices/device/domain/domain_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_name(self):
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_vrf_name(self):
    """
    Getter method for vrf_name, mapped from YANG variable /devices/device/domain/vrf_name (leafref)

    YANG Description: vrf-name
    """
    return self.__vrf_name
      
  def _set_vrf_name(self, v, load=False):
    """
    Setter method for vrf_name, mapped from YANG variable /devices/device/domain/vrf_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_name() directly.

    YANG Description: vrf-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_name(self):
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_transit_id(self):
    """
    Getter method for transit_id, mapped from YANG variable /devices/device/domain/transit_id (uint32)

    YANG Description: 0..4294967295
    """
    return self.__transit_id
      
  def _set_transit_id(self, v, load=False):
    """
    Setter method for transit_id, mapped from YANG variable /devices/device/domain/transit_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transit_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transit_id() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transit-id", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transit_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transit-id", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)""",
        })

    self.__transit_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transit_id(self):
    self.__transit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="transit-id", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint32', is_config=True)


  def _get_source_interface(self):
    """
    Getter method for source_interface, mapped from YANG variable /devices/device/domain/source_interface (leafref)

    YANG Description: source-interface
    """
    return self.__source_interface
      
  def _set_source_interface(self, v, load=False):
    """
    Setter method for source_interface, mapped from YANG variable /devices/device/domain/source_interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_interface() directly.

    YANG Description: source-interface
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-interface", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__source_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_interface(self):
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_site_prefix_list(self):
    """
    Getter method for site_prefix_list, mapped from YANG variable /devices/device/domain/site_prefix_list (leafref)

    YANG Description: site-prefix-list
    """
    return self.__site_prefix_list
      
  def _set_site_prefix_list(self, v, load=False):
    """
    Setter method for site_prefix_list, mapped from YANG variable /devices/device/domain/site_prefix_list (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_prefix_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_prefix_list() directly.

    YANG Description: site-prefix-list
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="site-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_prefix_list must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="site-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__site_prefix_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_prefix_list(self):
    self.__site_prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_load_balance(self):
    """
    Getter method for load_balance, mapped from YANG variable /devices/device/domain/load_balance (boolean)

    YANG Description: load-balance: True/False
    """
    return self.__load_balance
      
  def _set_load_balance(self, v, load=False):
    """
    Setter method for load_balance, mapped from YANG variable /devices/device/domain/load_balance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_load_balance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_load_balance() directly.

    YANG Description: load-balance: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="load-balance", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """load_balance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="load-balance", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)""",
        })

    self.__load_balance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_load_balance(self):
    self.__load_balance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="load-balance", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)


  def _get_advanced(self):
    """
    Getter method for advanced, mapped from YANG variable /devices/device/domain/advanced (boolean)

    YANG Description: advanced: True/False
    """
    return self.__advanced
      
  def _set_advanced(self, v, load=False):
    """
    Setter method for advanced, mapped from YANG variable /devices/device/domain/advanced (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advanced is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advanced() directly.

    YANG Description: advanced: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="advanced", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advanced must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advanced", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)""",
        })

    self.__advanced = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advanced(self):
    self.__advanced = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advanced", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='boolean', is_config=True)


  def _get_channel_unreachable_timer(self):
    """
    Getter method for channel_unreachable_timer, mapped from YANG variable /devices/device/domain/channel_unreachable_timer (uint16)

    YANG Description: 0..65535
    """
    return self.__channel_unreachable_timer
      
  def _set_channel_unreachable_timer(self, v, load=False):
    """
    Setter method for channel_unreachable_timer, mapped from YANG variable /devices/device/domain/channel_unreachable_timer (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_channel_unreachable_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_channel_unreachable_timer() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel-unreachable-timer", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """channel_unreachable_timer must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel-unreachable-timer", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint16', is_config=True)""",
        })

    self.__channel_unreachable_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_channel_unreachable_timer(self):
    self.__channel_unreachable_timer = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="channel-unreachable-timer", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='uint16', is_config=True)


  def _get_enterprise_prefix_list(self):
    """
    Getter method for enterprise_prefix_list, mapped from YANG variable /devices/device/domain/enterprise_prefix_list (leafref)

    YANG Description: enterprise-prefix-list
    """
    return self.__enterprise_prefix_list
      
  def _set_enterprise_prefix_list(self, v, load=False):
    """
    Setter method for enterprise_prefix_list, mapped from YANG variable /devices/device/domain/enterprise_prefix_list (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enterprise_prefix_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enterprise_prefix_list() directly.

    YANG Description: enterprise-prefix-list
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="enterprise-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enterprise_prefix_list must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)""",
        })

    self.__enterprise_prefix_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enterprise_prefix_list(self):
    self.__enterprise_prefix_list = YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix-list", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='leafref', is_config=True)


  def _get_hub_ip(self):
    """
    Getter method for hub_ip, mapped from YANG variable /devices/device/domain/hub_ip (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__hub_ip
      
  def _set_hub_ip(self, v, load=False):
    """
    Setter method for hub_ip, mapped from YANG variable /devices/device/domain/hub_ip (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hub_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hub_ip() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="hub-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hub_ip must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="hub-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__hub_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hub_ip(self):
    self.__hub_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="hub-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)


  def _get_master_ip(self):
    """
    Getter method for master_ip, mapped from YANG variable /devices/device/domain/master_ip (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__master_ip
      
  def _set_master_ip(self, v, load=False):
    """
    Setter method for master_ip, mapped from YANG variable /devices/device/domain/master_ip (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_master_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_master_ip() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="master-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """master_ip must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="master-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__master_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_master_ip(self):
    self.__master_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="master-ip", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='inet:ip-address', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /devices/device/domain/password (string)

    YANG Description: string
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /devices/device/domain/password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="password", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='string', is_config=True)


  def _get_mcbr(self):
    """
    Getter method for mcbr, mapped from YANG variable /devices/device/domain/mcbr (list)
    """
    return self.__mcbr
      
  def _set_mcbr(self, v, load=False):
    """
    Setter method for mcbr, mapped from YANG variable /devices/device/domain/mcbr (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mcbr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mcbr() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("source_interface_border",mcbr.mcbr, yang_name="mcbr", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-interface-border'), is_container='list', yang_name="mcbr", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mcbr must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("source_interface_border",mcbr.mcbr, yang_name="mcbr", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-interface-border'), is_container='list', yang_name="mcbr", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)""",
        })

    self.__mcbr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mcbr(self):
    self.__mcbr = YANGDynClass(base=YANGListType("source_interface_border",mcbr.mcbr, yang_name="mcbr", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='source-interface-border'), is_container='list', yang_name="mcbr", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)


  def _get_monitor_interval_dscp(self):
    """
    Getter method for monitor_interval_dscp, mapped from YANG variable /devices/device/domain/monitor_interval_dscp (list)
    """
    return self.__monitor_interval_dscp
      
  def _set_monitor_interval_dscp(self, v, load=False):
    """
    Setter method for monitor_interval_dscp, mapped from YANG variable /devices/device/domain/monitor_interval_dscp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_monitor_interval_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_monitor_interval_dscp() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("dscp",monitor_interval_dscp.monitor_interval_dscp, yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='dscp'), is_container='list', yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """monitor_interval_dscp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("dscp",monitor_interval_dscp.monitor_interval_dscp, yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='dscp'), is_container='list', yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)""",
        })

    self.__monitor_interval_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_monitor_interval_dscp(self):
    self.__monitor_interval_dscp = YANGDynClass(base=YANGListType("dscp",monitor_interval_dscp.monitor_interval_dscp, yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='dscp'), is_container='list', yang_name="monitor-interval-dscp", module_name="dmvpn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dmvpn', defining_module='dmvpn', yang_type='list', is_config=True)

  role = __builtin__.property(_get_role, _set_role)
  domain_name = __builtin__.property(_get_domain_name, _set_domain_name)
  vrf_name = __builtin__.property(_get_vrf_name, _set_vrf_name)
  transit_id = __builtin__.property(_get_transit_id, _set_transit_id)
  source_interface = __builtin__.property(_get_source_interface, _set_source_interface)
  site_prefix_list = __builtin__.property(_get_site_prefix_list, _set_site_prefix_list)
  load_balance = __builtin__.property(_get_load_balance, _set_load_balance)
  advanced = __builtin__.property(_get_advanced, _set_advanced)
  channel_unreachable_timer = __builtin__.property(_get_channel_unreachable_timer, _set_channel_unreachable_timer)
  enterprise_prefix_list = __builtin__.property(_get_enterprise_prefix_list, _set_enterprise_prefix_list)
  hub_ip = __builtin__.property(_get_hub_ip, _set_hub_ip)
  master_ip = __builtin__.property(_get_master_ip, _set_master_ip)
  password = __builtin__.property(_get_password, _set_password)
  mcbr = __builtin__.property(_get_mcbr, _set_mcbr)
  monitor_interval_dscp = __builtin__.property(_get_monitor_interval_dscp, _set_monitor_interval_dscp)


  _pyangbind_elements = collections.OrderedDict([('role', role), ('domain_name', domain_name), ('vrf_name', vrf_name), ('transit_id', transit_id), ('source_interface', source_interface), ('site_prefix_list', site_prefix_list), ('load_balance', load_balance), ('advanced', advanced), ('channel_unreachable_timer', channel_unreachable_timer), ('enterprise_prefix_list', enterprise_prefix_list), ('hub_ip', hub_ip), ('master_ip', master_ip), ('password', password), ('mcbr', mcbr), ('monitor_interval_dscp', monitor_interval_dscp), ])


