
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class vn_service(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vn-services/vn-service. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__node_name','__node_type','__data_ipaddress','__vlan_name','__inside_vlan','__port_profile_name','__org_hierarchy','__security_profile_name','__mode',)

  _yang_name = 'vn-service'
  _module_name = 'l2features'
  _namespace = 'http://anutanetworks.com/l2features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__port_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__security_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="security-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__vlan_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__node_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__node_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-type", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3Mode': {}, u'L2Mode': {}},), is_leaf=True, yang_name="mode", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='mode-type', is_config=True)
    self.__data_ipaddress = YANGDynClass(base=unicode, is_leaf=True, yang_name="data-ipaddress", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    self.__inside_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="inside-vlan", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint32', is_config=True)
    self.__org_hierarchy = YANGDynClass(base=unicode, is_leaf=True, yang_name="org-hierarchy", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vn-services', u'vn-service']

  def _get_node_name(self):
    """
    Getter method for node_name, mapped from YANG variable /devices/device/vn_services/vn_service/node_name (string)

    YANG Description: string
    """
    return self.__node_name
      
  def _set_node_name(self, v, load=False):
    """
    Setter method for node_name, mapped from YANG variable /devices/device/vn_services/vn_service/node_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__node_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_name(self):
    self.__node_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_node_type(self):
    """
    Getter method for node_type, mapped from YANG variable /devices/device/vn_services/vn_service/node_type (string)

    YANG Description: string
    """
    return self.__node_type
      
  def _set_node_type(self, v, load=False):
    """
    Setter method for node_type, mapped from YANG variable /devices/device/vn_services/vn_service/node_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_type() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-type", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-type", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__node_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_type(self):
    self.__node_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-type", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_data_ipaddress(self):
    """
    Getter method for data_ipaddress, mapped from YANG variable /devices/device/vn_services/vn_service/data_ipaddress (string)

    YANG Description: string
    """
    return self.__data_ipaddress
      
  def _set_data_ipaddress(self, v, load=False):
    """
    Setter method for data_ipaddress, mapped from YANG variable /devices/device/vn_services/vn_service/data_ipaddress (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_ipaddress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_ipaddress() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="data-ipaddress", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_ipaddress must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="data-ipaddress", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__data_ipaddress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_ipaddress(self):
    self.__data_ipaddress = YANGDynClass(base=unicode, is_leaf=True, yang_name="data-ipaddress", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_vlan_name(self):
    """
    Getter method for vlan_name, mapped from YANG variable /devices/device/vn_services/vn_service/vlan_name (string)

    YANG Description: string
    """
    return self.__vlan_name
      
  def _set_vlan_name(self, v, load=False):
    """
    Setter method for vlan_name, mapped from YANG variable /devices/device/vn_services/vn_service/vlan_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vlan-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__vlan_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_name(self):
    self.__vlan_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vlan-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_inside_vlan(self):
    """
    Getter method for inside_vlan, mapped from YANG variable /devices/device/vn_services/vn_service/inside_vlan (uint32)

    YANG Description: 0..4294967295
    """
    return self.__inside_vlan
      
  def _set_inside_vlan(self, v, load=False):
    """
    Setter method for inside_vlan, mapped from YANG variable /devices/device/vn_services/vn_service/inside_vlan (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inside_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inside_vlan() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="inside-vlan", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inside_vlan must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="inside-vlan", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint32', is_config=True)""",
        })

    self.__inside_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inside_vlan(self):
    self.__inside_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="inside-vlan", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='uint32', is_config=True)


  def _get_port_profile_name(self):
    """
    Getter method for port_profile_name, mapped from YANG variable /devices/device/vn_services/vn_service/port_profile_name (string)

    YANG Description: string
    """
    return self.__port_profile_name
      
  def _set_port_profile_name(self, v, load=False):
    """
    Setter method for port_profile_name, mapped from YANG variable /devices/device/vn_services/vn_service/port_profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_profile_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__port_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_profile_name(self):
    self.__port_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_org_hierarchy(self):
    """
    Getter method for org_hierarchy, mapped from YANG variable /devices/device/vn_services/vn_service/org_hierarchy (string)

    YANG Description: string
    """
    return self.__org_hierarchy
      
  def _set_org_hierarchy(self, v, load=False):
    """
    Setter method for org_hierarchy, mapped from YANG variable /devices/device/vn_services/vn_service/org_hierarchy (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_org_hierarchy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_org_hierarchy() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="org-hierarchy", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """org_hierarchy must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="org-hierarchy", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__org_hierarchy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_org_hierarchy(self):
    self.__org_hierarchy = YANGDynClass(base=unicode, is_leaf=True, yang_name="org-hierarchy", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_security_profile_name(self):
    """
    Getter method for security_profile_name, mapped from YANG variable /devices/device/vn_services/vn_service/security_profile_name (string)

    YANG Description: string
    """
    return self.__security_profile_name
      
  def _set_security_profile_name(self, v, load=False):
    """
    Setter method for security_profile_name, mapped from YANG variable /devices/device/vn_services/vn_service/security_profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_security_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_security_profile_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="security-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """security_profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="security-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)""",
        })

    self.__security_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_security_profile_name(self):
    self.__security_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="security-profile-name", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='string', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /devices/device/vn_services/vn_service/mode (mode-type)

    YANG Description: L2Mode
L3Mode

    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /devices/device/vn_services/vn_service/mode (mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: L2Mode
L3Mode

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3Mode': {}, u'L2Mode': {}},), is_leaf=True, yang_name="mode", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with mode-type""",
          'defined-type': "l2features:mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3Mode': {}, u'L2Mode': {}},), is_leaf=True, yang_name="mode", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='mode-type', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'L3Mode': {}, u'L2Mode': {}},), is_leaf=True, yang_name="mode", module_name="l2features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l2features', defining_module='l2features', yang_type='mode-type', is_config=True)

  node_name = __builtin__.property(_get_node_name, _set_node_name)
  node_type = __builtin__.property(_get_node_type, _set_node_type)
  data_ipaddress = __builtin__.property(_get_data_ipaddress, _set_data_ipaddress)
  vlan_name = __builtin__.property(_get_vlan_name, _set_vlan_name)
  inside_vlan = __builtin__.property(_get_inside_vlan, _set_inside_vlan)
  port_profile_name = __builtin__.property(_get_port_profile_name, _set_port_profile_name)
  org_hierarchy = __builtin__.property(_get_org_hierarchy, _set_org_hierarchy)
  security_profile_name = __builtin__.property(_get_security_profile_name, _set_security_profile_name)
  mode = __builtin__.property(_get_mode, _set_mode)


  _pyangbind_elements = collections.OrderedDict([('node_name', node_name), ('node_type', node_type), ('data_ipaddress', data_ipaddress), ('vlan_name', vlan_name), ('inside_vlan', inside_vlan), ('port_profile_name', port_profile_name), ('org_hierarchy', org_hierarchy), ('security_profile_name', security_profile_name), ('mode', mode), ])


