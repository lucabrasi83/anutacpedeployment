
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import rt_import
import rt_export
import import_map
import export_map
import vrf_import
import vrf_export
import router_bgp
import router_ospf
import router_eigrp
import mpls
import bgp_advertise_policy
import static_routes
import routes
import prefix_sets
import ribs
import forwarding_options
import dhcp_servers
class vrf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__description','__rd','__vrf_definition_mode','__maximum_prefixes_ipv4','__import_route_policy','__export_route_policy','__vrf_table_label','__rt_import','__rt_export','__import_map','__export_map','__vrf_import','__vrf_export','__router_bgp','__router_ospf','__router_eigrp','__mpls','__bgp_advertise_policy','__static_routes','__routes','__prefix_sets','__ribs','__forwarding_options','__dhcp_servers',)

  _yang_name = 'vrf'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__export_route_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="export-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__router_eigrp = YANGDynClass(base=router_eigrp.router_eigrp, is_container='container', yang_name="router-eigrp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__import_route_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="import-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__vrf_definition_mode = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="vrf-definition-mode", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__vrf_table_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-table-label", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__rd = YANGDynClass(base=unicode, is_leaf=True, yang_name="rd", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__maximum_prefixes_ipv4 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-prefixes-ipv4", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__router_ospf = YANGDynClass(base=YANGListType("process_id",router_ospf.router_ospf, yang_name="router-ospf", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='process-id'), is_container='list', yang_name="router-ospf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__router_bgp = YANGDynClass(base=router_bgp.router_bgp, is_container='container', yang_name="router-bgp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__export_map = YANGDynClass(base=YANGListType("export_map",export_map.export_map, yang_name="export-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='export-map'), is_container='list', yang_name="export-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__dhcp_servers = YANGDynClass(base=dhcp_servers.dhcp_servers, is_container='container', yang_name="dhcp-servers", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__vrf_import = YANGDynClass(base=YANGListType("vrf_import",vrf_import.vrf_import, yang_name="vrf-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-import'), is_container='list', yang_name="vrf-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__bgp_advertise_policy = YANGDynClass(base=bgp_advertise_policy.bgp_advertise_policy, is_container='container', yang_name="bgp-advertise-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__static_routes = YANGDynClass(base=static_routes.static_routes, is_container='container', yang_name="static-routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__ribs = YANGDynClass(base=ribs.ribs, is_container='container', yang_name="ribs", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__prefix_sets = YANGDynClass(base=prefix_sets.prefix_sets, is_container='container', yang_name="prefix-sets", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__vrf_export = YANGDynClass(base=YANGListType("vrf_export",vrf_export.vrf_export, yang_name="vrf-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-export'), is_container='list', yang_name="vrf-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__rt_import = YANGDynClass(base=YANGListType("rt_import",rt_import.rt_import, yang_name="rt-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-import'), is_container='list', yang_name="rt-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__rt_export = YANGDynClass(base=YANGListType("rt_export",rt_export.rt_export, yang_name="rt-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-export'), is_container='list', yang_name="rt-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__routes = YANGDynClass(base=routes.routes, is_container='container', yang_name="routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__import_map = YANGDynClass(base=YANGListType("import_map",import_map.import_map, yang_name="import-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='import-map'), is_container='list', yang_name="import-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__forwarding_options = YANGDynClass(base=forwarding_options.forwarding_options, is_container='container', yang_name="forwarding-options", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/vrfs/vrf/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/vrfs/vrf/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /devices/device/vrfs/vrf/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /devices/device/vrfs/vrf/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_rd(self):
    """
    Getter method for rd, mapped from YANG variable /devices/device/vrfs/vrf/rd (string)

    YANG Description: string
    """
    return self.__rd
      
  def _set_rd(self, v, load=False):
    """
    Setter method for rd, mapped from YANG variable /devices/device/vrfs/vrf/rd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rd() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rd", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rd", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__rd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rd(self):
    self.__rd = YANGDynClass(base=unicode, is_leaf=True, yang_name="rd", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_vrf_definition_mode(self):
    """
    Getter method for vrf_definition_mode, mapped from YANG variable /devices/device/vrfs/vrf/vrf_definition_mode (boolean)

    YANG Description: vrf-definition-mode: True/False
    """
    return self.__vrf_definition_mode
      
  def _set_vrf_definition_mode(self, v, load=False):
    """
    Setter method for vrf_definition_mode, mapped from YANG variable /devices/device/vrfs/vrf/vrf_definition_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_definition_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_definition_mode() directly.

    YANG Description: vrf-definition-mode: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="vrf-definition-mode", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_definition_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="vrf-definition-mode", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__vrf_definition_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_definition_mode(self):
    self.__vrf_definition_mode = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="vrf-definition-mode", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_maximum_prefixes_ipv4(self):
    """
    Getter method for maximum_prefixes_ipv4, mapped from YANG variable /devices/device/vrfs/vrf/maximum_prefixes_ipv4 (uint32)

    YANG Description: 0..4294967295
    """
    return self.__maximum_prefixes_ipv4
      
  def _set_maximum_prefixes_ipv4(self, v, load=False):
    """
    Setter method for maximum_prefixes_ipv4, mapped from YANG variable /devices/device/vrfs/vrf/maximum_prefixes_ipv4 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_prefixes_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_prefixes_ipv4() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-prefixes-ipv4", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_prefixes_ipv4 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-prefixes-ipv4", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__maximum_prefixes_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_prefixes_ipv4(self):
    self.__maximum_prefixes_ipv4 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-prefixes-ipv4", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_import_route_policy(self):
    """
    Getter method for import_route_policy, mapped from YANG variable /devices/device/vrfs/vrf/import_route_policy (leafref)

    YANG Description: import-route-policy
    """
    return self.__import_route_policy
      
  def _set_import_route_policy(self, v, load=False):
    """
    Setter method for import_route_policy, mapped from YANG variable /devices/device/vrfs/vrf/import_route_policy (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_route_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_route_policy() directly.

    YANG Description: import-route-policy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="import-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_route_policy must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="import-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__import_route_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_route_policy(self):
    self.__import_route_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="import-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_export_route_policy(self):
    """
    Getter method for export_route_policy, mapped from YANG variable /devices/device/vrfs/vrf/export_route_policy (leafref)

    YANG Description: export-route-policy
    """
    return self.__export_route_policy
      
  def _set_export_route_policy(self, v, load=False):
    """
    Setter method for export_route_policy, mapped from YANG variable /devices/device/vrfs/vrf/export_route_policy (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_export_route_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_export_route_policy() directly.

    YANG Description: export-route-policy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="export-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """export_route_policy must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="export-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__export_route_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_export_route_policy(self):
    self.__export_route_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="export-route-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_vrf_table_label(self):
    """
    Getter method for vrf_table_label, mapped from YANG variable /devices/device/vrfs/vrf/vrf_table_label (boolean)

    YANG Description: vrf-table-label: True/False
    """
    return self.__vrf_table_label
      
  def _set_vrf_table_label(self, v, load=False):
    """
    Setter method for vrf_table_label, mapped from YANG variable /devices/device/vrfs/vrf/vrf_table_label (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_table_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_table_label() directly.

    YANG Description: vrf-table-label: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="vrf-table-label", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_table_label must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-table-label", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__vrf_table_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_table_label(self):
    self.__vrf_table_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-table-label", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_rt_import(self):
    """
    Getter method for rt_import, mapped from YANG variable /devices/device/vrfs/vrf/rt_import (list)
    """
    return self.__rt_import
      
  def _set_rt_import(self, v, load=False):
    """
    Setter method for rt_import, mapped from YANG variable /devices/device/vrfs/vrf/rt_import (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rt_import is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rt_import() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("rt_import",rt_import.rt_import, yang_name="rt-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-import'), is_container='list', yang_name="rt-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rt_import must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("rt_import",rt_import.rt_import, yang_name="rt-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-import'), is_container='list', yang_name="rt-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__rt_import = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rt_import(self):
    self.__rt_import = YANGDynClass(base=YANGListType("rt_import",rt_import.rt_import, yang_name="rt-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-import'), is_container='list', yang_name="rt-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_rt_export(self):
    """
    Getter method for rt_export, mapped from YANG variable /devices/device/vrfs/vrf/rt_export (list)
    """
    return self.__rt_export
      
  def _set_rt_export(self, v, load=False):
    """
    Setter method for rt_export, mapped from YANG variable /devices/device/vrfs/vrf/rt_export (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rt_export is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rt_export() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("rt_export",rt_export.rt_export, yang_name="rt-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-export'), is_container='list', yang_name="rt-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rt_export must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("rt_export",rt_export.rt_export, yang_name="rt-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-export'), is_container='list', yang_name="rt-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__rt_export = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rt_export(self):
    self.__rt_export = YANGDynClass(base=YANGListType("rt_export",rt_export.rt_export, yang_name="rt-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rt-export'), is_container='list', yang_name="rt-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_import_map(self):
    """
    Getter method for import_map, mapped from YANG variable /devices/device/vrfs/vrf/import_map (list)
    """
    return self.__import_map
      
  def _set_import_map(self, v, load=False):
    """
    Setter method for import_map, mapped from YANG variable /devices/device/vrfs/vrf/import_map (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_map() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("import_map",import_map.import_map, yang_name="import-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='import-map'), is_container='list', yang_name="import-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_map must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("import_map",import_map.import_map, yang_name="import-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='import-map'), is_container='list', yang_name="import-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__import_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_map(self):
    self.__import_map = YANGDynClass(base=YANGListType("import_map",import_map.import_map, yang_name="import-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='import-map'), is_container='list', yang_name="import-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_export_map(self):
    """
    Getter method for export_map, mapped from YANG variable /devices/device/vrfs/vrf/export_map (list)
    """
    return self.__export_map
      
  def _set_export_map(self, v, load=False):
    """
    Setter method for export_map, mapped from YANG variable /devices/device/vrfs/vrf/export_map (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_export_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_export_map() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("export_map",export_map.export_map, yang_name="export-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='export-map'), is_container='list', yang_name="export-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """export_map must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("export_map",export_map.export_map, yang_name="export-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='export-map'), is_container='list', yang_name="export-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__export_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_export_map(self):
    self.__export_map = YANGDynClass(base=YANGListType("export_map",export_map.export_map, yang_name="export-map", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='export-map'), is_container='list', yang_name="export-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_vrf_import(self):
    """
    Getter method for vrf_import, mapped from YANG variable /devices/device/vrfs/vrf/vrf_import (list)
    """
    return self.__vrf_import
      
  def _set_vrf_import(self, v, load=False):
    """
    Setter method for vrf_import, mapped from YANG variable /devices/device/vrfs/vrf/vrf_import (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_import is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_import() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("vrf_import",vrf_import.vrf_import, yang_name="vrf-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-import'), is_container='list', yang_name="vrf-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_import must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vrf_import",vrf_import.vrf_import, yang_name="vrf-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-import'), is_container='list', yang_name="vrf-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__vrf_import = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_import(self):
    self.__vrf_import = YANGDynClass(base=YANGListType("vrf_import",vrf_import.vrf_import, yang_name="vrf-import", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-import'), is_container='list', yang_name="vrf-import", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_vrf_export(self):
    """
    Getter method for vrf_export, mapped from YANG variable /devices/device/vrfs/vrf/vrf_export (list)
    """
    return self.__vrf_export
      
  def _set_vrf_export(self, v, load=False):
    """
    Setter method for vrf_export, mapped from YANG variable /devices/device/vrfs/vrf/vrf_export (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_export is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_export() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("vrf_export",vrf_export.vrf_export, yang_name="vrf-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-export'), is_container='list', yang_name="vrf-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_export must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vrf_export",vrf_export.vrf_export, yang_name="vrf-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-export'), is_container='list', yang_name="vrf-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__vrf_export = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_export(self):
    self.__vrf_export = YANGDynClass(base=YANGListType("vrf_export",vrf_export.vrf_export, yang_name="vrf-export", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vrf-export'), is_container='list', yang_name="vrf-export", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_router_bgp(self):
    """
    Getter method for router_bgp, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp (container)
    """
    return self.__router_bgp
      
  def _set_router_bgp(self, v, load=False):
    """
    Setter method for router_bgp, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_bgp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_bgp() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=router_bgp.router_bgp, is_container='container', yang_name="router-bgp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_bgp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=router_bgp.router_bgp, is_container='container', yang_name="router-bgp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__router_bgp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_bgp(self):
    self.__router_bgp = YANGDynClass(base=router_bgp.router_bgp, is_container='container', yang_name="router-bgp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_router_ospf(self):
    """
    Getter method for router_ospf, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf (list)
    """
    return self.__router_ospf
      
  def _set_router_ospf(self, v, load=False):
    """
    Setter method for router_ospf, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_ospf() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("process_id",router_ospf.router_ospf, yang_name="router-ospf", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='process-id'), is_container='list', yang_name="router-ospf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_ospf must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("process_id",router_ospf.router_ospf, yang_name="router-ospf", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='process-id'), is_container='list', yang_name="router-ospf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__router_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_ospf(self):
    self.__router_ospf = YANGDynClass(base=YANGListType("process_id",router_ospf.router_ospf, yang_name="router-ospf", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='process-id'), is_container='list', yang_name="router-ospf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_router_eigrp(self):
    """
    Getter method for router_eigrp, mapped from YANG variable /devices/device/vrfs/vrf/router_eigrp (container)
    """
    return self.__router_eigrp
      
  def _set_router_eigrp(self, v, load=False):
    """
    Setter method for router_eigrp, mapped from YANG variable /devices/device/vrfs/vrf/router_eigrp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_eigrp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_eigrp() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=router_eigrp.router_eigrp, is_container='container', yang_name="router-eigrp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_eigrp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=router_eigrp.router_eigrp, is_container='container', yang_name="router-eigrp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__router_eigrp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_eigrp(self):
    self.__router_eigrp = YANGDynClass(base=router_eigrp.router_eigrp, is_container='container', yang_name="router-eigrp", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_mpls(self):
    """
    Getter method for mpls, mapped from YANG variable /devices/device/vrfs/vrf/mpls (container)
    """
    return self.__mpls
      
  def _set_mpls(self, v, load=False):
    """
    Setter method for mpls, mapped from YANG variable /devices/device/vrfs/vrf/mpls (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=mpls.mpls, is_container='container', yang_name="mpls", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls(self):
    self.__mpls = YANGDynClass(base=mpls.mpls, is_container='container', yang_name="mpls", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_bgp_advertise_policy(self):
    """
    Getter method for bgp_advertise_policy, mapped from YANG variable /devices/device/vrfs/vrf/bgp_advertise_policy (container)
    """
    return self.__bgp_advertise_policy
      
  def _set_bgp_advertise_policy(self, v, load=False):
    """
    Setter method for bgp_advertise_policy, mapped from YANG variable /devices/device/vrfs/vrf/bgp_advertise_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp_advertise_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp_advertise_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=bgp_advertise_policy.bgp_advertise_policy, is_container='container', yang_name="bgp-advertise-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp_advertise_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bgp_advertise_policy.bgp_advertise_policy, is_container='container', yang_name="bgp-advertise-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__bgp_advertise_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp_advertise_policy(self):
    self.__bgp_advertise_policy = YANGDynClass(base=bgp_advertise_policy.bgp_advertise_policy, is_container='container', yang_name="bgp-advertise-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_static_routes(self):
    """
    Getter method for static_routes, mapped from YANG variable /devices/device/vrfs/vrf/static_routes (container)
    """
    return self.__static_routes
      
  def _set_static_routes(self, v, load=False):
    """
    Setter method for static_routes, mapped from YANG variable /devices/device/vrfs/vrf/static_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_static_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_static_routes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=static_routes.static_routes, is_container='container', yang_name="static-routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """static_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=static_routes.static_routes, is_container='container', yang_name="static-routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__static_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_static_routes(self):
    self.__static_routes = YANGDynClass(base=static_routes.static_routes, is_container='container', yang_name="static-routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_routes(self):
    """
    Getter method for routes, mapped from YANG variable /devices/device/vrfs/vrf/routes (container)
    """
    return self.__routes
      
  def _set_routes(self, v, load=False):
    """
    Setter method for routes, mapped from YANG variable /devices/device/vrfs/vrf/routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_routes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=routes.routes, is_container='container', yang_name="routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=routes.routes, is_container='container', yang_name="routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_routes(self):
    self.__routes = YANGDynClass(base=routes.routes, is_container='container', yang_name="routes", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_prefix_sets(self):
    """
    Getter method for prefix_sets, mapped from YANG variable /devices/device/vrfs/vrf/prefix_sets (container)
    """
    return self.__prefix_sets
      
  def _set_prefix_sets(self, v, load=False):
    """
    Setter method for prefix_sets, mapped from YANG variable /devices/device/vrfs/vrf/prefix_sets (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_sets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_sets() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=prefix_sets.prefix_sets, is_container='container', yang_name="prefix-sets", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_sets must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=prefix_sets.prefix_sets, is_container='container', yang_name="prefix-sets", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__prefix_sets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_sets(self):
    self.__prefix_sets = YANGDynClass(base=prefix_sets.prefix_sets, is_container='container', yang_name="prefix-sets", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_ribs(self):
    """
    Getter method for ribs, mapped from YANG variable /devices/device/vrfs/vrf/ribs (container)
    """
    return self.__ribs
      
  def _set_ribs(self, v, load=False):
    """
    Setter method for ribs, mapped from YANG variable /devices/device/vrfs/vrf/ribs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ribs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ribs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=ribs.ribs, is_container='container', yang_name="ribs", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ribs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ribs.ribs, is_container='container', yang_name="ribs", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__ribs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ribs(self):
    self.__ribs = YANGDynClass(base=ribs.ribs, is_container='container', yang_name="ribs", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_forwarding_options(self):
    """
    Getter method for forwarding_options, mapped from YANG variable /devices/device/vrfs/vrf/forwarding_options (container)
    """
    return self.__forwarding_options
      
  def _set_forwarding_options(self, v, load=False):
    """
    Setter method for forwarding_options, mapped from YANG variable /devices/device/vrfs/vrf/forwarding_options (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_options is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_options() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=forwarding_options.forwarding_options, is_container='container', yang_name="forwarding-options", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_options must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forwarding_options.forwarding_options, is_container='container', yang_name="forwarding-options", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__forwarding_options = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_options(self):
    self.__forwarding_options = YANGDynClass(base=forwarding_options.forwarding_options, is_container='container', yang_name="forwarding-options", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_dhcp_servers(self):
    """
    Getter method for dhcp_servers, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers (container)
    """
    return self.__dhcp_servers
      
  def _set_dhcp_servers(self, v, load=False):
    """
    Setter method for dhcp_servers, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_servers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_servers() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=dhcp_servers.dhcp_servers, is_container='container', yang_name="dhcp-servers", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_servers must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dhcp_servers.dhcp_servers, is_container='container', yang_name="dhcp-servers", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__dhcp_servers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_servers(self):
    self.__dhcp_servers = YANGDynClass(base=dhcp_servers.dhcp_servers, is_container='container', yang_name="dhcp-servers", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  rd = __builtin__.property(_get_rd, _set_rd)
  vrf_definition_mode = __builtin__.property(_get_vrf_definition_mode, _set_vrf_definition_mode)
  maximum_prefixes_ipv4 = __builtin__.property(_get_maximum_prefixes_ipv4, _set_maximum_prefixes_ipv4)
  import_route_policy = __builtin__.property(_get_import_route_policy, _set_import_route_policy)
  export_route_policy = __builtin__.property(_get_export_route_policy, _set_export_route_policy)
  vrf_table_label = __builtin__.property(_get_vrf_table_label, _set_vrf_table_label)
  rt_import = __builtin__.property(_get_rt_import, _set_rt_import)
  rt_export = __builtin__.property(_get_rt_export, _set_rt_export)
  import_map = __builtin__.property(_get_import_map, _set_import_map)
  export_map = __builtin__.property(_get_export_map, _set_export_map)
  vrf_import = __builtin__.property(_get_vrf_import, _set_vrf_import)
  vrf_export = __builtin__.property(_get_vrf_export, _set_vrf_export)
  router_bgp = __builtin__.property(_get_router_bgp, _set_router_bgp)
  router_ospf = __builtin__.property(_get_router_ospf, _set_router_ospf)
  router_eigrp = __builtin__.property(_get_router_eigrp, _set_router_eigrp)
  mpls = __builtin__.property(_get_mpls, _set_mpls)
  bgp_advertise_policy = __builtin__.property(_get_bgp_advertise_policy, _set_bgp_advertise_policy)
  static_routes = __builtin__.property(_get_static_routes, _set_static_routes)
  routes = __builtin__.property(_get_routes, _set_routes)
  prefix_sets = __builtin__.property(_get_prefix_sets, _set_prefix_sets)
  ribs = __builtin__.property(_get_ribs, _set_ribs)
  forwarding_options = __builtin__.property(_get_forwarding_options, _set_forwarding_options)
  dhcp_servers = __builtin__.property(_get_dhcp_servers, _set_dhcp_servers)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('description', description), ('rd', rd), ('vrf_definition_mode', vrf_definition_mode), ('maximum_prefixes_ipv4', maximum_prefixes_ipv4), ('import_route_policy', import_route_policy), ('export_route_policy', export_route_policy), ('vrf_table_label', vrf_table_label), ('rt_import', rt_import), ('rt_export', rt_export), ('import_map', import_map), ('export_map', export_map), ('vrf_import', vrf_import), ('vrf_export', vrf_export), ('router_bgp', router_bgp), ('router_ospf', router_ospf), ('router_eigrp', router_eigrp), ('mpls', mpls), ('bgp_advertise_policy', bgp_advertise_policy), ('static_routes', static_routes), ('routes', routes), ('prefix_sets', prefix_sets), ('ribs', ribs), ('forwarding_options', forwarding_options), ('dhcp_servers', dhcp_servers), ])


