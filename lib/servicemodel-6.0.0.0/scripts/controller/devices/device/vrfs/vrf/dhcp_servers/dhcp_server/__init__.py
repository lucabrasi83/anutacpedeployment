
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import excluded_address
class dhcp_server(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf/dhcp-servers/dhcp-server. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__interface_name','__pool_name','__pool_vrf','__network','__mask','__domain_name','__dhcp_server_ip','__dns_server_ip','__default_router','__start_ip','__end_ip','__lease','__excluded_address',)

  _yang_name = 'dhcp-server'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pool_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__network = YANGDynClass(base=unicode, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__dns_server_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="dns-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__default_router = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-router", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__excluded_address = YANGDynClass(base=YANGListType("low_ipaddress",excluded_address.excluded_address, yang_name="excluded-address", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='low-ipaddress'), is_container='list', yang_name="excluded-address", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__dhcp_server_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='inet:ip-address', is_config=True)
    self.__start_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__pool_vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-vrf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__end_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__lease = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lease", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf', u'dhcp-servers', u'dhcp-server']

  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/interface_name (string)

    YANG Description: string
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_pool_name(self):
    """
    Getter method for pool_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/pool_name (string)

    YANG Description: string
    """
    return self.__pool_name
      
  def _set_pool_name(self, v, load=False):
    """
    Setter method for pool_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/pool_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pool_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pool_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pool-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pool_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__pool_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pool_name(self):
    self.__pool_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_pool_vrf(self):
    """
    Getter method for pool_vrf, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/pool_vrf (string)

    YANG Description: string
    """
    return self.__pool_vrf
      
  def _set_pool_vrf(self, v, load=False):
    """
    Setter method for pool_vrf, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/pool_vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pool_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pool_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pool-vrf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pool_vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-vrf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__pool_vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pool_vrf(self):
    self.__pool_vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="pool-vrf", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/network (string)

    YANG Description: string
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/network (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=unicode, is_leaf=True, yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_mask(self):
    """
    Getter method for mask, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/mask (string)

    YANG Description: string
    """
    return self.__mask
      
  def _set_mask(self, v, load=False):
    """
    Setter method for mask, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/mask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mask() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mask", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mask(self):
    self.__mask = YANGDynClass(base=unicode, is_leaf=True, yang_name="mask", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_domain_name(self):
    """
    Getter method for domain_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/domain_name (string)

    YANG Description: string
    """
    return self.__domain_name
      
  def _set_domain_name(self, v, load=False):
    """
    Setter method for domain_name, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/domain_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_name(self):
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_dhcp_server_ip(self):
    """
    Getter method for dhcp_server_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/dhcp_server_ip (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__dhcp_server_ip
      
  def _set_dhcp_server_ip(self, v, load=False):
    """
    Setter method for dhcp_server_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/dhcp_server_ip (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_server_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_server_ip() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_server_ip must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__dhcp_server_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_server_ip(self):
    self.__dhcp_server_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="dhcp-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='inet:ip-address', is_config=True)


  def _get_dns_server_ip(self):
    """
    Getter method for dns_server_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/dns_server_ip (string)

    YANG Description: string
    """
    return self.__dns_server_ip
      
  def _set_dns_server_ip(self, v, load=False):
    """
    Setter method for dns_server_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/dns_server_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dns_server_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dns_server_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dns-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dns_server_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dns-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__dns_server_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dns_server_ip(self):
    self.__dns_server_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="dns-server-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_default_router(self):
    """
    Getter method for default_router, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/default_router (string)

    YANG Description: string
    """
    return self.__default_router
      
  def _set_default_router(self, v, load=False):
    """
    Setter method for default_router, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/default_router (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_router is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_router() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-router", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_router must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-router", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__default_router = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_router(self):
    self.__default_router = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-router", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_start_ip(self):
    """
    Getter method for start_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/start_ip (string)

    YANG Description: string
    """
    return self.__start_ip
      
  def _set_start_ip(self, v, load=False):
    """
    Setter method for start_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/start_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__start_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_ip(self):
    self.__start_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_end_ip(self):
    """
    Getter method for end_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/end_ip (string)

    YANG Description: string
    """
    return self.__end_ip
      
  def _set_end_ip(self, v, load=False):
    """
    Setter method for end_ip, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/end_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="end-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="end-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__end_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_ip(self):
    self.__end_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-ip", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_lease(self):
    """
    Getter method for lease, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/lease (uint32)

    YANG Description: 0..4294967295
    """
    return self.__lease
      
  def _set_lease(self, v, load=False):
    """
    Setter method for lease, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/lease (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lease is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lease() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lease", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lease must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lease", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__lease = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lease(self):
    self.__lease = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lease", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_excluded_address(self):
    """
    Getter method for excluded_address, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/excluded_address (list)
    """
    return self.__excluded_address
      
  def _set_excluded_address(self, v, load=False):
    """
    Setter method for excluded_address, mapped from YANG variable /devices/device/vrfs/vrf/dhcp_servers/dhcp_server/excluded_address (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_excluded_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_excluded_address() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("low_ipaddress",excluded_address.excluded_address, yang_name="excluded-address", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='low-ipaddress'), is_container='list', yang_name="excluded-address", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """excluded_address must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("low_ipaddress",excluded_address.excluded_address, yang_name="excluded-address", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='low-ipaddress'), is_container='list', yang_name="excluded-address", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__excluded_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_excluded_address(self):
    self.__excluded_address = YANGDynClass(base=YANGListType("low_ipaddress",excluded_address.excluded_address, yang_name="excluded-address", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='low-ipaddress'), is_container='list', yang_name="excluded-address", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  pool_name = __builtin__.property(_get_pool_name, _set_pool_name)
  pool_vrf = __builtin__.property(_get_pool_vrf, _set_pool_vrf)
  network = __builtin__.property(_get_network, _set_network)
  mask = __builtin__.property(_get_mask, _set_mask)
  domain_name = __builtin__.property(_get_domain_name, _set_domain_name)
  dhcp_server_ip = __builtin__.property(_get_dhcp_server_ip, _set_dhcp_server_ip)
  dns_server_ip = __builtin__.property(_get_dns_server_ip, _set_dns_server_ip)
  default_router = __builtin__.property(_get_default_router, _set_default_router)
  start_ip = __builtin__.property(_get_start_ip, _set_start_ip)
  end_ip = __builtin__.property(_get_end_ip, _set_end_ip)
  lease = __builtin__.property(_get_lease, _set_lease)
  excluded_address = __builtin__.property(_get_excluded_address, _set_excluded_address)


  _pyangbind_elements = collections.OrderedDict([('interface_name', interface_name), ('pool_name', pool_name), ('pool_vrf', pool_vrf), ('network', network), ('mask', mask), ('domain_name', domain_name), ('dhcp_server_ip', dhcp_server_ip), ('dns_server_ip', dns_server_ip), ('default_router', default_router), ('start_ip', start_ip), ('end_ip', end_ip), ('lease', lease), ('excluded_address', excluded_address), ])


