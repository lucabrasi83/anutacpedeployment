
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import neighbor
import neighbor_ipv6
import import_policy
import export_policy
class group(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf/router-bgp/group. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__family','__auth_key','__type','__remote_as','__metric_out','__hold_time','__prefix_limit_max','__tear_down','__idle_timeout','__advertise_inactive','__remove_private','__graceful_restart','__log_updown','__rib_group','__cluster_id','__neighbor','__neighbor_ipv6','__import_policy','__export_policy',)

  _yang_name = 'group'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__export_policy = YANGDynClass(base=YANGListType("name",export_policy.export_policy, yang_name="export-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="export-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__family = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), default=unicode("inet"), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='family-type', is_config=True)
    self.__remote_as = YANGDynClass(base=unicode, is_leaf=True, yang_name="remote-as", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__prefix_limit_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="prefix-limit-max", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__hold_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="hold-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__neighbor_ipv6 = YANGDynClass(base=YANGListType("ipv6_address",neighbor_ipv6.neighbor_ipv6, yang_name="neighbor-ipv6", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address'), is_container='list', yang_name="neighbor-ipv6", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__idle_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="idle-timeout", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__neighbor = YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__tear_down = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tear-down", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__metric_out = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="metric-out", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__log_updown = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log-updown", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__cluster_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__import_policy = YANGDynClass(base=YANGListType("name",import_policy.import_policy, yang_name="import-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="import-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__graceful_restart = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__remove_private = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remove-private", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {}, u'external': {}},), is_leaf=True, yang_name="type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='neighbor-type', is_config=True)
    self.__rib_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="rib-group", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__advertise_inactive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advertise-inactive", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf', u'router-bgp', u'group']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_family(self):
    """
    Getter method for family, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/family (family-type)

    YANG Description: inet
inet6

    """
    return self.__family
      
  def _set_family(self, v, load=False):
    """
    Setter method for family, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/family (family-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_family() directly.

    YANG Description: inet
inet6

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), default=unicode("inet"), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='family-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """family must be of a type compatible with family-type""",
          'defined-type': "l3features:family-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), default=unicode("inet"), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='family-type', is_config=True)""",
        })

    self.__family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_family(self):
    self.__family = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'inet6': {}, u'inet': {}},), default=unicode("inet"), is_leaf=True, yang_name="family", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='family-type', is_config=True)


  def _get_auth_key(self):
    """
    Getter method for auth_key, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/auth_key (string)

    YANG Description: string
    """
    return self.__auth_key
      
  def _set_auth_key(self, v, load=False):
    """
    Setter method for auth_key, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/auth_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-key", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__auth_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key(self):
    self.__auth_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/type (neighbor-type)

    YANG Description: internal
external

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/type (neighbor-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: internal
external

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {}, u'external': {}},), is_leaf=True, yang_name="type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='neighbor-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with neighbor-type""",
          'defined-type': "l3features:neighbor-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {}, u'external': {}},), is_leaf=True, yang_name="type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='neighbor-type', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {}, u'external': {}},), is_leaf=True, yang_name="type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='neighbor-type', is_config=True)


  def _get_remote_as(self):
    """
    Getter method for remote_as, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/remote_as (as-number)

    YANG Description: string
    """
    return self.__remote_as
      
  def _set_remote_as(self, v, load=False):
    """
    Setter method for remote_as, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/remote_as (as-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_as is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_as() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="remote-as", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_as must be of a type compatible with as-number""",
          'defined-type': "l3features:as-number",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="remote-as", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)""",
        })

    self.__remote_as = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_as(self):
    self.__remote_as = YANGDynClass(base=unicode, is_leaf=True, yang_name="remote-as", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)


  def _get_metric_out(self):
    """
    Getter method for metric_out, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/metric_out (uint16)

    YANG Description: 0..65535
    """
    return self.__metric_out
      
  def _set_metric_out(self, v, load=False):
    """
    Setter method for metric_out, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/metric_out (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric_out() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="metric-out", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric_out must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="metric-out", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__metric_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric_out(self):
    self.__metric_out = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="metric-out", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_hold_time(self):
    """
    Getter method for hold_time, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/hold_time (uint16)

    YANG Description: 0..65535
    """
    return self.__hold_time
      
  def _set_hold_time(self, v, load=False):
    """
    Setter method for hold_time, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/hold_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hold_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hold_time() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="hold-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hold_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="hold-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__hold_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hold_time(self):
    self.__hold_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="hold-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_prefix_limit_max(self):
    """
    Getter method for prefix_limit_max, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/prefix_limit_max (uint16)

    YANG Description: 0..65535
    """
    return self.__prefix_limit_max
      
  def _set_prefix_limit_max(self, v, load=False):
    """
    Setter method for prefix_limit_max, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/prefix_limit_max (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_limit_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_limit_max() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="prefix-limit-max", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_limit_max must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="prefix-limit-max", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__prefix_limit_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_limit_max(self):
    self.__prefix_limit_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="prefix-limit-max", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_tear_down(self):
    """
    Getter method for tear_down, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/tear_down (uint16)

    YANG Description: 0..65535
    """
    return self.__tear_down
      
  def _set_tear_down(self, v, load=False):
    """
    Setter method for tear_down, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/tear_down (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tear_down is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tear_down() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tear-down", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tear_down must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tear-down", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__tear_down = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tear_down(self):
    self.__tear_down = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tear-down", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_idle_timeout(self):
    """
    Getter method for idle_timeout, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/idle_timeout (uint16)

    YANG Description: 0..65535
    """
    return self.__idle_timeout
      
  def _set_idle_timeout(self, v, load=False):
    """
    Setter method for idle_timeout, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/idle_timeout (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_idle_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_idle_timeout() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="idle-timeout", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """idle_timeout must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="idle-timeout", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__idle_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_idle_timeout(self):
    self.__idle_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="idle-timeout", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_advertise_inactive(self):
    """
    Getter method for advertise_inactive, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/advertise_inactive (boolean)

    YANG Description: advertise-inactive: True/False
    """
    return self.__advertise_inactive
      
  def _set_advertise_inactive(self, v, load=False):
    """
    Setter method for advertise_inactive, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/advertise_inactive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advertise_inactive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advertise_inactive() directly.

    YANG Description: advertise-inactive: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="advertise-inactive", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advertise_inactive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advertise-inactive", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__advertise_inactive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advertise_inactive(self):
    self.__advertise_inactive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="advertise-inactive", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_remove_private(self):
    """
    Getter method for remove_private, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/remove_private (boolean)

    YANG Description: remove-private: True/False
    """
    return self.__remove_private
      
  def _set_remove_private(self, v, load=False):
    """
    Setter method for remove_private, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/remove_private (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remove_private is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remove_private() directly.

    YANG Description: remove-private: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remove-private", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remove_private must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remove-private", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__remove_private = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remove_private(self):
    self.__remove_private = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remove-private", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_graceful_restart(self):
    """
    Getter method for graceful_restart, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/graceful_restart (boolean)

    YANG Description: graceful-restart: True/False
    """
    return self.__graceful_restart
      
  def _set_graceful_restart(self, v, load=False):
    """
    Setter method for graceful_restart, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/graceful_restart (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_graceful_restart is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_graceful_restart() directly.

    YANG Description: graceful-restart: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """graceful_restart must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__graceful_restart = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_graceful_restart(self):
    self.__graceful_restart = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_log_updown(self):
    """
    Getter method for log_updown, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/log_updown (boolean)

    YANG Description: log-updown: True/False
    """
    return self.__log_updown
      
  def _set_log_updown(self, v, load=False):
    """
    Setter method for log_updown, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/log_updown (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_updown is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_updown() directly.

    YANG Description: log-updown: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="log-updown", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_updown must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log-updown", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__log_updown = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_updown(self):
    self.__log_updown = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log-updown", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_rib_group(self):
    """
    Getter method for rib_group, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/rib_group (string)

    YANG Description: string
    """
    return self.__rib_group
      
  def _set_rib_group(self, v, load=False):
    """
    Setter method for rib_group, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/rib_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rib_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rib_group() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rib-group", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rib_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rib-group", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__rib_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rib_group(self):
    self.__rib_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="rib-group", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_cluster_id(self):
    """
    Getter method for cluster_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/cluster_id (string)

    YANG Description: string
    """
    return self.__cluster_id
      
  def _set_cluster_id(self, v, load=False):
    """
    Setter method for cluster_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/cluster_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__cluster_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_id(self):
    self.__cluster_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_neighbor(self):
    """
    Getter method for neighbor, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/neighbor (list)
    """
    return self.__neighbor
      
  def _set_neighbor(self, v, load=False):
    """
    Setter method for neighbor, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/neighbor (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor(self):
    self.__neighbor = YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_neighbor_ipv6(self):
    """
    Getter method for neighbor_ipv6, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/neighbor_ipv6 (list)
    """
    return self.__neighbor_ipv6
      
  def _set_neighbor_ipv6(self, v, load=False):
    """
    Setter method for neighbor_ipv6, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/neighbor_ipv6 (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_ipv6() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ipv6_address",neighbor_ipv6.neighbor_ipv6, yang_name="neighbor-ipv6", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address'), is_container='list', yang_name="neighbor-ipv6", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_ipv6 must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipv6_address",neighbor_ipv6.neighbor_ipv6, yang_name="neighbor-ipv6", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address'), is_container='list', yang_name="neighbor-ipv6", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__neighbor_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_ipv6(self):
    self.__neighbor_ipv6 = YANGDynClass(base=YANGListType("ipv6_address",neighbor_ipv6.neighbor_ipv6, yang_name="neighbor-ipv6", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address'), is_container='list', yang_name="neighbor-ipv6", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_import_policy(self):
    """
    Getter method for import_policy, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/import_policy (list)
    """
    return self.__import_policy
      
  def _set_import_policy(self, v, load=False):
    """
    Setter method for import_policy, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/import_policy (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",import_policy.import_policy, yang_name="import-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="import-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_policy must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",import_policy.import_policy, yang_name="import-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="import-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__import_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_policy(self):
    self.__import_policy = YANGDynClass(base=YANGListType("name",import_policy.import_policy, yang_name="import-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="import-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_export_policy(self):
    """
    Getter method for export_policy, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/export_policy (list)
    """
    return self.__export_policy
      
  def _set_export_policy(self, v, load=False):
    """
    Setter method for export_policy, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/group/export_policy (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_export_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_export_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",export_policy.export_policy, yang_name="export-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="export-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """export_policy must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",export_policy.export_policy, yang_name="export-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="export-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__export_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_export_policy(self):
    self.__export_policy = YANGDynClass(base=YANGListType("name",export_policy.export_policy, yang_name="export-policy", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="export-policy", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  family = __builtin__.property(_get_family, _set_family)
  auth_key = __builtin__.property(_get_auth_key, _set_auth_key)
  type = __builtin__.property(_get_type, _set_type)
  remote_as = __builtin__.property(_get_remote_as, _set_remote_as)
  metric_out = __builtin__.property(_get_metric_out, _set_metric_out)
  hold_time = __builtin__.property(_get_hold_time, _set_hold_time)
  prefix_limit_max = __builtin__.property(_get_prefix_limit_max, _set_prefix_limit_max)
  tear_down = __builtin__.property(_get_tear_down, _set_tear_down)
  idle_timeout = __builtin__.property(_get_idle_timeout, _set_idle_timeout)
  advertise_inactive = __builtin__.property(_get_advertise_inactive, _set_advertise_inactive)
  remove_private = __builtin__.property(_get_remove_private, _set_remove_private)
  graceful_restart = __builtin__.property(_get_graceful_restart, _set_graceful_restart)
  log_updown = __builtin__.property(_get_log_updown, _set_log_updown)
  rib_group = __builtin__.property(_get_rib_group, _set_rib_group)
  cluster_id = __builtin__.property(_get_cluster_id, _set_cluster_id)
  neighbor = __builtin__.property(_get_neighbor, _set_neighbor)
  neighbor_ipv6 = __builtin__.property(_get_neighbor_ipv6, _set_neighbor_ipv6)
  import_policy = __builtin__.property(_get_import_policy, _set_import_policy)
  export_policy = __builtin__.property(_get_export_policy, _set_export_policy)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('family', family), ('auth_key', auth_key), ('type', type), ('remote_as', remote_as), ('metric_out', metric_out), ('hold_time', hold_time), ('prefix_limit_max', prefix_limit_max), ('tear_down', tear_down), ('idle_timeout', idle_timeout), ('advertise_inactive', advertise_inactive), ('remove_private', remove_private), ('graceful_restart', graceful_restart), ('log_updown', log_updown), ('rib_group', rib_group), ('cluster_id', cluster_id), ('neighbor', neighbor), ('neighbor_ipv6', neighbor_ipv6), ('import_policy', import_policy), ('export_policy', export_policy), ])


