
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ospf_redistribute(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf/router-ospf/redistribute/ospf-redistribute. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__protocol','__route_map','__metric1','__metric2','__value1','__value2','__bgp_as_number','__process_id_entry','__eigrp_as_number','__metric','__metric_type','__subnet','__tag','__nssa_only',)

  _yang_name = 'ospf-redistribute'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__process_id_entry = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id-entry", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    self.__subnet = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rip': {}, u'bgp': {}, u'eigrp': {}, u'static': {}, u'connected': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='ospf-protocol', is_config=True)
    self.__eigrp_as_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="eigrp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    self.__route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__bgp_as_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="bgp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    self.__metric2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    self.__metric1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__value2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__value1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__metric_type = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="metric-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='metric-type-def', is_config=True)
    self.__nssa_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nssa-only", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf', u'router-ospf', u'redistribute', u'ospf-redistribute']

  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/protocol (ospf-protocol)

    YANG Description: connected
static
bgp
rip
ospf
eigrp

    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/protocol (ospf-protocol)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: connected
static
bgp
rip
ospf
eigrp

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rip': {}, u'bgp': {}, u'eigrp': {}, u'static': {}, u'connected': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='ospf-protocol', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with ospf-protocol""",
          'defined-type': "l3features:ospf-protocol",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rip': {}, u'bgp': {}, u'eigrp': {}, u'static': {}, u'connected': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='ospf-protocol', is_config=True)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'rip': {}, u'bgp': {}, u'eigrp': {}, u'static': {}, u'connected': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='ospf-protocol', is_config=True)


  def _get_route_map(self):
    """
    Getter method for route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/route_map (leafref)

    YANG Description: route-map
    """
    return self.__route_map
      
  def _set_route_map(self, v, load=False):
    """
    Setter method for route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/route_map (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_map() directly.

    YANG Description: route-map
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_map must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__route_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_map(self):
    self.__route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_metric1(self):
    """
    Getter method for metric1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric1 (string)

    YANG Description: string
    """
    return self.__metric1
      
  def _set_metric1(self, v, load=False):
    """
    Setter method for metric1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)""",
        })

    self.__metric1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric1(self):
    self.__metric1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)


  def _get_metric2(self):
    """
    Getter method for metric2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric2 (string)

    YANG Description: string
    """
    return self.__metric2
      
  def _set_metric2(self, v, load=False):
    """
    Setter method for metric2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)""",
        })

    self.__metric2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric2(self):
    self.__metric2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)


  def _get_value1(self):
    """
    Getter method for value1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/value1 (string)

    YANG Description: string
    """
    return self.__value1
      
  def _set_value1(self, v, load=False):
    """
    Setter method for value1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/value1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__value1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value1(self):
    self.__value1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_value2(self):
    """
    Getter method for value2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/value2 (string)

    YANG Description: string
    """
    return self.__value2
      
  def _set_value2(self, v, load=False):
    """
    Setter method for value2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/value2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__value2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value2(self):
    self.__value2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_bgp_as_number(self):
    """
    Getter method for bgp_as_number, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/bgp_as_number (as-number)

    YANG Description: string
    """
    return self.__bgp_as_number
      
  def _set_bgp_as_number(self, v, load=False):
    """
    Setter method for bgp_as_number, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/bgp_as_number (as-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp_as_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp_as_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="bgp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp_as_number must be of a type compatible with as-number""",
          'defined-type': "l3features:as-number",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="bgp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)""",
        })

    self.__bgp_as_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp_as_number(self):
    self.__bgp_as_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="bgp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)


  def _get_process_id_entry(self):
    """
    Getter method for process_id_entry, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/process_id_entry (process-id)

    YANG Description: 1..65535
    """
    return self.__process_id_entry
      
  def _set_process_id_entry(self, v, load=False):
    """
    Setter method for process_id_entry, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/process_id_entry (process-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_process_id_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_process_id_entry() directly.

    YANG Description: 1..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id-entry", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """process_id_entry must be of a type compatible with process-id""",
          'defined-type': "l3features:process-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id-entry", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)""",
        })

    self.__process_id_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_process_id_entry(self):
    self.__process_id_entry = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id-entry", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)


  def _get_eigrp_as_number(self):
    """
    Getter method for eigrp_as_number, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/eigrp_as_number (as-number)

    YANG Description: string
    """
    return self.__eigrp_as_number
      
  def _set_eigrp_as_number(self, v, load=False):
    """
    Setter method for eigrp_as_number, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/eigrp_as_number (as-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eigrp_as_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eigrp_as_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="eigrp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eigrp_as_number must be of a type compatible with as-number""",
          'defined-type': "l3features:as-number",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="eigrp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)""",
        })

    self.__eigrp_as_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eigrp_as_number(self):
    self.__eigrp_as_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="eigrp-as-number", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='as-number', is_config=True)


  def _get_metric(self):
    """
    Getter method for metric, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric (uint32)

    YANG Description: 0..4294967295
    """
    return self.__metric
      
  def _set_metric(self, v, load=False):
    """
    Setter method for metric, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric(self):
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_metric_type(self):
    """
    Getter method for metric_type, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric_type (metric-type-def)

    YANG Description: 1..2
    """
    return self.__metric_type
      
  def _set_metric_type(self, v, load=False):
    """
    Setter method for metric_type, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/metric_type (metric-type-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric_type() directly.

    YANG Description: 1..2
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="metric-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='metric-type-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric_type must be of a type compatible with metric-type-def""",
          'defined-type': "l3features:metric-type-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="metric-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='metric-type-def', is_config=True)""",
        })

    self.__metric_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric_type(self):
    self.__metric_type = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="metric-type", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='metric-type-def', is_config=True)


  def _get_subnet(self):
    """
    Getter method for subnet, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/subnet (boolean)

    YANG Description: subnet: True/False
    """
    return self.__subnet
      
  def _set_subnet(self, v, load=False):
    """
    Setter method for subnet, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/subnet (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subnet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subnet() directly.

    YANG Description: subnet: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subnet must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__subnet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subnet(self):
    self.__subnet = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="subnet", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/tag (uint32)

    YANG Description: 0..4294967295
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/tag (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="tag", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_nssa_only(self):
    """
    Getter method for nssa_only, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/nssa_only (boolean)

    YANG Description: nssa-only: True/False
    """
    return self.__nssa_only
      
  def _set_nssa_only(self, v, load=False):
    """
    Setter method for nssa_only, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute/ospf_redistribute/nssa_only (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nssa_only is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nssa_only() directly.

    YANG Description: nssa-only: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="nssa-only", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nssa_only must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nssa-only", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__nssa_only = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nssa_only(self):
    self.__nssa_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nssa-only", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)

  protocol = __builtin__.property(_get_protocol, _set_protocol)
  route_map = __builtin__.property(_get_route_map, _set_route_map)
  metric1 = __builtin__.property(_get_metric1)
  metric2 = __builtin__.property(_get_metric2)
  value1 = __builtin__.property(_get_value1, _set_value1)
  value2 = __builtin__.property(_get_value2, _set_value2)
  bgp_as_number = __builtin__.property(_get_bgp_as_number, _set_bgp_as_number)
  process_id_entry = __builtin__.property(_get_process_id_entry, _set_process_id_entry)
  eigrp_as_number = __builtin__.property(_get_eigrp_as_number, _set_eigrp_as_number)
  metric = __builtin__.property(_get_metric, _set_metric)
  metric_type = __builtin__.property(_get_metric_type, _set_metric_type)
  subnet = __builtin__.property(_get_subnet, _set_subnet)
  tag = __builtin__.property(_get_tag, _set_tag)
  nssa_only = __builtin__.property(_get_nssa_only, _set_nssa_only)


  _pyangbind_elements = collections.OrderedDict([('protocol', protocol), ('route_map', route_map), ('metric1', metric1), ('metric2', metric2), ('value1', value1), ('value2', value2), ('bgp_as_number', bgp_as_number), ('process_id_entry', process_id_entry), ('eigrp_as_number', eigrp_as_number), ('metric', metric), ('metric_type', metric_type), ('subnet', subnet), ('tag', tag), ('nssa_only', nssa_only), ])


