
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import neighbor
import interface
import network
import redistribute
import summary
import passive_interface
import inject_default_route
class router_ospf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf/router-ospf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__process_id','__router_id','__vrf_lite','__reference_bandwidth','__context','__community','__access','__acl_name','__maximum_paths','__default_information','__default_inf_metric','__default_inf_metric1','__default_inf_metric2','__default_inf_value','__default_inf_value1','__default_inf_value2','__dis_list_route_map','__dis_list_route_update','__neighbor','__interface','__network','__redistribute','__summary','__passive_interface','__inject_default_route',)

  _yang_name = 'router-ospf'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__default_inf_metric = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__network = YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__inject_default_route = YANGDynClass(base=inject_default_route.inject_default_route, is_container='container', yang_name="inject-default-route", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__access = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ro': {}, u'rw': {}},), is_leaf=True, yang_name="access", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='access-id', is_config=True)
    self.__passive_interface = YANGDynClass(base=passive_interface.passive_interface, is_container='container', yang_name="passive-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__router_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__acl_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__default_information = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-information", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__default_inf_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__reference_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967']}), is_leaf=True, yang_name="reference-bandwidth", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    self.__dis_list_route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="dis-list-route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    self.__interface = YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__vrf_lite = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-lite", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__dis_list_route_update = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="dis-list-route-update", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='route-update', is_config=True)
    self.__default_inf_metric1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    self.__redistribute = YANGDynClass(base=redistribute.redistribute, is_container='container', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__default_inf_metric2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    self.__maximum_paths = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="maximum-paths", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    self.__summary = YANGDynClass(base=summary.summary, is_container='container', yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    self.__default_inf_value1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__neighbor = YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    self.__default_inf_value2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf', u'router-ospf']

  def _get_process_id(self):
    """
    Getter method for process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/process_id (process-id)

    YANG Description: 1..65535
    """
    return self.__process_id
      
  def _set_process_id(self, v, load=False):
    """
    Setter method for process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/process_id (process-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_process_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_process_id() directly.

    YANG Description: 1..65535
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """process_id must be of a type compatible with process-id""",
          'defined-type': "l3features:process-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)""",
        })

    self.__process_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_process_id(self):
    self.__process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)


  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/router_id (string)

    YANG Description: string
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/router_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="router-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_vrf_lite(self):
    """
    Getter method for vrf_lite, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/vrf_lite (boolean)

    YANG Description: vrf-lite: True/False
    """
    return self.__vrf_lite
      
  def _set_vrf_lite(self, v, load=False):
    """
    Setter method for vrf_lite, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/vrf_lite (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_lite is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_lite() directly.

    YANG Description: vrf-lite: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="vrf-lite", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_lite must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-lite", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__vrf_lite = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_lite(self):
    self.__vrf_lite = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vrf-lite", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_reference_bandwidth(self):
    """
    Getter method for reference_bandwidth, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/reference_bandwidth (uint32)

    YANG Description: 1..4294967
    """
    return self.__reference_bandwidth
      
  def _set_reference_bandwidth(self, v, load=False):
    """
    Setter method for reference_bandwidth, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/reference_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reference_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reference_bandwidth() directly.

    YANG Description: 1..4294967
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967']}), is_leaf=True, yang_name="reference-bandwidth", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reference_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967']}), is_leaf=True, yang_name="reference-bandwidth", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)""",
        })

    self.__reference_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reference_bandwidth(self):
    self.__reference_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967']}), is_leaf=True, yang_name="reference-bandwidth", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint32', is_config=True)


  def _get_context(self):
    """
    Getter method for context, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/context (string)

    YANG Description: string
    """
    return self.__context
      
  def _set_context(self, v, load=False):
    """
    Setter method for context, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/context (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="context", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context(self):
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_community(self):
    """
    Getter method for community, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/community (string)

    YANG Description: string
    """
    return self.__community
      
  def _set_community(self, v, load=False):
    """
    Setter method for community, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community(self):
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_access(self):
    """
    Getter method for access, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/access (access-id)

    YANG Description: ro
rw

    """
    return self.__access
      
  def _set_access(self, v, load=False):
    """
    Setter method for access, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/access (access-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access() directly.

    YANG Description: ro
rw

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ro': {}, u'rw': {}},), is_leaf=True, yang_name="access", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='access-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access must be of a type compatible with access-id""",
          'defined-type': "l3features:access-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ro': {}, u'rw': {}},), is_leaf=True, yang_name="access", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='access-id', is_config=True)""",
        })

    self.__access = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access(self):
    self.__access = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ro': {}, u'rw': {}},), is_leaf=True, yang_name="access", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='access-id', is_config=True)


  def _get_acl_name(self):
    """
    Getter method for acl_name, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/acl_name (string)

    YANG Description: string
    """
    return self.__acl_name
      
  def _set_acl_name(self, v, load=False):
    """
    Setter method for acl_name, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/acl_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="acl-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__acl_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_name(self):
    self.__acl_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_maximum_paths(self):
    """
    Getter method for maximum_paths, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/maximum_paths (uint16)

    YANG Description: 1..32
    """
    return self.__maximum_paths
      
  def _set_maximum_paths(self, v, load=False):
    """
    Setter method for maximum_paths, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/maximum_paths (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_paths is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_paths() directly.

    YANG Description: 1..32
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="maximum-paths", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_paths must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="maximum-paths", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)""",
        })

    self.__maximum_paths = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_paths(self):
    self.__maximum_paths = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="maximum-paths", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint16', is_config=True)


  def _get_default_information(self):
    """
    Getter method for default_information, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_information (boolean)

    YANG Description: default-information: True/False
    """
    return self.__default_information
      
  def _set_default_information(self, v, load=False):
    """
    Setter method for default_information, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_information (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_information is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_information() directly.

    YANG Description: default-information: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="default-information", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_information must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-information", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__default_information = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_information(self):
    self.__default_information = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-information", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_default_inf_metric(self):
    """
    Getter method for default_inf_metric, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric (string)

    YANG Description: string
    """
    return self.__default_inf_metric
      
  def _set_default_inf_metric(self, v, load=False):
    """
    Setter method for default_inf_metric, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_metric() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_metric must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)""",
        })

    self.__default_inf_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_metric(self):
    self.__default_inf_metric = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)


  def _get_default_inf_metric1(self):
    """
    Getter method for default_inf_metric1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric1 (string)

    YANG Description: string
    """
    return self.__default_inf_metric1
      
  def _set_default_inf_metric1(self, v, load=False):
    """
    Setter method for default_inf_metric1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_metric1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_metric1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_metric1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)""",
        })

    self.__default_inf_metric1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_metric1(self):
    self.__default_inf_metric1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)


  def _get_default_inf_metric2(self):
    """
    Getter method for default_inf_metric2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric2 (string)

    YANG Description: string
    """
    return self.__default_inf_metric2
      
  def _set_default_inf_metric2(self, v, load=False):
    """
    Setter method for default_inf_metric2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_metric2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_metric2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_metric2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_metric2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)""",
        })

    self.__default_inf_metric2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_metric2(self):
    self.__default_inf_metric2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-metric2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=False)


  def _get_default_inf_value(self):
    """
    Getter method for default_inf_value, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value (string)

    YANG Description: string
    """
    return self.__default_inf_value
      
  def _set_default_inf_value(self, v, load=False):
    """
    Setter method for default_inf_value, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__default_inf_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_value(self):
    self.__default_inf_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_default_inf_value1(self):
    """
    Getter method for default_inf_value1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value1 (string)

    YANG Description: string
    """
    return self.__default_inf_value1
      
  def _set_default_inf_value1(self, v, load=False):
    """
    Setter method for default_inf_value1, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_value1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_value1() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_value1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__default_inf_value1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_value1(self):
    self.__default_inf_value1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_default_inf_value2(self):
    """
    Getter method for default_inf_value2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value2 (string)

    YANG Description: string
    """
    return self.__default_inf_value2
      
  def _set_default_inf_value2(self, v, load=False):
    """
    Setter method for default_inf_value2, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/default_inf_value2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_inf_value2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_inf_value2() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-inf-value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_inf_value2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__default_inf_value2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_inf_value2(self):
    self.__default_inf_value2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-inf-value2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_dis_list_route_map(self):
    """
    Getter method for dis_list_route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/dis_list_route_map (string)

    YANG Description: string
    """
    return self.__dis_list_route_map
      
  def _set_dis_list_route_map(self, v, load=False):
    """
    Setter method for dis_list_route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/dis_list_route_map (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dis_list_route_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dis_list_route_map() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dis-list-route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dis_list_route_map must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dis-list-route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__dis_list_route_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dis_list_route_map(self):
    self.__dis_list_route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="dis-list-route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_dis_list_route_update(self):
    """
    Getter method for dis_list_route_update, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/dis_list_route_update (route-update)

    YANG Description: in
out

    """
    return self.__dis_list_route_update
      
  def _set_dis_list_route_update(self, v, load=False):
    """
    Setter method for dis_list_route_update, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/dis_list_route_update (route-update)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dis_list_route_update is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dis_list_route_update() directly.

    YANG Description: in
out

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="dis-list-route-update", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='route-update', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dis_list_route_update must be of a type compatible with route-update""",
          'defined-type': "l3features:route-update",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="dis-list-route-update", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='route-update', is_config=True)""",
        })

    self.__dis_list_route_update = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dis_list_route_update(self):
    self.__dis_list_route_update = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="dis-list-route-update", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='route-update', is_config=True)


  def _get_neighbor(self):
    """
    Getter method for neighbor, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/neighbor (list)
    """
    return self.__neighbor
      
  def _set_neighbor(self, v, load=False):
    """
    Setter method for neighbor, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/neighbor (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor(self):
    self.__neighbor = YANGDynClass(base=YANGListType("ip_address",neighbor.neighbor, yang_name="neighbor", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="neighbor", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/interface (list)
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_name",interface.interface, yang_name="interface", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name'), is_container='list', yang_name="interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_network(self):
    """
    Getter method for network, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/network (list)
    """
    return self.__network
      
  def _set_network(self, v, load=False):
    """
    Setter method for network, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/network (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_network is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_network() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """network must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)""",
        })

    self.__network = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_network(self):
    self.__network = YANGDynClass(base=YANGListType("ip_address",network.network, yang_name="network", module_name="l3features", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-address'), is_container='list', yang_name="network", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='list', is_config=True)


  def _get_redistribute(self):
    """
    Getter method for redistribute, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute (container)
    """
    return self.__redistribute
      
  def _set_redistribute(self, v, load=False):
    """
    Setter method for redistribute, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/redistribute (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redistribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redistribute() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=redistribute.redistribute, is_container='container', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redistribute must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redistribute.redistribute, is_container='container', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__redistribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redistribute(self):
    self.__redistribute = YANGDynClass(base=redistribute.redistribute, is_container='container', yang_name="redistribute", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_summary(self):
    """
    Getter method for summary, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/summary (container)
    """
    return self.__summary
      
  def _set_summary(self, v, load=False):
    """
    Setter method for summary, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/summary (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=summary.summary, is_container='container', yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=summary.summary, is_container='container', yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary(self):
    self.__summary = YANGDynClass(base=summary.summary, is_container='container', yang_name="summary", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_passive_interface(self):
    """
    Getter method for passive_interface, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/passive_interface (container)
    """
    return self.__passive_interface
      
  def _set_passive_interface(self, v, load=False):
    """
    Setter method for passive_interface, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/passive_interface (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_passive_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_passive_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=passive_interface.passive_interface, is_container='container', yang_name="passive-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """passive_interface must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=passive_interface.passive_interface, is_container='container', yang_name="passive-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__passive_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_passive_interface(self):
    self.__passive_interface = YANGDynClass(base=passive_interface.passive_interface, is_container='container', yang_name="passive-interface", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)


  def _get_inject_default_route(self):
    """
    Getter method for inject_default_route, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/inject_default_route (container)
    """
    return self.__inject_default_route
      
  def _set_inject_default_route(self, v, load=False):
    """
    Setter method for inject_default_route, mapped from YANG variable /devices/device/vrfs/vrf/router_ospf/inject_default_route (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inject_default_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inject_default_route() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=inject_default_route.inject_default_route, is_container='container', yang_name="inject-default-route", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inject_default_route must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inject_default_route.inject_default_route, is_container='container', yang_name="inject-default-route", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)""",
        })

    self.__inject_default_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inject_default_route(self):
    self.__inject_default_route = YANGDynClass(base=inject_default_route.inject_default_route, is_container='container', yang_name="inject-default-route", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='container', is_config=True)

  process_id = __builtin__.property(_get_process_id, _set_process_id)
  router_id = __builtin__.property(_get_router_id, _set_router_id)
  vrf_lite = __builtin__.property(_get_vrf_lite, _set_vrf_lite)
  reference_bandwidth = __builtin__.property(_get_reference_bandwidth, _set_reference_bandwidth)
  context = __builtin__.property(_get_context, _set_context)
  community = __builtin__.property(_get_community, _set_community)
  access = __builtin__.property(_get_access, _set_access)
  acl_name = __builtin__.property(_get_acl_name, _set_acl_name)
  maximum_paths = __builtin__.property(_get_maximum_paths, _set_maximum_paths)
  default_information = __builtin__.property(_get_default_information, _set_default_information)
  default_inf_metric = __builtin__.property(_get_default_inf_metric)
  default_inf_metric1 = __builtin__.property(_get_default_inf_metric1)
  default_inf_metric2 = __builtin__.property(_get_default_inf_metric2)
  default_inf_value = __builtin__.property(_get_default_inf_value, _set_default_inf_value)
  default_inf_value1 = __builtin__.property(_get_default_inf_value1, _set_default_inf_value1)
  default_inf_value2 = __builtin__.property(_get_default_inf_value2, _set_default_inf_value2)
  dis_list_route_map = __builtin__.property(_get_dis_list_route_map, _set_dis_list_route_map)
  dis_list_route_update = __builtin__.property(_get_dis_list_route_update, _set_dis_list_route_update)
  neighbor = __builtin__.property(_get_neighbor, _set_neighbor)
  interface = __builtin__.property(_get_interface, _set_interface)
  network = __builtin__.property(_get_network, _set_network)
  redistribute = __builtin__.property(_get_redistribute, _set_redistribute)
  summary = __builtin__.property(_get_summary, _set_summary)
  passive_interface = __builtin__.property(_get_passive_interface, _set_passive_interface)
  inject_default_route = __builtin__.property(_get_inject_default_route, _set_inject_default_route)


  _pyangbind_elements = collections.OrderedDict([('process_id', process_id), ('router_id', router_id), ('vrf_lite', vrf_lite), ('reference_bandwidth', reference_bandwidth), ('context', context), ('community', community), ('access', access), ('acl_name', acl_name), ('maximum_paths', maximum_paths), ('default_information', default_information), ('default_inf_metric', default_inf_metric), ('default_inf_metric1', default_inf_metric1), ('default_inf_metric2', default_inf_metric2), ('default_inf_value', default_inf_value), ('default_inf_value1', default_inf_value1), ('default_inf_value2', default_inf_value2), ('dis_list_route_map', dis_list_route_map), ('dis_list_route_update', dis_list_route_update), ('neighbor', neighbor), ('interface', interface), ('network', network), ('redistribute', redistribute), ('summary', summary), ('passive_interface', passive_interface), ('inject_default_route', inject_default_route), ])


