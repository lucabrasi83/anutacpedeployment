
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class redistribute(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vrfs/vrf/router-bgp/redistribute. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__protocol','__ospf_process_id','__eigrp_process_id','__metric','__route_map','__disable_sync','__graceful_restart','__redistribute_connected','__ospf_internal','__ospf_external1','__ospf_external2',)

  _yang_name = 'redistribute'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static-connected': {}, u'redistribute-connected': {}, u'rip': {}, u'bgp': {}, u'eigrp': {}, u'connected': {}, u'static': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='protocol', is_config=True)
    self.__graceful_restart = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__ospf_external2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)
    self.__route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='redistribute-metric', is_config=True)
    self.__disable_sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-sync", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__redistribute_connected = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistribute-connected", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__eigrp_process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="eigrp-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    self.__ospf_process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="ospf-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    self.__ospf_internal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-internal", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    self.__ospf_external1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vrfs', u'vrf', u'router-bgp', u'redistribute']

  def _get_protocol(self):
    """
    Getter method for protocol, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/protocol (protocol)

    YANG Description: static
rip
ospf
bgp
eigrp
connected
static-connected
redistribute-connected

    """
    return self.__protocol
      
  def _set_protocol(self, v, load=False):
    """
    Setter method for protocol, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/protocol (protocol)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol() directly.

    YANG Description: static
rip
ospf
bgp
eigrp
connected
static-connected
redistribute-connected

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static-connected': {}, u'redistribute-connected': {}, u'rip': {}, u'bgp': {}, u'eigrp': {}, u'connected': {}, u'static': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='protocol', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol must be of a type compatible with protocol""",
          'defined-type': "l3features:protocol",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static-connected': {}, u'redistribute-connected': {}, u'rip': {}, u'bgp': {}, u'eigrp': {}, u'connected': {}, u'static': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='protocol', is_config=True)""",
        })

    self.__protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol(self):
    self.__protocol = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static-connected': {}, u'redistribute-connected': {}, u'rip': {}, u'bgp': {}, u'eigrp': {}, u'connected': {}, u'static': {}, u'ospf': {}},), is_leaf=True, yang_name="protocol", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='protocol', is_config=True)


  def _get_ospf_process_id(self):
    """
    Getter method for ospf_process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_process_id (process-id)

    YANG Description: 1..65535
    """
    return self.__ospf_process_id
      
  def _set_ospf_process_id(self, v, load=False):
    """
    Setter method for ospf_process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_process_id (process-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_process_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_process_id() directly.

    YANG Description: 1..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="ospf-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_process_id must be of a type compatible with process-id""",
          'defined-type': "l3features:process-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="ospf-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)""",
        })

    self.__ospf_process_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_process_id(self):
    self.__ospf_process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="ospf-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)


  def _get_eigrp_process_id(self):
    """
    Getter method for eigrp_process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/eigrp_process_id (process-id)

    YANG Description: 1..65535
    """
    return self.__eigrp_process_id
      
  def _set_eigrp_process_id(self, v, load=False):
    """
    Setter method for eigrp_process_id, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/eigrp_process_id (process-id)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eigrp_process_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eigrp_process_id() directly.

    YANG Description: 1..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="eigrp-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eigrp_process_id must be of a type compatible with process-id""",
          'defined-type': "l3features:process-id",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="eigrp-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)""",
        })

    self.__eigrp_process_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eigrp_process_id(self):
    self.__eigrp_process_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="eigrp-process-id", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='process-id', is_config=True)


  def _get_metric(self):
    """
    Getter method for metric, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/metric (redistribute-metric)

    YANG Description: 0..4294967295
    """
    return self.__metric
      
  def _set_metric(self, v, load=False):
    """
    Setter method for metric, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/metric (redistribute-metric)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='redistribute-metric', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric must be of a type compatible with redistribute-metric""",
          'defined-type': "l3features:redistribute-metric",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='redistribute-metric', is_config=True)""",
        })

    self.__metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric(self):
    self.__metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..4294967295']}), is_leaf=True, yang_name="metric", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='redistribute-metric', is_config=True)


  def _get_route_map(self):
    """
    Getter method for route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/route_map (leafref)

    YANG Description: route-map
    """
    return self.__route_map
      
  def _set_route_map(self, v, load=False):
    """
    Setter method for route_map, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/route_map (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route_map() directly.

    YANG Description: route-map
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route_map must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)""",
        })

    self.__route_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route_map(self):
    self.__route_map = YANGDynClass(base=unicode, is_leaf=True, yang_name="route-map", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='leafref', is_config=True)


  def _get_disable_sync(self):
    """
    Getter method for disable_sync, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/disable_sync (boolean)

    YANG Description: disable-sync: True/False
    """
    return self.__disable_sync
      
  def _set_disable_sync(self, v, load=False):
    """
    Setter method for disable_sync, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/disable_sync (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_sync() directly.

    YANG Description: disable-sync: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-sync", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_sync must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-sync", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__disable_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_sync(self):
    self.__disable_sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-sync", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_graceful_restart(self):
    """
    Getter method for graceful_restart, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/graceful_restart (boolean)

    YANG Description: graceful-restart: True/False
    """
    return self.__graceful_restart
      
  def _set_graceful_restart(self, v, load=False):
    """
    Setter method for graceful_restart, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/graceful_restart (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_graceful_restart is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_graceful_restart() directly.

    YANG Description: graceful-restart: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """graceful_restart must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__graceful_restart = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_graceful_restart(self):
    self.__graceful_restart = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_redistribute_connected(self):
    """
    Getter method for redistribute_connected, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/redistribute_connected (boolean)

    YANG Description: redistribute-connected: True/False
    """
    return self.__redistribute_connected
      
  def _set_redistribute_connected(self, v, load=False):
    """
    Setter method for redistribute_connected, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/redistribute_connected (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redistribute_connected is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redistribute_connected() directly.

    YANG Description: redistribute-connected: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="redistribute-connected", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redistribute_connected must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistribute-connected", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__redistribute_connected = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redistribute_connected(self):
    self.__redistribute_connected = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="redistribute-connected", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_ospf_internal(self):
    """
    Getter method for ospf_internal, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_internal (boolean)

    YANG Description: ospf-internal: True/False
    """
    return self.__ospf_internal
      
  def _set_ospf_internal(self, v, load=False):
    """
    Setter method for ospf_internal, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_internal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_internal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_internal() directly.

    YANG Description: ospf-internal: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ospf-internal", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_internal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-internal", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)""",
        })

    self.__ospf_internal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_internal(self):
    self.__ospf_internal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ospf-internal", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='boolean', is_config=True)


  def _get_ospf_external1(self):
    """
    Getter method for ospf_external1, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_external1 (uint8)

    YANG Description: 0..255
    """
    return self.__ospf_external1
      
  def _set_ospf_external1(self, v, load=False):
    """
    Setter method for ospf_external1, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_external1 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_external1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_external1() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_external1 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)""",
        })

    self.__ospf_external1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_external1(self):
    self.__ospf_external1 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external1", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)


  def _get_ospf_external2(self):
    """
    Getter method for ospf_external2, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_external2 (uint8)

    YANG Description: 0..255
    """
    return self.__ospf_external2
      
  def _set_ospf_external2(self, v, load=False):
    """
    Setter method for ospf_external2, mapped from YANG variable /devices/device/vrfs/vrf/router_bgp/redistribute/ospf_external2 (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_external2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_external2() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_external2 must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)""",
        })

    self.__ospf_external2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_external2(self):
    self.__ospf_external2 = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ospf-external2", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='uint8', is_config=True)

  protocol = __builtin__.property(_get_protocol, _set_protocol)
  ospf_process_id = __builtin__.property(_get_ospf_process_id, _set_ospf_process_id)
  eigrp_process_id = __builtin__.property(_get_eigrp_process_id, _set_eigrp_process_id)
  metric = __builtin__.property(_get_metric, _set_metric)
  route_map = __builtin__.property(_get_route_map, _set_route_map)
  disable_sync = __builtin__.property(_get_disable_sync, _set_disable_sync)
  graceful_restart = __builtin__.property(_get_graceful_restart, _set_graceful_restart)
  redistribute_connected = __builtin__.property(_get_redistribute_connected, _set_redistribute_connected)
  ospf_internal = __builtin__.property(_get_ospf_internal, _set_ospf_internal)
  ospf_external1 = __builtin__.property(_get_ospf_external1, _set_ospf_external1)
  ospf_external2 = __builtin__.property(_get_ospf_external2, _set_ospf_external2)


  _pyangbind_elements = collections.OrderedDict([('protocol', protocol), ('ospf_process_id', ospf_process_id), ('eigrp_process_id', eigrp_process_id), ('metric', metric), ('route_map', route_map), ('disable_sync', disable_sync), ('graceful_restart', graceful_restart), ('redistribute_connected', redistribute_connected), ('ospf_internal', ospf_internal), ('ospf_external1', ospf_external1), ('ospf_external2', ospf_external2), ])


