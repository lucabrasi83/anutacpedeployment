
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class control_channel(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/oam/control-channel. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Supported control channel type 
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__pwe3_control_word','__router_alert_label','__pw_label_ttl_1',)

  _yang_name = 'control-channel'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__pwe3_control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pwe3-control-word", module_name="vpls", parent=self, choice=(u'action-choice', u'pwe3-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__pw_label_ttl_1 = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pw-label-ttl-1", module_name="vpls", parent=self, choice=(u'action-choice', u'pw-label-ttl-1'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__router_alert_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="router-alert-label", module_name="vpls", parent=self, choice=(u'action-choice', u'router-alert-label'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'oam', u'control-channel']

  def _get_pwe3_control_word(self):
    """
    Getter method for pwe3_control_word, mapped from YANG variable /devices/device/vpls/oam/control_channel/pwe3_control_word (empty)

    YANG Description: For BGP based PW send oam packets with control word, with 0001b as first nibble
    """
    return self.__pwe3_control_word
      
  def _set_pwe3_control_word(self, v, load=False):
    """
    Setter method for pwe3_control_word, mapped from YANG variable /devices/device/vpls/oam/control_channel/pwe3_control_word (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pwe3_control_word is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pwe3_control_word() directly.

    YANG Description: For BGP based PW send oam packets with control word, with 0001b as first nibble
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pwe3-control-word", module_name="vpls", parent=self, choice=(u'action-choice', u'pwe3-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pwe3_control_word must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pwe3-control-word", module_name="vpls", parent=self, choice=(u'action-choice', u'pwe3-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__pwe3_control_word = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pwe3_control_word(self):
    self.__pwe3_control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pwe3-control-word", module_name="vpls", parent=self, choice=(u'action-choice', u'pwe3-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_router_alert_label(self):
    """
    Getter method for router_alert_label, mapped from YANG variable /devices/device/vpls/oam/control_channel/router_alert_label (empty)

    YANG Description: For BGP based PW send oam packets with router alert label
    """
    return self.__router_alert_label
      
  def _set_router_alert_label(self, v, load=False):
    """
    Setter method for router_alert_label, mapped from YANG variable /devices/device/vpls/oam/control_channel/router_alert_label (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_alert_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_alert_label() directly.

    YANG Description: For BGP based PW send oam packets with router alert label
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="router-alert-label", module_name="vpls", parent=self, choice=(u'action-choice', u'router-alert-label'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_alert_label must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="router-alert-label", module_name="vpls", parent=self, choice=(u'action-choice', u'router-alert-label'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__router_alert_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_alert_label(self):
    self.__router_alert_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="router-alert-label", module_name="vpls", parent=self, choice=(u'action-choice', u'router-alert-label'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_pw_label_ttl_1(self):
    """
    Getter method for pw_label_ttl_1, mapped from YANG variable /devices/device/vpls/oam/control_channel/pw_label_ttl_1 (empty)

    YANG Description: For BGP based PW send oam packets with MPLS pw label TTL = 1
    """
    return self.__pw_label_ttl_1
      
  def _set_pw_label_ttl_1(self, v, load=False):
    """
    Setter method for pw_label_ttl_1, mapped from YANG variable /devices/device/vpls/oam/control_channel/pw_label_ttl_1 (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_label_ttl_1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_label_ttl_1() directly.

    YANG Description: For BGP based PW send oam packets with MPLS pw label TTL = 1
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pw-label-ttl-1", module_name="vpls", parent=self, choice=(u'action-choice', u'pw-label-ttl-1'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_label_ttl_1 must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pw-label-ttl-1", module_name="vpls", parent=self, choice=(u'action-choice', u'pw-label-ttl-1'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__pw_label_ttl_1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_label_ttl_1(self):
    self.__pw_label_ttl_1 = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pw-label-ttl-1", module_name="vpls", parent=self, choice=(u'action-choice', u'pw-label-ttl-1'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)

  pwe3_control_word = __builtin__.property(_get_pwe3_control_word, _set_pwe3_control_word)
  router_alert_label = __builtin__.property(_get_router_alert_label, _set_router_alert_label)
  pw_label_ttl_1 = __builtin__.property(_get_pw_label_ttl_1, _set_pw_label_ttl_1)

  __choices__ = {u'action-choice': {u'router-alert-label': [u'router_alert_label'], u'pwe3-control-word': [u'pwe3_control_word'], u'pw-label-ttl-1': [u'pw_label_ttl_1']}}
  _pyangbind_elements = collections.OrderedDict([('pwe3_control_word', pwe3_control_word), ('router_alert_label', router_alert_label), ('pw_label_ttl_1', pw_label_ttl_1), ])


