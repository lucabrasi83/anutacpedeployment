
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import active_interface
import interface
class site(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/multi-homing/site. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Sites connected to this provider equipment
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__site_name','__identifier','__preference','__active_interface','__interface','__peer_active',)

  _yang_name = 'site'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    self.__peer_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="peer-active", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    self.__identifier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)
    self.__active_interface = YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'multi-homing', u'site']

  def _get_site_name(self):
    """
    Getter method for site_name, mapped from YANG variable /devices/device/vpls/multi_homing/site/site_name (string)

    YANG Description: Name of Layer 2 VPN or VPLS site
    """
    return self.__site_name
      
  def _set_site_name(self, v, load=False):
    """
    Setter method for site_name, mapped from YANG variable /devices/device/vpls/multi_homing/site/site_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_name() directly.

    YANG Description: Name of Layer 2 VPN or VPLS site
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)""",
        })

    self.__site_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_name(self):
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)


  def _get_identifier(self):
    """
    Getter method for identifier, mapped from YANG variable /devices/device/vpls/multi_homing/site/identifier (uint16)

    YANG Description: Layer 2 VPN or VPLS multi-homing identifier
    """
    return self.__identifier
      
  def _set_identifier(self, v, load=False):
    """
    Setter method for identifier, mapped from YANG variable /devices/device/vpls/multi_homing/site/identifier (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_identifier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_identifier() directly.

    YANG Description: Layer 2 VPN or VPLS multi-homing identifier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """identifier must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)""",
        })

    self.__identifier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_identifier(self):
    self.__identifier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)


  def _get_preference(self):
    """
    Getter method for preference, mapped from YANG variable /devices/device/vpls/multi_homing/site/preference (enumeration)

    YANG Description: Layer 2 VPN or VPLS multi-homing preference
    """
    return self.__preference
      
  def _set_preference(self, v, load=False):
    """
    Setter method for preference, mapped from YANG variable /devices/device/vpls/multi_homing/site/preference (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_preference() directly.

    YANG Description: Layer 2 VPN or VPLS multi-homing preference
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """preference must be of a type compatible with enumeration""",
          'defined-type': "vpls:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)""",
        })

    self.__preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_preference(self):
    self.__preference = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)


  def _get_active_interface(self):
    """
    Getter method for active_interface, mapped from YANG variable /devices/device/vpls/multi_homing/site/active_interface (container)

    YANG Description: Configure interface to designate as active
    """
    return self.__active_interface
      
  def _set_active_interface(self, v, load=False):
    """
    Setter method for active_interface, mapped from YANG variable /devices/device/vpls/multi_homing/site/active_interface (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_interface() directly.

    YANG Description: Configure interface to designate as active
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_interface must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__active_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_interface(self):
    self.__active_interface = YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /devices/device/vpls/multi_homing/site/interface (list)

    YANG Description: Interface that connects this site to the VPN
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /devices/device/vpls/multi_homing/site/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Interface that connects this site to the VPN
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)


  def _get_peer_active(self):
    """
    Getter method for peer_active, mapped from YANG variable /devices/device/vpls/multi_homing/site/peer_active (empty)

    YANG Description: Keep CE interfaces in up state when all BGP peers go down
    """
    return self.__peer_active
      
  def _set_peer_active(self, v, load=False):
    """
    Setter method for peer_active, mapped from YANG variable /devices/device/vpls/multi_homing/site/peer_active (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_active() directly.

    YANG Description: Keep CE interfaces in up state when all BGP peers go down
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="peer-active", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_active must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="peer-active", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__peer_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_active(self):
    self.__peer_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="peer-active", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)

  site_name = __builtin__.property(_get_site_name, _set_site_name)
  identifier = __builtin__.property(_get_identifier, _set_identifier)
  preference = __builtin__.property(_get_preference, _set_preference)
  active_interface = __builtin__.property(_get_active_interface, _set_active_interface)
  interface = __builtin__.property(_get_interface, _set_interface)
  peer_active = __builtin__.property(_get_peer_active, _set_peer_active)


  _pyangbind_elements = collections.OrderedDict([('site_name', site_name), ('identifier', identifier), ('preference', preference), ('active_interface', active_interface), ('interface', interface), ('peer_active', peer_active), ])


