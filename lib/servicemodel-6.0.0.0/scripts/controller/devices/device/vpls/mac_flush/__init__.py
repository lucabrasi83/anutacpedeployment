
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class mac_flush(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/mac-flush. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enables mac-flush processing
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__any_interface','__any_spoke','__propagate',)

  _yang_name = 'mac-flush'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__any_spoke = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-spoke", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__propagate = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="propagate", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__any_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'mac-flush']

  def _get_any_interface(self):
    """
    Getter method for any_interface, mapped from YANG variable /devices/device/vpls/mac_flush/any_interface (empty)

    YANG Description: Send mac-flush when any AC interface goes down
    """
    return self.__any_interface
      
  def _set_any_interface(self, v, load=False):
    """
    Setter method for any_interface, mapped from YANG variable /devices/device/vpls/mac_flush/any_interface (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_any_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_any_interface() directly.

    YANG Description: Send mac-flush when any AC interface goes down
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="any-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """any_interface must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__any_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_any_interface(self):
    self.__any_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_any_spoke(self):
    """
    Getter method for any_spoke, mapped from YANG variable /devices/device/vpls/mac_flush/any_spoke (empty)

    YANG Description: Send mac-flush when any spoke pseudo wire goes down
    """
    return self.__any_spoke
      
  def _set_any_spoke(self, v, load=False):
    """
    Setter method for any_spoke, mapped from YANG variable /devices/device/vpls/mac_flush/any_spoke (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_any_spoke is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_any_spoke() directly.

    YANG Description: Send mac-flush when any spoke pseudo wire goes down
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="any-spoke", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """any_spoke must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-spoke", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__any_spoke = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_any_spoke(self):
    self.__any_spoke = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="any-spoke", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_propagate(self):
    """
    Getter method for propagate, mapped from YANG variable /devices/device/vpls/mac_flush/propagate (empty)

    YANG Description: Propagate mac-flush to the core
    """
    return self.__propagate
      
  def _set_propagate(self, v, load=False):
    """
    Setter method for propagate, mapped from YANG variable /devices/device/vpls/mac_flush/propagate (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_propagate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_propagate() directly.

    YANG Description: Propagate mac-flush to the core
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="propagate", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """propagate must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="propagate", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__propagate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_propagate(self):
    self.__propagate = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="propagate", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)

  any_interface = __builtin__.property(_get_any_interface, _set_any_interface)
  any_spoke = __builtin__.property(_get_any_spoke, _set_any_spoke)
  propagate = __builtin__.property(_get_propagate, _set_propagate)


  _pyangbind_elements = collections.OrderedDict([('any_interface', any_interface), ('any_spoke', any_spoke), ('propagate', propagate), ])


