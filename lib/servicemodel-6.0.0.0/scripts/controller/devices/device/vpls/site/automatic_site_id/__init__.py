
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import reclaim_wait_time
class automatic_site_id(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/site/automatic-site-id. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enable automatic assignment of site identifier
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__startup_wait_time','__new_site_wait_time','__collision_detect_time','__reclaim_wait_time',)

  _yang_name = 'automatic-site-id'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__startup_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="startup-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    self.__reclaim_wait_time = YANGDynClass(base=reclaim_wait_time.reclaim_wait_time, is_container='container', yang_name="reclaim-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__new_site_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="new-site-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    self.__collision_detect_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="collision-detect-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'site', u'automatic-site-id']

  def _get_startup_wait_time(self):
    """
    Getter method for startup_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/startup_wait_time (uint32)

    YANG Description: Time to wait at startup before claming a site identifier (seconds)
    """
    return self.__startup_wait_time
      
  def _set_startup_wait_time(self, v, load=False):
    """
    Setter method for startup_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/startup_wait_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_startup_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_startup_wait_time() directly.

    YANG Description: Time to wait at startup before claming a site identifier (seconds)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="startup-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """startup_wait_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="startup-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__startup_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_startup_wait_time(self):
    self.__startup_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="startup-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_new_site_wait_time(self):
    """
    Getter method for new_site_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/new_site_wait_time (uint32)

    YANG Description: Time to wait before claiming a site identifier
    """
    return self.__new_site_wait_time
      
  def _set_new_site_wait_time(self, v, load=False):
    """
    Setter method for new_site_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/new_site_wait_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_new_site_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_new_site_wait_time() directly.

    YANG Description: Time to wait before claiming a site identifier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="new-site-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """new_site_wait_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="new-site-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__new_site_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_new_site_wait_time(self):
    self.__new_site_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="new-site-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_collision_detect_time(self):
    """
    Getter method for collision_detect_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/collision_detect_time (uint32)

    YANG Description: Time to wait for detecting a collision
    """
    return self.__collision_detect_time
      
  def _set_collision_detect_time(self, v, load=False):
    """
    Setter method for collision_detect_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/collision_detect_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collision_detect_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collision_detect_time() directly.

    YANG Description: Time to wait for detecting a collision
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="collision-detect-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collision_detect_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="collision-detect-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__collision_detect_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collision_detect_time(self):
    self.__collision_detect_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 3600']}), is_leaf=True, yang_name="collision-detect-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_reclaim_wait_time(self):
    """
    Getter method for reclaim_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/reclaim_wait_time (container)

    YANG Description: Time to wait for reclaiming a site identifier
    """
    return self.__reclaim_wait_time
      
  def _set_reclaim_wait_time(self, v, load=False):
    """
    Setter method for reclaim_wait_time, mapped from YANG variable /devices/device/vpls/site/automatic_site_id/reclaim_wait_time (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reclaim_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reclaim_wait_time() directly.

    YANG Description: Time to wait for reclaiming a site identifier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=reclaim_wait_time.reclaim_wait_time, is_container='container', yang_name="reclaim-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reclaim_wait_time must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reclaim_wait_time.reclaim_wait_time, is_container='container', yang_name="reclaim-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__reclaim_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reclaim_wait_time(self):
    self.__reclaim_wait_time = YANGDynClass(base=reclaim_wait_time.reclaim_wait_time, is_container='container', yang_name="reclaim-wait-time", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)

  startup_wait_time = __builtin__.property(_get_startup_wait_time, _set_startup_wait_time)
  new_site_wait_time = __builtin__.property(_get_new_site_wait_time, _set_new_site_wait_time)
  collision_detect_time = __builtin__.property(_get_collision_detect_time, _set_collision_detect_time)
  reclaim_wait_time = __builtin__.property(_get_reclaim_wait_time, _set_reclaim_wait_time)

  __choices__ = {u'site-identifier-mode': {u'automatic-site-id': [u'startup_wait_time', u'new_site_wait_time', u'collision_detect_time', u'reclaim_wait_time']}}
  _pyangbind_elements = collections.OrderedDict([('startup_wait_time', startup_wait_time), ('new_site_wait_time', new_site_wait_time), ('collision_detect_time', collision_detect_time), ('reclaim_wait_time', reclaim_wait_time), ])


