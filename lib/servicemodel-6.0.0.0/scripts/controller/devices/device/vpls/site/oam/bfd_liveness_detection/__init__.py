
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import transmit_interval
import detection_time
class bfd_liveness_detection(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/site/oam/bfd-liveness-detection. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Bidirectional Forwarding Detection (BFD) options
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__version','__minimum_interval','__minimum_receive_interval','__multiplier','__no_adaptation','__transmit_interval','__detection_time',)

  _yang_name = 'bfd-liveness-detection'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__no_adaptation = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-adaptation", module_name="vpls", parent=self, choice=(u'adaptation-choice', u'no-adaptation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__detection_time = YANGDynClass(base=detection_time.detection_time, is_container='container', yang_name="detection-time", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__minimum_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    self.__transmit_interval = YANGDynClass(base=transmit_interval.transmit_interval, is_container='container', yang_name="transmit-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1': {}, u'0': {}, u'automatic': {}},), default=unicode("automatic"), is_leaf=True, yang_name="version", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    self.__minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-receive-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    self.__multiplier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="multiplier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'site', u'oam', u'bfd-liveness-detection']

  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/version (enumeration)

    YANG Description: BFD protocol version number
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/version (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: BFD protocol version number
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1': {}, u'0': {}, u'automatic': {}},), default=unicode("automatic"), is_leaf=True, yang_name="version", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with enumeration""",
          'defined-type': "vpls:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1': {}, u'0': {}, u'automatic': {}},), default=unicode("automatic"), is_leaf=True, yang_name="version", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1': {}, u'0': {}, u'automatic': {}},), default=unicode("automatic"), is_leaf=True, yang_name="version", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)


  def _get_minimum_interval(self):
    """
    Getter method for minimum_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/minimum_interval (uint32)

    YANG Description: Minimum transmit and receive interval
    """
    return self.__minimum_interval
      
  def _set_minimum_interval(self, v, load=False):
    """
    Setter method for minimum_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/minimum_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minimum_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minimum_interval() directly.

    YANG Description: Minimum transmit and receive interval
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minimum_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__minimum_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minimum_interval(self):
    self.__minimum_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_minimum_receive_interval(self):
    """
    Getter method for minimum_receive_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/minimum_receive_interval (uint32)

    YANG Description: Minimum receive interval
    """
    return self.__minimum_receive_interval
      
  def _set_minimum_receive_interval(self, v, load=False):
    """
    Setter method for minimum_receive_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/minimum_receive_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minimum_receive_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minimum_receive_interval() directly.

    YANG Description: Minimum receive interval
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-receive-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minimum_receive_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-receive-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__minimum_receive_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minimum_receive_interval(self):
    self.__minimum_receive_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255000']}), is_leaf=True, yang_name="minimum-receive-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_multiplier(self):
    """
    Getter method for multiplier, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/multiplier (uint32)

    YANG Description: Detection time multiplier
    """
    return self.__multiplier
      
  def _set_multiplier(self, v, load=False):
    """
    Setter method for multiplier, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/multiplier (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multiplier() directly.

    YANG Description: Detection time multiplier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="multiplier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multiplier must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="multiplier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multiplier(self):
    self.__multiplier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 255']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="multiplier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_no_adaptation(self):
    """
    Getter method for no_adaptation, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/no_adaptation (empty)

    YANG Description: Disable adaptation
    """
    return self.__no_adaptation
      
  def _set_no_adaptation(self, v, load=False):
    """
    Setter method for no_adaptation, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/no_adaptation (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_adaptation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_adaptation() directly.

    YANG Description: Disable adaptation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="no-adaptation", module_name="vpls", parent=self, choice=(u'adaptation-choice', u'no-adaptation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_adaptation must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-adaptation", module_name="vpls", parent=self, choice=(u'adaptation-choice', u'no-adaptation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__no_adaptation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_adaptation(self):
    self.__no_adaptation = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-adaptation", module_name="vpls", parent=self, choice=(u'adaptation-choice', u'no-adaptation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_transmit_interval(self):
    """
    Getter method for transmit_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/transmit_interval (container)

    YANG Description: Transmit-interval options
    """
    return self.__transmit_interval
      
  def _set_transmit_interval(self, v, load=False):
    """
    Setter method for transmit_interval, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/transmit_interval (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmit_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmit_interval() directly.

    YANG Description: Transmit-interval options
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=transmit_interval.transmit_interval, is_container='container', yang_name="transmit-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmit_interval must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=transmit_interval.transmit_interval, is_container='container', yang_name="transmit-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__transmit_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmit_interval(self):
    self.__transmit_interval = YANGDynClass(base=transmit_interval.transmit_interval, is_container='container', yang_name="transmit-interval", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_detection_time(self):
    """
    Getter method for detection_time, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/detection_time (container)

    YANG Description: Detection-time options
    """
    return self.__detection_time
      
  def _set_detection_time(self, v, load=False):
    """
    Setter method for detection_time, mapped from YANG variable /devices/device/vpls/site/oam/bfd_liveness_detection/detection_time (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_detection_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_detection_time() directly.

    YANG Description: Detection-time options
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=detection_time.detection_time, is_container='container', yang_name="detection-time", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """detection_time must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=detection_time.detection_time, is_container='container', yang_name="detection-time", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__detection_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_detection_time(self):
    self.__detection_time = YANGDynClass(base=detection_time.detection_time, is_container='container', yang_name="detection-time", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)

  version = __builtin__.property(_get_version, _set_version)
  minimum_interval = __builtin__.property(_get_minimum_interval, _set_minimum_interval)
  minimum_receive_interval = __builtin__.property(_get_minimum_receive_interval, _set_minimum_receive_interval)
  multiplier = __builtin__.property(_get_multiplier, _set_multiplier)
  no_adaptation = __builtin__.property(_get_no_adaptation, _set_no_adaptation)
  transmit_interval = __builtin__.property(_get_transmit_interval, _set_transmit_interval)
  detection_time = __builtin__.property(_get_detection_time, _set_detection_time)

  __choices__ = {u'adaptation-choice': {u'no-adaptation': [u'no_adaptation']}}
  _pyangbind_elements = collections.OrderedDict([('version', version), ('minimum_interval', minimum_interval), ('minimum_receive_interval', minimum_receive_interval), ('multiplier', multiplier), ('no_adaptation', no_adaptation), ('transmit_interval', transmit_interval), ('detection_time', detection_time), ])


