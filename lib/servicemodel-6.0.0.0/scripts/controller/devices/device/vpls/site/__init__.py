
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import automatic_site_id
import oam
import multi_homing
import mesh_group
import active_interface
import interface
class site(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/vpls/site. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Sites connected to this provider equipment
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__site_name','__site_identifier','__automatic_site_id','__source_attachment_identifier','__flow_label_transmit','__flow_label_receive','__encapsulation_type','__ignore_encapsulation_mismatch','__control_word','__no_control_word','__pseudowire_status_tlv','__oam','__community','__multi_homing','__site_preference','__hot_standby','__mtu','__ignore_mtu_mismatch','__mesh_group','__active_interface','__best_site','__interface',)

  _yang_name = 'site'
  _module_name = 'vpls'
  _namespace = 'http://anutanetworks.com/vpls'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__best_site = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="best-site", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", module_name="vpls", parent=self, choice=(u'cword', u'control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    self.__flow_label_transmit = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-transmit", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__active_interface = YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    self.__pseudowire_status_tlv = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pseudowire-status-tlv", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__no_control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-control-word", module_name="vpls", parent=self, choice=(u'cword', u'no-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__flow_label_receive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-receive", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'satop-t1': {}, u'satop-t3': {}, u'ethernet': {}, u'atm-cell-vp-mode': {}, u'frame-relay': {}, u'atm-aal5': {}, u'atm-cell-port-mode': {}, u'interworking': {}, u'ethernet-vlan': {}, u'frame-relay-port-mode': {}, u'ppp': {}, u'satop-e1': {}, u'satop-e3': {}, u'atm-cell-vc-mode': {}, u'atm-cell': {}, u'cesop': {}, u'cisco-hdlc': {}},), is_leaf=True, yang_name="encapsulation-type", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    self.__site_preference = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="site-preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    self.__hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hot-standby", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__oam = YANGDynClass(base=oam.oam, is_container='container', yang_name="oam", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__ignore_mtu_mismatch = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-mtu-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__mesh_group = YANGDynClass(base=YANGListType("mesh_group_name",mesh_group.mesh_group, yang_name="mesh-group", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='mesh-group-name'), is_container='list', yang_name="mesh-group", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    self.__source_attachment_identifier = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-attachment-identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    self.__automatic_site_id = YANGDynClass(base=automatic_site_id.automatic_site_id, is_container='container', yang_name="automatic-site-id", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__ignore_encapsulation_mismatch = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-encapsulation-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    self.__multi_homing = YANGDynClass(base=multi_homing.multi_homing, is_container='container', yang_name="multi-homing", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'512 .. 65535']}), is_leaf=True, yang_name="mtu", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)
    self.__site_identifier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="site-identifier", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'site-identifier'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'vpls', u'site']

  def _get_site_name(self):
    """
    Getter method for site_name, mapped from YANG variable /devices/device/vpls/site/site_name (string)

    YANG Description: Name of Layer 2 VPN or VPLS site
    """
    return self.__site_name
      
  def _set_site_name(self, v, load=False):
    """
    Setter method for site_name, mapped from YANG variable /devices/device/vpls/site/site_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_name() directly.

    YANG Description: Name of Layer 2 VPN or VPLS site
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)""",
        })

    self.__site_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_name(self):
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site-name", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)


  def _get_site_identifier(self):
    """
    Getter method for site_identifier, mapped from YANG variable /devices/device/vpls/site/site_identifier (uint32)

    YANG Description: Layer 2 VPN or VPLS site identifier (unique in the VPN)
    """
    return self.__site_identifier
      
  def _set_site_identifier(self, v, load=False):
    """
    Setter method for site_identifier, mapped from YANG variable /devices/device/vpls/site/site_identifier (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_identifier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_identifier() directly.

    YANG Description: Layer 2 VPN or VPLS site identifier (unique in the VPN)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="site-identifier", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'site-identifier'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_identifier must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="site-identifier", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'site-identifier'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)""",
        })

    self.__site_identifier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_identifier(self):
    self.__site_identifier = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65534']}), is_leaf=True, yang_name="site-identifier", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'site-identifier'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint32', is_config=True)


  def _get_automatic_site_id(self):
    """
    Getter method for automatic_site_id, mapped from YANG variable /devices/device/vpls/site/automatic_site_id (container)

    YANG Description: Enable automatic assignment of site identifier
    """
    return self.__automatic_site_id
      
  def _set_automatic_site_id(self, v, load=False):
    """
    Setter method for automatic_site_id, mapped from YANG variable /devices/device/vpls/site/automatic_site_id (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_automatic_site_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_automatic_site_id() directly.

    YANG Description: Enable automatic assignment of site identifier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=automatic_site_id.automatic_site_id, is_container='container', yang_name="automatic-site-id", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """automatic_site_id must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=automatic_site_id.automatic_site_id, is_container='container', yang_name="automatic-site-id", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__automatic_site_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_automatic_site_id(self):
    self.__automatic_site_id = YANGDynClass(base=automatic_site_id.automatic_site_id, is_container='container', yang_name="automatic-site-id", module_name="vpls", parent=self, choice=(u'site-identifier-mode', u'automatic-site-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_source_attachment_identifier(self):
    """
    Getter method for source_attachment_identifier, mapped from YANG variable /devices/device/vpls/site/source_attachment_identifier (string)

    YANG Description: FEC 129 VPWS source attachment identifier
    """
    return self.__source_attachment_identifier
      
  def _set_source_attachment_identifier(self, v, load=False):
    """
    Setter method for source_attachment_identifier, mapped from YANG variable /devices/device/vpls/site/source_attachment_identifier (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_attachment_identifier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_attachment_identifier() directly.

    YANG Description: FEC 129 VPWS source attachment identifier
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-attachment-identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_attachment_identifier must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-attachment-identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)""",
        })

    self.__source_attachment_identifier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_attachment_identifier(self):
    self.__source_attachment_identifier = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-attachment-identifier", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)


  def _get_flow_label_transmit(self):
    """
    Getter method for flow_label_transmit, mapped from YANG variable /devices/device/vpls/site/flow_label_transmit (empty)

    YANG Description: Advertise capability to push Flow Label in transmit direction to remote PE
    """
    return self.__flow_label_transmit
      
  def _set_flow_label_transmit(self, v, load=False):
    """
    Setter method for flow_label_transmit, mapped from YANG variable /devices/device/vpls/site/flow_label_transmit (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_label_transmit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_label_transmit() directly.

    YANG Description: Advertise capability to push Flow Label in transmit direction to remote PE
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="flow-label-transmit", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_label_transmit must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-transmit", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__flow_label_transmit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_label_transmit(self):
    self.__flow_label_transmit = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-transmit", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_flow_label_receive(self):
    """
    Getter method for flow_label_receive, mapped from YANG variable /devices/device/vpls/site/flow_label_receive (empty)

    YANG Description: Advertise capability to push Flow Label in receive direction to remote PE
    """
    return self.__flow_label_receive
      
  def _set_flow_label_receive(self, v, load=False):
    """
    Setter method for flow_label_receive, mapped from YANG variable /devices/device/vpls/site/flow_label_receive (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_label_receive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_label_receive() directly.

    YANG Description: Advertise capability to push Flow Label in receive direction to remote PE
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="flow-label-receive", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_label_receive must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-receive", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__flow_label_receive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_label_receive(self):
    self.__flow_label_receive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label-receive", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_encapsulation_type(self):
    """
    Getter method for encapsulation_type, mapped from YANG variable /devices/device/vpls/site/encapsulation_type (enumeration)

    YANG Description: Encapsulation type for VPN
    """
    return self.__encapsulation_type
      
  def _set_encapsulation_type(self, v, load=False):
    """
    Setter method for encapsulation_type, mapped from YANG variable /devices/device/vpls/site/encapsulation_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encapsulation_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encapsulation_type() directly.

    YANG Description: Encapsulation type for VPN
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'satop-t1': {}, u'satop-t3': {}, u'ethernet': {}, u'atm-cell-vp-mode': {}, u'frame-relay': {}, u'atm-aal5': {}, u'atm-cell-port-mode': {}, u'interworking': {}, u'ethernet-vlan': {}, u'frame-relay-port-mode': {}, u'ppp': {}, u'satop-e1': {}, u'satop-e3': {}, u'atm-cell-vc-mode': {}, u'atm-cell': {}, u'cesop': {}, u'cisco-hdlc': {}},), is_leaf=True, yang_name="encapsulation-type", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encapsulation_type must be of a type compatible with enumeration""",
          'defined-type': "vpls:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'satop-t1': {}, u'satop-t3': {}, u'ethernet': {}, u'atm-cell-vp-mode': {}, u'frame-relay': {}, u'atm-aal5': {}, u'atm-cell-port-mode': {}, u'interworking': {}, u'ethernet-vlan': {}, u'frame-relay-port-mode': {}, u'ppp': {}, u'satop-e1': {}, u'satop-e3': {}, u'atm-cell-vc-mode': {}, u'atm-cell': {}, u'cesop': {}, u'cisco-hdlc': {}},), is_leaf=True, yang_name="encapsulation-type", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)""",
        })

    self.__encapsulation_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encapsulation_type(self):
    self.__encapsulation_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'satop-t1': {}, u'satop-t3': {}, u'ethernet': {}, u'atm-cell-vp-mode': {}, u'frame-relay': {}, u'atm-aal5': {}, u'atm-cell-port-mode': {}, u'interworking': {}, u'ethernet-vlan': {}, u'frame-relay-port-mode': {}, u'ppp': {}, u'satop-e1': {}, u'satop-e3': {}, u'atm-cell-vc-mode': {}, u'atm-cell': {}, u'cesop': {}, u'cisco-hdlc': {}},), is_leaf=True, yang_name="encapsulation-type", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)


  def _get_ignore_encapsulation_mismatch(self):
    """
    Getter method for ignore_encapsulation_mismatch, mapped from YANG variable /devices/device/vpls/site/ignore_encapsulation_mismatch (empty)

    YANG Description: Allow different encapsulation types on local and remote end
    """
    return self.__ignore_encapsulation_mismatch
      
  def _set_ignore_encapsulation_mismatch(self, v, load=False):
    """
    Setter method for ignore_encapsulation_mismatch, mapped from YANG variable /devices/device/vpls/site/ignore_encapsulation_mismatch (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ignore_encapsulation_mismatch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ignore_encapsulation_mismatch() directly.

    YANG Description: Allow different encapsulation types on local and remote end
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ignore-encapsulation-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ignore_encapsulation_mismatch must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-encapsulation-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__ignore_encapsulation_mismatch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ignore_encapsulation_mismatch(self):
    self.__ignore_encapsulation_mismatch = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-encapsulation-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_control_word(self):
    """
    Getter method for control_word, mapped from YANG variable /devices/device/vpls/site/control_word (empty)

    YANG Description: Adds control-word to the Layer 2 encapsulation
    """
    return self.__control_word
      
  def _set_control_word(self, v, load=False):
    """
    Setter method for control_word, mapped from YANG variable /devices/device/vpls/site/control_word (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word() directly.

    YANG Description: Adds control-word to the Layer 2 encapsulation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word", module_name="vpls", parent=self, choice=(u'cword', u'control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", module_name="vpls", parent=self, choice=(u'cword', u'control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__control_word = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word(self):
    self.__control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", module_name="vpls", parent=self, choice=(u'cword', u'control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_no_control_word(self):
    """
    Getter method for no_control_word, mapped from YANG variable /devices/device/vpls/site/no_control_word (empty)

    YANG Description: Disables control-word to the Layer 2 encapsulation
    """
    return self.__no_control_word
      
  def _set_no_control_word(self, v, load=False):
    """
    Setter method for no_control_word, mapped from YANG variable /devices/device/vpls/site/no_control_word (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_control_word is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_control_word() directly.

    YANG Description: Disables control-word to the Layer 2 encapsulation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="no-control-word", module_name="vpls", parent=self, choice=(u'cword', u'no-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_control_word must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-control-word", module_name="vpls", parent=self, choice=(u'cword', u'no-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__no_control_word = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_control_word(self):
    self.__no_control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="no-control-word", module_name="vpls", parent=self, choice=(u'cword', u'no-control-word'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_pseudowire_status_tlv(self):
    """
    Getter method for pseudowire_status_tlv, mapped from YANG variable /devices/device/vpls/site/pseudowire_status_tlv (empty)

    YANG Description: Send pseudowire status TLV
    """
    return self.__pseudowire_status_tlv
      
  def _set_pseudowire_status_tlv(self, v, load=False):
    """
    Setter method for pseudowire_status_tlv, mapped from YANG variable /devices/device/vpls/site/pseudowire_status_tlv (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pseudowire_status_tlv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pseudowire_status_tlv() directly.

    YANG Description: Send pseudowire status TLV
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pseudowire-status-tlv", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pseudowire_status_tlv must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pseudowire-status-tlv", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__pseudowire_status_tlv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pseudowire_status_tlv(self):
    self.__pseudowire_status_tlv = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pseudowire-status-tlv", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_oam(self):
    """
    Getter method for oam, mapped from YANG variable /devices/device/vpls/site/oam (container)

    YANG Description: OAM Configuration for VPN
    """
    return self.__oam
      
  def _set_oam(self, v, load=False):
    """
    Setter method for oam, mapped from YANG variable /devices/device/vpls/site/oam (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oam is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oam() directly.

    YANG Description: OAM Configuration for VPN
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=oam.oam, is_container='container', yang_name="oam", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oam must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=oam.oam, is_container='container', yang_name="oam", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__oam = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oam(self):
    self.__oam = YANGDynClass(base=oam.oam, is_container='container', yang_name="oam", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_community(self):
    """
    Getter method for community, mapped from YANG variable /devices/device/vpls/site/community (string)

    YANG Description: Community associated with this site
    """
    return self.__community
      
  def _set_community(self, v, load=False):
    """
    Setter method for community, mapped from YANG variable /devices/device/vpls/site/community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community() directly.

    YANG Description: Community associated with this site
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)""",
        })

    self.__community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community(self):
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='string', is_config=True)


  def _get_multi_homing(self):
    """
    Getter method for multi_homing, mapped from YANG variable /devices/device/vpls/site/multi_homing (container)

    YANG Description: Enable multi-homing functionality for this site
    """
    return self.__multi_homing
      
  def _set_multi_homing(self, v, load=False):
    """
    Setter method for multi_homing, mapped from YANG variable /devices/device/vpls/site/multi_homing (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multi_homing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multi_homing() directly.

    YANG Description: Enable multi-homing functionality for this site
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=multi_homing.multi_homing, is_container='container', yang_name="multi-homing", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multi_homing must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=multi_homing.multi_homing, is_container='container', yang_name="multi-homing", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__multi_homing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multi_homing(self):
    self.__multi_homing = YANGDynClass(base=multi_homing.multi_homing, is_container='container', yang_name="multi-homing", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_site_preference(self):
    """
    Getter method for site_preference, mapped from YANG variable /devices/device/vpls/site/site_preference (enumeration)

    YANG Description: Layer 2 VPN or VPLS site preference
    """
    return self.__site_preference
      
  def _set_site_preference(self, v, load=False):
    """
    Setter method for site_preference, mapped from YANG variable /devices/device/vpls/site/site_preference (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_preference() directly.

    YANG Description: Layer 2 VPN or VPLS site preference
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="site-preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_preference must be of a type compatible with enumeration""",
          'defined-type': "vpls:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="site-preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)""",
        })

    self.__site_preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_preference(self):
    self.__site_preference = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'preference-value': {}, u'backup': {}, u'primary': {}},), is_leaf=True, yang_name="site-preference", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='enumeration', is_config=True)


  def _get_hot_standby(self):
    """
    Getter method for hot_standby, mapped from YANG variable /devices/device/vpls/site/hot_standby (empty)

    YANG Description: Keep backup pseudowire in continuous standby mode and ready for traffic forwarding
    """
    return self.__hot_standby
      
  def _set_hot_standby(self, v, load=False):
    """
    Setter method for hot_standby, mapped from YANG variable /devices/device/vpls/site/hot_standby (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hot_standby is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hot_standby() directly.

    YANG Description: Keep backup pseudowire in continuous standby mode and ready for traffic forwarding
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="hot-standby", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hot_standby must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hot-standby", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__hot_standby = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hot_standby(self):
    self.__hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hot-standby", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /devices/device/vpls/site/mtu (uint16)

    YANG Description: MTU to be advertised to the remote end
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /devices/device/vpls/site/mtu (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: MTU to be advertised to the remote end
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'512 .. 65535']}), is_leaf=True, yang_name="mtu", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'512 .. 65535']}), is_leaf=True, yang_name="mtu", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'512 .. 65535']}), is_leaf=True, yang_name="mtu", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='uint16', is_config=True)


  def _get_ignore_mtu_mismatch(self):
    """
    Getter method for ignore_mtu_mismatch, mapped from YANG variable /devices/device/vpls/site/ignore_mtu_mismatch (empty)

    YANG Description: Allow different MTU values on local and remote end
    """
    return self.__ignore_mtu_mismatch
      
  def _set_ignore_mtu_mismatch(self, v, load=False):
    """
    Setter method for ignore_mtu_mismatch, mapped from YANG variable /devices/device/vpls/site/ignore_mtu_mismatch (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ignore_mtu_mismatch is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ignore_mtu_mismatch() directly.

    YANG Description: Allow different MTU values on local and remote end
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ignore-mtu-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ignore_mtu_mismatch must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-mtu-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__ignore_mtu_mismatch = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ignore_mtu_mismatch(self):
    self.__ignore_mtu_mismatch = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-mtu-mismatch", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_mesh_group(self):
    """
    Getter method for mesh_group, mapped from YANG variable /devices/device/vpls/site/mesh_group (list)

    YANG Description: Mesh-groups that are part of this site
    """
    return self.__mesh_group
      
  def _set_mesh_group(self, v, load=False):
    """
    Setter method for mesh_group, mapped from YANG variable /devices/device/vpls/site/mesh_group (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mesh_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mesh_group() directly.

    YANG Description: Mesh-groups that are part of this site
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("mesh_group_name",mesh_group.mesh_group, yang_name="mesh-group", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='mesh-group-name'), is_container='list', yang_name="mesh-group", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mesh_group must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mesh_group_name",mesh_group.mesh_group, yang_name="mesh-group", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='mesh-group-name'), is_container='list', yang_name="mesh-group", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)""",
        })

    self.__mesh_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mesh_group(self):
    self.__mesh_group = YANGDynClass(base=YANGListType("mesh_group_name",mesh_group.mesh_group, yang_name="mesh-group", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='mesh-group-name'), is_container='list', yang_name="mesh-group", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)


  def _get_active_interface(self):
    """
    Getter method for active_interface, mapped from YANG variable /devices/device/vpls/site/active_interface (container)

    YANG Description: Configure interface to designate as active
    """
    return self.__active_interface
      
  def _set_active_interface(self, v, load=False):
    """
    Setter method for active_interface, mapped from YANG variable /devices/device/vpls/site/active_interface (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_interface() directly.

    YANG Description: Configure interface to designate as active
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_interface must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)""",
        })

    self.__active_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_interface(self):
    self.__active_interface = YANGDynClass(base=active_interface.active_interface, is_container='container', yang_name="active-interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='container', is_config=True)


  def _get_best_site(self):
    """
    Getter method for best_site, mapped from YANG variable /devices/device/vpls/site/best_site (empty)

    YANG Description: Activates best-site functionality for this instance
    """
    return self.__best_site
      
  def _set_best_site(self, v, load=False):
    """
    Setter method for best_site, mapped from YANG variable /devices/device/vpls/site/best_site (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_best_site is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_best_site() directly.

    YANG Description: Activates best-site functionality for this instance
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="best-site", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """best_site must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="best-site", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)""",
        })

    self.__best_site = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_best_site(self):
    self.__best_site = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="best-site", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='empty', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /devices/device/vpls/site/interface (list)

    YANG Description: Interface that connect this site to the VPN
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /devices/device/vpls/site/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: Interface that connect this site to the VPN
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", module_name="vpls", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="interface", module_name="vpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vpls', defining_module='vpls', yang_type='list', is_config=True)

  site_name = __builtin__.property(_get_site_name, _set_site_name)
  site_identifier = __builtin__.property(_get_site_identifier, _set_site_identifier)
  automatic_site_id = __builtin__.property(_get_automatic_site_id, _set_automatic_site_id)
  source_attachment_identifier = __builtin__.property(_get_source_attachment_identifier, _set_source_attachment_identifier)
  flow_label_transmit = __builtin__.property(_get_flow_label_transmit, _set_flow_label_transmit)
  flow_label_receive = __builtin__.property(_get_flow_label_receive, _set_flow_label_receive)
  encapsulation_type = __builtin__.property(_get_encapsulation_type, _set_encapsulation_type)
  ignore_encapsulation_mismatch = __builtin__.property(_get_ignore_encapsulation_mismatch, _set_ignore_encapsulation_mismatch)
  control_word = __builtin__.property(_get_control_word, _set_control_word)
  no_control_word = __builtin__.property(_get_no_control_word, _set_no_control_word)
  pseudowire_status_tlv = __builtin__.property(_get_pseudowire_status_tlv, _set_pseudowire_status_tlv)
  oam = __builtin__.property(_get_oam, _set_oam)
  community = __builtin__.property(_get_community, _set_community)
  multi_homing = __builtin__.property(_get_multi_homing, _set_multi_homing)
  site_preference = __builtin__.property(_get_site_preference, _set_site_preference)
  hot_standby = __builtin__.property(_get_hot_standby, _set_hot_standby)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  ignore_mtu_mismatch = __builtin__.property(_get_ignore_mtu_mismatch, _set_ignore_mtu_mismatch)
  mesh_group = __builtin__.property(_get_mesh_group, _set_mesh_group)
  active_interface = __builtin__.property(_get_active_interface, _set_active_interface)
  best_site = __builtin__.property(_get_best_site, _set_best_site)
  interface = __builtin__.property(_get_interface, _set_interface)

  __choices__ = {u'site-identifier-mode': {u'site-identifier': [u'site_identifier'], u'automatic-site-id': [u'automatic_site_id']}, u'cword': {u'control-word': [u'control_word'], u'no-control-word': [u'no_control_word']}}
  _pyangbind_elements = collections.OrderedDict([('site_name', site_name), ('site_identifier', site_identifier), ('automatic_site_id', automatic_site_id), ('source_attachment_identifier', source_attachment_identifier), ('flow_label_transmit', flow_label_transmit), ('flow_label_receive', flow_label_receive), ('encapsulation_type', encapsulation_type), ('ignore_encapsulation_mismatch', ignore_encapsulation_mismatch), ('control_word', control_word), ('no_control_word', no_control_word), ('pseudowire_status_tlv', pseudowire_status_tlv), ('oam', oam), ('community', community), ('multi_homing', multi_homing), ('site_preference', site_preference), ('hot_standby', hot_standby), ('mtu', mtu), ('ignore_mtu_mismatch', ignore_mtu_mismatch), ('mesh_group', mesh_group), ('active_interface', active_interface), ('best_site', best_site), ('interface', interface), ])


