
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class timestamp_options(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/netflow/flow-records/flow-record/collect/timestamp/timestamp-options. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__timestamp_option','__timestamps_time',)

  _yang_name = 'timestamp-options'
  _module_name = 'l3features'
  _namespace = 'http://anutanetworks.com/l3features'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__timestamp_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sys-uptime': {}, u'absolute': {}},), is_leaf=True, yang_name="timestamp-option", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    self.__timestamps_time = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'last': {}, u'first': {}},), is_leaf=True, yang_name="timestamps-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'netflow', u'flow-records', u'flow-record', u'collect', u'timestamp', u'timestamp-options']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='string', is_config=True)


  def _get_timestamp_option(self):
    """
    Getter method for timestamp_option, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/timestamp_option (enumeration)

    YANG Description: absolute
sys-uptime

    """
    return self.__timestamp_option
      
  def _set_timestamp_option(self, v, load=False):
    """
    Setter method for timestamp_option, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/timestamp_option (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp_option is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp_option() directly.

    YANG Description: absolute
sys-uptime

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sys-uptime': {}, u'absolute': {}},), is_leaf=True, yang_name="timestamp-option", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp_option must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sys-uptime': {}, u'absolute': {}},), is_leaf=True, yang_name="timestamp-option", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__timestamp_option = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp_option(self):
    self.__timestamp_option = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sys-uptime': {}, u'absolute': {}},), is_leaf=True, yang_name="timestamp-option", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)


  def _get_timestamps_time(self):
    """
    Getter method for timestamps_time, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/timestamps_time (enumeration)

    YANG Description: first
last

    """
    return self.__timestamps_time
      
  def _set_timestamps_time(self, v, load=False):
    """
    Setter method for timestamps_time, mapped from YANG variable /devices/device/netflow/flow_records/flow_record/collect/timestamp/timestamp_options/timestamps_time (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamps_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamps_time() directly.

    YANG Description: first
last

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'last': {}, u'first': {}},), is_leaf=True, yang_name="timestamps-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamps_time must be of a type compatible with enumeration""",
          'defined-type': "l3features:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'last': {}, u'first': {}},), is_leaf=True, yang_name="timestamps-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)""",
        })

    self.__timestamps_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamps_time(self):
    self.__timestamps_time = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'last': {}, u'first': {}},), is_leaf=True, yang_name="timestamps-time", module_name="l3features", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/l3features', defining_module='l3features', yang_type='enumeration', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  timestamp_option = __builtin__.property(_get_timestamp_option, _set_timestamp_option)
  timestamps_time = __builtin__.property(_get_timestamps_time, _set_timestamps_time)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('timestamp_option', timestamp_option), ('timestamps_time', timestamps_time), ])


