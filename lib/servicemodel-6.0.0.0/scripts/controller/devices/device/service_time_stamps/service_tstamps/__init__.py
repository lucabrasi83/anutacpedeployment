
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class service_tstamps(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/service-time-stamps/service-tstamps. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__service_time_stamp_level','__service_time_stamp_with','__service_tstamp_datetime_option_1','__service_tstamp_datetime_option_2','__service_tstamp_datetime_option_3',)

  _yang_name = 'service-tstamps'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__service_time_stamp_with = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'uptime': {}, u'datetime': {}},), is_leaf=True, yang_name="service-time-stamp-with", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__service_time_stamp_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'debug': {}, u'log': {}},), is_leaf=True, yang_name="service-time-stamp-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__service_tstamp_datetime_option_1 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-1", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__service_tstamp_datetime_option_2 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-2", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__service_tstamp_datetime_option_3 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-3", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'service-time-stamps', u'service-tstamps']

  def _get_service_time_stamp_level(self):
    """
    Getter method for service_time_stamp_level, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_time_stamp_level (enumeration)

    YANG Description: debug  Timestamp debug messages
log    Timestamp log messages

    """
    return self.__service_time_stamp_level
      
  def _set_service_time_stamp_level(self, v, load=False):
    """
    Setter method for service_time_stamp_level, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_time_stamp_level (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_time_stamp_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_time_stamp_level() directly.

    YANG Description: debug  Timestamp debug messages
log    Timestamp log messages

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'debug': {}, u'log': {}},), is_leaf=True, yang_name="service-time-stamp-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_time_stamp_level must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'debug': {}, u'log': {}},), is_leaf=True, yang_name="service-time-stamp-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__service_time_stamp_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_time_stamp_level(self):
    self.__service_time_stamp_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'debug': {}, u'log': {}},), is_leaf=True, yang_name="service-time-stamp-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_service_time_stamp_with(self):
    """
    Getter method for service_time_stamp_with, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_time_stamp_with (enumeration)

    YANG Description: datetime  Timestamp with date and time
uptime    Timestamp with system uptime

    """
    return self.__service_time_stamp_with
      
  def _set_service_time_stamp_with(self, v, load=False):
    """
    Setter method for service_time_stamp_with, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_time_stamp_with (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_time_stamp_with is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_time_stamp_with() directly.

    YANG Description: datetime  Timestamp with date and time
uptime    Timestamp with system uptime

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'uptime': {}, u'datetime': {}},), is_leaf=True, yang_name="service-time-stamp-with", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_time_stamp_with must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'uptime': {}, u'datetime': {}},), is_leaf=True, yang_name="service-time-stamp-with", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__service_time_stamp_with = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_time_stamp_with(self):
    self.__service_time_stamp_with = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'uptime': {}, u'datetime': {}},), is_leaf=True, yang_name="service-time-stamp-with", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_service_tstamp_datetime_option_1(self):
    """
    Getter method for service_tstamp_datetime_option_1, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_1 (enumeration)

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    return self.__service_tstamp_datetime_option_1
      
  def _set_service_tstamp_datetime_option_1(self, v, load=False):
    """
    Setter method for service_tstamp_datetime_option_1, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_1 (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_tstamp_datetime_option_1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_tstamp_datetime_option_1() directly.

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-1", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_tstamp_datetime_option_1 must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-1", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__service_tstamp_datetime_option_1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_tstamp_datetime_option_1(self):
    self.__service_tstamp_datetime_option_1 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-1", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_service_tstamp_datetime_option_2(self):
    """
    Getter method for service_tstamp_datetime_option_2, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_2 (enumeration)

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    return self.__service_tstamp_datetime_option_2
      
  def _set_service_tstamp_datetime_option_2(self, v, load=False):
    """
    Setter method for service_tstamp_datetime_option_2, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_2 (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_tstamp_datetime_option_2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_tstamp_datetime_option_2() directly.

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-2", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_tstamp_datetime_option_2 must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-2", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__service_tstamp_datetime_option_2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_tstamp_datetime_option_2(self):
    self.__service_tstamp_datetime_option_2 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-2", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_service_tstamp_datetime_option_3(self):
    """
    Getter method for service_tstamp_datetime_option_3, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_3 (enumeration)

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    return self.__service_tstamp_datetime_option_3
      
  def _set_service_tstamp_datetime_option_3(self, v, load=False):
    """
    Setter method for service_tstamp_datetime_option_3, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps/service_tstamp_datetime_option_3 (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_tstamp_datetime_option_3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_tstamp_datetime_option_3() directly.

    YANG Description: msec           Include milliseconds in timestamp
localtime      Use local time zone for timestamps
show-timezone  Add time zone information to timestamp

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-3", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_tstamp_datetime_option_3 must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-3", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__service_tstamp_datetime_option_3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_tstamp_datetime_option_3(self):
    self.__service_tstamp_datetime_option_3 = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'show-timezone': {}, u'msec': {}, u'localtime': {}},), is_leaf=True, yang_name="service-tstamp-datetime-option-3", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)

  service_time_stamp_level = __builtin__.property(_get_service_time_stamp_level, _set_service_time_stamp_level)
  service_time_stamp_with = __builtin__.property(_get_service_time_stamp_with, _set_service_time_stamp_with)
  service_tstamp_datetime_option_1 = __builtin__.property(_get_service_tstamp_datetime_option_1, _set_service_tstamp_datetime_option_1)
  service_tstamp_datetime_option_2 = __builtin__.property(_get_service_tstamp_datetime_option_2, _set_service_tstamp_datetime_option_2)
  service_tstamp_datetime_option_3 = __builtin__.property(_get_service_tstamp_datetime_option_3, _set_service_tstamp_datetime_option_3)


  _pyangbind_elements = collections.OrderedDict([('service_time_stamp_level', service_time_stamp_level), ('service_time_stamp_with', service_time_stamp_with), ('service_tstamp_datetime_option_1', service_tstamp_datetime_option_1), ('service_tstamp_datetime_option_2', service_tstamp_datetime_option_2), ('service_tstamp_datetime_option_3', service_tstamp_datetime_option_3), ])


