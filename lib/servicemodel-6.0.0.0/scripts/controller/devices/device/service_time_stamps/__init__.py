
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import service_tstamps
class service_time_stamps(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/service-time-stamps. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__service_timestamps_debug','__service_timestamps_log','__service_password_encryption','__enable_secret','__enable_secret_password','__tcp_keepalives_in','__service_tstamps',)

  _yang_name = 'service-time-stamps'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__tcp_keepalives_in = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="tcp-keepalives-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__service_tstamps = YANGDynClass(base=YANGListType("service_time_stamp_level",service_tstamps.service_tstamps, yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='service-time-stamp-level'), is_container='list', yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)
    self.__enable_secret = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__enable_secret_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__service_password_encryption = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-password-encryption", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__service_timestamps_debug = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-debug", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__service_timestamps_log = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-log", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'service-time-stamps']

  def _get_service_timestamps_debug(self):
    """
    Getter method for service_timestamps_debug, mapped from YANG variable /devices/device/service_time_stamps/service_timestamps_debug (boolean)

    YANG Description: service-timestamps-debug: True/False
    """
    return self.__service_timestamps_debug
      
  def _set_service_timestamps_debug(self, v, load=False):
    """
    Setter method for service_timestamps_debug, mapped from YANG variable /devices/device/service_time_stamps/service_timestamps_debug (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_timestamps_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_timestamps_debug() directly.

    YANG Description: service-timestamps-debug: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-debug", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_timestamps_debug must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-debug", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__service_timestamps_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_timestamps_debug(self):
    self.__service_timestamps_debug = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-debug", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_service_timestamps_log(self):
    """
    Getter method for service_timestamps_log, mapped from YANG variable /devices/device/service_time_stamps/service_timestamps_log (boolean)

    YANG Description: service-timestamps-log: True/False
    """
    return self.__service_timestamps_log
      
  def _set_service_timestamps_log(self, v, load=False):
    """
    Setter method for service_timestamps_log, mapped from YANG variable /devices/device/service_time_stamps/service_timestamps_log (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_timestamps_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_timestamps_log() directly.

    YANG Description: service-timestamps-log: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-log", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_timestamps_log must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-log", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__service_timestamps_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_timestamps_log(self):
    self.__service_timestamps_log = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-timestamps-log", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_service_password_encryption(self):
    """
    Getter method for service_password_encryption, mapped from YANG variable /devices/device/service_time_stamps/service_password_encryption (boolean)

    YANG Description: service-password-encryption: True/False
    """
    return self.__service_password_encryption
      
  def _set_service_password_encryption(self, v, load=False):
    """
    Setter method for service_password_encryption, mapped from YANG variable /devices/device/service_time_stamps/service_password_encryption (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_password_encryption is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_password_encryption() directly.

    YANG Description: service-password-encryption: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-password-encryption", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_password_encryption must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-password-encryption", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__service_password_encryption = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_password_encryption(self):
    self.__service_password_encryption = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="service-password-encryption", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_enable_secret(self):
    """
    Getter method for enable_secret, mapped from YANG variable /devices/device/service_time_stamps/enable_secret (boolean)

    YANG Description: Enable/Disable enable-secret features
    """
    return self.__enable_secret
      
  def _set_enable_secret(self, v, load=False):
    """
    Setter method for enable_secret, mapped from YANG variable /devices/device/service_time_stamps/enable_secret (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_secret is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_secret() directly.

    YANG Description: Enable/Disable enable-secret features
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_secret must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__enable_secret = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_secret(self):
    self.__enable_secret = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_enable_secret_password(self):
    """
    Getter method for enable_secret_password, mapped from YANG variable /devices/device/service_time_stamps/enable_secret_password (string)

    YANG Description: enable-secret password 
    """
    return self.__enable_secret_password
      
  def _set_enable_secret_password(self, v, load=False):
    """
    Setter method for enable_secret_password, mapped from YANG variable /devices/device/service_time_stamps/enable_secret_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_secret_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_secret_password() directly.

    YANG Description: enable-secret password 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="enable-secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_secret_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__enable_secret_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_secret_password(self):
    self.__enable_secret_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_tcp_keepalives_in(self):
    """
    Getter method for tcp_keepalives_in, mapped from YANG variable /devices/device/service_time_stamps/tcp_keepalives_in (boolean)

    YANG Description: Generate keepalives on idle incoming network connections
    """
    return self.__tcp_keepalives_in
      
  def _set_tcp_keepalives_in(self, v, load=False):
    """
    Setter method for tcp_keepalives_in, mapped from YANG variable /devices/device/service_time_stamps/tcp_keepalives_in (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tcp_keepalives_in is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tcp_keepalives_in() directly.

    YANG Description: Generate keepalives on idle incoming network connections
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="tcp-keepalives-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tcp_keepalives_in must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="tcp-keepalives-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__tcp_keepalives_in = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tcp_keepalives_in(self):
    self.__tcp_keepalives_in = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="tcp-keepalives-in", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_service_tstamps(self):
    """
    Getter method for service_tstamps, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps (list)
    """
    return self.__service_tstamps
      
  def _set_service_tstamps(self, v, load=False):
    """
    Setter method for service_tstamps, mapped from YANG variable /devices/device/service_time_stamps/service_tstamps (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_tstamps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_tstamps() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("service_time_stamp_level",service_tstamps.service_tstamps, yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='service-time-stamp-level'), is_container='list', yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_tstamps must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("service_time_stamp_level",service_tstamps.service_tstamps, yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='service-time-stamp-level'), is_container='list', yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)""",
        })

    self.__service_tstamps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_tstamps(self):
    self.__service_tstamps = YANGDynClass(base=YANGListType("service_time_stamp_level",service_tstamps.service_tstamps, yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='service-time-stamp-level'), is_container='list', yang_name="service-tstamps", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='list', is_config=True)

  service_timestamps_debug = __builtin__.property(_get_service_timestamps_debug, _set_service_timestamps_debug)
  service_timestamps_log = __builtin__.property(_get_service_timestamps_log, _set_service_timestamps_log)
  service_password_encryption = __builtin__.property(_get_service_password_encryption, _set_service_password_encryption)
  enable_secret = __builtin__.property(_get_enable_secret, _set_enable_secret)
  enable_secret_password = __builtin__.property(_get_enable_secret_password, _set_enable_secret_password)
  tcp_keepalives_in = __builtin__.property(_get_tcp_keepalives_in, _set_tcp_keepalives_in)
  service_tstamps = __builtin__.property(_get_service_tstamps, _set_service_tstamps)


  _pyangbind_elements = collections.OrderedDict([('service_timestamps_debug', service_timestamps_debug), ('service_timestamps_log', service_timestamps_log), ('service_password_encryption', service_password_encryption), ('enable_secret', enable_secret), ('enable_secret_password', enable_secret_password), ('tcp_keepalives_in', tcp_keepalives_in), ('service_tstamps', service_tstamps), ])


