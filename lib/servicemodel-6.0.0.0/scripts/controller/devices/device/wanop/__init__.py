
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import application_optimization
import central_manager_config
import interception
class wanop(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/wanop. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__interception_method','__application_optimization','__vendor','__central_manager_config','__interception',)

  _yang_name = 'wanop'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interception = YANGDynClass(base=interception.interception, is_container='container', yang_name="interception", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__central_manager_config = YANGDynClass(base=central_manager_config.central_manager_config, is_container='container', yang_name="central-manager-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__interception_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INLINE': {}, u'WCCP': {}},), is_leaf=True, yang_name="interception-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='interception-methods', is_config=True)
    self.__vendor = YANGDynClass(base=unicode, is_leaf=True, yang_name="vendor", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__application_optimization = YANGDynClass(base=YANGListType("application_optimization",application_optimization.application_optimization, yang_name="application-optimization", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='application-optimization'), is_container='list', yang_name="application-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'wanop']

  def _get_interception_method(self):
    """
    Getter method for interception_method, mapped from YANG variable /devices/device/wanop/interception_method (interception-methods)

    YANG Description: WCCP
INLINE

    """
    return self.__interception_method
      
  def _set_interception_method(self, v, load=False):
    """
    Setter method for interception_method, mapped from YANG variable /devices/device/wanop/interception_method (interception-methods)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interception_method is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interception_method() directly.

    YANG Description: WCCP
INLINE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INLINE': {}, u'WCCP': {}},), is_leaf=True, yang_name="interception-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='interception-methods', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interception_method must be of a type compatible with interception-methods""",
          'defined-type': "wanoptimizer:interception-methods",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INLINE': {}, u'WCCP': {}},), is_leaf=True, yang_name="interception-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='interception-methods', is_config=True)""",
        })

    self.__interception_method = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interception_method(self):
    self.__interception_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INLINE': {}, u'WCCP': {}},), is_leaf=True, yang_name="interception-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='interception-methods', is_config=True)


  def _get_application_optimization(self):
    """
    Getter method for application_optimization, mapped from YANG variable /devices/device/wanop/application_optimization (list)
    """
    return self.__application_optimization
      
  def _set_application_optimization(self, v, load=False):
    """
    Setter method for application_optimization, mapped from YANG variable /devices/device/wanop/application_optimization (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_application_optimization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_application_optimization() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("application_optimization",application_optimization.application_optimization, yang_name="application-optimization", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='application-optimization'), is_container='list', yang_name="application-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """application_optimization must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("application_optimization",application_optimization.application_optimization, yang_name="application-optimization", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='application-optimization'), is_container='list', yang_name="application-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__application_optimization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_application_optimization(self):
    self.__application_optimization = YANGDynClass(base=YANGListType("application_optimization",application_optimization.application_optimization, yang_name="application-optimization", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='application-optimization'), is_container='list', yang_name="application-optimization", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)


  def _get_vendor(self):
    """
    Getter method for vendor, mapped from YANG variable /devices/device/wanop/vendor (string)

    YANG Description: string
    """
    return self.__vendor
      
  def _set_vendor(self, v, load=False):
    """
    Setter method for vendor, mapped from YANG variable /devices/device/wanop/vendor (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vendor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vendor() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vendor", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vendor must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vendor", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__vendor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vendor(self):
    self.__vendor = YANGDynClass(base=unicode, is_leaf=True, yang_name="vendor", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_central_manager_config(self):
    """
    Getter method for central_manager_config, mapped from YANG variable /devices/device/wanop/central_manager_config (container)
    """
    return self.__central_manager_config
      
  def _set_central_manager_config(self, v, load=False):
    """
    Setter method for central_manager_config, mapped from YANG variable /devices/device/wanop/central_manager_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_central_manager_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_central_manager_config() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=central_manager_config.central_manager_config, is_container='container', yang_name="central-manager-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """central_manager_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=central_manager_config.central_manager_config, is_container='container', yang_name="central-manager-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__central_manager_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_central_manager_config(self):
    self.__central_manager_config = YANGDynClass(base=central_manager_config.central_manager_config, is_container='container', yang_name="central-manager-config", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_interception(self):
    """
    Getter method for interception, mapped from YANG variable /devices/device/wanop/interception (container)
    """
    return self.__interception
      
  def _set_interception(self, v, load=False):
    """
    Setter method for interception, mapped from YANG variable /devices/device/wanop/interception (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interception is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interception() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=interception.interception, is_container='container', yang_name="interception", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interception must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interception.interception, is_container='container', yang_name="interception", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__interception = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interception(self):
    self.__interception = YANGDynClass(base=interception.interception, is_container='container', yang_name="interception", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

  interception_method = __builtin__.property(_get_interception_method, _set_interception_method)
  application_optimization = __builtin__.property(_get_application_optimization, _set_application_optimization)
  vendor = __builtin__.property(_get_vendor, _set_vendor)
  central_manager_config = __builtin__.property(_get_central_manager_config, _set_central_manager_config)
  interception = __builtin__.property(_get_interception, _set_interception)


  _pyangbind_elements = collections.OrderedDict([('interception_method', interception_method), ('application_optimization', application_optimization), ('vendor', vendor), ('central_manager_config', central_manager_config), ('interception', interception), ])


