
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import lan_interface
class router_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/wanop/interception/wccp/router-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__redirect_method','__wan_interface_name','__direction','__vlan','__lan_interface',)

  _yang_name = 'router-config'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lan_interface = YANGDynClass(base=lan_interface.lan_interface, is_container='container', yang_name="lan-interface", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="direction", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__wan_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan-interface-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='leafref', is_config=True)
    self.__redirect_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'L2': {}},), is_leaf=True, yang_name="redirect-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'wanop', u'interception', u'wccp', u'router-config']

  def _get_redirect_method(self):
    """
    Getter method for redirect_method, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/redirect_method (enumeration)

    YANG Description: GRE
L2

    """
    return self.__redirect_method
      
  def _set_redirect_method(self, v, load=False):
    """
    Setter method for redirect_method, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/redirect_method (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redirect_method is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redirect_method() directly.

    YANG Description: GRE
L2

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'L2': {}},), is_leaf=True, yang_name="redirect-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redirect_method must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'L2': {}},), is_leaf=True, yang_name="redirect-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__redirect_method = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redirect_method(self):
    self.__redirect_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'L2': {}},), is_leaf=True, yang_name="redirect-method", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_wan_interface_name(self):
    """
    Getter method for wan_interface_name, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/wan_interface_name (leafref)

    YANG Description: wan-interface-name
    """
    return self.__wan_interface_name
      
  def _set_wan_interface_name(self, v, load=False):
    """
    Setter method for wan_interface_name, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/wan_interface_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_interface_name() directly.

    YANG Description: wan-interface-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="wan-interface-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_interface_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="wan-interface-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='leafref', is_config=True)""",
        })

    self.__wan_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_interface_name(self):
    self.__wan_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan-interface-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='leafref', is_config=True)


  def _get_direction(self):
    """
    Getter method for direction, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/direction (enumeration)

    YANG Description: in
out

    """
    return self.__direction
      
  def _set_direction(self, v, load=False):
    """
    Setter method for direction, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/direction (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_direction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_direction() directly.

    YANG Description: in
out

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="direction", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """direction must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="direction", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__direction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_direction(self):
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'out': {}, u'in': {}},), is_leaf=True, yang_name="direction", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/vlan (uint32)

    YANG Description: 0..4294967295
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/vlan (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_lan_interface(self):
    """
    Getter method for lan_interface, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/lan_interface (container)
    """
    return self.__lan_interface
      
  def _set_lan_interface(self, v, load=False):
    """
    Setter method for lan_interface, mapped from YANG variable /devices/device/wanop/interception/wccp/router_config/lan_interface (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lan_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lan_interface() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=lan_interface.lan_interface, is_container='container', yang_name="lan-interface", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lan_interface must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lan_interface.lan_interface, is_container='container', yang_name="lan-interface", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__lan_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lan_interface(self):
    self.__lan_interface = YANGDynClass(base=lan_interface.lan_interface, is_container='container', yang_name="lan-interface", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

  redirect_method = __builtin__.property(_get_redirect_method, _set_redirect_method)
  wan_interface_name = __builtin__.property(_get_wan_interface_name, _set_wan_interface_name)
  direction = __builtin__.property(_get_direction, _set_direction)
  vlan = __builtin__.property(_get_vlan, _set_vlan)
  lan_interface = __builtin__.property(_get_lan_interface, _set_lan_interface)


  _pyangbind_elements = collections.OrderedDict([('redirect_method', redirect_method), ('wan_interface_name', wan_interface_name), ('direction', direction), ('vlan', vlan), ('lan_interface', lan_interface), ])


