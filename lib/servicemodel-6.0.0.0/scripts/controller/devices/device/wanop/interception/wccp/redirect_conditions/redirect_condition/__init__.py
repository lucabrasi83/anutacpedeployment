
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class redirect_condition(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/wanop/interception/wccp/redirect-conditions/redirect-condition. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__index','__match_action','__source_wild_card','__dest_wild_card','__source_cidr','__dest_cidr',)

  _yang_name = 'redirect-condition'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__dest_wild_card = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__dest_cidr = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__source_cidr = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__match_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Deny': {}, u'Permit': {}},), is_leaf=True, yang_name="match-action", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__source_wild_card = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'wanop', u'interception', u'wccp', u'redirect-conditions', u'redirect-condition']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/index (uint32)

    YANG Description: 0..4294967295
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_match_action(self):
    """
    Getter method for match_action, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/match_action (enumeration)

    YANG Description: Permit
Deny

    """
    return self.__match_action
      
  def _set_match_action(self, v, load=False):
    """
    Setter method for match_action, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/match_action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_action() directly.

    YANG Description: Permit
Deny

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Deny': {}, u'Permit': {}},), is_leaf=True, yang_name="match-action", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_action must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Deny': {}, u'Permit': {}},), is_leaf=True, yang_name="match-action", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__match_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_action(self):
    self.__match_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Deny': {}, u'Permit': {}},), is_leaf=True, yang_name="match-action", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_source_wild_card(self):
    """
    Getter method for source_wild_card, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/source_wild_card (string)

    YANG Description: string
    """
    return self.__source_wild_card
      
  def _set_source_wild_card(self, v, load=False):
    """
    Setter method for source_wild_card, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/source_wild_card (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_wild_card is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_wild_card() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_wild_card must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__source_wild_card = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_wild_card(self):
    self.__source_wild_card = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_dest_wild_card(self):
    """
    Getter method for dest_wild_card, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/dest_wild_card (string)

    YANG Description: string
    """
    return self.__dest_wild_card
      
  def _set_dest_wild_card(self, v, load=False):
    """
    Setter method for dest_wild_card, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/dest_wild_card (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_wild_card is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_wild_card() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dest-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_wild_card must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__dest_wild_card = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_wild_card(self):
    self.__dest_wild_card = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-wild-card", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_source_cidr(self):
    """
    Getter method for source_cidr, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/source_cidr (string)

    YANG Description: string
    """
    return self.__source_cidr
      
  def _set_source_cidr(self, v, load=False):
    """
    Setter method for source_cidr, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/source_cidr (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_cidr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_cidr() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_cidr must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__source_cidr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_cidr(self):
    self.__source_cidr = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_dest_cidr(self):
    """
    Getter method for dest_cidr, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/dest_cidr (string)

    YANG Description: string
    """
    return self.__dest_cidr
      
  def _set_dest_cidr(self, v, load=False):
    """
    Setter method for dest_cidr, mapped from YANG variable /devices/device/wanop/interception/wccp/redirect_conditions/redirect_condition/dest_cidr (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_cidr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_cidr() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dest-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_cidr must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__dest_cidr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_cidr(self):
    self.__dest_cidr = YANGDynClass(base=unicode, is_leaf=True, yang_name="dest-cidr", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)

  index = __builtin__.property(_get_index, _set_index)
  match_action = __builtin__.property(_get_match_action, _set_match_action)
  source_wild_card = __builtin__.property(_get_source_wild_card, _set_source_wild_card)
  dest_wild_card = __builtin__.property(_get_dest_wild_card, _set_dest_wild_card)
  source_cidr = __builtin__.property(_get_source_cidr, _set_source_cidr)
  dest_cidr = __builtin__.property(_get_dest_cidr, _set_dest_cidr)


  _pyangbind_elements = collections.OrderedDict([('index', index), ('match_action', match_action), ('source_wild_card', source_wild_card), ('dest_wild_card', dest_wild_card), ('source_cidr', source_cidr), ('dest_cidr', dest_cidr), ])


