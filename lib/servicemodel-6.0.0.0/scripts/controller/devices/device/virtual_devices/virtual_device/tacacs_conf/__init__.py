
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import tacacs_servers
class tacacs_conf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/virtual-devices/virtual-device/tacacs-conf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__tacacs_src_interface','__tacacs_host_ip','__timeout','__tacacs_key','__enable_password','__secret_level','__tacacs_server_group','__tacacs_server_name','__tacacs_servers',)

  _yang_name = 'tacacs-conf'
  _module_name = 'firewall'
  _namespace = 'http://anutanetworks.com/firewall'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__tacacs_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-key", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__tacacs_servers = YANGDynClass(base=YANGListType("tacacs_server",tacacs_servers.tacacs_servers, yang_name="tacacs-servers", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='tacacs-server'), is_container='list', yang_name="tacacs-servers", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    self.__enable_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-password", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__tacacs_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="tacacs-host-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ipv4-address', is_config=True)
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timeout", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    self.__secret_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="secret-level", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__tacacs_src_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-src-interface", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    self.__tacacs_server_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__tacacs_server_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'virtual-devices', u'virtual-device', u'tacacs-conf']

  def _get_tacacs_src_interface(self):
    """
    Getter method for tacacs_src_interface, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_src_interface (leafref)

    YANG Description: tacacs-src-interface
    """
    return self.__tacacs_src_interface
      
  def _set_tacacs_src_interface(self, v, load=False):
    """
    Setter method for tacacs_src_interface, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_src_interface (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_src_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_src_interface() directly.

    YANG Description: tacacs-src-interface
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tacacs-src-interface", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_src_interface must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-src-interface", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)""",
        })

    self.__tacacs_src_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_src_interface(self):
    self.__tacacs_src_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-src-interface", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='leafref', is_config=True)


  def _get_tacacs_host_ip(self):
    """
    Getter method for tacacs_host_ip, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_host_ip (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__tacacs_host_ip
      
  def _set_tacacs_host_ip(self, v, load=False):
    """
    Setter method for tacacs_host_ip, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_host_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_host_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_host_ip() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="tacacs-host-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_host_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="tacacs-host-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__tacacs_host_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_host_ip(self):
    self.__tacacs_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="tacacs-host-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ipv4-address', is_config=True)


  def _get_timeout(self):
    """
    Getter method for timeout, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/timeout (uint32)

    YANG Description: 0..4294967295
    """
    return self.__timeout
      
  def _set_timeout(self, v, load=False):
    """
    Setter method for timeout, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/timeout (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timeout() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timeout", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timeout must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timeout", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)""",
        })

    self.__timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timeout(self):
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timeout", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)


  def _get_tacacs_key(self):
    """
    Getter method for tacacs_key, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_key (string)

    YANG Description: string
    """
    return self.__tacacs_key
      
  def _set_tacacs_key(self, v, load=False):
    """
    Setter method for tacacs_key, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_key() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tacacs-key", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-key", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__tacacs_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_key(self):
    self.__tacacs_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-key", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_enable_password(self):
    """
    Getter method for enable_password, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/enable_password (string)

    YANG Description: string
    """
    return self.__enable_password
      
  def _set_enable_password(self, v, load=False):
    """
    Setter method for enable_password, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/enable_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="enable-password", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-password", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__enable_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_password(self):
    self.__enable_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-password", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_secret_level(self):
    """
    Getter method for secret_level, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/secret_level (enumeration)

    YANG Description: 0
5
7

    """
    return self.__secret_level
      
  def _set_secret_level(self, v, load=False):
    """
    Setter method for secret_level, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/secret_level (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secret_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secret_level() directly.

    YANG Description: 0
5
7

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="secret-level", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secret_level must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="secret-level", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__secret_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secret_level(self):
    self.__secret_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="secret-level", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_tacacs_server_group(self):
    """
    Getter method for tacacs_server_group, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_server_group (string)

    YANG Description: string
    """
    return self.__tacacs_server_group
      
  def _set_tacacs_server_group(self, v, load=False):
    """
    Setter method for tacacs_server_group, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_server_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_server_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_server_group() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tacacs-server-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_server_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__tacacs_server_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_server_group(self):
    self.__tacacs_server_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_tacacs_server_name(self):
    """
    Getter method for tacacs_server_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_server_name (string)

    YANG Description: string
    """
    return self.__tacacs_server_name
      
  def _set_tacacs_server_name(self, v, load=False):
    """
    Setter method for tacacs_server_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_server_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_server_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_server_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tacacs-server-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_server_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__tacacs_server_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_server_name(self):
    self.__tacacs_server_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="tacacs-server-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_tacacs_servers(self):
    """
    Getter method for tacacs_servers, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_servers (list)
    """
    return self.__tacacs_servers
      
  def _set_tacacs_servers(self, v, load=False):
    """
    Setter method for tacacs_servers, mapped from YANG variable /devices/device/virtual_devices/virtual_device/tacacs_conf/tacacs_servers (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs_servers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs_servers() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("tacacs_server",tacacs_servers.tacacs_servers, yang_name="tacacs-servers", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='tacacs-server'), is_container='list', yang_name="tacacs-servers", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs_servers must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("tacacs_server",tacacs_servers.tacacs_servers, yang_name="tacacs-servers", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='tacacs-server'), is_container='list', yang_name="tacacs-servers", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)""",
        })

    self.__tacacs_servers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs_servers(self):
    self.__tacacs_servers = YANGDynClass(base=YANGListType("tacacs_server",tacacs_servers.tacacs_servers, yang_name="tacacs-servers", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='tacacs-server'), is_container='list', yang_name="tacacs-servers", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)

  tacacs_src_interface = __builtin__.property(_get_tacacs_src_interface, _set_tacacs_src_interface)
  tacacs_host_ip = __builtin__.property(_get_tacacs_host_ip, _set_tacacs_host_ip)
  timeout = __builtin__.property(_get_timeout, _set_timeout)
  tacacs_key = __builtin__.property(_get_tacacs_key, _set_tacacs_key)
  enable_password = __builtin__.property(_get_enable_password, _set_enable_password)
  secret_level = __builtin__.property(_get_secret_level, _set_secret_level)
  tacacs_server_group = __builtin__.property(_get_tacacs_server_group, _set_tacacs_server_group)
  tacacs_server_name = __builtin__.property(_get_tacacs_server_name, _set_tacacs_server_name)
  tacacs_servers = __builtin__.property(_get_tacacs_servers, _set_tacacs_servers)


  _pyangbind_elements = collections.OrderedDict([('tacacs_src_interface', tacacs_src_interface), ('tacacs_host_ip', tacacs_host_ip), ('timeout', timeout), ('tacacs_key', tacacs_key), ('enable_password', enable_password), ('secret_level', secret_level), ('tacacs_server_group', tacacs_server_group), ('tacacs_server_name', tacacs_server_name), ('tacacs_servers', tacacs_servers), ])


