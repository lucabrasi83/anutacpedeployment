
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import snmp_server
import snmp_traps
import snmp_community_list
import snmp_mib
class snmp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/virtual-devices/virtual-device/snmp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__community','__rw_community','__system_shutdown','__comm_auth_type','__snmp_version','__snmp_server','__snmp_traps','__snmp_community_list','__contact','__location','__all_traps','__vrf','__routing_instance','__view_name','__view_type','__oid','__trap_source','__trap_group','__trap_type','__trap_recipient_address','__group_name','__user','__group_priviledge','__group_auth_type','__acl_name','__packet_size','__interface_name','__snmp_ifmib_ifindex_persist','__v3_auth_type','__v3_auth_paswd','__encrpt_type','__encrpt_length','__encrpt_paswd','__snmp_mib',)

  _yang_name = 'snmp'
  _module_name = 'firewall'
  _namespace = 'http://anutanetworks.com/firewall'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__snmp_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'v2c': {}, u'v1': {}, u'all': {}, u'v3': {}, u'v2': {}},), is_leaf=True, yang_name="snmp-version", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__snmp_mib = YANGDynClass(base=YANGListType("mib_persistence",snmp_mib.snmp_mib, yang_name="snmp-mib", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mib-persistence'), is_container='list', yang_name="snmp-mib", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    self.__snmp_traps = YANGDynClass(base=YANGListType("snmp_trap",snmp_traps.snmp_traps, yang_name="snmp-traps", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-trap'), is_container='list', yang_name="snmp-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    self.__snmp_server = YANGDynClass(base=YANGListType("snmp_server_ip",snmp_server.snmp_server, yang_name="snmp-server", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-server-ip'), is_container='list', yang_name="snmp-server", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__group_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__all_traps = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="all-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    self.__group_priviledge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read': {}, u'write': {}, u'access': {}, u'notify': {}},), is_leaf=True, yang_name="group-priviledge", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__packet_size = YANGDynClass(base=unicode, is_leaf=True, yang_name="packet-size", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__encrpt_paswd = YANGDynClass(base=unicode, is_leaf=True, yang_name="encrpt-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__trap_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__encrpt_length = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'128': {}, u'256': {}, u'192': {}},), is_leaf=True, yang_name="encrpt-length", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__trap_recipient_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="trap-recipient-address", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ip-address', is_config=True)
    self.__system_shutdown = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-shutdown", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    self.__acl_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__view_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'exclude': {}, u'include': {}},), is_leaf=True, yang_name="view-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__user = YANGDynClass(base=unicode, is_leaf=True, yang_name="user", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__v3_auth_paswd = YANGDynClass(base=unicode, is_leaf=True, yang_name="v3-auth-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__encrpt_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'3des': {}, u'aes': {}, u'des': {}},), is_leaf=True, yang_name="encrpt-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__trap_source = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-source", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__snmp_ifmib_ifindex_persist = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmp-ifmib-ifindex-persist", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    self.__group_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'noauth': {}, u'auth': {}, u'priv': {}},), is_leaf=True, yang_name="group-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__trap_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__view_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="view-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__contact = YANGDynClass(base=unicode, is_leaf=True, yang_name="contact", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__rw_community = YANGDynClass(base=unicode, is_leaf=True, yang_name="rw-community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__routing_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="routing-instance", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    self.__v3_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sha': {}, u'md5': {}},), is_leaf=True, yang_name="v3-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__snmp_community_list = YANGDynClass(base=YANGListType("snmp_string",snmp_community_list.snmp_community_list, yang_name="snmp-community-list", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-string'), is_container='list', yang_name="snmp-community-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    self.__comm_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-write': {}, u'read-only': {}},), is_leaf=True, yang_name="comm-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'virtual-devices', u'virtual-device', u'snmp']

  def _get_community(self):
    """
    Getter method for community, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/community (string)

    YANG Description: string
    """
    return self.__community
      
  def _set_community(self, v, load=False):
    """
    Setter method for community, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community(self):
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_rw_community(self):
    """
    Getter method for rw_community, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/rw_community (string)

    YANG Description: string
    """
    return self.__rw_community
      
  def _set_rw_community(self, v, load=False):
    """
    Setter method for rw_community, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/rw_community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rw_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rw_community() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rw-community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rw_community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rw-community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__rw_community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rw_community(self):
    self.__rw_community = YANGDynClass(base=unicode, is_leaf=True, yang_name="rw-community", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_system_shutdown(self):
    """
    Getter method for system_shutdown, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/system_shutdown (boolean)

    YANG Description: Enable use of the SNMP reload command
    """
    return self.__system_shutdown
      
  def _set_system_shutdown(self, v, load=False):
    """
    Setter method for system_shutdown, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/system_shutdown (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_shutdown is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_shutdown() directly.

    YANG Description: Enable use of the SNMP reload command
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-shutdown", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_shutdown must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-shutdown", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)""",
        })

    self.__system_shutdown = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_shutdown(self):
    self.__system_shutdown = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="system-shutdown", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)


  def _get_comm_auth_type(self):
    """
    Getter method for comm_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/comm_auth_type (enumeration)

    YANG Description: read-write
read-only

    """
    return self.__comm_auth_type
      
  def _set_comm_auth_type(self, v, load=False):
    """
    Setter method for comm_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/comm_auth_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_comm_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_comm_auth_type() directly.

    YANG Description: read-write
read-only

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-write': {}, u'read-only': {}},), is_leaf=True, yang_name="comm-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """comm_auth_type must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-write': {}, u'read-only': {}},), is_leaf=True, yang_name="comm-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__comm_auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_comm_auth_type(self):
    self.__comm_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read-write': {}, u'read-only': {}},), is_leaf=True, yang_name="comm-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_snmp_version(self):
    """
    Getter method for snmp_version, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_version (enumeration)

    YANG Description: all
v1
v2
v3
v2c

    """
    return self.__snmp_version
      
  def _set_snmp_version(self, v, load=False):
    """
    Setter method for snmp_version, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_version (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_version() directly.

    YANG Description: all
v1
v2
v3
v2c

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'v2c': {}, u'v1': {}, u'all': {}, u'v3': {}, u'v2': {}},), is_leaf=True, yang_name="snmp-version", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_version must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'v2c': {}, u'v1': {}, u'all': {}, u'v3': {}, u'v2': {}},), is_leaf=True, yang_name="snmp-version", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__snmp_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_version(self):
    self.__snmp_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'v2c': {}, u'v1': {}, u'all': {}, u'v3': {}, u'v2': {}},), is_leaf=True, yang_name="snmp-version", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_snmp_server(self):
    """
    Getter method for snmp_server, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_server (list)
    """
    return self.__snmp_server
      
  def _set_snmp_server(self, v, load=False):
    """
    Setter method for snmp_server, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_server() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("snmp_server_ip",snmp_server.snmp_server, yang_name="snmp-server", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-server-ip'), is_container='list', yang_name="snmp-server", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("snmp_server_ip",snmp_server.snmp_server, yang_name="snmp-server", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-server-ip'), is_container='list', yang_name="snmp-server", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)""",
        })

    self.__snmp_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_server(self):
    self.__snmp_server = YANGDynClass(base=YANGListType("snmp_server_ip",snmp_server.snmp_server, yang_name="snmp-server", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-server-ip'), is_container='list', yang_name="snmp-server", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)


  def _get_snmp_traps(self):
    """
    Getter method for snmp_traps, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_traps (list)
    """
    return self.__snmp_traps
      
  def _set_snmp_traps(self, v, load=False):
    """
    Setter method for snmp_traps, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_traps (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_traps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_traps() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("snmp_trap",snmp_traps.snmp_traps, yang_name="snmp-traps", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-trap'), is_container='list', yang_name="snmp-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_traps must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("snmp_trap",snmp_traps.snmp_traps, yang_name="snmp-traps", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-trap'), is_container='list', yang_name="snmp-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)""",
        })

    self.__snmp_traps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_traps(self):
    self.__snmp_traps = YANGDynClass(base=YANGListType("snmp_trap",snmp_traps.snmp_traps, yang_name="snmp-traps", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-trap'), is_container='list', yang_name="snmp-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)


  def _get_snmp_community_list(self):
    """
    Getter method for snmp_community_list, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_community_list (list)
    """
    return self.__snmp_community_list
      
  def _set_snmp_community_list(self, v, load=False):
    """
    Setter method for snmp_community_list, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_community_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_community_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_community_list() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("snmp_string",snmp_community_list.snmp_community_list, yang_name="snmp-community-list", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-string'), is_container='list', yang_name="snmp-community-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_community_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("snmp_string",snmp_community_list.snmp_community_list, yang_name="snmp-community-list", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-string'), is_container='list', yang_name="snmp-community-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)""",
        })

    self.__snmp_community_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_community_list(self):
    self.__snmp_community_list = YANGDynClass(base=YANGListType("snmp_string",snmp_community_list.snmp_community_list, yang_name="snmp-community-list", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='snmp-string'), is_container='list', yang_name="snmp-community-list", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)


  def _get_contact(self):
    """
    Getter method for contact, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/contact (string)

    YANG Description: string
    """
    return self.__contact
      
  def _set_contact(self, v, load=False):
    """
    Setter method for contact, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/contact (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_contact is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_contact() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="contact", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """contact must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="contact", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__contact = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_contact(self):
    self.__contact = YANGDynClass(base=unicode, is_leaf=True, yang_name="contact", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/location (string)

    YANG Description: string
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_all_traps(self):
    """
    Getter method for all_traps, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/all_traps (boolean)

    YANG Description: all-traps: True/False
    """
    return self.__all_traps
      
  def _set_all_traps(self, v, load=False):
    """
    Setter method for all_traps, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/all_traps (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_all_traps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_all_traps() directly.

    YANG Description: all-traps: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="all-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """all_traps must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="all-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)""",
        })

    self.__all_traps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_all_traps(self):
    self.__all_traps = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="all-traps", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/vrf (string)

    YANG Description: string
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_routing_instance(self):
    """
    Getter method for routing_instance, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/routing_instance (uint32)

    YANG Description: 0..4294967295
    """
    return self.__routing_instance
      
  def _set_routing_instance(self, v, load=False):
    """
    Setter method for routing_instance, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/routing_instance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_routing_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_routing_instance() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="routing-instance", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """routing_instance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="routing-instance", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)""",
        })

    self.__routing_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_routing_instance(self):
    self.__routing_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="routing-instance", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='uint32', is_config=True)


  def _get_view_name(self):
    """
    Getter method for view_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/view_name (string)

    YANG Description: string
    """
    return self.__view_name
      
  def _set_view_name(self, v, load=False):
    """
    Setter method for view_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/view_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_view_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_view_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="view-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """view_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="view-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__view_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_view_name(self):
    self.__view_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="view-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_view_type(self):
    """
    Getter method for view_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/view_type (enumeration)

    YANG Description: include
exclude

    """
    return self.__view_type
      
  def _set_view_type(self, v, load=False):
    """
    Setter method for view_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/view_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_view_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_view_type() directly.

    YANG Description: include
exclude

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'exclude': {}, u'include': {}},), is_leaf=True, yang_name="view-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """view_type must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'exclude': {}, u'include': {}},), is_leaf=True, yang_name="view-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__view_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_view_type(self):
    self.__view_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'exclude': {}, u'include': {}},), is_leaf=True, yang_name="view-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_oid(self):
    """
    Getter method for oid, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/oid (string)

    YANG Description: string
    """
    return self.__oid
      
  def _set_oid(self, v, load=False):
    """
    Setter method for oid, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/oid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oid() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oid", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__oid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oid(self):
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_trap_source(self):
    """
    Getter method for trap_source, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_source (string)

    YANG Description: string
    """
    return self.__trap_source
      
  def _set_trap_source(self, v, load=False):
    """
    Setter method for trap_source, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_source (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trap_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trap_source() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="trap-source", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trap_source must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-source", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__trap_source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trap_source(self):
    self.__trap_source = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-source", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_trap_group(self):
    """
    Getter method for trap_group, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_group (string)

    YANG Description: string
    """
    return self.__trap_group
      
  def _set_trap_group(self, v, load=False):
    """
    Setter method for trap_group, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trap_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trap_group() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="trap-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trap_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__trap_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trap_group(self):
    self.__trap_group = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-group", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_trap_type(self):
    """
    Getter method for trap_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_type (string)

    YANG Description: string
    """
    return self.__trap_type
      
  def _set_trap_type(self, v, load=False):
    """
    Setter method for trap_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trap_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trap_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="trap-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trap_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__trap_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trap_type(self):
    self.__trap_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="trap-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_trap_recipient_address(self):
    """
    Getter method for trap_recipient_address, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_recipient_address (inet:ip-address)

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    return self.__trap_recipient_address
      
  def _set_trap_recipient_address(self, v, load=False):
    """
    Setter method for trap_recipient_address, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/trap_recipient_address (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trap_recipient_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trap_recipient_address() directly.

    YANG Description: Valid IPv4/v6 Address (A.B.C.D for e.x: 172.16.1.1 or X::Y for e.x: 2001::1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="trap-recipient-address", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trap_recipient_address must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="trap-recipient-address", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__trap_recipient_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trap_recipient_address(self):
    self.__trap_recipient_address = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="trap-recipient-address", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='inet:ip-address', is_config=True)


  def _get_group_name(self):
    """
    Getter method for group_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_name (string)

    YANG Description: string
    """
    return self.__group_name
      
  def _set_group_name(self, v, load=False):
    """
    Setter method for group_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="group-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_name(self):
    self.__group_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_user(self):
    """
    Getter method for user, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/user (string)

    YANG Description: string
    """
    return self.__user
      
  def _set_user(self, v, load=False):
    """
    Setter method for user, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/user (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user(self):
    self.__user = YANGDynClass(base=unicode, is_leaf=True, yang_name="user", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_group_priviledge(self):
    """
    Getter method for group_priviledge, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_priviledge (enumeration)

    YANG Description: read
write
notify
access

    """
    return self.__group_priviledge
      
  def _set_group_priviledge(self, v, load=False):
    """
    Setter method for group_priviledge, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_priviledge (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_priviledge is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_priviledge() directly.

    YANG Description: read
write
notify
access

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read': {}, u'write': {}, u'access': {}, u'notify': {}},), is_leaf=True, yang_name="group-priviledge", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_priviledge must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read': {}, u'write': {}, u'access': {}, u'notify': {}},), is_leaf=True, yang_name="group-priviledge", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__group_priviledge = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_priviledge(self):
    self.__group_priviledge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'read': {}, u'write': {}, u'access': {}, u'notify': {}},), is_leaf=True, yang_name="group-priviledge", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_group_auth_type(self):
    """
    Getter method for group_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_auth_type (enumeration)

    YANG Description: auth
noauth
priv

    """
    return self.__group_auth_type
      
  def _set_group_auth_type(self, v, load=False):
    """
    Setter method for group_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/group_auth_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_auth_type() directly.

    YANG Description: auth
noauth
priv

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'noauth': {}, u'auth': {}, u'priv': {}},), is_leaf=True, yang_name="group-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_auth_type must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'noauth': {}, u'auth': {}, u'priv': {}},), is_leaf=True, yang_name="group-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__group_auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_auth_type(self):
    self.__group_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'noauth': {}, u'auth': {}, u'priv': {}},), is_leaf=True, yang_name="group-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_acl_name(self):
    """
    Getter method for acl_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/acl_name (string)

    YANG Description: string
    """
    return self.__acl_name
      
  def _set_acl_name(self, v, load=False):
    """
    Setter method for acl_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/acl_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acl_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acl_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="acl-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acl_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__acl_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acl_name(self):
    self.__acl_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="acl-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_packet_size(self):
    """
    Getter method for packet_size, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/packet_size (string)

    YANG Description: string
    """
    return self.__packet_size
      
  def _set_packet_size(self, v, load=False):
    """
    Setter method for packet_size, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/packet_size (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_size() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="packet-size", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_size must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="packet-size", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__packet_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_size(self):
    self.__packet_size = YANGDynClass(base=unicode, is_leaf=True, yang_name="packet-size", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/interface_name (string)

    YANG Description: string
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_snmp_ifmib_ifindex_persist(self):
    """
    Getter method for snmp_ifmib_ifindex_persist, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_ifmib_ifindex_persist (boolean)

    YANG Description: snmp-ifmib-ifindex-persist: True/False
    """
    return self.__snmp_ifmib_ifindex_persist
      
  def _set_snmp_ifmib_ifindex_persist(self, v, load=False):
    """
    Setter method for snmp_ifmib_ifindex_persist, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_ifmib_ifindex_persist (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_ifmib_ifindex_persist is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_ifmib_ifindex_persist() directly.

    YANG Description: snmp-ifmib-ifindex-persist: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmp-ifmib-ifindex-persist", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_ifmib_ifindex_persist must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmp-ifmib-ifindex-persist", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)""",
        })

    self.__snmp_ifmib_ifindex_persist = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_ifmib_ifindex_persist(self):
    self.__snmp_ifmib_ifindex_persist = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmp-ifmib-ifindex-persist", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)


  def _get_v3_auth_type(self):
    """
    Getter method for v3_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/v3_auth_type (enumeration)

    YANG Description: sha
md5

    """
    return self.__v3_auth_type
      
  def _set_v3_auth_type(self, v, load=False):
    """
    Setter method for v3_auth_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/v3_auth_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v3_auth_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v3_auth_type() directly.

    YANG Description: sha
md5

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sha': {}, u'md5': {}},), is_leaf=True, yang_name="v3-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v3_auth_type must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sha': {}, u'md5': {}},), is_leaf=True, yang_name="v3-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__v3_auth_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v3_auth_type(self):
    self.__v3_auth_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'sha': {}, u'md5': {}},), is_leaf=True, yang_name="v3-auth-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_v3_auth_paswd(self):
    """
    Getter method for v3_auth_paswd, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/v3_auth_paswd (string)

    YANG Description: string
    """
    return self.__v3_auth_paswd
      
  def _set_v3_auth_paswd(self, v, load=False):
    """
    Setter method for v3_auth_paswd, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/v3_auth_paswd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v3_auth_paswd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v3_auth_paswd() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="v3-auth-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v3_auth_paswd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="v3-auth-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__v3_auth_paswd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v3_auth_paswd(self):
    self.__v3_auth_paswd = YANGDynClass(base=unicode, is_leaf=True, yang_name="v3-auth-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_encrpt_type(self):
    """
    Getter method for encrpt_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_type (enumeration)

    YANG Description: 3des
aes
des

    """
    return self.__encrpt_type
      
  def _set_encrpt_type(self, v, load=False):
    """
    Setter method for encrpt_type, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encrpt_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encrpt_type() directly.

    YANG Description: 3des
aes
des

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'3des': {}, u'aes': {}, u'des': {}},), is_leaf=True, yang_name="encrpt-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encrpt_type must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'3des': {}, u'aes': {}, u'des': {}},), is_leaf=True, yang_name="encrpt-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__encrpt_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encrpt_type(self):
    self.__encrpt_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'3des': {}, u'aes': {}, u'des': {}},), is_leaf=True, yang_name="encrpt-type", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_encrpt_length(self):
    """
    Getter method for encrpt_length, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_length (enumeration)

    YANG Description: 128
192
256

    """
    return self.__encrpt_length
      
  def _set_encrpt_length(self, v, load=False):
    """
    Setter method for encrpt_length, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_length (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encrpt_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encrpt_length() directly.

    YANG Description: 128
192
256

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'128': {}, u'256': {}, u'192': {}},), is_leaf=True, yang_name="encrpt-length", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encrpt_length must be of a type compatible with enumeration""",
          'defined-type': "firewall:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'128': {}, u'256': {}, u'192': {}},), is_leaf=True, yang_name="encrpt-length", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)""",
        })

    self.__encrpt_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encrpt_length(self):
    self.__encrpt_length = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'128': {}, u'256': {}, u'192': {}},), is_leaf=True, yang_name="encrpt-length", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='enumeration', is_config=True)


  def _get_encrpt_paswd(self):
    """
    Getter method for encrpt_paswd, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_paswd (string)

    YANG Description: string
    """
    return self.__encrpt_paswd
      
  def _set_encrpt_paswd(self, v, load=False):
    """
    Setter method for encrpt_paswd, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/encrpt_paswd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_encrpt_paswd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_encrpt_paswd() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="encrpt-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """encrpt_paswd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="encrpt-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__encrpt_paswd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_encrpt_paswd(self):
    self.__encrpt_paswd = YANGDynClass(base=unicode, is_leaf=True, yang_name="encrpt-paswd", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_snmp_mib(self):
    """
    Getter method for snmp_mib, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_mib (list)
    """
    return self.__snmp_mib
      
  def _set_snmp_mib(self, v, load=False):
    """
    Setter method for snmp_mib, mapped from YANG variable /devices/device/virtual_devices/virtual_device/snmp/snmp_mib (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_mib is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_mib() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("mib_persistence",snmp_mib.snmp_mib, yang_name="snmp-mib", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mib-persistence'), is_container='list', yang_name="snmp-mib", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_mib must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mib_persistence",snmp_mib.snmp_mib, yang_name="snmp-mib", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mib-persistence'), is_container='list', yang_name="snmp-mib", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)""",
        })

    self.__snmp_mib = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_mib(self):
    self.__snmp_mib = YANGDynClass(base=YANGListType("mib_persistence",snmp_mib.snmp_mib, yang_name="snmp-mib", module_name="firewall", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mib-persistence'), is_container='list', yang_name="snmp-mib", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='list', is_config=True)

  community = __builtin__.property(_get_community, _set_community)
  rw_community = __builtin__.property(_get_rw_community, _set_rw_community)
  system_shutdown = __builtin__.property(_get_system_shutdown, _set_system_shutdown)
  comm_auth_type = __builtin__.property(_get_comm_auth_type, _set_comm_auth_type)
  snmp_version = __builtin__.property(_get_snmp_version, _set_snmp_version)
  snmp_server = __builtin__.property(_get_snmp_server, _set_snmp_server)
  snmp_traps = __builtin__.property(_get_snmp_traps, _set_snmp_traps)
  snmp_community_list = __builtin__.property(_get_snmp_community_list, _set_snmp_community_list)
  contact = __builtin__.property(_get_contact, _set_contact)
  location = __builtin__.property(_get_location, _set_location)
  all_traps = __builtin__.property(_get_all_traps, _set_all_traps)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  routing_instance = __builtin__.property(_get_routing_instance, _set_routing_instance)
  view_name = __builtin__.property(_get_view_name, _set_view_name)
  view_type = __builtin__.property(_get_view_type, _set_view_type)
  oid = __builtin__.property(_get_oid, _set_oid)
  trap_source = __builtin__.property(_get_trap_source, _set_trap_source)
  trap_group = __builtin__.property(_get_trap_group, _set_trap_group)
  trap_type = __builtin__.property(_get_trap_type, _set_trap_type)
  trap_recipient_address = __builtin__.property(_get_trap_recipient_address, _set_trap_recipient_address)
  group_name = __builtin__.property(_get_group_name, _set_group_name)
  user = __builtin__.property(_get_user, _set_user)
  group_priviledge = __builtin__.property(_get_group_priviledge, _set_group_priviledge)
  group_auth_type = __builtin__.property(_get_group_auth_type, _set_group_auth_type)
  acl_name = __builtin__.property(_get_acl_name, _set_acl_name)
  packet_size = __builtin__.property(_get_packet_size, _set_packet_size)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  snmp_ifmib_ifindex_persist = __builtin__.property(_get_snmp_ifmib_ifindex_persist, _set_snmp_ifmib_ifindex_persist)
  v3_auth_type = __builtin__.property(_get_v3_auth_type, _set_v3_auth_type)
  v3_auth_paswd = __builtin__.property(_get_v3_auth_paswd, _set_v3_auth_paswd)
  encrpt_type = __builtin__.property(_get_encrpt_type, _set_encrpt_type)
  encrpt_length = __builtin__.property(_get_encrpt_length, _set_encrpt_length)
  encrpt_paswd = __builtin__.property(_get_encrpt_paswd, _set_encrpt_paswd)
  snmp_mib = __builtin__.property(_get_snmp_mib, _set_snmp_mib)


  _pyangbind_elements = collections.OrderedDict([('community', community), ('rw_community', rw_community), ('system_shutdown', system_shutdown), ('comm_auth_type', comm_auth_type), ('snmp_version', snmp_version), ('snmp_server', snmp_server), ('snmp_traps', snmp_traps), ('snmp_community_list', snmp_community_list), ('contact', contact), ('location', location), ('all_traps', all_traps), ('vrf', vrf), ('routing_instance', routing_instance), ('view_name', view_name), ('view_type', view_type), ('oid', oid), ('trap_source', trap_source), ('trap_group', trap_group), ('trap_type', trap_type), ('trap_recipient_address', trap_recipient_address), ('group_name', group_name), ('user', user), ('group_priviledge', group_priviledge), ('group_auth_type', group_auth_type), ('acl_name', acl_name), ('packet_size', packet_size), ('interface_name', interface_name), ('snmp_ifmib_ifindex_persist', snmp_ifmib_ifindex_persist), ('v3_auth_type', v3_auth_type), ('v3_auth_paswd', v3_auth_paswd), ('encrpt_type', encrpt_type), ('encrpt_length', encrpt_length), ('encrpt_paswd', encrpt_paswd), ('snmp_mib', snmp_mib), ])


