
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class features(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/features. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__telnet','__ssh','__tacacs','__udld','__interface_vlan','__lacp','__bgp','__hsrp','__dhcp','__lldp','__bfd','__vpc','__fex','__cdp','__domain_lookup','__tcp_small_servers','__udp_small_servers','__finger','__source_route','__bootp_server','__http_server','__http_secure_server','__banner_exec','__banner_exec_string','__banner_login','__banner_login_string','__banner_motd','__banner_motd_string',)

  _yang_name = 'features'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__banner_motd_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-motd-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__banner_exec_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-exec-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__banner_exec = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-exec", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__banner_login = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-login", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__interface_vlan = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="interface-vlan", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__lacp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lacp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__cdp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="cdp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__udp_small_servers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__lldp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lldp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__bfd = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bfd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__bootp_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bootp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__finger = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="finger", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__udld = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udld", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__dhcp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="dhcp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__fex = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="fex", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__source_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="source-route", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__banner_login_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-login-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__hsrp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="hsrp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__telnet = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="telnet", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__ssh = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ssh", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__vpc = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="vpc", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__tacacs = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tacacs", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__banner_motd = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-motd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__bgp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bgp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__http_secure_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-secure-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__http_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__domain_lookup = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="domain-lookup", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    self.__tcp_small_servers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tcp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'features']

  def _get_telnet(self):
    """
    Getter method for telnet, mapped from YANG variable /devices/device/features/telnet (flag)

    YANG Description: enable
disable

    """
    return self.__telnet
      
  def _set_telnet(self, v, load=False):
    """
    Setter method for telnet, mapped from YANG variable /devices/device/features/telnet (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_telnet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_telnet() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="telnet", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """telnet must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="telnet", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__telnet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_telnet(self):
    self.__telnet = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="telnet", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_ssh(self):
    """
    Getter method for ssh, mapped from YANG variable /devices/device/features/ssh (flag)

    YANG Description: enable
disable

    """
    return self.__ssh
      
  def _set_ssh(self, v, load=False):
    """
    Setter method for ssh, mapped from YANG variable /devices/device/features/ssh (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssh() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ssh", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssh must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ssh", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__ssh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssh(self):
    self.__ssh = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="ssh", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_tacacs(self):
    """
    Getter method for tacacs, mapped from YANG variable /devices/device/features/tacacs (flag)

    YANG Description: enable
disable

    """
    return self.__tacacs
      
  def _set_tacacs(self, v, load=False):
    """
    Setter method for tacacs, mapped from YANG variable /devices/device/features/tacacs (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tacacs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tacacs() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tacacs", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tacacs must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tacacs", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__tacacs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tacacs(self):
    self.__tacacs = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tacacs", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_udld(self):
    """
    Getter method for udld, mapped from YANG variable /devices/device/features/udld (flag)

    YANG Description: enable
disable

    """
    return self.__udld
      
  def _set_udld(self, v, load=False):
    """
    Setter method for udld, mapped from YANG variable /devices/device/features/udld (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udld is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udld() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udld", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udld must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udld", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__udld = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udld(self):
    self.__udld = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udld", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_interface_vlan(self):
    """
    Getter method for interface_vlan, mapped from YANG variable /devices/device/features/interface_vlan (flag)

    YANG Description: enable
disable

    """
    return self.__interface_vlan
      
  def _set_interface_vlan(self, v, load=False):
    """
    Setter method for interface_vlan, mapped from YANG variable /devices/device/features/interface_vlan (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_vlan() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="interface-vlan", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_vlan must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="interface-vlan", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__interface_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_vlan(self):
    self.__interface_vlan = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="interface-vlan", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_lacp(self):
    """
    Getter method for lacp, mapped from YANG variable /devices/device/features/lacp (flag)

    YANG Description: enable
disable

    """
    return self.__lacp
      
  def _set_lacp(self, v, load=False):
    """
    Setter method for lacp, mapped from YANG variable /devices/device/features/lacp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lacp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lacp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lacp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lacp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lacp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__lacp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lacp(self):
    self.__lacp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lacp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_bgp(self):
    """
    Getter method for bgp, mapped from YANG variable /devices/device/features/bgp (flag)

    YANG Description: enable
disable

    """
    return self.__bgp
      
  def _set_bgp(self, v, load=False):
    """
    Setter method for bgp, mapped from YANG variable /devices/device/features/bgp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bgp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bgp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__bgp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp(self):
    self.__bgp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bgp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_hsrp(self):
    """
    Getter method for hsrp, mapped from YANG variable /devices/device/features/hsrp (flag)

    YANG Description: enable
disable

    """
    return self.__hsrp
      
  def _set_hsrp(self, v, load=False):
    """
    Setter method for hsrp, mapped from YANG variable /devices/device/features/hsrp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hsrp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hsrp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="hsrp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hsrp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="hsrp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__hsrp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hsrp(self):
    self.__hsrp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="hsrp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_dhcp(self):
    """
    Getter method for dhcp, mapped from YANG variable /devices/device/features/dhcp (flag)

    YANG Description: enable
disable

    """
    return self.__dhcp
      
  def _set_dhcp(self, v, load=False):
    """
    Setter method for dhcp, mapped from YANG variable /devices/device/features/dhcp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="dhcp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="dhcp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__dhcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp(self):
    self.__dhcp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="dhcp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_lldp(self):
    """
    Getter method for lldp, mapped from YANG variable /devices/device/features/lldp (flag)

    YANG Description: enable
disable

    """
    return self.__lldp
      
  def _set_lldp(self, v, load=False):
    """
    Setter method for lldp, mapped from YANG variable /devices/device/features/lldp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lldp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lldp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lldp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lldp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lldp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__lldp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lldp(self):
    self.__lldp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="lldp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /devices/device/features/bfd (flag)

    YANG Description: enable
disable

    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /devices/device/features/bfd (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bfd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bfd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bfd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_vpc(self):
    """
    Getter method for vpc, mapped from YANG variable /devices/device/features/vpc (flag)

    YANG Description: enable
disable

    """
    return self.__vpc
      
  def _set_vpc(self, v, load=False):
    """
    Setter method for vpc, mapped from YANG variable /devices/device/features/vpc (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpc() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="vpc", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpc must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="vpc", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__vpc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpc(self):
    self.__vpc = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="vpc", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_fex(self):
    """
    Getter method for fex, mapped from YANG variable /devices/device/features/fex (flag)

    YANG Description: enable
disable

    """
    return self.__fex
      
  def _set_fex(self, v, load=False):
    """
    Setter method for fex, mapped from YANG variable /devices/device/features/fex (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fex() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="fex", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fex must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="fex", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__fex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fex(self):
    self.__fex = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="fex", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_cdp(self):
    """
    Getter method for cdp, mapped from YANG variable /devices/device/features/cdp (flag)

    YANG Description: enable
disable

    """
    return self.__cdp
      
  def _set_cdp(self, v, load=False):
    """
    Setter method for cdp, mapped from YANG variable /devices/device/features/cdp (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cdp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cdp() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="cdp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cdp must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="cdp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__cdp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cdp(self):
    self.__cdp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="cdp", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_domain_lookup(self):
    """
    Getter method for domain_lookup, mapped from YANG variable /devices/device/features/domain_lookup (flag)

    YANG Description: enable
disable

    """
    return self.__domain_lookup
      
  def _set_domain_lookup(self, v, load=False):
    """
    Setter method for domain_lookup, mapped from YANG variable /devices/device/features/domain_lookup (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_lookup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_lookup() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="domain-lookup", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_lookup must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="domain-lookup", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__domain_lookup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_lookup(self):
    self.__domain_lookup = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="domain-lookup", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_tcp_small_servers(self):
    """
    Getter method for tcp_small_servers, mapped from YANG variable /devices/device/features/tcp_small_servers (flag)

    YANG Description: enable
disable

    """
    return self.__tcp_small_servers
      
  def _set_tcp_small_servers(self, v, load=False):
    """
    Setter method for tcp_small_servers, mapped from YANG variable /devices/device/features/tcp_small_servers (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tcp_small_servers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tcp_small_servers() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tcp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tcp_small_servers must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tcp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__tcp_small_servers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tcp_small_servers(self):
    self.__tcp_small_servers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="tcp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_udp_small_servers(self):
    """
    Getter method for udp_small_servers, mapped from YANG variable /devices/device/features/udp_small_servers (flag)

    YANG Description: enable
disable

    """
    return self.__udp_small_servers
      
  def _set_udp_small_servers(self, v, load=False):
    """
    Setter method for udp_small_servers, mapped from YANG variable /devices/device/features/udp_small_servers (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_udp_small_servers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_udp_small_servers() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """udp_small_servers must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__udp_small_servers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_udp_small_servers(self):
    self.__udp_small_servers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="udp-small-servers", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_finger(self):
    """
    Getter method for finger, mapped from YANG variable /devices/device/features/finger (flag)

    YANG Description: enable
disable

    """
    return self.__finger
      
  def _set_finger(self, v, load=False):
    """
    Setter method for finger, mapped from YANG variable /devices/device/features/finger (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_finger is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_finger() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="finger", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """finger must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="finger", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__finger = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_finger(self):
    self.__finger = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="finger", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_source_route(self):
    """
    Getter method for source_route, mapped from YANG variable /devices/device/features/source_route (flag)

    YANG Description: enable
disable

    """
    return self.__source_route
      
  def _set_source_route(self, v, load=False):
    """
    Setter method for source_route, mapped from YANG variable /devices/device/features/source_route (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_route() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="source-route", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_route must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="source-route", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__source_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_route(self):
    self.__source_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="source-route", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_bootp_server(self):
    """
    Getter method for bootp_server, mapped from YANG variable /devices/device/features/bootp_server (flag)

    YANG Description: enable
disable

    """
    return self.__bootp_server
      
  def _set_bootp_server(self, v, load=False):
    """
    Setter method for bootp_server, mapped from YANG variable /devices/device/features/bootp_server (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bootp_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bootp_server() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bootp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bootp_server must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bootp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__bootp_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bootp_server(self):
    self.__bootp_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="bootp-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_http_server(self):
    """
    Getter method for http_server, mapped from YANG variable /devices/device/features/http_server (flag)

    YANG Description: enable
disable

    """
    return self.__http_server
      
  def _set_http_server(self, v, load=False):
    """
    Setter method for http_server, mapped from YANG variable /devices/device/features/http_server (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_server() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_server must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__http_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_server(self):
    self.__http_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_http_secure_server(self):
    """
    Getter method for http_secure_server, mapped from YANG variable /devices/device/features/http_secure_server (flag)

    YANG Description: enable
disable

    """
    return self.__http_secure_server
      
  def _set_http_secure_server(self, v, load=False):
    """
    Setter method for http_secure_server, mapped from YANG variable /devices/device/features/http_secure_server (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_http_secure_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_http_secure_server() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-secure-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """http_secure_server must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-secure-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__http_secure_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_http_secure_server(self):
    self.__http_secure_server = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="http-secure-server", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_banner_exec(self):
    """
    Getter method for banner_exec, mapped from YANG variable /devices/device/features/banner_exec (flag)

    YANG Description: enable
disable

    """
    return self.__banner_exec
      
  def _set_banner_exec(self, v, load=False):
    """
    Setter method for banner_exec, mapped from YANG variable /devices/device/features/banner_exec (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_exec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_exec() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-exec", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_exec must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-exec", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__banner_exec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_exec(self):
    self.__banner_exec = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-exec", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_banner_exec_string(self):
    """
    Getter method for banner_exec_string, mapped from YANG variable /devices/device/features/banner_exec_string (string)

    YANG Description: string
    """
    return self.__banner_exec_string
      
  def _set_banner_exec_string(self, v, load=False):
    """
    Setter method for banner_exec_string, mapped from YANG variable /devices/device/features/banner_exec_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_exec_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_exec_string() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="banner-exec-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_exec_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-exec-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__banner_exec_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_exec_string(self):
    self.__banner_exec_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-exec-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_banner_login(self):
    """
    Getter method for banner_login, mapped from YANG variable /devices/device/features/banner_login (flag)

    YANG Description: enable
disable

    """
    return self.__banner_login
      
  def _set_banner_login(self, v, load=False):
    """
    Setter method for banner_login, mapped from YANG variable /devices/device/features/banner_login (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_login is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_login() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-login", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_login must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-login", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__banner_login = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_login(self):
    self.__banner_login = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-login", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_banner_login_string(self):
    """
    Getter method for banner_login_string, mapped from YANG variable /devices/device/features/banner_login_string (string)

    YANG Description: string
    """
    return self.__banner_login_string
      
  def _set_banner_login_string(self, v, load=False):
    """
    Setter method for banner_login_string, mapped from YANG variable /devices/device/features/banner_login_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_login_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_login_string() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="banner-login-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_login_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-login-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__banner_login_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_login_string(self):
    self.__banner_login_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-login-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_banner_motd(self):
    """
    Getter method for banner_motd, mapped from YANG variable /devices/device/features/banner_motd (flag)

    YANG Description: enable
disable

    """
    return self.__banner_motd
      
  def _set_banner_motd(self, v, load=False):
    """
    Setter method for banner_motd, mapped from YANG variable /devices/device/features/banner_motd (flag)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_motd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_motd() directly.

    YANG Description: enable
disable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-motd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_motd must be of a type compatible with flag""",
          'defined-type': "basicDeviceConfigs:flag",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-motd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)""",
        })

    self.__banner_motd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_motd(self):
    self.__banner_motd = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="banner-motd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='flag', is_config=True)


  def _get_banner_motd_string(self):
    """
    Getter method for banner_motd_string, mapped from YANG variable /devices/device/features/banner_motd_string (string)

    YANG Description: string
    """
    return self.__banner_motd_string
      
  def _set_banner_motd_string(self, v, load=False):
    """
    Setter method for banner_motd_string, mapped from YANG variable /devices/device/features/banner_motd_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_banner_motd_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_banner_motd_string() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="banner-motd-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """banner_motd_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-motd-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__banner_motd_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_banner_motd_string(self):
    self.__banner_motd_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="banner-motd-string", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)

  telnet = __builtin__.property(_get_telnet, _set_telnet)
  ssh = __builtin__.property(_get_ssh, _set_ssh)
  tacacs = __builtin__.property(_get_tacacs, _set_tacacs)
  udld = __builtin__.property(_get_udld, _set_udld)
  interface_vlan = __builtin__.property(_get_interface_vlan, _set_interface_vlan)
  lacp = __builtin__.property(_get_lacp, _set_lacp)
  bgp = __builtin__.property(_get_bgp, _set_bgp)
  hsrp = __builtin__.property(_get_hsrp, _set_hsrp)
  dhcp = __builtin__.property(_get_dhcp, _set_dhcp)
  lldp = __builtin__.property(_get_lldp, _set_lldp)
  bfd = __builtin__.property(_get_bfd, _set_bfd)
  vpc = __builtin__.property(_get_vpc, _set_vpc)
  fex = __builtin__.property(_get_fex, _set_fex)
  cdp = __builtin__.property(_get_cdp, _set_cdp)
  domain_lookup = __builtin__.property(_get_domain_lookup, _set_domain_lookup)
  tcp_small_servers = __builtin__.property(_get_tcp_small_servers, _set_tcp_small_servers)
  udp_small_servers = __builtin__.property(_get_udp_small_servers, _set_udp_small_servers)
  finger = __builtin__.property(_get_finger, _set_finger)
  source_route = __builtin__.property(_get_source_route, _set_source_route)
  bootp_server = __builtin__.property(_get_bootp_server, _set_bootp_server)
  http_server = __builtin__.property(_get_http_server, _set_http_server)
  http_secure_server = __builtin__.property(_get_http_secure_server, _set_http_secure_server)
  banner_exec = __builtin__.property(_get_banner_exec, _set_banner_exec)
  banner_exec_string = __builtin__.property(_get_banner_exec_string, _set_banner_exec_string)
  banner_login = __builtin__.property(_get_banner_login, _set_banner_login)
  banner_login_string = __builtin__.property(_get_banner_login_string, _set_banner_login_string)
  banner_motd = __builtin__.property(_get_banner_motd, _set_banner_motd)
  banner_motd_string = __builtin__.property(_get_banner_motd_string, _set_banner_motd_string)


  _pyangbind_elements = collections.OrderedDict([('telnet', telnet), ('ssh', ssh), ('tacacs', tacacs), ('udld', udld), ('interface_vlan', interface_vlan), ('lacp', lacp), ('bgp', bgp), ('hsrp', hsrp), ('dhcp', dhcp), ('lldp', lldp), ('bfd', bfd), ('vpc', vpc), ('fex', fex), ('cdp', cdp), ('domain_lookup', domain_lookup), ('tcp_small_servers', tcp_small_servers), ('udp_small_servers', udp_small_servers), ('finger', finger), ('source_route', source_route), ('bootp_server', bootp_server), ('http_server', http_server), ('http_secure_server', http_secure_server), ('banner_exec', banner_exec), ('banner_exec_string', banner_exec_string), ('banner_login', banner_login), ('banner_login_string', banner_login_string), ('banner_motd', banner_motd), ('banner_motd_string', banner_motd_string), ])


