
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import ports
import rules
import optimization_settings
class srdf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/optimization-services/data-replication/srdf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__srdf','__ports','__rules','__optimization_settings',)

  _yang_name = 'srdf'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__rules = YANGDynClass(base=YANGListType("src_ip dst_ip",rules.rules, yang_name="rules", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-ip dst-ip'), is_container='list', yang_name="rules", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    self.__optimization_settings = YANGDynClass(base=YANGListType("group_id",optimization_settings.optimization_settings, yang_name="optimization-settings", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id'), is_container='list', yang_name="optimization-settings", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    self.__srdf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="srdf", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__ports = YANGDynClass(base=YANGListType("port_num",ports.ports, yang_name="ports", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='port-num'), is_container='list', yang_name="ports", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'optimization-services', u'data-replication', u'srdf']

  def _get_srdf(self):
    """
    Getter method for srdf, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/srdf (enumeration)

    YANG Description: enable

    """
    return self.__srdf
      
  def _set_srdf(self, v, load=False):
    """
    Setter method for srdf, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/srdf (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srdf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srdf() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="srdf", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srdf must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="srdf", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__srdf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srdf(self):
    self.__srdf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="srdf", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_ports(self):
    """
    Getter method for ports, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/ports (list)
    """
    return self.__ports
      
  def _set_ports(self, v, load=False):
    """
    Setter method for ports, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/ports (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ports() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("port_num",ports.ports, yang_name="ports", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='port-num'), is_container='list', yang_name="ports", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ports must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("port_num",ports.ports, yang_name="ports", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='port-num'), is_container='list', yang_name="ports", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ports(self):
    self.__ports = YANGDynClass(base=YANGListType("port_num",ports.ports, yang_name="ports", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='port-num'), is_container='list', yang_name="ports", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)


  def _get_rules(self):
    """
    Getter method for rules, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/rules (list)
    """
    return self.__rules
      
  def _set_rules(self, v, load=False):
    """
    Setter method for rules, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/rules (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rules is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rules() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("src_ip dst_ip",rules.rules, yang_name="rules", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-ip dst-ip'), is_container='list', yang_name="rules", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rules must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("src_ip dst_ip",rules.rules, yang_name="rules", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-ip dst-ip'), is_container='list', yang_name="rules", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__rules = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rules(self):
    self.__rules = YANGDynClass(base=YANGListType("src_ip dst_ip",rules.rules, yang_name="rules", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='src-ip dst-ip'), is_container='list', yang_name="rules", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)


  def _get_optimization_settings(self):
    """
    Getter method for optimization_settings, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/optimization_settings (list)
    """
    return self.__optimization_settings
      
  def _set_optimization_settings(self, v, load=False):
    """
    Setter method for optimization_settings, mapped from YANG variable /devices/device/optimization_services/data_replication/srdf/optimization_settings (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_optimization_settings is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_optimization_settings() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("group_id",optimization_settings.optimization_settings, yang_name="optimization-settings", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id'), is_container='list', yang_name="optimization-settings", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """optimization_settings must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("group_id",optimization_settings.optimization_settings, yang_name="optimization-settings", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id'), is_container='list', yang_name="optimization-settings", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)""",
        })

    self.__optimization_settings = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_optimization_settings(self):
    self.__optimization_settings = YANGDynClass(base=YANGListType("group_id",optimization_settings.optimization_settings, yang_name="optimization-settings", module_name="wanoptimizer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id'), is_container='list', yang_name="optimization-settings", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='list', is_config=True)

  srdf = __builtin__.property(_get_srdf, _set_srdf)
  ports = __builtin__.property(_get_ports, _set_ports)
  rules = __builtin__.property(_get_rules, _set_rules)
  optimization_settings = __builtin__.property(_get_optimization_settings, _set_optimization_settings)


  _pyangbind_elements = collections.OrderedDict([('srdf', srdf), ('ports', ports), ('rules', rules), ('optimization_settings', optimization_settings), ])


