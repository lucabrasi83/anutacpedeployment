
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import datastore_sync
import branchwarming
import notification
import disklayout
import sdr_policy
import codec
class datastore(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/optimization-services/data-replication/datastore. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__datastore_type','__datastore_sync','__branchwarming','__notification','__disklayout','__sdr_policy','__codec',)

  _yang_name = 'datastore'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__sdr_policy = YANGDynClass(base=sdr_policy.sdr_policy, is_container='container', yang_name="sdr-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__disklayout = YANGDynClass(base=disklayout.disklayout, is_container='container', yang_name="disklayout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__notification = YANGDynClass(base=notification.notification, is_container='container', yang_name="notification", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__datastore_sync = YANGDynClass(base=datastore_sync.datastore_sync, is_container='container', yang_name="datastore-sync", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__codec = YANGDynClass(base=codec.codec, is_container='container', yang_name="codec", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    self.__datastore_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES_128': {}, u'NONE': {}, u'AES_256': {}, u'AES_192': {}},), is_leaf=True, yang_name="datastore-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__branchwarming = YANGDynClass(base=branchwarming.branchwarming, is_container='container', yang_name="branchwarming", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'optimization-services', u'data-replication', u'datastore']

  def _get_datastore_type(self):
    """
    Getter method for datastore_type, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/datastore_type (enumeration)

    YANG Description: AES_128
AES_192
AES_256
NONE

    """
    return self.__datastore_type
      
  def _set_datastore_type(self, v, load=False):
    """
    Setter method for datastore_type, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/datastore_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_datastore_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_datastore_type() directly.

    YANG Description: AES_128
AES_192
AES_256
NONE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES_128': {}, u'NONE': {}, u'AES_256': {}, u'AES_192': {}},), is_leaf=True, yang_name="datastore-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """datastore_type must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES_128': {}, u'NONE': {}, u'AES_256': {}, u'AES_192': {}},), is_leaf=True, yang_name="datastore-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__datastore_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_datastore_type(self):
    self.__datastore_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'AES_128': {}, u'NONE': {}, u'AES_256': {}, u'AES_192': {}},), is_leaf=True, yang_name="datastore-type", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_datastore_sync(self):
    """
    Getter method for datastore_sync, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/datastore_sync (container)
    """
    return self.__datastore_sync
      
  def _set_datastore_sync(self, v, load=False):
    """
    Setter method for datastore_sync, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/datastore_sync (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_datastore_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_datastore_sync() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=datastore_sync.datastore_sync, is_container='container', yang_name="datastore-sync", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """datastore_sync must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=datastore_sync.datastore_sync, is_container='container', yang_name="datastore-sync", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__datastore_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_datastore_sync(self):
    self.__datastore_sync = YANGDynClass(base=datastore_sync.datastore_sync, is_container='container', yang_name="datastore-sync", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_branchwarming(self):
    """
    Getter method for branchwarming, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/branchwarming (container)
    """
    return self.__branchwarming
      
  def _set_branchwarming(self, v, load=False):
    """
    Setter method for branchwarming, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/branchwarming (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_branchwarming is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_branchwarming() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=branchwarming.branchwarming, is_container='container', yang_name="branchwarming", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """branchwarming must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=branchwarming.branchwarming, is_container='container', yang_name="branchwarming", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__branchwarming = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_branchwarming(self):
    self.__branchwarming = YANGDynClass(base=branchwarming.branchwarming, is_container='container', yang_name="branchwarming", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_notification(self):
    """
    Getter method for notification, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/notification (container)
    """
    return self.__notification
      
  def _set_notification(self, v, load=False):
    """
    Setter method for notification, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/notification (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_notification is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_notification() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=notification.notification, is_container='container', yang_name="notification", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """notification must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=notification.notification, is_container='container', yang_name="notification", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__notification = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_notification(self):
    self.__notification = YANGDynClass(base=notification.notification, is_container='container', yang_name="notification", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_disklayout(self):
    """
    Getter method for disklayout, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/disklayout (container)

    YANG Description: Displays the current data store disk layout status.
    """
    return self.__disklayout
      
  def _set_disklayout(self, v, load=False):
    """
    Setter method for disklayout, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/disklayout (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disklayout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disklayout() directly.

    YANG Description: Displays the current data store disk layout status.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=disklayout.disklayout, is_container='container', yang_name="disklayout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disklayout must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=disklayout.disklayout, is_container='container', yang_name="disklayout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__disklayout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disklayout(self):
    self.__disklayout = YANGDynClass(base=disklayout.disklayout, is_container='container', yang_name="disklayout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_sdr_policy(self):
    """
    Getter method for sdr_policy, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/sdr_policy (container)
    """
    return self.__sdr_policy
      
  def _set_sdr_policy(self, v, load=False):
    """
    Setter method for sdr_policy, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/sdr_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sdr_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sdr_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=sdr_policy.sdr_policy, is_container='container', yang_name="sdr-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sdr_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=sdr_policy.sdr_policy, is_container='container', yang_name="sdr-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__sdr_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sdr_policy(self):
    self.__sdr_policy = YANGDynClass(base=sdr_policy.sdr_policy, is_container='container', yang_name="sdr-policy", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)


  def _get_codec(self):
    """
    Getter method for codec, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/codec (container)
    """
    return self.__codec
      
  def _set_codec(self, v, load=False):
    """
    Setter method for codec, mapped from YANG variable /devices/device/optimization_services/data_replication/datastore/codec (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_codec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_codec() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=codec.codec, is_container='container', yang_name="codec", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """codec must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=codec.codec, is_container='container', yang_name="codec", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)""",
        })

    self.__codec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_codec(self):
    self.__codec = YANGDynClass(base=codec.codec, is_container='container', yang_name="codec", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='container', is_config=True)

  datastore_type = __builtin__.property(_get_datastore_type, _set_datastore_type)
  datastore_sync = __builtin__.property(_get_datastore_sync, _set_datastore_sync)
  branchwarming = __builtin__.property(_get_branchwarming, _set_branchwarming)
  notification = __builtin__.property(_get_notification, _set_notification)
  disklayout = __builtin__.property(_get_disklayout, _set_disklayout)
  sdr_policy = __builtin__.property(_get_sdr_policy, _set_sdr_policy)
  codec = __builtin__.property(_get_codec, _set_codec)


  _pyangbind_elements = collections.OrderedDict([('datastore_type', datastore_type), ('datastore_sync', datastore_sync), ('branchwarming', branchwarming), ('notification', notification), ('disklayout', disklayout), ('sdr_policy', sdr_policy), ('codec', codec), ])


