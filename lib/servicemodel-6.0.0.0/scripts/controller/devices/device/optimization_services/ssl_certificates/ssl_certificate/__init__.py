
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ssl_certificate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/optimization-services/ssl-certificates/ssl-certificate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ssl','__enable_ssl','__protocol_vers','__sfe_mode','__session_timeout','__server_cert_name','__chain_cert_name',)

  _yang_name = 'ssl-certificate'
  _module_name = 'wanoptimizer'
  _namespace = 'http://anutanetworks.com/wanoptimizer'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enable_ssl = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="enable-ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__sfe_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Mixed': {}, u'Advanced_Only': {}},), is_leaf=True, yang_name="sfe-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__ssl = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'server-cert': {}, u'enable': {}, u'midsession-ssl': {}, u'client-side': {}, u'protocol-vers': {}, u'sfe-mode': {}, u'client-cer-auth': {}, u'proxy-support': {}, u'backend': {}},), is_leaf=True, yang_name="ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__session_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120 .. 86400']}), is_leaf=True, yang_name="session-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    self.__chain_cert_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="chain-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    self.__protocol_vers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSLv3_or_TLSv1': {}, u'TLSv1_only': {}, u'SSLv3_only': {}},), is_leaf=True, yang_name="protocol-vers", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    self.__server_cert_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="server-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'optimization-services', u'ssl-certificates', u'ssl-certificate']

  def _get_ssl(self):
    """
    Getter method for ssl, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/ssl (enumeration)

    YANG Description: enable
backend
client-side
midsession-ssl
client-cer-auth
proxy-support
server-cert
protocol-vers
sfe-mode

    """
    return self.__ssl
      
  def _set_ssl(self, v, load=False):
    """
    Setter method for ssl, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/ssl (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssl() directly.

    YANG Description: enable
backend
client-side
midsession-ssl
client-cer-auth
proxy-support
server-cert
protocol-vers
sfe-mode

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'server-cert': {}, u'enable': {}, u'midsession-ssl': {}, u'client-side': {}, u'protocol-vers': {}, u'sfe-mode': {}, u'client-cer-auth': {}, u'proxy-support': {}, u'backend': {}},), is_leaf=True, yang_name="ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssl must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'server-cert': {}, u'enable': {}, u'midsession-ssl': {}, u'client-side': {}, u'protocol-vers': {}, u'sfe-mode': {}, u'client-cer-auth': {}, u'proxy-support': {}, u'backend': {}},), is_leaf=True, yang_name="ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__ssl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssl(self):
    self.__ssl = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'server-cert': {}, u'enable': {}, u'midsession-ssl': {}, u'client-side': {}, u'protocol-vers': {}, u'sfe-mode': {}, u'client-cer-auth': {}, u'proxy-support': {}, u'backend': {}},), is_leaf=True, yang_name="ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_enable_ssl(self):
    """
    Getter method for enable_ssl, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/enable_ssl (enumeration)

    YANG Description: enable

    """
    return self.__enable_ssl
      
  def _set_enable_ssl(self, v, load=False):
    """
    Setter method for enable_ssl, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/enable_ssl (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_ssl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_ssl() directly.

    YANG Description: enable

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="enable-ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_ssl must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="enable-ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__enable_ssl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_ssl(self):
    self.__enable_ssl = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}},), is_leaf=True, yang_name="enable-ssl", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_protocol_vers(self):
    """
    Getter method for protocol_vers, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/protocol_vers (enumeration)

    YANG Description: SSLv3_or_TLSv1
SSLv3_only
TLSv1_only

    """
    return self.__protocol_vers
      
  def _set_protocol_vers(self, v, load=False):
    """
    Setter method for protocol_vers, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/protocol_vers (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_vers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_vers() directly.

    YANG Description: SSLv3_or_TLSv1
SSLv3_only
TLSv1_only

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSLv3_or_TLSv1': {}, u'TLSv1_only': {}, u'SSLv3_only': {}},), is_leaf=True, yang_name="protocol-vers", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_vers must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSLv3_or_TLSv1': {}, u'TLSv1_only': {}, u'SSLv3_only': {}},), is_leaf=True, yang_name="protocol-vers", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__protocol_vers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_vers(self):
    self.__protocol_vers = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSLv3_or_TLSv1': {}, u'TLSv1_only': {}, u'SSLv3_only': {}},), is_leaf=True, yang_name="protocol-vers", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_sfe_mode(self):
    """
    Getter method for sfe_mode, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/sfe_mode (enumeration)

    YANG Description: Advanced_Only
Mixed

    """
    return self.__sfe_mode
      
  def _set_sfe_mode(self, v, load=False):
    """
    Setter method for sfe_mode, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/sfe_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sfe_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sfe_mode() directly.

    YANG Description: Advanced_Only
Mixed

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Mixed': {}, u'Advanced_Only': {}},), is_leaf=True, yang_name="sfe-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sfe_mode must be of a type compatible with enumeration""",
          'defined-type': "wanoptimizer:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Mixed': {}, u'Advanced_Only': {}},), is_leaf=True, yang_name="sfe-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)""",
        })

    self.__sfe_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sfe_mode(self):
    self.__sfe_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Mixed': {}, u'Advanced_Only': {}},), is_leaf=True, yang_name="sfe-mode", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='enumeration', is_config=True)


  def _get_session_timeout(self):
    """
    Getter method for session_timeout, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/session_timeout (uint32)

    YANG Description: Session Timeout
    """
    return self.__session_timeout
      
  def _set_session_timeout(self, v, load=False):
    """
    Setter method for session_timeout, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/session_timeout (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_timeout() directly.

    YANG Description: Session Timeout
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120 .. 86400']}), is_leaf=True, yang_name="session-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_timeout must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120 .. 86400']}), is_leaf=True, yang_name="session-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)""",
        })

    self.__session_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_timeout(self):
    self.__session_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120 .. 86400']}), is_leaf=True, yang_name="session-timeout", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='uint32', is_config=True)


  def _get_server_cert_name(self):
    """
    Getter method for server_cert_name, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/server_cert_name (string)

    YANG Description: string
    """
    return self.__server_cert_name
      
  def _set_server_cert_name(self, v, load=False):
    """
    Setter method for server_cert_name, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/server_cert_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_server_cert_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_server_cert_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="server-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """server_cert_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="server-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__server_cert_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_server_cert_name(self):
    self.__server_cert_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="server-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)


  def _get_chain_cert_name(self):
    """
    Getter method for chain_cert_name, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/chain_cert_name (string)

    YANG Description: string
    """
    return self.__chain_cert_name
      
  def _set_chain_cert_name(self, v, load=False):
    """
    Setter method for chain_cert_name, mapped from YANG variable /devices/device/optimization_services/ssl_certificates/ssl_certificate/chain_cert_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_chain_cert_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_chain_cert_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="chain-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """chain_cert_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="chain-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)""",
        })

    self.__chain_cert_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_chain_cert_name(self):
    self.__chain_cert_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="chain-cert-name", module_name="wanoptimizer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/wanoptimizer', defining_module='wanoptimizer', yang_type='string', is_config=True)

  ssl = __builtin__.property(_get_ssl, _set_ssl)
  enable_ssl = __builtin__.property(_get_enable_ssl, _set_enable_ssl)
  protocol_vers = __builtin__.property(_get_protocol_vers, _set_protocol_vers)
  sfe_mode = __builtin__.property(_get_sfe_mode, _set_sfe_mode)
  session_timeout = __builtin__.property(_get_session_timeout, _set_session_timeout)
  server_cert_name = __builtin__.property(_get_server_cert_name, _set_server_cert_name)
  chain_cert_name = __builtin__.property(_get_chain_cert_name, _set_chain_cert_name)


  _pyangbind_elements = collections.OrderedDict([('ssl', ssl), ('enable_ssl', enable_ssl), ('protocol_vers', protocol_vers), ('sfe_mode', sfe_mode), ('session_timeout', session_timeout), ('server_cert_name', server_cert_name), ('chain_cert_name', chain_cert_name), ])


