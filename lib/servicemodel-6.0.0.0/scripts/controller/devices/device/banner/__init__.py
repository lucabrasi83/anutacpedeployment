
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class banner(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/banner. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__message','__login_delimiter','__delimiter','__login_message','__motd_delimiter','__motd_message','__exec_delimiter','__exec_message',)

  _yang_name = 'banner'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__motd_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__login_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="login-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__exec_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__motd_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__exec_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__login_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="login-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'banner']

  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /devices/device/banner/message (string)

    YANG Description: message leaf is for compatiblity with old builds, can Ignore this field
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /devices/device/banner/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: message leaf is for compatiblity with old builds, can Ignore this field
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_login_delimiter(self):
    """
    Getter method for login_delimiter, mapped from YANG variable /devices/device/banner/login_delimiter (string)

    YANG Description: string
    """
    return self.__login_delimiter
      
  def _set_login_delimiter(self, v, load=False):
    """
    Setter method for login_delimiter, mapped from YANG variable /devices/device/banner/login_delimiter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_login_delimiter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_login_delimiter() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="login-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """login_delimiter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="login-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__login_delimiter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_login_delimiter(self):
    self.__login_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="login-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_delimiter(self):
    """
    Getter method for delimiter, mapped from YANG variable /devices/device/banner/delimiter (string)

    YANG Description: dummy delimiter to support package migration. can Ignore this field
    """
    return self.__delimiter
      
  def _set_delimiter(self, v, load=False):
    """
    Setter method for delimiter, mapped from YANG variable /devices/device/banner/delimiter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delimiter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delimiter() directly.

    YANG Description: dummy delimiter to support package migration. can Ignore this field
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delimiter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__delimiter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delimiter(self):
    self.__delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_login_message(self):
    """
    Getter method for login_message, mapped from YANG variable /devices/device/banner/login_message (string)

    YANG Description: Standard Banner
    """
    return self.__login_message
      
  def _set_login_message(self, v, load=False):
    """
    Setter method for login_message, mapped from YANG variable /devices/device/banner/login_message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_login_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_login_message() directly.

    YANG Description: Standard Banner
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="login-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """login_message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="login-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__login_message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_login_message(self):
    self.__login_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="login-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_motd_delimiter(self):
    """
    Getter method for motd_delimiter, mapped from YANG variable /devices/device/banner/motd_delimiter (string)

    YANG Description: string
    """
    return self.__motd_delimiter
      
  def _set_motd_delimiter(self, v, load=False):
    """
    Setter method for motd_delimiter, mapped from YANG variable /devices/device/banner/motd_delimiter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_motd_delimiter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_motd_delimiter() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="motd-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """motd_delimiter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__motd_delimiter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_motd_delimiter(self):
    self.__motd_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_motd_message(self):
    """
    Getter method for motd_message, mapped from YANG variable /devices/device/banner/motd_message (string)

    YANG Description: string
    """
    return self.__motd_message
      
  def _set_motd_message(self, v, load=False):
    """
    Setter method for motd_message, mapped from YANG variable /devices/device/banner/motd_message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_motd_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_motd_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="motd-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """motd_message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__motd_message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_motd_message(self):
    self.__motd_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="motd-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_exec_delimiter(self):
    """
    Getter method for exec_delimiter, mapped from YANG variable /devices/device/banner/exec_delimiter (string)

    YANG Description: string
    """
    return self.__exec_delimiter
      
  def _set_exec_delimiter(self, v, load=False):
    """
    Setter method for exec_delimiter, mapped from YANG variable /devices/device/banner/exec_delimiter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exec_delimiter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exec_delimiter() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="exec-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exec_delimiter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__exec_delimiter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exec_delimiter(self):
    self.__exec_delimiter = YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-delimiter", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_exec_message(self):
    """
    Getter method for exec_message, mapped from YANG variable /devices/device/banner/exec_message (string)

    YANG Description: string
    """
    return self.__exec_message
      
  def _set_exec_message(self, v, load=False):
    """
    Setter method for exec_message, mapped from YANG variable /devices/device/banner/exec_message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exec_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exec_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="exec-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exec_message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__exec_message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exec_message(self):
    self.__exec_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="exec-message", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)

  message = __builtin__.property(_get_message, _set_message)
  login_delimiter = __builtin__.property(_get_login_delimiter, _set_login_delimiter)
  delimiter = __builtin__.property(_get_delimiter, _set_delimiter)
  login_message = __builtin__.property(_get_login_message, _set_login_message)
  motd_delimiter = __builtin__.property(_get_motd_delimiter, _set_motd_delimiter)
  motd_message = __builtin__.property(_get_motd_message, _set_motd_message)
  exec_delimiter = __builtin__.property(_get_exec_delimiter, _set_exec_delimiter)
  exec_message = __builtin__.property(_get_exec_message, _set_exec_message)


  _pyangbind_elements = collections.OrderedDict([('message', message), ('login_delimiter', login_delimiter), ('delimiter', delimiter), ('login_message', login_message), ('motd_delimiter', motd_delimiter), ('motd_message', motd_message), ('exec_delimiter', exec_delimiter), ('exec_message', exec_message), ])


