
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class dhcp_pool(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/dhcppools/dhcp-pool. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__dhcp_pool_value','__interface_name','__lease_expiry_time','__gateway','__primary_dns','__secondary_dns','__primary_ntp','__secondary_ntp','__probe_ip',)

  _yang_name = 'dhcp-pool'
  _module_name = 'firewall'
  _namespace = 'http://anutanetworks.com/firewall'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__secondary_ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__primary_ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__secondary_dns = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__dhcp_pool_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="dhcp-pool-value", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__primary_dns = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__gateway = YANGDynClass(base=unicode, is_leaf=True, yang_name="gateway", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__probe_ip = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="probe-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    self.__lease_expiry_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="lease-expiry-time", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'dhcppools', u'dhcp-pool']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_dhcp_pool_value(self):
    """
    Getter method for dhcp_pool_value, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/dhcp_pool_value (string)

    YANG Description: string
    """
    return self.__dhcp_pool_value
      
  def _set_dhcp_pool_value(self, v, load=False):
    """
    Setter method for dhcp_pool_value, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/dhcp_pool_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dhcp_pool_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dhcp_pool_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dhcp-pool-value", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dhcp_pool_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dhcp-pool-value", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__dhcp_pool_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dhcp_pool_value(self):
    self.__dhcp_pool_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="dhcp-pool-value", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/interface_name (string)

    YANG Description: string
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_lease_expiry_time(self):
    """
    Getter method for lease_expiry_time, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/lease_expiry_time (string)

    YANG Description: string
    """
    return self.__lease_expiry_time
      
  def _set_lease_expiry_time(self, v, load=False):
    """
    Setter method for lease_expiry_time, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/lease_expiry_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lease_expiry_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lease_expiry_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lease-expiry-time", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lease_expiry_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lease-expiry-time", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__lease_expiry_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lease_expiry_time(self):
    self.__lease_expiry_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="lease-expiry-time", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_gateway(self):
    """
    Getter method for gateway, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/gateway (string)

    YANG Description: string
    """
    return self.__gateway
      
  def _set_gateway(self, v, load=False):
    """
    Setter method for gateway, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/gateway (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gateway is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gateway() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="gateway", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gateway must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="gateway", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__gateway = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gateway(self):
    self.__gateway = YANGDynClass(base=unicode, is_leaf=True, yang_name="gateway", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_primary_dns(self):
    """
    Getter method for primary_dns, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/primary_dns (string)

    YANG Description: string
    """
    return self.__primary_dns
      
  def _set_primary_dns(self, v, load=False):
    """
    Setter method for primary_dns, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/primary_dns (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_dns is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_dns() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="primary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_dns must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__primary_dns = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_dns(self):
    self.__primary_dns = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_secondary_dns(self):
    """
    Getter method for secondary_dns, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/secondary_dns (string)

    YANG Description: string
    """
    return self.__secondary_dns
      
  def _set_secondary_dns(self, v, load=False):
    """
    Setter method for secondary_dns, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/secondary_dns (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_dns is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_dns() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secondary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_dns must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__secondary_dns = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_dns(self):
    self.__secondary_dns = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dns", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_primary_ntp(self):
    """
    Getter method for primary_ntp, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/primary_ntp (string)

    YANG Description: string
    """
    return self.__primary_ntp
      
  def _set_primary_ntp(self, v, load=False):
    """
    Setter method for primary_ntp, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/primary_ntp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_ntp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_ntp() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="primary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_ntp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__primary_ntp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_ntp(self):
    self.__primary_ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_secondary_ntp(self):
    """
    Getter method for secondary_ntp, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/secondary_ntp (string)

    YANG Description: string
    """
    return self.__secondary_ntp
      
  def _set_secondary_ntp(self, v, load=False):
    """
    Setter method for secondary_ntp, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/secondary_ntp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_ntp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_ntp() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secondary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_ntp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)""",
        })

    self.__secondary_ntp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_ntp(self):
    self.__secondary_ntp = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-ntp", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='string', is_config=True)


  def _get_probe_ip(self):
    """
    Getter method for probe_ip, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/probe_ip (boolean)

    YANG Description: probe-ip: True/False
    """
    return self.__probe_ip
      
  def _set_probe_ip(self, v, load=False):
    """
    Setter method for probe_ip, mapped from YANG variable /devices/device/dhcppools/dhcp_pool/probe_ip (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_probe_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_probe_ip() directly.

    YANG Description: probe-ip: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="probe-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """probe_ip must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="probe-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)""",
        })

    self.__probe_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_probe_ip(self):
    self.__probe_ip = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="probe-ip", module_name="firewall", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/firewall', defining_module='firewall', yang_type='boolean', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  dhcp_pool_value = __builtin__.property(_get_dhcp_pool_value, _set_dhcp_pool_value)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  lease_expiry_time = __builtin__.property(_get_lease_expiry_time, _set_lease_expiry_time)
  gateway = __builtin__.property(_get_gateway, _set_gateway)
  primary_dns = __builtin__.property(_get_primary_dns, _set_primary_dns)
  secondary_dns = __builtin__.property(_get_secondary_dns, _set_secondary_dns)
  primary_ntp = __builtin__.property(_get_primary_ntp, _set_primary_ntp)
  secondary_ntp = __builtin__.property(_get_secondary_ntp, _set_secondary_ntp)
  probe_ip = __builtin__.property(_get_probe_ip, _set_probe_ip)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('dhcp_pool_value', dhcp_pool_value), ('interface_name', interface_name), ('lease_expiry_time', lease_expiry_time), ('gateway', gateway), ('primary_dns', primary_dns), ('secondary_dns', secondary_dns), ('primary_ntp', primary_ntp), ('secondary_ntp', secondary_ntp), ('probe_ip', probe_ip), ])


