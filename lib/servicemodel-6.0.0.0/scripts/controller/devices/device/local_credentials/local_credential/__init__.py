
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class local_credential(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/local-credentials/local-credential. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__password','__password_level','__role','__strength_check','__enable_password','__enable_pwd','__enable_password_level','__enable_privilege','__privilege_level','__privilege_secret','__enable_secret','__secret_level','__secret_password',)

  _yang_name = 'local-credential'
  _module_name = 'basicDeviceConfigs'
  _namespace = 'http://anutanetworks.com/basicDeviceConfigs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__secret_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    self.__enable_secret = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__enable_pwd = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-pwd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__enable_password = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__password_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__strength_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="strength-check", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    self.__enable_privilege = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-privilege", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    self.__role = YANGDynClass(base=unicode, is_leaf=True, yang_name="role", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__secret_level = YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__privilege_secret = YANGDynClass(base=unicode, is_leaf=True, yang_name="privilege-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    self.__enable_password_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="enable-password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'local-credentials', u'local-credential']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/local_credentials/local_credential/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/local_credentials/local_credential/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /devices/device/local_credentials/local_credential/password (string)

    YANG Description: string
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /devices/device/local_credentials/local_credential/password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_password_level(self):
    """
    Getter method for password_level, mapped from YANG variable /devices/device/local_credentials/local_credential/password_level (enumeration)

    YANG Description: 0-plain password , 5 -- encrpyted password
    """
    return self.__password_level
      
  def _set_password_level(self, v, load=False):
    """
    Setter method for password_level, mapped from YANG variable /devices/device/local_credentials/local_credential/password_level (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_level() directly.

    YANG Description: 0-plain password , 5 -- encrpyted password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_level must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__password_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_level(self):
    self.__password_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_role(self):
    """
    Getter method for role, mapped from YANG variable /devices/device/local_credentials/local_credential/role (string)

    YANG Description: string
    """
    return self.__role
      
  def _set_role(self, v, load=False):
    """
    Setter method for role, mapped from YANG variable /devices/device/local_credentials/local_credential/role (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="role", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="role", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role(self):
    self.__role = YANGDynClass(base=unicode, is_leaf=True, yang_name="role", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_strength_check(self):
    """
    Getter method for strength_check, mapped from YANG variable /devices/device/local_credentials/local_credential/strength_check (enumeration)

    YANG Description: strength-check of password
    """
    return self.__strength_check
      
  def _set_strength_check(self, v, load=False):
    """
    Setter method for strength_check, mapped from YANG variable /devices/device/local_credentials/local_credential/strength_check (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_strength_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_strength_check() directly.

    YANG Description: strength-check of password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="strength-check", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """strength_check must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="strength-check", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__strength_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_strength_check(self):
    self.__strength_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {}, u'disable': {}},), is_leaf=True, yang_name="strength-check", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_enable_password(self):
    """
    Getter method for enable_password, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_password (boolean)

    YANG Description: enable-password: True/False
    """
    return self.__enable_password
      
  def _set_enable_password(self, v, load=False):
    """
    Setter method for enable_password, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_password (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_password() directly.

    YANG Description: enable-password: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_password must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__enable_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_password(self):
    self.__enable_password = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_enable_pwd(self):
    """
    Getter method for enable_pwd, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_pwd (string)

    YANG Description: string
    """
    return self.__enable_pwd
      
  def _set_enable_pwd(self, v, load=False):
    """
    Setter method for enable_pwd, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_pwd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_pwd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_pwd() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="enable-pwd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_pwd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-pwd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__enable_pwd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_pwd(self):
    self.__enable_pwd = YANGDynClass(base=unicode, is_leaf=True, yang_name="enable-pwd", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_enable_password_level(self):
    """
    Getter method for enable_password_level, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_password_level (enumeration)

    YANG Description: 0-plain password , 5 --encrpyted password
    """
    return self.__enable_password_level
      
  def _set_enable_password_level(self, v, load=False):
    """
    Setter method for enable_password_level, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_password_level (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_password_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_password_level() directly.

    YANG Description: 0-plain password , 5 --encrpyted password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="enable-password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_password_level must be of a type compatible with enumeration""",
          'defined-type': "basicDeviceConfigs:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="enable-password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)""",
        })

    self.__enable_password_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_password_level(self):
    self.__enable_password_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'0': {}, u'5': {}, u'7': {}},), is_leaf=True, yang_name="enable-password-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='enumeration', is_config=True)


  def _get_enable_privilege(self):
    """
    Getter method for enable_privilege, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_privilege (boolean)

    YANG Description: Set user privilege level
    """
    return self.__enable_privilege
      
  def _set_enable_privilege(self, v, load=False):
    """
    Setter method for enable_privilege, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_privilege (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_privilege is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_privilege() directly.

    YANG Description: Set user privilege level
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-privilege", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_privilege must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-privilege", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__enable_privilege = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_privilege(self):
    self.__enable_privilege = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-privilege", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_privilege_level(self):
    """
    Getter method for privilege_level, mapped from YANG variable /devices/device/local_credentials/local_credential/privilege_level (uint32)

    YANG Description: user privilege level
    """
    return self.__privilege_level
      
  def _set_privilege_level(self, v, load=False):
    """
    Setter method for privilege_level, mapped from YANG variable /devices/device/local_credentials/local_credential/privilege_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_privilege_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_privilege_level() directly.

    YANG Description: user privilege level
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """privilege_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)""",
        })

    self.__privilege_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_privilege_level(self):
    self.__privilege_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="privilege-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='uint32', is_config=True)


  def _get_privilege_secret(self):
    """
    Getter method for privilege_secret, mapped from YANG variable /devices/device/local_credentials/local_credential/privilege_secret (string)

    YANG Description: user privilege secret key
    """
    return self.__privilege_secret
      
  def _set_privilege_secret(self, v, load=False):
    """
    Setter method for privilege_secret, mapped from YANG variable /devices/device/local_credentials/local_credential/privilege_secret (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_privilege_secret is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_privilege_secret() directly.

    YANG Description: user privilege secret key
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="privilege-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """privilege_secret must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="privilege-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__privilege_secret = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_privilege_secret(self):
    self.__privilege_secret = YANGDynClass(base=unicode, is_leaf=True, yang_name="privilege-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_enable_secret(self):
    """
    Getter method for enable_secret, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_secret (boolean)

    YANG Description: enable secret at local level
    """
    return self.__enable_secret
      
  def _set_enable_secret(self, v, load=False):
    """
    Setter method for enable_secret, mapped from YANG variable /devices/device/local_credentials/local_credential/enable_secret (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_secret is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_secret() directly.

    YANG Description: enable secret at local level
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_secret must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)""",
        })

    self.__enable_secret = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_secret(self):
    self.__enable_secret = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-secret", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='boolean', is_config=True)


  def _get_secret_level(self):
    """
    Getter method for secret_level, mapped from YANG variable /devices/device/local_credentials/local_credential/secret_level (string)

    YANG Description: local secret level
    """
    return self.__secret_level
      
  def _set_secret_level(self, v, load=False):
    """
    Setter method for secret_level, mapped from YANG variable /devices/device/local_credentials/local_credential/secret_level (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secret_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secret_level() directly.

    YANG Description: local secret level
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secret-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secret_level must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__secret_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secret_level(self):
    self.__secret_level = YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-level", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)


  def _get_secret_password(self):
    """
    Getter method for secret_password, mapped from YANG variable /devices/device/local_credentials/local_credential/secret_password (string)

    YANG Description: string
    """
    return self.__secret_password
      
  def _set_secret_password(self, v, load=False):
    """
    Setter method for secret_password, mapped from YANG variable /devices/device/local_credentials/local_credential/secret_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secret_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secret_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secret_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)""",
        })

    self.__secret_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secret_password(self):
    self.__secret_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="secret-password", module_name="basicDeviceConfigs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/basicDeviceConfigs', defining_module='basicDeviceConfigs', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  password = __builtin__.property(_get_password, _set_password)
  password_level = __builtin__.property(_get_password_level, _set_password_level)
  role = __builtin__.property(_get_role, _set_role)
  strength_check = __builtin__.property(_get_strength_check, _set_strength_check)
  enable_password = __builtin__.property(_get_enable_password, _set_enable_password)
  enable_pwd = __builtin__.property(_get_enable_pwd, _set_enable_pwd)
  enable_password_level = __builtin__.property(_get_enable_password_level, _set_enable_password_level)
  enable_privilege = __builtin__.property(_get_enable_privilege, _set_enable_privilege)
  privilege_level = __builtin__.property(_get_privilege_level, _set_privilege_level)
  privilege_secret = __builtin__.property(_get_privilege_secret, _set_privilege_secret)
  enable_secret = __builtin__.property(_get_enable_secret, _set_enable_secret)
  secret_level = __builtin__.property(_get_secret_level, _set_secret_level)
  secret_password = __builtin__.property(_get_secret_password, _set_secret_password)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('password', password), ('password_level', password_level), ('role', role), ('strength_check', strength_check), ('enable_password', enable_password), ('enable_pwd', enable_pwd), ('enable_password_level', enable_password_level), ('enable_privilege', enable_privilege), ('privilege_level', privilege_level), ('privilege_secret', privilege_secret), ('enable_secret', enable_secret), ('secret_level', secret_level), ('secret_password', secret_password), ])


