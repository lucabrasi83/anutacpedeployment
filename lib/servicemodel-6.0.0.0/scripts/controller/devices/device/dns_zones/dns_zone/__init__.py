
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import name_server
import forward_to
class dns_zone(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/dns-zones/dns-zone. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__alias_name','__account_name','__vrf','__record_count','__last_modified_time','__dns_sec_status','__domain_type','__name_server','__forward_to','__view','__zone_type',)

  _yang_name = 'dns-zone'
  _module_name = 'dns'
  _namespace = 'http://anutanetworks.com/dns'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__record_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="record-count", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='uint32', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__name_server = YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    self.__dns_sec_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNSIGNED': {}, u'SIGNED': {}},), is_leaf=True, yang_name="dns-sec-status", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='sec-status', is_config=True)
    self.__domain_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ALIAS': {}, u'PRIMARY': {}, u'SECONDARY': {}},), is_leaf=True, yang_name="domain-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='domain-category', is_config=True)
    self.__zone_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__forward_to = YANGDynClass(base=YANGListType("name",forward_to.forward_to, yang_name="forward-to", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="forward-to", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__last_modified_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-modified-time", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__alias_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alias-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__account_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="account-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__view = YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'dns-zones', u'dns-zone']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /devices/device/dns_zones/dns_zone/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /devices/device/dns_zones/dns_zone/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_alias_name(self):
    """
    Getter method for alias_name, mapped from YANG variable /devices/device/dns_zones/dns_zone/alias_name (string)

    YANG Description: string
    """
    return self.__alias_name
      
  def _set_alias_name(self, v, load=False):
    """
    Setter method for alias_name, mapped from YANG variable /devices/device/dns_zones/dns_zone/alias_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alias_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alias_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alias-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alias_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alias-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__alias_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alias_name(self):
    self.__alias_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="alias-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_account_name(self):
    """
    Getter method for account_name, mapped from YANG variable /devices/device/dns_zones/dns_zone/account_name (string)

    YANG Description: string
    """
    return self.__account_name
      
  def _set_account_name(self, v, load=False):
    """
    Setter method for account_name, mapped from YANG variable /devices/device/dns_zones/dns_zone/account_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_account_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_account_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="account-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """account_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="account-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__account_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_account_name(self):
    self.__account_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="account-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /devices/device/dns_zones/dns_zone/vrf (string)

    YANG Description: string
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /devices/device/dns_zones/dns_zone/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_record_count(self):
    """
    Getter method for record_count, mapped from YANG variable /devices/device/dns_zones/dns_zone/record_count (uint32)

    YANG Description: 0..4294967295
    """
    return self.__record_count
      
  def _set_record_count(self, v, load=False):
    """
    Setter method for record_count, mapped from YANG variable /devices/device/dns_zones/dns_zone/record_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_record_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_record_count() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="record-count", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """record_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="record-count", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='uint32', is_config=True)""",
        })

    self.__record_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_record_count(self):
    self.__record_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="record-count", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='uint32', is_config=True)


  def _get_last_modified_time(self):
    """
    Getter method for last_modified_time, mapped from YANG variable /devices/device/dns_zones/dns_zone/last_modified_time (string)

    YANG Description: string
    """
    return self.__last_modified_time
      
  def _set_last_modified_time(self, v, load=False):
    """
    Setter method for last_modified_time, mapped from YANG variable /devices/device/dns_zones/dns_zone/last_modified_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_modified_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_modified_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-modified-time", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_modified_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-modified-time", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__last_modified_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_modified_time(self):
    self.__last_modified_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-modified-time", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_dns_sec_status(self):
    """
    Getter method for dns_sec_status, mapped from YANG variable /devices/device/dns_zones/dns_zone/dns_sec_status (sec-status)

    YANG Description: SIGNED
UNSIGNED

    """
    return self.__dns_sec_status
      
  def _set_dns_sec_status(self, v, load=False):
    """
    Setter method for dns_sec_status, mapped from YANG variable /devices/device/dns_zones/dns_zone/dns_sec_status (sec-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dns_sec_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dns_sec_status() directly.

    YANG Description: SIGNED
UNSIGNED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNSIGNED': {}, u'SIGNED': {}},), is_leaf=True, yang_name="dns-sec-status", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='sec-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dns_sec_status must be of a type compatible with sec-status""",
          'defined-type': "dns:sec-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNSIGNED': {}, u'SIGNED': {}},), is_leaf=True, yang_name="dns-sec-status", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='sec-status', is_config=True)""",
        })

    self.__dns_sec_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dns_sec_status(self):
    self.__dns_sec_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNSIGNED': {}, u'SIGNED': {}},), is_leaf=True, yang_name="dns-sec-status", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='sec-status', is_config=True)


  def _get_domain_type(self):
    """
    Getter method for domain_type, mapped from YANG variable /devices/device/dns_zones/dns_zone/domain_type (domain-category)

    YANG Description: PRIMARY
SECONDARY
ALIAS

    """
    return self.__domain_type
      
  def _set_domain_type(self, v, load=False):
    """
    Setter method for domain_type, mapped from YANG variable /devices/device/dns_zones/dns_zone/domain_type (domain-category)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_type() directly.

    YANG Description: PRIMARY
SECONDARY
ALIAS

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ALIAS': {}, u'PRIMARY': {}, u'SECONDARY': {}},), is_leaf=True, yang_name="domain-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='domain-category', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_type must be of a type compatible with domain-category""",
          'defined-type': "dns:domain-category",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ALIAS': {}, u'PRIMARY': {}, u'SECONDARY': {}},), is_leaf=True, yang_name="domain-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='domain-category', is_config=True)""",
        })

    self.__domain_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_type(self):
    self.__domain_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ALIAS': {}, u'PRIMARY': {}, u'SECONDARY': {}},), is_leaf=True, yang_name="domain-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='domain-category', is_config=True)


  def _get_name_server(self):
    """
    Getter method for name_server, mapped from YANG variable /devices/device/dns_zones/dns_zone/name_server (list)
    """
    return self.__name_server
      
  def _set_name_server(self, v, load=False):
    """
    Setter method for name_server, mapped from YANG variable /devices/device/dns_zones/dns_zone/name_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name_server() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)""",
        })

    self.__name_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name_server(self):
    self.__name_server = YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)


  def _get_forward_to(self):
    """
    Getter method for forward_to, mapped from YANG variable /devices/device/dns_zones/dns_zone/forward_to (list)
    """
    return self.__forward_to
      
  def _set_forward_to(self, v, load=False):
    """
    Setter method for forward_to, mapped from YANG variable /devices/device/dns_zones/dns_zone/forward_to (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forward_to is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forward_to() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",forward_to.forward_to, yang_name="forward-to", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="forward-to", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forward_to must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",forward_to.forward_to, yang_name="forward-to", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="forward-to", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)""",
        })

    self.__forward_to = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forward_to(self):
    self.__forward_to = YANGDynClass(base=YANGListType("name",forward_to.forward_to, yang_name="forward-to", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="forward-to", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)


  def _get_view(self):
    """
    Getter method for view, mapped from YANG variable /devices/device/dns_zones/dns_zone/view (string)

    YANG Description: string
    """
    return self.__view
      
  def _set_view(self, v, load=False):
    """
    Setter method for view, mapped from YANG variable /devices/device/dns_zones/dns_zone/view (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_view is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_view() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="view", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """view must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__view = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_view(self):
    self.__view = YANGDynClass(base=unicode, is_leaf=True, yang_name="view", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_zone_type(self):
    """
    Getter method for zone_type, mapped from YANG variable /devices/device/dns_zones/dns_zone/zone_type (string)

    YANG Description: string
    """
    return self.__zone_type
      
  def _set_zone_type(self, v, load=False):
    """
    Setter method for zone_type, mapped from YANG variable /devices/device/dns_zones/dns_zone/zone_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_zone_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_zone_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="zone-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """zone_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__zone_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_zone_type(self):
    self.__zone_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-type", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  alias_name = __builtin__.property(_get_alias_name, _set_alias_name)
  account_name = __builtin__.property(_get_account_name, _set_account_name)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  record_count = __builtin__.property(_get_record_count, _set_record_count)
  last_modified_time = __builtin__.property(_get_last_modified_time, _set_last_modified_time)
  dns_sec_status = __builtin__.property(_get_dns_sec_status, _set_dns_sec_status)
  domain_type = __builtin__.property(_get_domain_type, _set_domain_type)
  name_server = __builtin__.property(_get_name_server, _set_name_server)
  forward_to = __builtin__.property(_get_forward_to, _set_forward_to)
  view = __builtin__.property(_get_view, _set_view)
  zone_type = __builtin__.property(_get_zone_type, _set_zone_type)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('alias_name', alias_name), ('account_name', account_name), ('vrf', vrf), ('record_count', record_count), ('last_modified_time', last_modified_time), ('dns_sec_status', dns_sec_status), ('domain_type', domain_type), ('name_server', name_server), ('forward_to', forward_to), ('view', view), ('zone_type', zone_type), ])


