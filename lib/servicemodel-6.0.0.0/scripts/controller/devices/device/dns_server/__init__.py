
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import name_server
class dns_server(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/dns-server. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__domain_name','__vrf','__lookup_source_interface','__name_server',)

  _yang_name = 'dns-server'
  _module_name = 'dns'
  _namespace = 'http://anutanetworks.com/dns'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__lookup_source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="lookup-source-interface", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    self.__name_server = YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'dns-server']

  def _get_domain_name(self):
    """
    Getter method for domain_name, mapped from YANG variable /devices/device/dns_server/domain_name (string)

    YANG Description: string
    """
    return self.__domain_name
      
  def _set_domain_name(self, v, load=False):
    """
    Setter method for domain_name, mapped from YANG variable /devices/device/dns_server/domain_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_name(self):
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_vrf(self):
    """
    Getter method for vrf, mapped from YANG variable /devices/device/dns_server/vrf (string)

    YANG Description: string
    """
    return self.__vrf
      
  def _set_vrf(self, v, load=False):
    """
    Setter method for vrf, mapped from YANG variable /devices/device/dns_server/vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf(self):
    self.__vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_lookup_source_interface(self):
    """
    Getter method for lookup_source_interface, mapped from YANG variable /devices/device/dns_server/lookup_source_interface (string)

    YANG Description: string
    """
    return self.__lookup_source_interface
      
  def _set_lookup_source_interface(self, v, load=False):
    """
    Setter method for lookup_source_interface, mapped from YANG variable /devices/device/dns_server/lookup_source_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lookup_source_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lookup_source_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lookup-source-interface", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lookup_source_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lookup-source-interface", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)""",
        })

    self.__lookup_source_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lookup_source_interface(self):
    self.__lookup_source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="lookup-source-interface", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='string', is_config=True)


  def _get_name_server(self):
    """
    Getter method for name_server, mapped from YANG variable /devices/device/dns_server/name_server (list)
    """
    return self.__name_server
      
  def _set_name_server(self, v, load=False):
    """
    Setter method for name_server, mapped from YANG variable /devices/device/dns_server/name_server (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name_server() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name_server must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)""",
        })

    self.__name_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name_server(self):
    self.__name_server = YANGDynClass(base=YANGListType("server",name_server.name_server, yang_name="name-server", module_name="dns", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='server'), is_container='list', yang_name="name-server", module_name="dns", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dns', defining_module='dns', yang_type='list', is_config=True)

  domain_name = __builtin__.property(_get_domain_name, _set_domain_name)
  vrf = __builtin__.property(_get_vrf, _set_vrf)
  lookup_source_interface = __builtin__.property(_get_lookup_source_interface, _set_lookup_source_interface)
  name_server = __builtin__.property(_get_name_server, _set_name_server)


  _pyangbind_elements = collections.OrderedDict([('domain_name', domain_name), ('vrf', vrf), ('lookup_source_interface', lookup_source_interface), ('name_server', name_server), ])


