
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import shipped_device
class site(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/tenants/tenant/site. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__site_name','__job_name_prefix','__device_template_name','__cpe_as_number','__router_as_number','__router_name','__oam_ip_prefix','__oam_gateway_ip','__oam_vlan_id','__wan_0_local_ip_prefix','__wan_0_wan_link_name','__wan_0_vlan_id','__wan_0_remote_ip_prefix','__wan_1_vrf_name','__wan_1_local_ip_prefix','__wan_1_remote_ip_prefix','__wan_1_wan_link_name','__country','__street','__city','__state','__zip_code','__shipped_device',)

  _yang_name = 'site'
  _module_name = 'cso'
  _namespace = 'http://anutanetworks.com/cso'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__wan_1_local_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    self.__shipped_device = YANGDynClass(base=YANGListType("serial_number",shipped_device.shipped_device, yang_name="shipped_device", module_name="cso", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serial_number'), is_container='list', yang_name="shipped_device", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='list', is_config=True)
    self.__wan_0_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wan_0_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    self.__street = YANGDynClass(base=unicode, is_leaf=True, yang_name="street", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__job_name_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="job_name_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__city = YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__router_as_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="router_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    self.__device_template_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="device_template_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__wan_1_wan_link_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__oam_gateway_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="oam_gateway_ip", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-address', is_config=True)
    self.__wan_1_vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_vrf_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__zip_code = YANGDynClass(base=unicode, is_leaf=True, yang_name="zip_code", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__oam_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oam_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    self.__router_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="router_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__wan_0_local_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    self.__cpe_as_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpe_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    self.__wan_0_remote_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    self.__oam_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="oam_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    self.__wan_1_remote_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    self.__wan_0_wan_link_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_0_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'tenants', u'tenant', u'site']

  def _get_site_name(self):
    """
    Getter method for site_name, mapped from YANG variable /devices/device/tenants/tenant/site/site_name (string)

    YANG Description: string
    """
    return self.__site_name
      
  def _set_site_name(self, v, load=False):
    """
    Setter method for site_name, mapped from YANG variable /devices/device/tenants/tenant/site/site_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="site_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="site_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__site_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_name(self):
    self.__site_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="site_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_job_name_prefix(self):
    """
    Getter method for job_name_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/job_name_prefix (string)

    YANG Description: string
    """
    return self.__job_name_prefix
      
  def _set_job_name_prefix(self, v, load=False):
    """
    Setter method for job_name_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/job_name_prefix (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job_name_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job_name_prefix() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job_name_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job_name_prefix must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job_name_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__job_name_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job_name_prefix(self):
    self.__job_name_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="job_name_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_device_template_name(self):
    """
    Getter method for device_template_name, mapped from YANG variable /devices/device/tenants/tenant/site/device_template_name (string)

    YANG Description: string
    """
    return self.__device_template_name
      
  def _set_device_template_name(self, v, load=False):
    """
    Setter method for device_template_name, mapped from YANG variable /devices/device/tenants/tenant/site/device_template_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_template_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_template_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device_template_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_template_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device_template_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__device_template_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_template_name(self):
    self.__device_template_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="device_template_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_cpe_as_number(self):
    """
    Getter method for cpe_as_number, mapped from YANG variable /devices/device/tenants/tenant/site/cpe_as_number (uint32)

    YANG Description: 0..4294967295
    """
    return self.__cpe_as_number
      
  def _set_cpe_as_number(self, v, load=False):
    """
    Setter method for cpe_as_number, mapped from YANG variable /devices/device/tenants/tenant/site/cpe_as_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpe_as_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpe_as_number() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpe_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpe_as_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpe_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)""",
        })

    self.__cpe_as_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpe_as_number(self):
    self.__cpe_as_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpe_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)


  def _get_router_as_number(self):
    """
    Getter method for router_as_number, mapped from YANG variable /devices/device/tenants/tenant/site/router_as_number (uint32)

    YANG Description: 0..4294967295
    """
    return self.__router_as_number
      
  def _set_router_as_number(self, v, load=False):
    """
    Setter method for router_as_number, mapped from YANG variable /devices/device/tenants/tenant/site/router_as_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_as_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_as_number() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="router_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_as_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="router_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)""",
        })

    self.__router_as_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_as_number(self):
    self.__router_as_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="router_as_number", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)


  def _get_router_name(self):
    """
    Getter method for router_name, mapped from YANG variable /devices/device/tenants/tenant/site/router_name (string)

    YANG Description: string
    """
    return self.__router_name
      
  def _set_router_name(self, v, load=False):
    """
    Setter method for router_name, mapped from YANG variable /devices/device/tenants/tenant/site/router_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="router_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="router_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__router_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_name(self):
    self.__router_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="router_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_oam_ip_prefix(self):
    """
    Getter method for oam_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/oam_ip_prefix (inet:ipv4-prefix)

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    return self.__oam_ip_prefix
      
  def _set_oam_ip_prefix(self, v, load=False):
    """
    Setter method for oam_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/oam_ip_prefix (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oam_ip_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oam_ip_prefix() directly.

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="oam_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oam_ip_prefix must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="oam_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__oam_ip_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oam_ip_prefix(self):
    self.__oam_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="oam_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_oam_gateway_ip(self):
    """
    Getter method for oam_gateway_ip, mapped from YANG variable /devices/device/tenants/tenant/site/oam_gateway_ip (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__oam_gateway_ip
      
  def _set_oam_gateway_ip(self, v, load=False):
    """
    Setter method for oam_gateway_ip, mapped from YANG variable /devices/device/tenants/tenant/site/oam_gateway_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oam_gateway_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oam_gateway_ip() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="oam_gateway_ip", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oam_gateway_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="oam_gateway_ip", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__oam_gateway_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oam_gateway_ip(self):
    self.__oam_gateway_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="oam_gateway_ip", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-address', is_config=True)


  def _get_oam_vlan_id(self):
    """
    Getter method for oam_vlan_id, mapped from YANG variable /devices/device/tenants/tenant/site/oam_vlan_id (uint32)

    YANG Description: 0..4294967295
    """
    return self.__oam_vlan_id
      
  def _set_oam_vlan_id(self, v, load=False):
    """
    Setter method for oam_vlan_id, mapped from YANG variable /devices/device/tenants/tenant/site/oam_vlan_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oam_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oam_vlan_id() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oam_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oam_vlan_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oam_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)""",
        })

    self.__oam_vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oam_vlan_id(self):
    self.__oam_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oam_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)


  def _get_wan_0_local_ip_prefix(self):
    """
    Getter method for wan_0_local_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_local_ip_prefix (inet:ipv4-prefix)

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    return self.__wan_0_local_ip_prefix
      
  def _set_wan_0_local_ip_prefix(self, v, load=False):
    """
    Setter method for wan_0_local_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_local_ip_prefix (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_0_local_ip_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_0_local_ip_prefix() directly.

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_0_local_ip_prefix must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__wan_0_local_ip_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_0_local_ip_prefix(self):
    self.__wan_0_local_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_wan_0_wan_link_name(self):
    """
    Getter method for wan_0_wan_link_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_wan_link_name (string)

    YANG Description: string
    """
    return self.__wan_0_wan_link_name
      
  def _set_wan_0_wan_link_name(self, v, load=False):
    """
    Setter method for wan_0_wan_link_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_wan_link_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_0_wan_link_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_0_wan_link_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="wan_0_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_0_wan_link_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_0_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__wan_0_wan_link_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_0_wan_link_name(self):
    self.__wan_0_wan_link_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_0_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_wan_0_vlan_id(self):
    """
    Getter method for wan_0_vlan_id, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_vlan_id (uint32)

    YANG Description: 0..4294967295
    """
    return self.__wan_0_vlan_id
      
  def _set_wan_0_vlan_id(self, v, load=False):
    """
    Setter method for wan_0_vlan_id, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_vlan_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_0_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_0_vlan_id() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wan_0_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_0_vlan_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wan_0_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)""",
        })

    self.__wan_0_vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_0_vlan_id(self):
    self.__wan_0_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wan_0_vlan_id", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='uint32', is_config=True)


  def _get_wan_0_remote_ip_prefix(self):
    """
    Getter method for wan_0_remote_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_remote_ip_prefix (inet:ipv4-prefix)

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    return self.__wan_0_remote_ip_prefix
      
  def _set_wan_0_remote_ip_prefix(self, v, load=False):
    """
    Setter method for wan_0_remote_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_0_remote_ip_prefix (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_0_remote_ip_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_0_remote_ip_prefix() directly.

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_0_remote_ip_prefix must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__wan_0_remote_ip_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_0_remote_ip_prefix(self):
    self.__wan_0_remote_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_0_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_wan_1_vrf_name(self):
    """
    Getter method for wan_1_vrf_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_vrf_name (string)

    YANG Description: string
    """
    return self.__wan_1_vrf_name
      
  def _set_wan_1_vrf_name(self, v, load=False):
    """
    Setter method for wan_1_vrf_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_vrf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_1_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_1_vrf_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="wan_1_vrf_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_1_vrf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_vrf_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__wan_1_vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_1_vrf_name(self):
    self.__wan_1_vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_vrf_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_wan_1_local_ip_prefix(self):
    """
    Getter method for wan_1_local_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_local_ip_prefix (inet:ipv4-prefix)

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    return self.__wan_1_local_ip_prefix
      
  def _set_wan_1_local_ip_prefix(self, v, load=False):
    """
    Setter method for wan_1_local_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_local_ip_prefix (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_1_local_ip_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_1_local_ip_prefix() directly.

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_1_local_ip_prefix must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__wan_1_local_ip_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_1_local_ip_prefix(self):
    self.__wan_1_local_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_local_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_wan_1_remote_ip_prefix(self):
    """
    Getter method for wan_1_remote_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_remote_ip_prefix (inet:ipv4-prefix)

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    return self.__wan_1_remote_ip_prefix
      
  def _set_wan_1_remote_ip_prefix(self, v, load=False):
    """
    Setter method for wan_1_remote_ip_prefix, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_remote_ip_prefix (inet:ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_1_remote_ip_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_1_remote_ip_prefix() directly.

    YANG Description: Valid IPv4 Prefix (A.B.C.D/Z for e.x: 172.16.1.0/24)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_1_remote_ip_prefix must be of a type compatible with inet:ipv4-prefix""",
          'defined-type': "inet:ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)""",
        })

    self.__wan_1_remote_ip_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_1_remote_ip_prefix(self):
    self.__wan_1_remote_ip_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="wan_1_remote_ip_prefix", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='inet:ipv4-prefix', is_config=True)


  def _get_wan_1_wan_link_name(self):
    """
    Getter method for wan_1_wan_link_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_wan_link_name (string)

    YANG Description: string
    """
    return self.__wan_1_wan_link_name
      
  def _set_wan_1_wan_link_name(self, v, load=False):
    """
    Setter method for wan_1_wan_link_name, mapped from YANG variable /devices/device/tenants/tenant/site/wan_1_wan_link_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wan_1_wan_link_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wan_1_wan_link_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="wan_1_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wan_1_wan_link_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__wan_1_wan_link_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wan_1_wan_link_name(self):
    self.__wan_1_wan_link_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="wan_1_wan_link_name", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_country(self):
    """
    Getter method for country, mapped from YANG variable /devices/device/tenants/tenant/site/country (string)

    YANG Description: string
    """
    return self.__country
      
  def _set_country(self, v, load=False):
    """
    Setter method for country, mapped from YANG variable /devices/device/tenants/tenant/site/country (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_country is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_country() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="country", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """country must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__country = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_country(self):
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_street(self):
    """
    Getter method for street, mapped from YANG variable /devices/device/tenants/tenant/site/street (string)

    YANG Description: string
    """
    return self.__street
      
  def _set_street(self, v, load=False):
    """
    Setter method for street, mapped from YANG variable /devices/device/tenants/tenant/site/street (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_street is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_street() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="street", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """street must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="street", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__street = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_street(self):
    self.__street = YANGDynClass(base=unicode, is_leaf=True, yang_name="street", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_city(self):
    """
    Getter method for city, mapped from YANG variable /devices/device/tenants/tenant/site/city (string)

    YANG Description: string
    """
    return self.__city
      
  def _set_city(self, v, load=False):
    """
    Setter method for city, mapped from YANG variable /devices/device/tenants/tenant/site/city (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_city is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_city() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="city", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """city must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__city = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_city(self):
    self.__city = YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /devices/device/tenants/tenant/site/state (string)

    YANG Description: string
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /devices/device/tenants/tenant/site/state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="state", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_zip_code(self):
    """
    Getter method for zip_code, mapped from YANG variable /devices/device/tenants/tenant/site/zip_code (string)

    YANG Description: string
    """
    return self.__zip_code
      
  def _set_zip_code(self, v, load=False):
    """
    Setter method for zip_code, mapped from YANG variable /devices/device/tenants/tenant/site/zip_code (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_zip_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_zip_code() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="zip_code", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """zip_code must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="zip_code", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)""",
        })

    self.__zip_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_zip_code(self):
    self.__zip_code = YANGDynClass(base=unicode, is_leaf=True, yang_name="zip_code", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='string', is_config=True)


  def _get_shipped_device(self):
    """
    Getter method for shipped_device, mapped from YANG variable /devices/device/tenants/tenant/site/shipped_device (list)
    """
    return self.__shipped_device
      
  def _set_shipped_device(self, v, load=False):
    """
    Setter method for shipped_device, mapped from YANG variable /devices/device/tenants/tenant/site/shipped_device (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shipped_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shipped_device() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("serial_number",shipped_device.shipped_device, yang_name="shipped_device", module_name="cso", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serial_number'), is_container='list', yang_name="shipped_device", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shipped_device must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("serial_number",shipped_device.shipped_device, yang_name="shipped_device", module_name="cso", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serial_number'), is_container='list', yang_name="shipped_device", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='list', is_config=True)""",
        })

    self.__shipped_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shipped_device(self):
    self.__shipped_device = YANGDynClass(base=YANGListType("serial_number",shipped_device.shipped_device, yang_name="shipped_device", module_name="cso", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serial_number'), is_container='list', yang_name="shipped_device", module_name="cso", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cso', defining_module='cso', yang_type='list', is_config=True)

  site_name = __builtin__.property(_get_site_name, _set_site_name)
  job_name_prefix = __builtin__.property(_get_job_name_prefix, _set_job_name_prefix)
  device_template_name = __builtin__.property(_get_device_template_name, _set_device_template_name)
  cpe_as_number = __builtin__.property(_get_cpe_as_number, _set_cpe_as_number)
  router_as_number = __builtin__.property(_get_router_as_number, _set_router_as_number)
  router_name = __builtin__.property(_get_router_name, _set_router_name)
  oam_ip_prefix = __builtin__.property(_get_oam_ip_prefix, _set_oam_ip_prefix)
  oam_gateway_ip = __builtin__.property(_get_oam_gateway_ip, _set_oam_gateway_ip)
  oam_vlan_id = __builtin__.property(_get_oam_vlan_id, _set_oam_vlan_id)
  wan_0_local_ip_prefix = __builtin__.property(_get_wan_0_local_ip_prefix, _set_wan_0_local_ip_prefix)
  wan_0_wan_link_name = __builtin__.property(_get_wan_0_wan_link_name, _set_wan_0_wan_link_name)
  wan_0_vlan_id = __builtin__.property(_get_wan_0_vlan_id, _set_wan_0_vlan_id)
  wan_0_remote_ip_prefix = __builtin__.property(_get_wan_0_remote_ip_prefix, _set_wan_0_remote_ip_prefix)
  wan_1_vrf_name = __builtin__.property(_get_wan_1_vrf_name, _set_wan_1_vrf_name)
  wan_1_local_ip_prefix = __builtin__.property(_get_wan_1_local_ip_prefix, _set_wan_1_local_ip_prefix)
  wan_1_remote_ip_prefix = __builtin__.property(_get_wan_1_remote_ip_prefix, _set_wan_1_remote_ip_prefix)
  wan_1_wan_link_name = __builtin__.property(_get_wan_1_wan_link_name, _set_wan_1_wan_link_name)
  country = __builtin__.property(_get_country, _set_country)
  street = __builtin__.property(_get_street, _set_street)
  city = __builtin__.property(_get_city, _set_city)
  state = __builtin__.property(_get_state, _set_state)
  zip_code = __builtin__.property(_get_zip_code, _set_zip_code)
  shipped_device = __builtin__.property(_get_shipped_device, _set_shipped_device)


  _pyangbind_elements = collections.OrderedDict([('site_name', site_name), ('job_name_prefix', job_name_prefix), ('device_template_name', device_template_name), ('cpe_as_number', cpe_as_number), ('router_as_number', router_as_number), ('router_name', router_name), ('oam_ip_prefix', oam_ip_prefix), ('oam_gateway_ip', oam_gateway_ip), ('oam_vlan_id', oam_vlan_id), ('wan_0_local_ip_prefix', wan_0_local_ip_prefix), ('wan_0_wan_link_name', wan_0_wan_link_name), ('wan_0_vlan_id', wan_0_vlan_id), ('wan_0_remote_ip_prefix', wan_0_remote_ip_prefix), ('wan_1_vrf_name', wan_1_vrf_name), ('wan_1_local_ip_prefix', wan_1_local_ip_prefix), ('wan_1_remote_ip_prefix', wan_1_remote_ip_prefix), ('wan_1_wan_link_name', wan_1_wan_link_name), ('country', country), ('street', street), ('city', city), ('state', state), ('zip_code', zip_code), ('shipped_device', shipped_device), ])


