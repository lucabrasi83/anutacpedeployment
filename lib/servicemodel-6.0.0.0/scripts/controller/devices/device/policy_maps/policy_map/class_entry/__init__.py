
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import queue_limit
class class_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /devices/device/policy-maps/policy-map/class-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__class_name','__type','__mtu','__qos_group','__shape_average','__bits_sustained','__bits_excess','__bandwidth_percentage','__bandwidth_remaining_percentage','__bandwidth_remaining_ratio','__priority_value','__priority_percentage','__priority_level','__fair_queue','__is_dscp_tunnel','__dscp_value','__flow_monitor_name','__random_detect','__service_policy','__police_cir_percentage','__bit_rate','__bit_rate_percent','__police_cir_conform_action','__police_cir_exceed_action','__precedence','__queue_limit',)

  _yang_name = 'class-entry'
  _module_name = 'qos'
  _namespace = 'http://anutanetworks.com/qos'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__bandwidth_remaining_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-remaining-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    self.__service_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-policy", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    self.__bits_excess = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..154400000']}), is_leaf=True, yang_name="bits-excess", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    self.__precedence = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="precedence", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='precedence-def', is_config=True)
    self.__class_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="class-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    self.__random_detect = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'dscp-based': {}, u'discard-class-based': {}, u'precedence-based': {}, u'none': {}},), is_leaf=True, yang_name="random-detect", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='random-detect-def', is_config=True)
    self.__bit_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bit-rate", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    self.__fair_queue = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fair-queue", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    self.__bandwidth_remaining_ratio = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bandwidth-remaining-ratio", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    self.__police_cir_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="police-cir-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    self.__priority_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)
    self.__bit_rate_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="bit-rate-percent", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint8', is_config=True)
    self.__flow_monitor_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="flow-monitor-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__priority_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="priority-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    self.__shape_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="shape-average", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'control-plane': {}, u'qos': {}, u'network-qos': {}, u'queuing': {}},), is_leaf=True, yang_name="type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='policy-map-type', is_config=True)
    self.__bits_sustained = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'32..800000000']}), is_leaf=True, yang_name="bits-sustained", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    self.__dscp_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="dscp-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    self.__is_dscp_tunnel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dscp-tunnel", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    self.__queue_limit = YANGDynClass(base=queue_limit.queue_limit, is_container='container', yang_name="queue-limit", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='container', is_config=True)
    self.__priority_level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="priority-level", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-level-def', is_config=True)
    self.__police_cir_conform_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-conform-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)
    self.__qos_group = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="qos-group", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)
    self.__police_cir_exceed_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-exceed-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)
    self.__bandwidth_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'devices', u'device', u'policy-maps', u'policy-map', u'class-entry']

  def _get_class_name(self):
    """
    Getter method for class_name, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/class_name (leafref)

    YANG Description: class-name
    """
    return self.__class_name
      
  def _set_class_name(self, v, load=False):
    """
    Setter method for class_name, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/class_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_class_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_class_name() directly.

    YANG Description: class-name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="class-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """class_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="class-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)""",
        })

    self.__class_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_class_name(self):
    self.__class_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="class-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/type (policy-map-type)

    YANG Description: control-plane
network-qos
qos
queuing

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/type (policy-map-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: control-plane
network-qos
qos
queuing

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'control-plane': {}, u'qos': {}, u'network-qos': {}, u'queuing': {}},), is_leaf=True, yang_name="type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='policy-map-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with policy-map-type""",
          'defined-type': "qos:policy-map-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'control-plane': {}, u'qos': {}, u'network-qos': {}, u'queuing': {}},), is_leaf=True, yang_name="type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='policy-map-type', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'control-plane': {}, u'qos': {}, u'network-qos': {}, u'queuing': {}},), is_leaf=True, yang_name="type", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='policy-map-type', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/mtu (uint16)

    YANG Description: 0..65535
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/mtu (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)


  def _get_qos_group(self):
    """
    Getter method for qos_group, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/qos_group (uint16)

    YANG Description: 0..65535
    """
    return self.__qos_group
      
  def _set_qos_group(self, v, load=False):
    """
    Setter method for qos_group, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/qos_group (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_qos_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_qos_group() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="qos-group", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """qos_group must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="qos-group", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)""",
        })

    self.__qos_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_qos_group(self):
    self.__qos_group = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="qos-group", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint16', is_config=True)


  def _get_shape_average(self):
    """
    Getter method for shape_average, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/shape_average (uint64)

    YANG Description: 0..18446744073709551615
    """
    return self.__shape_average
      
  def _set_shape_average(self, v, load=False):
    """
    Setter method for shape_average, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/shape_average (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_shape_average is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_shape_average() directly.

    YANG Description: 0..18446744073709551615
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="shape-average", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """shape_average must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="shape-average", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)""",
        })

    self.__shape_average = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_shape_average(self):
    self.__shape_average = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="shape-average", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)


  def _get_bits_sustained(self):
    """
    Getter method for bits_sustained, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bits_sustained (uint64)

    YANG Description: 32..800000000
    """
    return self.__bits_sustained
      
  def _set_bits_sustained(self, v, load=False):
    """
    Setter method for bits_sustained, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bits_sustained (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bits_sustained is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bits_sustained() directly.

    YANG Description: 32..800000000
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'32..800000000']}), is_leaf=True, yang_name="bits-sustained", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bits_sustained must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'32..800000000']}), is_leaf=True, yang_name="bits-sustained", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)""",
        })

    self.__bits_sustained = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bits_sustained(self):
    self.__bits_sustained = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'32..800000000']}), is_leaf=True, yang_name="bits-sustained", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)


  def _get_bits_excess(self):
    """
    Getter method for bits_excess, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bits_excess (uint64)

    YANG Description: 0..154400000
    """
    return self.__bits_excess
      
  def _set_bits_excess(self, v, load=False):
    """
    Setter method for bits_excess, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bits_excess (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bits_excess is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bits_excess() directly.

    YANG Description: 0..154400000
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..154400000']}), is_leaf=True, yang_name="bits-excess", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bits_excess must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..154400000']}), is_leaf=True, yang_name="bits-excess", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)""",
        })

    self.__bits_excess = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bits_excess(self):
    self.__bits_excess = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..154400000']}), is_leaf=True, yang_name="bits-excess", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)


  def _get_bandwidth_percentage(self):
    """
    Getter method for bandwidth_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_percentage (percentage-def)

    YANG Description: 1..100
    """
    return self.__bandwidth_percentage
      
  def _set_bandwidth_percentage(self, v, load=False):
    """
    Setter method for bandwidth_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_percentage (percentage-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_percentage() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_percentage must be of a type compatible with percentage-def""",
          'defined-type': "qos:percentage-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)""",
        })

    self.__bandwidth_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_percentage(self):
    self.__bandwidth_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)


  def _get_bandwidth_remaining_percentage(self):
    """
    Getter method for bandwidth_remaining_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_remaining_percentage (percentage-def)

    YANG Description: 1..100
    """
    return self.__bandwidth_remaining_percentage
      
  def _set_bandwidth_remaining_percentage(self, v, load=False):
    """
    Setter method for bandwidth_remaining_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_remaining_percentage (percentage-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_remaining_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_remaining_percentage() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-remaining-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_remaining_percentage must be of a type compatible with percentage-def""",
          'defined-type': "qos:percentage-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-remaining-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)""",
        })

    self.__bandwidth_remaining_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_remaining_percentage(self):
    self.__bandwidth_remaining_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="bandwidth-remaining-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)


  def _get_bandwidth_remaining_ratio(self):
    """
    Getter method for bandwidth_remaining_ratio, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_remaining_ratio (uint32)

    YANG Description: 0..4294967295
    """
    return self.__bandwidth_remaining_ratio
      
  def _set_bandwidth_remaining_ratio(self, v, load=False):
    """
    Setter method for bandwidth_remaining_ratio, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bandwidth_remaining_ratio (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bandwidth_remaining_ratio is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bandwidth_remaining_ratio() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bandwidth-remaining-ratio", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bandwidth_remaining_ratio must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bandwidth-remaining-ratio", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)""",
        })

    self.__bandwidth_remaining_ratio = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bandwidth_remaining_ratio(self):
    self.__bandwidth_remaining_ratio = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bandwidth-remaining-ratio", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint32', is_config=True)


  def _get_priority_value(self):
    """
    Getter method for priority_value, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_value (priority-def)

    YANG Description: 1..10000000
    """
    return self.__priority_value
      
  def _set_priority_value(self, v, load=False):
    """
    Setter method for priority_value, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_value (priority-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_value() directly.

    YANG Description: 1..10000000
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_value must be of a type compatible with priority-def""",
          'defined-type': "qos:priority-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)""",
        })

    self.__priority_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_value(self):
    self.__priority_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10000000']}), is_leaf=True, yang_name="priority-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-def', is_config=True)


  def _get_priority_percentage(self):
    """
    Getter method for priority_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_percentage (percentage-def)

    YANG Description: 1..100
    """
    return self.__priority_percentage
      
  def _set_priority_percentage(self, v, load=False):
    """
    Setter method for priority_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_percentage (percentage-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_percentage() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="priority-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_percentage must be of a type compatible with percentage-def""",
          'defined-type': "qos:percentage-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="priority-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)""",
        })

    self.__priority_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_percentage(self):
    self.__priority_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="priority-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)


  def _get_priority_level(self):
    """
    Getter method for priority_level, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_level (priority-level-def)

    YANG Description: 1..2
    """
    return self.__priority_level
      
  def _set_priority_level(self, v, load=False):
    """
    Setter method for priority_level, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/priority_level (priority-level-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_level() directly.

    YANG Description: 1..2
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="priority-level", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-level-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_level must be of a type compatible with priority-level-def""",
          'defined-type': "qos:priority-level-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="priority-level", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-level-def', is_config=True)""",
        })

    self.__priority_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_level(self):
    self.__priority_level = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2']}), is_leaf=True, yang_name="priority-level", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='priority-level-def', is_config=True)


  def _get_fair_queue(self):
    """
    Getter method for fair_queue, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/fair_queue (boolean)

    YANG Description: fair-queue: True/False
    """
    return self.__fair_queue
      
  def _set_fair_queue(self, v, load=False):
    """
    Setter method for fair_queue, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/fair_queue (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fair_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fair_queue() directly.

    YANG Description: fair-queue: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fair-queue", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fair_queue must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fair-queue", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)""",
        })

    self.__fair_queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fair_queue(self):
    self.__fair_queue = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fair-queue", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)


  def _get_is_dscp_tunnel(self):
    """
    Getter method for is_dscp_tunnel, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/is_dscp_tunnel (boolean)

    YANG Description: is-dscp-tunnel: True/False
    """
    return self.__is_dscp_tunnel
      
  def _set_is_dscp_tunnel(self, v, load=False):
    """
    Setter method for is_dscp_tunnel, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/is_dscp_tunnel (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_dscp_tunnel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_dscp_tunnel() directly.

    YANG Description: is-dscp-tunnel: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-dscp-tunnel", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_dscp_tunnel must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dscp-tunnel", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)""",
        })

    self.__is_dscp_tunnel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_dscp_tunnel(self):
    self.__is_dscp_tunnel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dscp-tunnel", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='boolean', is_config=True)


  def _get_dscp_value(self):
    """
    Getter method for dscp_value, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/dscp_value (string)

    YANG Description: string
    """
    return self.__dscp_value
      
  def _set_dscp_value(self, v, load=False):
    """
    Setter method for dscp_value, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/dscp_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dscp_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dscp_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dscp-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dscp_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dscp-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__dscp_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dscp_value(self):
    self.__dscp_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="dscp-value", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_flow_monitor_name(self):
    """
    Getter method for flow_monitor_name, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/flow_monitor_name (string)

    YANG Description: string
    """
    return self.__flow_monitor_name
      
  def _set_flow_monitor_name(self, v, load=False):
    """
    Setter method for flow_monitor_name, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/flow_monitor_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_monitor_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_monitor_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="flow-monitor-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_monitor_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="flow-monitor-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)""",
        })

    self.__flow_monitor_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_monitor_name(self):
    self.__flow_monitor_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="flow-monitor-name", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='string', is_config=True)


  def _get_random_detect(self):
    """
    Getter method for random_detect, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/random_detect (random-detect-def)

    YANG Description: dscp-based
discard-class-based
precedence-based
default
none

    """
    return self.__random_detect
      
  def _set_random_detect(self, v, load=False):
    """
    Setter method for random_detect, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/random_detect (random-detect-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_random_detect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_random_detect() directly.

    YANG Description: dscp-based
discard-class-based
precedence-based
default
none

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'dscp-based': {}, u'discard-class-based': {}, u'precedence-based': {}, u'none': {}},), is_leaf=True, yang_name="random-detect", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='random-detect-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """random_detect must be of a type compatible with random-detect-def""",
          'defined-type': "qos:random-detect-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'dscp-based': {}, u'discard-class-based': {}, u'precedence-based': {}, u'none': {}},), is_leaf=True, yang_name="random-detect", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='random-detect-def', is_config=True)""",
        })

    self.__random_detect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_random_detect(self):
    self.__random_detect = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'default': {}, u'dscp-based': {}, u'discard-class-based': {}, u'precedence-based': {}, u'none': {}},), is_leaf=True, yang_name="random-detect", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='random-detect-def', is_config=True)


  def _get_service_policy(self):
    """
    Getter method for service_policy, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/service_policy (leafref)

    YANG Description: service-policy
    """
    return self.__service_policy
      
  def _set_service_policy(self, v, load=False):
    """
    Setter method for service_policy, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/service_policy (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_policy() directly.

    YANG Description: service-policy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="service-policy", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_policy must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="service-policy", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)""",
        })

    self.__service_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_policy(self):
    self.__service_policy = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-policy", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='leafref', is_config=True)


  def _get_police_cir_percentage(self):
    """
    Getter method for police_cir_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_percentage (percentage-def)

    YANG Description: 1..100
    """
    return self.__police_cir_percentage
      
  def _set_police_cir_percentage(self, v, load=False):
    """
    Setter method for police_cir_percentage, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_percentage (percentage-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_police_cir_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_police_cir_percentage() directly.

    YANG Description: 1..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="police-cir-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """police_cir_percentage must be of a type compatible with percentage-def""",
          'defined-type': "qos:percentage-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="police-cir-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)""",
        })

    self.__police_cir_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_police_cir_percentage(self):
    self.__police_cir_percentage = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100']}), is_leaf=True, yang_name="police-cir-percentage", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='percentage-def', is_config=True)


  def _get_bit_rate(self):
    """
    Getter method for bit_rate, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bit_rate (uint64)

    YANG Description: 0..18446744073709551615
    """
    return self.__bit_rate
      
  def _set_bit_rate(self, v, load=False):
    """
    Setter method for bit_rate, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bit_rate (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bit_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bit_rate() directly.

    YANG Description: 0..18446744073709551615
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bit-rate", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bit_rate must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bit-rate", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)""",
        })

    self.__bit_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bit_rate(self):
    self.__bit_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bit-rate", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint64', is_config=True)


  def _get_bit_rate_percent(self):
    """
    Getter method for bit_rate_percent, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bit_rate_percent (uint8)

    YANG Description: 0..100
    """
    return self.__bit_rate_percent
      
  def _set_bit_rate_percent(self, v, load=False):
    """
    Setter method for bit_rate_percent, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/bit_rate_percent (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bit_rate_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bit_rate_percent() directly.

    YANG Description: 0..100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="bit-rate-percent", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bit_rate_percent must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="bit-rate-percent", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint8', is_config=True)""",
        })

    self.__bit_rate_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bit_rate_percent(self):
    self.__bit_rate_percent = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..100']}), is_leaf=True, yang_name="bit-rate-percent", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='uint8', is_config=True)


  def _get_police_cir_conform_action(self):
    """
    Getter method for police_cir_conform_action, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_conform_action (action-def)

    YANG Description: drop
transmit

    """
    return self.__police_cir_conform_action
      
  def _set_police_cir_conform_action(self, v, load=False):
    """
    Setter method for police_cir_conform_action, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_conform_action (action-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_police_cir_conform_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_police_cir_conform_action() directly.

    YANG Description: drop
transmit

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-conform-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """police_cir_conform_action must be of a type compatible with action-def""",
          'defined-type': "qos:action-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-conform-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)""",
        })

    self.__police_cir_conform_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_police_cir_conform_action(self):
    self.__police_cir_conform_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-conform-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)


  def _get_police_cir_exceed_action(self):
    """
    Getter method for police_cir_exceed_action, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_exceed_action (action-def)

    YANG Description: drop
transmit

    """
    return self.__police_cir_exceed_action
      
  def _set_police_cir_exceed_action(self, v, load=False):
    """
    Setter method for police_cir_exceed_action, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/police_cir_exceed_action (action-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_police_cir_exceed_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_police_cir_exceed_action() directly.

    YANG Description: drop
transmit

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-exceed-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """police_cir_exceed_action must be of a type compatible with action-def""",
          'defined-type': "qos:action-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-exceed-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)""",
        })

    self.__police_cir_exceed_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_police_cir_exceed_action(self):
    self.__police_cir_exceed_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'transmit': {}, u'drop': {}},), is_leaf=True, yang_name="police-cir-exceed-action", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='action-def', is_config=True)


  def _get_precedence(self):
    """
    Getter method for precedence, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/precedence (precedence-def)

    YANG Description: 0..7
    """
    return self.__precedence
      
  def _set_precedence(self, v, load=False):
    """
    Setter method for precedence, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/precedence (precedence-def)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_precedence is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_precedence() directly.

    YANG Description: 0..7
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="precedence", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='precedence-def', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """precedence must be of a type compatible with precedence-def""",
          'defined-type': "qos:precedence-def",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="precedence", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='precedence-def', is_config=True)""",
        })

    self.__precedence = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_precedence(self):
    self.__precedence = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="precedence", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='precedence-def', is_config=True)


  def _get_queue_limit(self):
    """
    Getter method for queue_limit, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/queue_limit (container)
    """
    return self.__queue_limit
      
  def _set_queue_limit(self, v, load=False):
    """
    Setter method for queue_limit, mapped from YANG variable /devices/device/policy_maps/policy_map/class_entry/queue_limit (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_limit() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=queue_limit.queue_limit, is_container='container', yang_name="queue-limit", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_limit must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=queue_limit.queue_limit, is_container='container', yang_name="queue-limit", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='container', is_config=True)""",
        })

    self.__queue_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_limit(self):
    self.__queue_limit = YANGDynClass(base=queue_limit.queue_limit, is_container='container', yang_name="queue-limit", module_name="qos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/qos', defining_module='qos', yang_type='container', is_config=True)

  class_name = __builtin__.property(_get_class_name, _set_class_name)
  type = __builtin__.property(_get_type, _set_type)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  qos_group = __builtin__.property(_get_qos_group, _set_qos_group)
  shape_average = __builtin__.property(_get_shape_average, _set_shape_average)
  bits_sustained = __builtin__.property(_get_bits_sustained, _set_bits_sustained)
  bits_excess = __builtin__.property(_get_bits_excess, _set_bits_excess)
  bandwidth_percentage = __builtin__.property(_get_bandwidth_percentage, _set_bandwidth_percentage)
  bandwidth_remaining_percentage = __builtin__.property(_get_bandwidth_remaining_percentage, _set_bandwidth_remaining_percentage)
  bandwidth_remaining_ratio = __builtin__.property(_get_bandwidth_remaining_ratio, _set_bandwidth_remaining_ratio)
  priority_value = __builtin__.property(_get_priority_value, _set_priority_value)
  priority_percentage = __builtin__.property(_get_priority_percentage, _set_priority_percentage)
  priority_level = __builtin__.property(_get_priority_level, _set_priority_level)
  fair_queue = __builtin__.property(_get_fair_queue, _set_fair_queue)
  is_dscp_tunnel = __builtin__.property(_get_is_dscp_tunnel, _set_is_dscp_tunnel)
  dscp_value = __builtin__.property(_get_dscp_value, _set_dscp_value)
  flow_monitor_name = __builtin__.property(_get_flow_monitor_name, _set_flow_monitor_name)
  random_detect = __builtin__.property(_get_random_detect, _set_random_detect)
  service_policy = __builtin__.property(_get_service_policy, _set_service_policy)
  police_cir_percentage = __builtin__.property(_get_police_cir_percentage, _set_police_cir_percentage)
  bit_rate = __builtin__.property(_get_bit_rate, _set_bit_rate)
  bit_rate_percent = __builtin__.property(_get_bit_rate_percent, _set_bit_rate_percent)
  police_cir_conform_action = __builtin__.property(_get_police_cir_conform_action, _set_police_cir_conform_action)
  police_cir_exceed_action = __builtin__.property(_get_police_cir_exceed_action, _set_police_cir_exceed_action)
  precedence = __builtin__.property(_get_precedence, _set_precedence)
  queue_limit = __builtin__.property(_get_queue_limit, _set_queue_limit)


  _pyangbind_elements = collections.OrderedDict([('class_name', class_name), ('type', type), ('mtu', mtu), ('qos_group', qos_group), ('shape_average', shape_average), ('bits_sustained', bits_sustained), ('bits_excess', bits_excess), ('bandwidth_percentage', bandwidth_percentage), ('bandwidth_remaining_percentage', bandwidth_remaining_percentage), ('bandwidth_remaining_ratio', bandwidth_remaining_ratio), ('priority_value', priority_value), ('priority_percentage', priority_percentage), ('priority_level', priority_level), ('fair_queue', fair_queue), ('is_dscp_tunnel', is_dscp_tunnel), ('dscp_value', dscp_value), ('flow_monitor_name', flow_monitor_name), ('random_detect', random_detect), ('service_policy', service_policy), ('police_cir_percentage', police_cir_percentage), ('bit_rate', bit_rate), ('bit_rate_percent', bit_rate_percent), ('police_cir_conform_action', police_cir_conform_action), ('police_cir_exceed_action', police_cir_exceed_action), ('precedence', precedence), ('queue_limit', queue_limit), ])


