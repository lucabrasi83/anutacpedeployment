
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import data_source
import property
import menus
class template(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /view-templates/template. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__context','__title','__searchable','__paginated','__default_page_size','__enable_edit_columns','__data_source','__property','__menus',)

  _yang_name = 'template'
  _module_name = 'view-template'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__data_source = YANGDynClass(base=YANGListType("name prefix",data_source.data_source, yang_name="data-source", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name prefix'), is_container='list', yang_name="data-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__paginated = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="paginated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__searchable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="searchable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__title = YANGDynClass(base=unicode, is_leaf=True, yang_name="title", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__enable_edit_columns = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-edit-columns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__menus = YANGDynClass(base=menus.menus, is_container='container', yang_name="menus", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__property = YANGDynClass(base=YANGListType("name",property.property, yang_name="property", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__default_page_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="default-page-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'view-templates', u'template']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /view_templates/template/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /view_templates/template/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_context(self):
    """
    Getter method for context, mapped from YANG variable /view_templates/template/context (string)

    YANG Description: context is an opaque identifier to limit the applicability of the template. 
By Default, 'system' is the context used, in which case, a given template can be considered as un restrained.
Where as 'TenantA' could be taken as a specific template created for TenantA
Or, '/dashboard/devices' could be considered as a template custom made for that location. 
The devices view at a different location may resolve to some other template.
    """
    return self.__context
      
  def _set_context(self, v, load=False):
    """
    Setter method for context, mapped from YANG variable /view_templates/template/context (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context() directly.

    YANG Description: context is an opaque identifier to limit the applicability of the template. 
By Default, 'system' is the context used, in which case, a given template can be considered as un restrained.
Where as 'TenantA' could be taken as a specific template created for TenantA
Or, '/dashboard/devices' could be considered as a template custom made for that location. 
The devices view at a different location may resolve to some other template.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context(self):
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_title(self):
    """
    Getter method for title, mapped from YANG variable /view_templates/template/title (string)

    YANG Description: string
    """
    return self.__title
      
  def _set_title(self, v, load=False):
    """
    Setter method for title, mapped from YANG variable /view_templates/template/title (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_title is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_title() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="title", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """title must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="title", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__title = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_title(self):
    self.__title = YANGDynClass(base=unicode, is_leaf=True, yang_name="title", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_searchable(self):
    """
    Getter method for searchable, mapped from YANG variable /view_templates/template/searchable (boolean)

    YANG Description: searchable: True/False
    """
    return self.__searchable
      
  def _set_searchable(self, v, load=False):
    """
    Setter method for searchable, mapped from YANG variable /view_templates/template/searchable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_searchable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_searchable() directly.

    YANG Description: searchable: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="searchable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """searchable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="searchable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__searchable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_searchable(self):
    self.__searchable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="searchable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_paginated(self):
    """
    Getter method for paginated, mapped from YANG variable /view_templates/template/paginated (boolean)

    YANG Description: paginated: True/False
    """
    return self.__paginated
      
  def _set_paginated(self, v, load=False):
    """
    Setter method for paginated, mapped from YANG variable /view_templates/template/paginated (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_paginated is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_paginated() directly.

    YANG Description: paginated: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="paginated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """paginated must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="paginated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__paginated = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_paginated(self):
    self.__paginated = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="paginated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_default_page_size(self):
    """
    Getter method for default_page_size, mapped from YANG variable /view_templates/template/default_page_size (uint8)

    YANG Description: 0..255
    """
    return self.__default_page_size
      
  def _set_default_page_size(self, v, load=False):
    """
    Setter method for default_page_size, mapped from YANG variable /view_templates/template/default_page_size (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_page_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_page_size() directly.

    YANG Description: 0..255
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="default-page-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_page_size must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="default-page-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)""",
        })

    self.__default_page_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_page_size(self):
    self.__default_page_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="default-page-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)


  def _get_enable_edit_columns(self):
    """
    Getter method for enable_edit_columns, mapped from YANG variable /view_templates/template/enable_edit_columns (boolean)

    YANG Description: enable-edit-columns: True/False
    """
    return self.__enable_edit_columns
      
  def _set_enable_edit_columns(self, v, load=False):
    """
    Setter method for enable_edit_columns, mapped from YANG variable /view_templates/template/enable_edit_columns (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_edit_columns is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_edit_columns() directly.

    YANG Description: enable-edit-columns: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-edit-columns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_edit_columns must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-edit-columns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_edit_columns = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_edit_columns(self):
    self.__enable_edit_columns = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-edit-columns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_data_source(self):
    """
    Getter method for data_source, mapped from YANG variable /view_templates/template/data_source (list)
    """
    return self.__data_source
      
  def _set_data_source(self, v, load=False):
    """
    Setter method for data_source, mapped from YANG variable /view_templates/template/data_source (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_source() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name prefix",data_source.data_source, yang_name="data-source", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name prefix'), is_container='list', yang_name="data-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_source must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name prefix",data_source.data_source, yang_name="data-source", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name prefix'), is_container='list', yang_name="data-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__data_source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_source(self):
    self.__data_source = YANGDynClass(base=YANGListType("name prefix",data_source.data_source, yang_name="data-source", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name prefix'), is_container='list', yang_name="data-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)


  def _get_property(self):
    """
    Getter method for property, mapped from YANG variable /view_templates/template/property (list)
    """
    return self.__property
      
  def _set_property(self, v, load=False):
    """
    Setter method for property, mapped from YANG variable /view_templates/template/property (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_property() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",property.property, yang_name="property", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """property must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",property.property, yang_name="property", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_property(self):
    self.__property = YANGDynClass(base=YANGListType("name",property.property, yang_name="property", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)


  def _get_menus(self):
    """
    Getter method for menus, mapped from YANG variable /view_templates/template/menus (container)
    """
    return self.__menus
      
  def _set_menus(self, v, load=False):
    """
    Setter method for menus, mapped from YANG variable /view_templates/template/menus (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_menus is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_menus() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=menus.menus, is_container='container', yang_name="menus", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """menus must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=menus.menus, is_container='container', yang_name="menus", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__menus = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_menus(self):
    self.__menus = YANGDynClass(base=menus.menus, is_container='container', yang_name="menus", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  context = __builtin__.property(_get_context, _set_context)
  title = __builtin__.property(_get_title, _set_title)
  searchable = __builtin__.property(_get_searchable, _set_searchable)
  paginated = __builtin__.property(_get_paginated, _set_paginated)
  default_page_size = __builtin__.property(_get_default_page_size, _set_default_page_size)
  enable_edit_columns = __builtin__.property(_get_enable_edit_columns, _set_enable_edit_columns)
  data_source = __builtin__.property(_get_data_source, _set_data_source)
  property = __builtin__.property(_get_property, _set_property)
  menus = __builtin__.property(_get_menus, _set_menus)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('context', context), ('title', title), ('searchable', searchable), ('paginated', paginated), ('default_page_size', default_page_size), ('enable_edit_columns', enable_edit_columns), ('data_source', data_source), ('property', property), ('menus', menus), ])


