
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class menu(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /view-templates/template/menus/menu. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__view_action','__display_name','__enabled_by_default','__execution','__icon',)

  _yang_name = 'menu'
  _module_name = 'view-template'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__enabled_by_default = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled-by-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__execution = YANGDynClass(base=unicode, default=unicode("none"), is_leaf=True, yang_name="execution", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__view_action = YANGDynClass(base=unicode, is_leaf=True, yang_name="view-action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__display_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__icon = YANGDynClass(base=unicode, is_leaf=True, yang_name="icon", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'view-templates', u'template', u'menus', u'menu']

  def _get_view_action(self):
    """
    Getter method for view_action, mapped from YANG variable /view_templates/template/menus/menu/view_action (leafref)

    YANG Description: view-action
    """
    return self.__view_action
      
  def _set_view_action(self, v, load=False):
    """
    Setter method for view_action, mapped from YANG variable /view_templates/template/menus/menu/view_action (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_view_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_view_action() directly.

    YANG Description: view-action
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="view-action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """view_action must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="view-action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__view_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_view_action(self):
    self.__view_action = YANGDynClass(base=unicode, is_leaf=True, yang_name="view-action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_display_name(self):
    """
    Getter method for display_name, mapped from YANG variable /view_templates/template/menus/menu/display_name (string)

    YANG Description: This will override the default display name derived from the referred action
    """
    return self.__display_name
      
  def _set_display_name(self, v, load=False):
    """
    Setter method for display_name, mapped from YANG variable /view_templates/template/menus/menu/display_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_display_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_display_name() directly.

    YANG Description: This will override the default display name derived from the referred action
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """display_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__display_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_display_name(self):
    self.__display_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_enabled_by_default(self):
    """
    Getter method for enabled_by_default, mapped from YANG variable /view_templates/template/menus/menu/enabled_by_default (boolean)

    YANG Description: enabled-by-default: True/False
    """
    return self.__enabled_by_default
      
  def _set_enabled_by_default(self, v, load=False):
    """
    Setter method for enabled_by_default, mapped from YANG variable /view_templates/template/menus/menu/enabled_by_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled_by_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled_by_default() directly.

    YANG Description: enabled-by-default: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled-by-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled_by_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled-by-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enabled_by_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled_by_default(self):
    self.__enabled_by_default = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enabled-by-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_execution(self):
    """
    Getter method for execution, mapped from YANG variable /view_templates/template/menus/menu/execution (string)

    YANG Description: This will override or supplement the execution 
    """
    return self.__execution
      
  def _set_execution(self, v, load=False):
    """
    Setter method for execution, mapped from YANG variable /view_templates/template/menus/menu/execution (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_execution is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_execution() directly.

    YANG Description: This will override or supplement the execution 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("none"), is_leaf=True, yang_name="execution", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """execution must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("none"), is_leaf=True, yang_name="execution", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__execution = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_execution(self):
    self.__execution = YANGDynClass(base=unicode, default=unicode("none"), is_leaf=True, yang_name="execution", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_icon(self):
    """
    Getter method for icon, mapped from YANG variable /view_templates/template/menus/menu/icon (string)

    YANG Description: string
    """
    return self.__icon
      
  def _set_icon(self, v, load=False):
    """
    Setter method for icon, mapped from YANG variable /view_templates/template/menus/menu/icon (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_icon is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_icon() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="icon", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """icon must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="icon", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__icon = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_icon(self):
    self.__icon = YANGDynClass(base=unicode, is_leaf=True, yang_name="icon", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  view_action = __builtin__.property(_get_view_action, _set_view_action)
  display_name = __builtin__.property(_get_display_name, _set_display_name)
  enabled_by_default = __builtin__.property(_get_enabled_by_default, _set_enabled_by_default)
  execution = __builtin__.property(_get_execution, _set_execution)
  icon = __builtin__.property(_get_icon, _set_icon)


  _pyangbind_elements = collections.OrderedDict([('view_action', view_action), ('display_name', display_name), ('enabled_by_default', enabled_by_default), ('execution', execution), ('icon', icon), ])


