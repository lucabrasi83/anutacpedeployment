
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import virtual_machines
import availability_zones
import image_repositories
import deployment_profiles
import file_repository
import script_params
class virtual_appliance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /virtual-appliance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__virtual_machines','__availability_zones','__image_repositories','__deployment_profiles','__file_repository','__script_params',)

  _yang_name = 'virtual-appliance'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__virtual_machines = YANGDynClass(base=virtual_machines.virtual_machines, is_container='container', yang_name="virtual-machines", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__availability_zones = YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__image_repositories = YANGDynClass(base=image_repositories.image_repositories, is_container='container', yang_name="image-repositories", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__file_repository = YANGDynClass(base=file_repository.file_repository, is_container='container', yang_name="file-repository", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__deployment_profiles = YANGDynClass(base=deployment_profiles.deployment_profiles, is_container='container', yang_name="deployment-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__script_params = YANGDynClass(base=script_params.script_params, is_container='container', yang_name="script-params", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'virtual-appliance']

  def _get_virtual_machines(self):
    """
    Getter method for virtual_machines, mapped from YANG variable /virtual_appliance/virtual_machines (container)
    """
    return self.__virtual_machines
      
  def _set_virtual_machines(self, v, load=False):
    """
    Setter method for virtual_machines, mapped from YANG variable /virtual_appliance/virtual_machines (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_machines is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_machines() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=virtual_machines.virtual_machines, is_container='container', yang_name="virtual-machines", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_machines must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=virtual_machines.virtual_machines, is_container='container', yang_name="virtual-machines", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__virtual_machines = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_machines(self):
    self.__virtual_machines = YANGDynClass(base=virtual_machines.virtual_machines, is_container='container', yang_name="virtual-machines", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_availability_zones(self):
    """
    Getter method for availability_zones, mapped from YANG variable /virtual_appliance/availability_zones (container)
    """
    return self.__availability_zones
      
  def _set_availability_zones(self, v, load=False):
    """
    Setter method for availability_zones, mapped from YANG variable /virtual_appliance/availability_zones (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_availability_zones is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_availability_zones() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """availability_zones must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__availability_zones = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_availability_zones(self):
    self.__availability_zones = YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_image_repositories(self):
    """
    Getter method for image_repositories, mapped from YANG variable /virtual_appliance/image_repositories (container)
    """
    return self.__image_repositories
      
  def _set_image_repositories(self, v, load=False):
    """
    Setter method for image_repositories, mapped from YANG variable /virtual_appliance/image_repositories (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_image_repositories is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_image_repositories() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=image_repositories.image_repositories, is_container='container', yang_name="image-repositories", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """image_repositories must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=image_repositories.image_repositories, is_container='container', yang_name="image-repositories", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__image_repositories = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_image_repositories(self):
    self.__image_repositories = YANGDynClass(base=image_repositories.image_repositories, is_container='container', yang_name="image-repositories", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_deployment_profiles(self):
    """
    Getter method for deployment_profiles, mapped from YANG variable /virtual_appliance/deployment_profiles (container)
    """
    return self.__deployment_profiles
      
  def _set_deployment_profiles(self, v, load=False):
    """
    Setter method for deployment_profiles, mapped from YANG variable /virtual_appliance/deployment_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deployment_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deployment_profiles() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=deployment_profiles.deployment_profiles, is_container='container', yang_name="deployment-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deployment_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=deployment_profiles.deployment_profiles, is_container='container', yang_name="deployment-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__deployment_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deployment_profiles(self):
    self.__deployment_profiles = YANGDynClass(base=deployment_profiles.deployment_profiles, is_container='container', yang_name="deployment-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_file_repository(self):
    """
    Getter method for file_repository, mapped from YANG variable /virtual_appliance/file_repository (container)
    """
    return self.__file_repository
      
  def _set_file_repository(self, v, load=False):
    """
    Setter method for file_repository, mapped from YANG variable /virtual_appliance/file_repository (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_file_repository is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_file_repository() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=file_repository.file_repository, is_container='container', yang_name="file-repository", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """file_repository must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=file_repository.file_repository, is_container='container', yang_name="file-repository", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__file_repository = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_file_repository(self):
    self.__file_repository = YANGDynClass(base=file_repository.file_repository, is_container='container', yang_name="file-repository", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_script_params(self):
    """
    Getter method for script_params, mapped from YANG variable /virtual_appliance/script_params (container)
    """
    return self.__script_params
      
  def _set_script_params(self, v, load=False):
    """
    Setter method for script_params, mapped from YANG variable /virtual_appliance/script_params (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_script_params is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_script_params() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=script_params.script_params, is_container='container', yang_name="script-params", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """script_params must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=script_params.script_params, is_container='container', yang_name="script-params", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__script_params = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_script_params(self):
    self.__script_params = YANGDynClass(base=script_params.script_params, is_container='container', yang_name="script-params", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  virtual_machines = __builtin__.property(_get_virtual_machines, _set_virtual_machines)
  availability_zones = __builtin__.property(_get_availability_zones, _set_availability_zones)
  image_repositories = __builtin__.property(_get_image_repositories, _set_image_repositories)
  deployment_profiles = __builtin__.property(_get_deployment_profiles, _set_deployment_profiles)
  file_repository = __builtin__.property(_get_file_repository, _set_file_repository)
  script_params = __builtin__.property(_get_script_params, _set_script_params)


  _pyangbind_elements = collections.OrderedDict([('virtual_machines', virtual_machines), ('availability_zones', availability_zones), ('image_repositories', image_repositories), ('deployment_profiles', deployment_profiles), ('file_repository', file_repository), ('script_params', script_params), ])


