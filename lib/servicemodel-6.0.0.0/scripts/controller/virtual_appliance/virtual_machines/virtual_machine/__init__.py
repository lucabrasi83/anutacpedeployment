
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class virtual_machine(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /virtual-appliance/virtual-machines/virtual-machine. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__unique_name','__guest_host_name','__guest_ip_address','__mac_address','__status','__host_device_do','__mgmt_station','__vm_device','__port_profiles','__inventoried_port_profiles',)

  _yang_name = 'virtual-machine'
  _module_name = 'virtualappliance'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__vm_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="vm-device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__unique_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__mgmt_station = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-station", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__guest_host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="guest-host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__port_profiles = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__host_device_do = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-device-do", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__guest_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="guest-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)
    self.__mac_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__inventoried_port_profiles = YANGDynClass(base=unicode, is_leaf=True, yang_name="inventoried-port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'virtual-appliance', u'virtual-machines', u'virtual-machine']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_unique_name(self):
    """
    Getter method for unique_name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/unique_name (string)

    YANG Description: string
    """
    return self.__unique_name
      
  def _set_unique_name(self, v, load=False):
    """
    Setter method for unique_name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/unique_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unique_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unique_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="unique-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unique_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__unique_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unique_name(self):
    self.__unique_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="unique-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_guest_host_name(self):
    """
    Getter method for guest_host_name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/guest_host_name (string)

    YANG Description: string
    """
    return self.__guest_host_name
      
  def _set_guest_host_name(self, v, load=False):
    """
    Setter method for guest_host_name, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/guest_host_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_guest_host_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_guest_host_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="guest-host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """guest_host_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="guest-host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__guest_host_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_guest_host_name(self):
    self.__guest_host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="guest-host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_guest_ip_address(self):
    """
    Getter method for guest_ip_address, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/guest_ip_address (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__guest_ip_address
      
  def _set_guest_ip_address(self, v, load=False):
    """
    Setter method for guest_ip_address, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/guest_ip_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_guest_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_guest_ip_address() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="guest-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """guest_ip_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="guest-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__guest_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_guest_ip_address(self):
    self.__guest_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="guest-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)


  def _get_mac_address(self):
    """
    Getter method for mac_address, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/mac_address (string)

    YANG Description: string
    """
    return self.__mac_address
      
  def _set_mac_address(self, v, load=False):
    """
    Setter method for mac_address, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/mac_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_address(self):
    self.__mac_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/status (string)

    YANG Description: string
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_host_device_do(self):
    """
    Getter method for host_device_do, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/host_device_do (leafref)

    YANG Description: host-device-do
    """
    return self.__host_device_do
      
  def _set_host_device_do(self, v, load=False):
    """
    Setter method for host_device_do, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/host_device_do (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_device_do is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_device_do() directly.

    YANG Description: host-device-do
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="host-device-do", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_device_do must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="host-device-do", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__host_device_do = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_device_do(self):
    self.__host_device_do = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-device-do", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_mgmt_station(self):
    """
    Getter method for mgmt_station, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/mgmt_station (leafref)

    YANG Description: mgmt-station
    """
    return self.__mgmt_station
      
  def _set_mgmt_station(self, v, load=False):
    """
    Setter method for mgmt_station, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/mgmt_station (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_station is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_station() directly.

    YANG Description: mgmt-station
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mgmt-station", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_station must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-station", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__mgmt_station = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_station(self):
    self.__mgmt_station = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-station", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_vm_device(self):
    """
    Getter method for vm_device, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/vm_device (leafref)

    YANG Description: vm-device
    """
    return self.__vm_device
      
  def _set_vm_device(self, v, load=False):
    """
    Setter method for vm_device, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/vm_device (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vm_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vm_device() directly.

    YANG Description: vm-device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vm-device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vm_device must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vm-device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__vm_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vm_device(self):
    self.__vm_device = YANGDynClass(base=unicode, is_leaf=True, yang_name="vm-device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_port_profiles(self):
    """
    Getter method for port_profiles, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/port_profiles (string)

    YANG Description: string
    """
    return self.__port_profiles
      
  def _set_port_profiles(self, v, load=False):
    """
    Setter method for port_profiles, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/port_profiles (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_profiles() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_profiles must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__port_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_profiles(self):
    self.__port_profiles = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_inventoried_port_profiles(self):
    """
    Getter method for inventoried_port_profiles, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/inventoried_port_profiles (string)

    YANG Description: string
    """
    return self.__inventoried_port_profiles
      
  def _set_inventoried_port_profiles(self, v, load=False):
    """
    Setter method for inventoried_port_profiles, mapped from YANG variable /virtual_appliance/virtual_machines/virtual_machine/inventoried_port_profiles (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inventoried_port_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inventoried_port_profiles() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="inventoried-port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inventoried_port_profiles must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="inventoried-port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__inventoried_port_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inventoried_port_profiles(self):
    self.__inventoried_port_profiles = YANGDynClass(base=unicode, is_leaf=True, yang_name="inventoried-port-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  unique_name = __builtin__.property(_get_unique_name, _set_unique_name)
  guest_host_name = __builtin__.property(_get_guest_host_name, _set_guest_host_name)
  guest_ip_address = __builtin__.property(_get_guest_ip_address, _set_guest_ip_address)
  mac_address = __builtin__.property(_get_mac_address, _set_mac_address)
  status = __builtin__.property(_get_status, _set_status)
  host_device_do = __builtin__.property(_get_host_device_do, _set_host_device_do)
  mgmt_station = __builtin__.property(_get_mgmt_station, _set_mgmt_station)
  vm_device = __builtin__.property(_get_vm_device, _set_vm_device)
  port_profiles = __builtin__.property(_get_port_profiles, _set_port_profiles)
  inventoried_port_profiles = __builtin__.property(_get_inventoried_port_profiles, _set_inventoried_port_profiles)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('unique_name', unique_name), ('guest_host_name', guest_host_name), ('guest_ip_address', guest_ip_address), ('mac_address', mac_address), ('status', status), ('host_device_do', host_device_do), ('mgmt_station', mgmt_station), ('vm_device', vm_device), ('port_profiles', port_profiles), ('inventoried_port_profiles', inventoried_port_profiles), ])


