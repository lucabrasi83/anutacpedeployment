
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import volume_types
import volumes
import availability_zones
class deployment_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /virtual-appliance/deployment-profiles/deployment-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__vim_ip','__volume_types','__volumes','__availability_zones','__mgmt_vlan','__mgmt_port_profile',)

  _yang_name = 'deployment-profile'
  _module_name = 'virtualappliance'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__availability_zones = YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__mgmt_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mgmt-vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__mgmt_port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__volume_types = YANGDynClass(base=volume_types.volume_types, is_container='container', yang_name="volume-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__volumes = YANGDynClass(base=volumes.volumes, is_container='container', yang_name="volumes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__vim_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vim-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'virtual-appliance', u'deployment-profiles', u'deployment-profile']

  def _get_vim_ip(self):
    """
    Getter method for vim_ip, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/vim_ip (inet:ipv4-address)

    YANG Description: Deployment profile for the VIM
    """
    return self.__vim_ip
      
  def _set_vim_ip(self, v, load=False):
    """
    Setter method for vim_ip, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/vim_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vim_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vim_ip() directly.

    YANG Description: Deployment profile for the VIM
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vim-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vim_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vim-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__vim_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vim_ip(self):
    self.__vim_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vim-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)


  def _get_volume_types(self):
    """
    Getter method for volume_types, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/volume_types (container)
    """
    return self.__volume_types
      
  def _set_volume_types(self, v, load=False):
    """
    Setter method for volume_types, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/volume_types (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_volume_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_volume_types() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=volume_types.volume_types, is_container='container', yang_name="volume-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """volume_types must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=volume_types.volume_types, is_container='container', yang_name="volume-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__volume_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_volume_types(self):
    self.__volume_types = YANGDynClass(base=volume_types.volume_types, is_container='container', yang_name="volume-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_volumes(self):
    """
    Getter method for volumes, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/volumes (container)
    """
    return self.__volumes
      
  def _set_volumes(self, v, load=False):
    """
    Setter method for volumes, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/volumes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_volumes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_volumes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=volumes.volumes, is_container='container', yang_name="volumes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """volumes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=volumes.volumes, is_container='container', yang_name="volumes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__volumes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_volumes(self):
    self.__volumes = YANGDynClass(base=volumes.volumes, is_container='container', yang_name="volumes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_availability_zones(self):
    """
    Getter method for availability_zones, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/availability_zones (container)
    """
    return self.__availability_zones
      
  def _set_availability_zones(self, v, load=False):
    """
    Setter method for availability_zones, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/availability_zones (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_availability_zones is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_availability_zones() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """availability_zones must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__availability_zones = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_availability_zones(self):
    self.__availability_zones = YANGDynClass(base=availability_zones.availability_zones, is_container='container', yang_name="availability-zones", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_mgmt_vlan(self):
    """
    Getter method for mgmt_vlan, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/mgmt_vlan (uint32)

    YANG Description: Used for creating the mgmt plane between the deployed VNFs
    """
    return self.__mgmt_vlan
      
  def _set_mgmt_vlan(self, v, load=False):
    """
    Setter method for mgmt_vlan, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/mgmt_vlan (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_vlan() directly.

    YANG Description: Used for creating the mgmt plane between the deployed VNFs
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mgmt-vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_vlan must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mgmt-vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__mgmt_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_vlan(self):
    self.__mgmt_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mgmt-vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_mgmt_port_profile(self):
    """
    Getter method for mgmt_port_profile, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/mgmt_port_profile (string)

    YANG Description: Mgmt port profile name for the VNF to be attached to
    """
    return self.__mgmt_port_profile
      
  def _set_mgmt_port_profile(self, v, load=False):
    """
    Setter method for mgmt_port_profile, mapped from YANG variable /virtual_appliance/deployment_profiles/deployment_profile/mgmt_port_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_port_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_port_profile() directly.

    YANG Description: Mgmt port profile name for the VNF to be attached to
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mgmt-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_port_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mgmt_port_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_port_profile(self):
    self.__mgmt_port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  vim_ip = __builtin__.property(_get_vim_ip, _set_vim_ip)
  volume_types = __builtin__.property(_get_volume_types, _set_volume_types)
  volumes = __builtin__.property(_get_volumes, _set_volumes)
  availability_zones = __builtin__.property(_get_availability_zones, _set_availability_zones)
  mgmt_vlan = __builtin__.property(_get_mgmt_vlan, _set_mgmt_vlan)
  mgmt_port_profile = __builtin__.property(_get_mgmt_port_profile, _set_mgmt_port_profile)


  _pyangbind_elements = collections.OrderedDict([('vim_ip', vim_ip), ('volume_types', volume_types), ('volumes', volumes), ('availability_zones', availability_zones), ('mgmt_vlan', mgmt_vlan), ('mgmt_port_profile', mgmt_port_profile), ])


