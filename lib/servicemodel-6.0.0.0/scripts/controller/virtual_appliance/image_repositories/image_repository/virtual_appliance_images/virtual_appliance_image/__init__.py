
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class virtual_appliance_image(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /virtual-appliance/image-repositories/image-repository/virtual-appliance-images/virtual-appliance-image. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__description','__device_type','__mgmt_ip','__credential_set','__virtual_appliance_profile','__version','__central_manager_address','__primary_interface','__filename','__retry_timeout','__deployed','__remote','__open_stack_id','__system_defined','__synced_agents','__location',)

  _yang_name = 'virtual-appliance-image'
  _module_name = 'virtualappliance'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__credential_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__retry_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(120), is_leaf=True, yang_name="retry-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__remote = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__mgmt_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__virtual_appliance_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-appliance-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__filename = YANGDynClass(base=unicode, is_leaf=True, yang_name="filename", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:file', is_config=True)
    self.__open_stack_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="open-stack-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)
    self.__device_type = YANGDynClass(base=unicode, default=unicode("UNKNOWN"), is_leaf=True, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__primary_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__central_manager_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="central-manager-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__synced_agents = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="synced-agents", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=False)
    self.__system_defined = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-defined", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__deployed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deployed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'virtual-appliance', u'image-repositories', u'image-repository', u'virtual-appliance-images', u'virtual-appliance-image']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/name (string)

    YANG Description: Allows AlphaNumerics, hyphen, underscore and space characters only. Max length is 64
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Allows AlphaNumerics, hyphen, underscore and space characters only. Max length is 64
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_type(self):
    """
    Getter method for device_type, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/device_type (leafref)

    YANG Description: device-type
    """
    return self.__device_type
      
  def _set_device_type(self, v, load=False):
    """
    Setter method for device_type, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/device_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_type() directly.

    YANG Description: device-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("UNKNOWN"), is_leaf=True, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("UNKNOWN"), is_leaf=True, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_type(self):
    self.__device_type = YANGDynClass(base=unicode, default=unicode("UNKNOWN"), is_leaf=True, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_mgmt_ip(self):
    """
    Getter method for mgmt_ip, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/mgmt_ip (string)

    YANG Description: string
    """
    return self.__mgmt_ip
      
  def _set_mgmt_ip(self, v, load=False):
    """
    Setter method for mgmt_ip, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/mgmt_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mgmt-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mgmt_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_ip(self):
    self.__mgmt_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_credential_set(self):
    """
    Getter method for credential_set, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/credential_set (leafref)

    YANG Description: credential-set
    """
    return self.__credential_set
      
  def _set_credential_set(self, v, load=False):
    """
    Setter method for credential_set, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/credential_set (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credential_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credential_set() directly.

    YANG Description: credential-set
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="credential-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credential_set must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__credential_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credential_set(self):
    self.__credential_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_virtual_appliance_profile(self):
    """
    Getter method for virtual_appliance_profile, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/virtual_appliance_profile (leafref)

    YANG Description: virtual-appliance-profile
    """
    return self.__virtual_appliance_profile
      
  def _set_virtual_appliance_profile(self, v, load=False):
    """
    Setter method for virtual_appliance_profile, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/virtual_appliance_profile (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_appliance_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_appliance_profile() directly.

    YANG Description: virtual-appliance-profile
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="virtual-appliance-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_appliance_profile must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-appliance-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__virtual_appliance_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_appliance_profile(self):
    self.__virtual_appliance_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-appliance-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/version (string)

    YANG Description: string
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_central_manager_address(self):
    """
    Getter method for central_manager_address, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/central_manager_address (string)

    YANG Description: string
    """
    return self.__central_manager_address
      
  def _set_central_manager_address(self, v, load=False):
    """
    Setter method for central_manager_address, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/central_manager_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_central_manager_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_central_manager_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="central-manager-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """central_manager_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="central-manager-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__central_manager_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_central_manager_address(self):
    self.__central_manager_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="central-manager-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_primary_interface(self):
    """
    Getter method for primary_interface, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/primary_interface (string)

    YANG Description: string
    """
    return self.__primary_interface
      
  def _set_primary_interface(self, v, load=False):
    """
    Setter method for primary_interface, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/primary_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="primary-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__primary_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_interface(self):
    self.__primary_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_filename(self):
    """
    Getter method for filename, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/filename (ndt:file)

    YANG Description: string
    """
    return self.__filename
      
  def _set_filename(self, v, load=False):
    """
    Setter method for filename, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/filename (ndt:file)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_filename is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_filename() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="filename", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:file', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """filename must be of a type compatible with ndt:file""",
          'defined-type': "ndt:file",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="filename", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:file', is_config=True)""",
        })

    self.__filename = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_filename(self):
    self.__filename = YANGDynClass(base=unicode, is_leaf=True, yang_name="filename", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:file', is_config=True)


  def _get_retry_timeout(self):
    """
    Getter method for retry_timeout, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/retry_timeout (uint16)

    YANG Description: Timeout to acquire the SSH/Telnet connection while waiting for SSH/Telnet subsystem to bootup.
    """
    return self.__retry_timeout
      
  def _set_retry_timeout(self, v, load=False):
    """
    Setter method for retry_timeout, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/retry_timeout (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retry_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retry_timeout() directly.

    YANG Description: Timeout to acquire the SSH/Telnet connection while waiting for SSH/Telnet subsystem to bootup.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(120), is_leaf=True, yang_name="retry-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retry_timeout must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(120), is_leaf=True, yang_name="retry-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__retry_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retry_timeout(self):
    self.__retry_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..2000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(120), is_leaf=True, yang_name="retry-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_deployed(self):
    """
    Getter method for deployed, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/deployed (boolean)

    YANG Description: deployed: True/False
    """
    return self.__deployed
      
  def _set_deployed(self, v, load=False):
    """
    Setter method for deployed, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/deployed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deployed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deployed() directly.

    YANG Description: deployed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="deployed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deployed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deployed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__deployed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deployed(self):
    self.__deployed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deployed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_remote(self):
    """
    Getter method for remote, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/remote (boolean)

    YANG Description: remote: True/False
    """
    return self.__remote
      
  def _set_remote(self, v, load=False):
    """
    Setter method for remote, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/remote (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote() directly.

    YANG Description: remote: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="remote", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__remote = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote(self):
    self.__remote = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="remote", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_open_stack_id(self):
    """
    Getter method for open_stack_id, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/open_stack_id (string)

    YANG Description: string
    """
    return self.__open_stack_id
      
  def _set_open_stack_id(self, v, load=False):
    """
    Setter method for open_stack_id, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/open_stack_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_open_stack_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_open_stack_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="open-stack-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """open_stack_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="open-stack-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)""",
        })

    self.__open_stack_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_open_stack_id(self):
    self.__open_stack_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="open-stack-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)


  def _get_system_defined(self):
    """
    Getter method for system_defined, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/system_defined (boolean)

    YANG Description: system-defined: True/False
    """
    return self.__system_defined
      
  def _set_system_defined(self, v, load=False):
    """
    Setter method for system_defined, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/system_defined (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_defined is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_defined() directly.

    YANG Description: system-defined: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="system-defined", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_defined must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-defined", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__system_defined = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_defined(self):
    self.__system_defined = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-defined", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_synced_agents(self):
    """
    Getter method for synced_agents, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/synced_agents (leafref)

    YANG Description: synced-agents
    """
    return self.__synced_agents
      
  def _set_synced_agents(self, v, load=False):
    """
    Setter method for synced_agents, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/synced_agents (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_synced_agents is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_synced_agents() directly.

    YANG Description: synced-agents
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="synced-agents", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """synced_agents must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="synced-agents", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=False)""",
        })

    self.__synced_agents = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_synced_agents(self):
    self.__synced_agents = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="synced-agents", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=False)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/location (string)

    YANG Description: Virtual Image (ova) location
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images/virtual_appliance_image/location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.

    YANG Description: Virtual Image (ova) location
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=False)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  device_type = __builtin__.property(_get_device_type, _set_device_type)
  mgmt_ip = __builtin__.property(_get_mgmt_ip, _set_mgmt_ip)
  credential_set = __builtin__.property(_get_credential_set, _set_credential_set)
  virtual_appliance_profile = __builtin__.property(_get_virtual_appliance_profile, _set_virtual_appliance_profile)
  version = __builtin__.property(_get_version, _set_version)
  central_manager_address = __builtin__.property(_get_central_manager_address, _set_central_manager_address)
  primary_interface = __builtin__.property(_get_primary_interface, _set_primary_interface)
  filename = __builtin__.property(_get_filename, _set_filename)
  retry_timeout = __builtin__.property(_get_retry_timeout, _set_retry_timeout)
  deployed = __builtin__.property(_get_deployed)
  remote = __builtin__.property(_get_remote)
  open_stack_id = __builtin__.property(_get_open_stack_id)
  system_defined = __builtin__.property(_get_system_defined)
  synced_agents = __builtin__.property(_get_synced_agents)
  location = __builtin__.property(_get_location)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('description', description), ('device_type', device_type), ('mgmt_ip', mgmt_ip), ('credential_set', credential_set), ('virtual_appliance_profile', virtual_appliance_profile), ('version', version), ('central_manager_address', central_manager_address), ('primary_interface', primary_interface), ('filename', filename), ('retry_timeout', retry_timeout), ('deployed', deployed), ('remote', remote), ('open_stack_id', open_stack_id), ('system_defined', system_defined), ('synced_agents', synced_agents), ('location', location), ])


