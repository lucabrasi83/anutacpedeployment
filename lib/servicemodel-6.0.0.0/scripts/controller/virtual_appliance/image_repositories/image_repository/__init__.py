
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import virtual_appliance_images
import virtual_appliance_profiles
class image_repository(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /virtual-appliance/image-repositories/image-repository. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__VIM_IP','__VIM_TYPE','__description','__virtual_appliance_images','__virtual_appliance_profiles',)

  _yang_name = 'image-repository'
  _module_name = 'virtualappliance'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__virtual_appliance_images = YANGDynClass(base=virtual_appliance_images.virtual_appliance_images, is_container='container', yang_name="virtual-appliance-images", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__virtual_appliance_profiles = YANGDynClass(base=virtual_appliance_profiles.virtual_appliance_profiles, is_container='container', yang_name="virtual-appliance-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__VIM_TYPE = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'OPENSTACK': {}, u'JUNIPERContrail': {}, u'HPOpenstack': {}, u'VMWARE': {}},), is_leaf=True, yang_name="VIM-TYPE", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='vp:VIM-TYPE', is_config=True)
    self.__VIM_IP = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="VIM-IP", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'virtual-appliance', u'image-repositories', u'image-repository']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_VIM_IP(self):
    """
    Getter method for VIM_IP, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/VIM_IP (inet:ipv4-address)

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    return self.__VIM_IP
      
  def _set_VIM_IP(self, v, load=False):
    """
    Setter method for VIM_IP, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/VIM_IP (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_VIM_IP is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_VIM_IP() directly.

    YANG Description: Valid IPv4 Address (A.B.C.D for e.x: 172.16.1.1)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="VIM-IP", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """VIM_IP must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="VIM-IP", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__VIM_IP = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_VIM_IP(self):
    self.__VIM_IP = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="VIM-IP", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:ipv4-address', is_config=True)


  def _get_VIM_TYPE(self):
    """
    Getter method for VIM_TYPE, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/VIM_TYPE (vp:VIM-TYPE)

    YANG Description: OPENSTACK
JUNIPERContrail
HPOpenstack
VMWARE

    """
    return self.__VIM_TYPE
      
  def _set_VIM_TYPE(self, v, load=False):
    """
    Setter method for VIM_TYPE, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/VIM_TYPE (vp:VIM-TYPE)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_VIM_TYPE is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_VIM_TYPE() directly.

    YANG Description: OPENSTACK
JUNIPERContrail
HPOpenstack
VMWARE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'OPENSTACK': {}, u'JUNIPERContrail': {}, u'HPOpenstack': {}, u'VMWARE': {}},), is_leaf=True, yang_name="VIM-TYPE", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='vp:VIM-TYPE', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """VIM_TYPE must be of a type compatible with vp:VIM-TYPE""",
          'defined-type': "vp:VIM-TYPE",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'OPENSTACK': {}, u'JUNIPERContrail': {}, u'HPOpenstack': {}, u'VMWARE': {}},), is_leaf=True, yang_name="VIM-TYPE", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='vp:VIM-TYPE', is_config=True)""",
        })

    self.__VIM_TYPE = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_VIM_TYPE(self):
    self.__VIM_TYPE = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'OPENSTACK': {}, u'JUNIPERContrail': {}, u'HPOpenstack': {}, u'VMWARE': {}},), is_leaf=True, yang_name="VIM-TYPE", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='vp:VIM-TYPE', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_virtual_appliance_images(self):
    """
    Getter method for virtual_appliance_images, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images (container)
    """
    return self.__virtual_appliance_images
      
  def _set_virtual_appliance_images(self, v, load=False):
    """
    Setter method for virtual_appliance_images, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_images (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_appliance_images is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_appliance_images() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=virtual_appliance_images.virtual_appliance_images, is_container='container', yang_name="virtual-appliance-images", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_appliance_images must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=virtual_appliance_images.virtual_appliance_images, is_container='container', yang_name="virtual-appliance-images", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__virtual_appliance_images = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_appliance_images(self):
    self.__virtual_appliance_images = YANGDynClass(base=virtual_appliance_images.virtual_appliance_images, is_container='container', yang_name="virtual-appliance-images", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_virtual_appliance_profiles(self):
    """
    Getter method for virtual_appliance_profiles, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_profiles (container)
    """
    return self.__virtual_appliance_profiles
      
  def _set_virtual_appliance_profiles(self, v, load=False):
    """
    Setter method for virtual_appliance_profiles, mapped from YANG variable /virtual_appliance/image_repositories/image_repository/virtual_appliance_profiles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_appliance_profiles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_appliance_profiles() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=virtual_appliance_profiles.virtual_appliance_profiles, is_container='container', yang_name="virtual-appliance-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_appliance_profiles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=virtual_appliance_profiles.virtual_appliance_profiles, is_container='container', yang_name="virtual-appliance-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__virtual_appliance_profiles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_appliance_profiles(self):
    self.__virtual_appliance_profiles = YANGDynClass(base=virtual_appliance_profiles.virtual_appliance_profiles, is_container='container', yang_name="virtual-appliance-profiles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  VIM_IP = __builtin__.property(_get_VIM_IP, _set_VIM_IP)
  VIM_TYPE = __builtin__.property(_get_VIM_TYPE, _set_VIM_TYPE)
  description = __builtin__.property(_get_description, _set_description)
  virtual_appliance_images = __builtin__.property(_get_virtual_appliance_images, _set_virtual_appliance_images)
  virtual_appliance_profiles = __builtin__.property(_get_virtual_appliance_profiles, _set_virtual_appliance_profiles)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('VIM_IP', VIM_IP), ('VIM_TYPE', VIM_TYPE), ('description', description), ('virtual_appliance_images', virtual_appliance_images), ('virtual_appliance_profiles', virtual_appliance_profiles), ])


