
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class folder(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /service-manager/folders/folder. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__folder_id','__name','__description','__folder_component_type','__parent_type','__parent_id',)

  _yang_name = 'folder'
  _module_name = 'servicemanager'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__parent_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VIRTUALAPPLIANCE': {}, u'COMPUTEFIREWALL': {}, u'WIRELESSLAN': {}, u'INFRAVLAN': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'L3ZONE': {}, u'FIREWALLOUTSIDEINTERFACE': {}, u'ACCESSLIST': {}, u'SERVERINTERFACE': {}, u'HOST': {}, u'VPNINTERFACE': {}, u'SECURITYPROFILE': {}, u'PORTPROFILE': {}, u'ROUTEDOMAIN': {}, u'INFRAINTERFACE': {}, u'FIREWALLINSIDEINTERFACE': {}, u'ROUTEMAP': {}, u'MPLSRD': {}, u'LOADBALANCER': {}, u'VIRTUALNETWORK': {}},), is_leaf=True, yang_name="parent-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resource-type', is_config=True)
    self.__folder_component_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SECURITY_POLICY': {}, u'ROUTING_POLICY': {}, u'SD_SERVICE': {}, u'CONFIG_FILE': {}, u'SD_CATALOG': {}, u'INFRASTRUCTURE_POLICY': {}, u'ASSOCIATED_RESOURCE': {}, u'PROVISIONING_POLICY': {}, u'SWITCHPORTPOLICY': {}, u'TENANT': {}, u'QUALITY_POLICY': {}, u'SWITCHPORTLAYOUT': {}, u'RESOURCES': {}, u'TENANT_VDC': {}, u'CONFIG_EDITOR': {}},), is_leaf=True, yang_name="folder-component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='folder-component-type', is_config=True)
    self.__parent_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__folder_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="folder-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'service-manager', u'folders', u'folder']

  def _get_folder_id(self):
    """
    Getter method for folder_id, mapped from YANG variable /service_manager/folders/folder/folder_id (string)

    YANG Description: string
    """
    return self.__folder_id
      
  def _set_folder_id(self, v, load=False):
    """
    Setter method for folder_id, mapped from YANG variable /service_manager/folders/folder/folder_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_folder_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_folder_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="folder-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """folder_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="folder-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__folder_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_folder_id(self):
    self.__folder_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="folder-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /service_manager/folders/folder/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /service_manager/folders/folder/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /service_manager/folders/folder/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /service_manager/folders/folder/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_folder_component_type(self):
    """
    Getter method for folder_component_type, mapped from YANG variable /service_manager/folders/folder/folder_component_type (folder-component-type)

    YANG Description: PROVISIONING_POLICY
SECURITY_POLICY
QUALITY_POLICY
ROUTING_POLICY
SD_CATALOG
SD_SERVICE
TENANT_VDC
TENANT
RESOURCES
SWITCHPORTPOLICY
SWITCHPORTLAYOUT
CONFIG_EDITOR
INFRASTRUCTURE_POLICY
CONFIG_FILE
ASSOCIATED_RESOURCE

    """
    return self.__folder_component_type
      
  def _set_folder_component_type(self, v, load=False):
    """
    Setter method for folder_component_type, mapped from YANG variable /service_manager/folders/folder/folder_component_type (folder-component-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_folder_component_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_folder_component_type() directly.

    YANG Description: PROVISIONING_POLICY
SECURITY_POLICY
QUALITY_POLICY
ROUTING_POLICY
SD_CATALOG
SD_SERVICE
TENANT_VDC
TENANT
RESOURCES
SWITCHPORTPOLICY
SWITCHPORTLAYOUT
CONFIG_EDITOR
INFRASTRUCTURE_POLICY
CONFIG_FILE
ASSOCIATED_RESOURCE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SECURITY_POLICY': {}, u'ROUTING_POLICY': {}, u'SD_SERVICE': {}, u'CONFIG_FILE': {}, u'SD_CATALOG': {}, u'INFRASTRUCTURE_POLICY': {}, u'ASSOCIATED_RESOURCE': {}, u'PROVISIONING_POLICY': {}, u'SWITCHPORTPOLICY': {}, u'TENANT': {}, u'QUALITY_POLICY': {}, u'SWITCHPORTLAYOUT': {}, u'RESOURCES': {}, u'TENANT_VDC': {}, u'CONFIG_EDITOR': {}},), is_leaf=True, yang_name="folder-component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='folder-component-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """folder_component_type must be of a type compatible with folder-component-type""",
          'defined-type': "controller:folder-component-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SECURITY_POLICY': {}, u'ROUTING_POLICY': {}, u'SD_SERVICE': {}, u'CONFIG_FILE': {}, u'SD_CATALOG': {}, u'INFRASTRUCTURE_POLICY': {}, u'ASSOCIATED_RESOURCE': {}, u'PROVISIONING_POLICY': {}, u'SWITCHPORTPOLICY': {}, u'TENANT': {}, u'QUALITY_POLICY': {}, u'SWITCHPORTLAYOUT': {}, u'RESOURCES': {}, u'TENANT_VDC': {}, u'CONFIG_EDITOR': {}},), is_leaf=True, yang_name="folder-component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='folder-component-type', is_config=True)""",
        })

    self.__folder_component_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_folder_component_type(self):
    self.__folder_component_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SECURITY_POLICY': {}, u'ROUTING_POLICY': {}, u'SD_SERVICE': {}, u'CONFIG_FILE': {}, u'SD_CATALOG': {}, u'INFRASTRUCTURE_POLICY': {}, u'ASSOCIATED_RESOURCE': {}, u'PROVISIONING_POLICY': {}, u'SWITCHPORTPOLICY': {}, u'TENANT': {}, u'QUALITY_POLICY': {}, u'SWITCHPORTLAYOUT': {}, u'RESOURCES': {}, u'TENANT_VDC': {}, u'CONFIG_EDITOR': {}},), is_leaf=True, yang_name="folder-component-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='folder-component-type', is_config=True)


  def _get_parent_type(self):
    """
    Getter method for parent_type, mapped from YANG variable /service_manager/folders/folder/parent_type (resource-type)

    YANG Description: ACCESSLIST
COMPUTEFIREWALL
FIREWALL
FIREWALLINSIDEINTERFACE
FIREWALLOUTSIDEINTERFACE
HOST
INFRAINTERFACE
INFRAVLAN
L3ZONE
LOADBALANCER
MPLSRD
PORTPROFILE
ROUTEDOMAIN
ROUTEMAP
SECURITYPROFILE
SERVERINTERFACE
SERVICEPOLICY
VIRTUALAPPLIANCE
VIRTUALNETWORK
VPNINTERFACE
WIRELESSLAN

    """
    return self.__parent_type
      
  def _set_parent_type(self, v, load=False):
    """
    Setter method for parent_type, mapped from YANG variable /service_manager/folders/folder/parent_type (resource-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_type() directly.

    YANG Description: ACCESSLIST
COMPUTEFIREWALL
FIREWALL
FIREWALLINSIDEINTERFACE
FIREWALLOUTSIDEINTERFACE
HOST
INFRAINTERFACE
INFRAVLAN
L3ZONE
LOADBALANCER
MPLSRD
PORTPROFILE
ROUTEDOMAIN
ROUTEMAP
SECURITYPROFILE
SERVERINTERFACE
SERVICEPOLICY
VIRTUALAPPLIANCE
VIRTUALNETWORK
VPNINTERFACE
WIRELESSLAN

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VIRTUALAPPLIANCE': {}, u'COMPUTEFIREWALL': {}, u'WIRELESSLAN': {}, u'INFRAVLAN': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'L3ZONE': {}, u'FIREWALLOUTSIDEINTERFACE': {}, u'ACCESSLIST': {}, u'SERVERINTERFACE': {}, u'HOST': {}, u'VPNINTERFACE': {}, u'SECURITYPROFILE': {}, u'PORTPROFILE': {}, u'ROUTEDOMAIN': {}, u'INFRAINTERFACE': {}, u'FIREWALLINSIDEINTERFACE': {}, u'ROUTEMAP': {}, u'MPLSRD': {}, u'LOADBALANCER': {}, u'VIRTUALNETWORK': {}},), is_leaf=True, yang_name="parent-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resource-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_type must be of a type compatible with resource-type""",
          'defined-type': "controller:resource-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VIRTUALAPPLIANCE': {}, u'COMPUTEFIREWALL': {}, u'WIRELESSLAN': {}, u'INFRAVLAN': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'L3ZONE': {}, u'FIREWALLOUTSIDEINTERFACE': {}, u'ACCESSLIST': {}, u'SERVERINTERFACE': {}, u'HOST': {}, u'VPNINTERFACE': {}, u'SECURITYPROFILE': {}, u'PORTPROFILE': {}, u'ROUTEDOMAIN': {}, u'INFRAINTERFACE': {}, u'FIREWALLINSIDEINTERFACE': {}, u'ROUTEMAP': {}, u'MPLSRD': {}, u'LOADBALANCER': {}, u'VIRTUALNETWORK': {}},), is_leaf=True, yang_name="parent-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resource-type', is_config=True)""",
        })

    self.__parent_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_type(self):
    self.__parent_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VIRTUALAPPLIANCE': {}, u'COMPUTEFIREWALL': {}, u'WIRELESSLAN': {}, u'INFRAVLAN': {}, u'FIREWALL': {}, u'SERVICEPOLICY': {}, u'L3ZONE': {}, u'FIREWALLOUTSIDEINTERFACE': {}, u'ACCESSLIST': {}, u'SERVERINTERFACE': {}, u'HOST': {}, u'VPNINTERFACE': {}, u'SECURITYPROFILE': {}, u'PORTPROFILE': {}, u'ROUTEDOMAIN': {}, u'INFRAINTERFACE': {}, u'FIREWALLINSIDEINTERFACE': {}, u'ROUTEMAP': {}, u'MPLSRD': {}, u'LOADBALANCER': {}, u'VIRTUALNETWORK': {}},), is_leaf=True, yang_name="parent-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resource-type', is_config=True)


  def _get_parent_id(self):
    """
    Getter method for parent_id, mapped from YANG variable /service_manager/folders/folder/parent_id (leafref)

    YANG Description: parent-id
    """
    return self.__parent_id
      
  def _set_parent_id(self, v, load=False):
    """
    Setter method for parent_id, mapped from YANG variable /service_manager/folders/folder/parent_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_id() directly.

    YANG Description: parent-id
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="parent-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__parent_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_id(self):
    self.__parent_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  folder_id = __builtin__.property(_get_folder_id, _set_folder_id)
  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  folder_component_type = __builtin__.property(_get_folder_component_type, _set_folder_component_type)
  parent_type = __builtin__.property(_get_parent_type, _set_parent_type)
  parent_id = __builtin__.property(_get_parent_id, _set_parent_id)


  _pyangbind_elements = collections.OrderedDict([('folder_id', folder_id), ('name', name), ('description', description), ('folder_component_type', folder_component_type), ('parent_type', parent_type), ('parent_id', parent_id), ])


