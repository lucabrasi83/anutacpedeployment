
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class cloud_hosting_node(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cloudhosting - based on the path /cloudhosting/cloud-hosting-nodes/cloud-hosting-node. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__cloud_hosting_node_id','__port','__connectivity_type','__ip_address','__service',)

  _yang_name = 'cloud-hosting-node'
  _module_name = 'cloudhosting'
  _namespace = 'http://anutanetworks.com/cloudhosting'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cloud_hosting_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-node-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    self.__connectivity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'MPLS': {}, u'CONTENT_SCAN': {}, u'IPSEC': {}},), is_leaf=True, yang_name="connectivity-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='connectivity-type', is_config=True)
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='uint16', is_config=True)
    self.__service = YANGDynClass(base=unicode, is_leaf=True, yang_name="service", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cloudhosting', u'cloud-hosting-nodes', u'cloud-hosting-node']

  def _get_cloud_hosting_node_id(self):
    """
    Getter method for cloud_hosting_node_id, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/cloud_hosting_node_id (string)

    YANG Description: string
    """
    return self.__cloud_hosting_node_id
      
  def _set_cloud_hosting_node_id(self, v, load=False):
    """
    Setter method for cloud_hosting_node_id, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/cloud_hosting_node_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cloud_hosting_node_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cloud_hosting_node_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cloud-hosting-node-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cloud_hosting_node_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-node-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__cloud_hosting_node_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cloud_hosting_node_id(self):
    self.__cloud_hosting_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-node-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_port(self):
    """
    Getter method for port, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/port (uint16)

    YANG Description: 0..65535
    """
    return self.__port
      
  def _set_port(self, v, load=False):
    """
    Setter method for port, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/port (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='uint16', is_config=True)""",
        })

    self.__port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port(self):
    self.__port = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="port", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='uint16', is_config=True)


  def _get_connectivity_type(self):
    """
    Getter method for connectivity_type, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/connectivity_type (connectivity-type)

    YANG Description: CONTENT_SCAN
GRE
IPSEC
MPLS

    """
    return self.__connectivity_type
      
  def _set_connectivity_type(self, v, load=False):
    """
    Setter method for connectivity_type, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/connectivity_type (connectivity-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_type() directly.

    YANG Description: CONTENT_SCAN
GRE
IPSEC
MPLS

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'MPLS': {}, u'CONTENT_SCAN': {}, u'IPSEC': {}},), is_leaf=True, yang_name="connectivity-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='connectivity-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_type must be of a type compatible with connectivity-type""",
          'defined-type': "cloudhosting:connectivity-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'MPLS': {}, u'CONTENT_SCAN': {}, u'IPSEC': {}},), is_leaf=True, yang_name="connectivity-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='connectivity-type', is_config=True)""",
        })

    self.__connectivity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_type(self):
    self.__connectivity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'GRE': {}, u'MPLS': {}, u'CONTENT_SCAN': {}, u'IPSEC': {}},), is_leaf=True, yang_name="connectivity-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='connectivity-type', is_config=True)


  def _get_ip_address(self):
    """
    Getter method for ip_address, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/ip_address (string)

    YANG Description: string
    """
    return self.__ip_address
      
  def _set_ip_address(self, v, load=False):
    """
    Setter method for ip_address, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/ip_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ip-address", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_address(self):
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_service(self):
    """
    Getter method for service, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/service (leafref)

    YANG Description: service
    """
    return self.__service
      
  def _set_service(self, v, load=False):
    """
    Setter method for service, mapped from YANG variable /cloudhosting/cloud_hosting_nodes/cloud_hosting_node/service (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service() directly.

    YANG Description: service
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="service", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="service", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)""",
        })

    self.__service = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service(self):
    self.__service = YANGDynClass(base=unicode, is_leaf=True, yang_name="service", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)

  cloud_hosting_node_id = __builtin__.property(_get_cloud_hosting_node_id, _set_cloud_hosting_node_id)
  port = __builtin__.property(_get_port, _set_port)
  connectivity_type = __builtin__.property(_get_connectivity_type, _set_connectivity_type)
  ip_address = __builtin__.property(_get_ip_address, _set_ip_address)
  service = __builtin__.property(_get_service, _set_service)


  _pyangbind_elements = collections.OrderedDict([('cloud_hosting_node_id', cloud_hosting_node_id), ('port', port), ('connectivity_type', connectivity_type), ('ip_address', ip_address), ('service', service), ])


