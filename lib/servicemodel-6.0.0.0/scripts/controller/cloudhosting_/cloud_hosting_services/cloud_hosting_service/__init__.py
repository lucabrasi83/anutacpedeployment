
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class cloud_hosting_service(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module cloudhosting - based on the path /cloudhosting/cloud-hosting-services/cloud-hosting-service. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__cloud_hosting_service_id','__license_string','__description','__name','__service_type','__cloud_hosting_nodes',)

  _yang_name = 'cloud-hosting-service'
  _module_name = 'cloudhosting'
  _namespace = 'http://anutanetworks.com/cloudhosting'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    self.__license_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="license-string", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    self.__cloud_hosting_service_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-service-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    self.__cloud_hosting_nodes = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-nodes", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WEB_PROXY_SAAS': {}},), is_leaf=True, yang_name="service-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='service-type', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cloudhosting', u'cloud-hosting-services', u'cloud-hosting-service']

  def _get_cloud_hosting_service_id(self):
    """
    Getter method for cloud_hosting_service_id, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/cloud_hosting_service_id (string)

    YANG Description: string
    """
    return self.__cloud_hosting_service_id
      
  def _set_cloud_hosting_service_id(self, v, load=False):
    """
    Setter method for cloud_hosting_service_id, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/cloud_hosting_service_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cloud_hosting_service_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cloud_hosting_service_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cloud-hosting-service-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cloud_hosting_service_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-service-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__cloud_hosting_service_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cloud_hosting_service_id(self):
    self.__cloud_hosting_service_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-service-id", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_license_string(self):
    """
    Getter method for license_string, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/license_string (string)

    YANG Description: string
    """
    return self.__license_string
      
  def _set_license_string(self, v, load=False):
    """
    Setter method for license_string, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/license_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_license_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_license_string() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="license-string", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """license_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="license-string", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__license_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_license_string(self):
    self.__license_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="license-string", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='string', is_config=True)


  def _get_service_type(self):
    """
    Getter method for service_type, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/service_type (service-type)

    YANG Description: WEB_PROXY_SAAS

    """
    return self.__service_type
      
  def _set_service_type(self, v, load=False):
    """
    Setter method for service_type, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/service_type (service-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_type() directly.

    YANG Description: WEB_PROXY_SAAS

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WEB_PROXY_SAAS': {}},), is_leaf=True, yang_name="service-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='service-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_type must be of a type compatible with service-type""",
          'defined-type': "cloudhosting:service-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WEB_PROXY_SAAS': {}},), is_leaf=True, yang_name="service-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='service-type', is_config=True)""",
        })

    self.__service_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_type(self):
    self.__service_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'WEB_PROXY_SAAS': {}},), is_leaf=True, yang_name="service-type", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='service-type', is_config=True)


  def _get_cloud_hosting_nodes(self):
    """
    Getter method for cloud_hosting_nodes, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/cloud_hosting_nodes (leafref)

    YANG Description: cloud-hosting-nodes
    """
    return self.__cloud_hosting_nodes
      
  def _set_cloud_hosting_nodes(self, v, load=False):
    """
    Setter method for cloud_hosting_nodes, mapped from YANG variable /cloudhosting/cloud_hosting_services/cloud_hosting_service/cloud_hosting_nodes (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cloud_hosting_nodes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cloud_hosting_nodes() directly.

    YANG Description: cloud-hosting-nodes
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cloud-hosting-nodes", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cloud_hosting_nodes must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-nodes", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)""",
        })

    self.__cloud_hosting_nodes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cloud_hosting_nodes(self):
    self.__cloud_hosting_nodes = YANGDynClass(base=unicode, is_leaf=True, yang_name="cloud-hosting-nodes", module_name="cloudhosting", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/cloudhosting', defining_module='cloudhosting', yang_type='leafref', is_config=True)

  cloud_hosting_service_id = __builtin__.property(_get_cloud_hosting_service_id, _set_cloud_hosting_service_id)
  license_string = __builtin__.property(_get_license_string, _set_license_string)
  description = __builtin__.property(_get_description, _set_description)
  name = __builtin__.property(_get_name, _set_name)
  service_type = __builtin__.property(_get_service_type, _set_service_type)
  cloud_hosting_nodes = __builtin__.property(_get_cloud_hosting_nodes, _set_cloud_hosting_nodes)


  _pyangbind_elements = collections.OrderedDict([('cloud_hosting_service_id', cloud_hosting_service_id), ('license_string', license_string), ('description', description), ('name', name), ('service_type', service_type), ('cloud_hosting_nodes', cloud_hosting_nodes), ])


