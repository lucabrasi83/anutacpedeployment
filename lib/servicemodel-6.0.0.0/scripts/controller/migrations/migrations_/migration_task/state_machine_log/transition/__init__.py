
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class transition(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /migrations/migrations/migration-task/state-machine-log/transition. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__index','__from_state','__event_name','__next_state','__time','__timestamp','__event_data',)

  _yang_name = 'transition'
  _module_name = 'migration'
  _namespace = 'http://anutanetworks.com/migration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__from_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="from-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timestamp", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)
    self.__time = YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__event_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-data", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__next_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="next-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'migrations', u'migrations', u'migration-task', u'state-machine-log', u'transition']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/index (uint32)

    YANG Description: 0..4294967295
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: 0..4294967295
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)


  def _get_from_state(self):
    """
    Getter method for from_state, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/from_state (string)

    YANG Description: string
    """
    return self.__from_state
      
  def _set_from_state(self, v, load=False):
    """
    Setter method for from_state, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/from_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_from_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_from_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="from-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """from_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="from-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__from_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_from_state(self):
    self.__from_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="from-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_event_name(self):
    """
    Getter method for event_name, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/event_name (string)

    YANG Description: string
    """
    return self.__event_name
      
  def _set_event_name(self, v, load=False):
    """
    Setter method for event_name, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/event_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__event_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_name(self):
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_next_state(self):
    """
    Getter method for next_state, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/next_state (string)

    YANG Description: string
    """
    return self.__next_state
      
  def _set_next_state(self, v, load=False):
    """
    Setter method for next_state, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/next_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="next-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="next-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__next_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_state(self):
    self.__next_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="next-state", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_time(self):
    """
    Getter method for time, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/time (string)

    YANG Description: string
    """
    return self.__time
      
  def _set_time(self, v, load=False):
    """
    Setter method for time, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time(self):
    self.__time = YANGDynClass(base=unicode, is_leaf=True, yang_name="time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/timestamp (uint32)

    YANG Description: 0..4294967295
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/timestamp (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timestamp", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timestamp", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="timestamp", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='uint32', is_config=True)


  def _get_event_data(self):
    """
    Getter method for event_data, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/event_data (string)

    YANG Description: string
    """
    return self.__event_data
      
  def _set_event_data(self, v, load=False):
    """
    Setter method for event_data, mapped from YANG variable /migrations/migrations/migration_task/state_machine_log/transition/event_data (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_data() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-data", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_data must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-data", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__event_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_data(self):
    self.__event_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-data", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)

  index = __builtin__.property(_get_index, _set_index)
  from_state = __builtin__.property(_get_from_state, _set_from_state)
  event_name = __builtin__.property(_get_event_name, _set_event_name)
  next_state = __builtin__.property(_get_next_state, _set_next_state)
  time = __builtin__.property(_get_time, _set_time)
  timestamp = __builtin__.property(_get_timestamp, _set_timestamp)
  event_data = __builtin__.property(_get_event_data, _set_event_data)


  _pyangbind_elements = collections.OrderedDict([('index', index), ('from_state', from_state), ('event_name', event_name), ('next_state', next_state), ('time', time), ('timestamp', timestamp), ('event_data', event_data), ])


