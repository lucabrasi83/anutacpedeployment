
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import approval
import create_policy
import delete_policy
class policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /migrations/policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__enabled','__maintenance_mode_mandatory','__approval','__create_policy','__delete_policy',)

  _yang_name = 'policy'
  _module_name = 'migration'
  _namespace = 'http://anutanetworks.com/migration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__approval = YANGDynClass(base=approval.approval, is_container='container', yang_name="approval", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    self.__maintenance_mode_mandatory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="maintenance-mode-mandatory", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    self.__create_policy = YANGDynClass(base=create_policy.create_policy, is_container='container', yang_name="create-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    self.__delete_policy = YANGDynClass(base=delete_policy.delete_policy, is_container='container', yang_name="delete-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'migrations', u'policy']

  def _get_enabled(self):
    """
    Getter method for enabled, mapped from YANG variable /migrations/policy/enabled (boolean)

    YANG Description: enabled: True/False
    """
    return self.__enabled
      
  def _set_enabled(self, v, load=False):
    """
    Setter method for enabled, mapped from YANG variable /migrations/policy/enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enabled() directly.

    YANG Description: enabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enabled", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)""",
        })

    self.__enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enabled(self):
    self.__enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enabled", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)


  def _get_maintenance_mode_mandatory(self):
    """
    Getter method for maintenance_mode_mandatory, mapped from YANG variable /migrations/policy/maintenance_mode_mandatory (boolean)

    YANG Description: maintenance-mode-mandatory: True/False
    """
    return self.__maintenance_mode_mandatory
      
  def _set_maintenance_mode_mandatory(self, v, load=False):
    """
    Setter method for maintenance_mode_mandatory, mapped from YANG variable /migrations/policy/maintenance_mode_mandatory (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maintenance_mode_mandatory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maintenance_mode_mandatory() directly.

    YANG Description: maintenance-mode-mandatory: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="maintenance-mode-mandatory", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maintenance_mode_mandatory must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="maintenance-mode-mandatory", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)""",
        })

    self.__maintenance_mode_mandatory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maintenance_mode_mandatory(self):
    self.__maintenance_mode_mandatory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="maintenance-mode-mandatory", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)


  def _get_approval(self):
    """
    Getter method for approval, mapped from YANG variable /migrations/policy/approval (container)
    """
    return self.__approval
      
  def _set_approval(self, v, load=False):
    """
    Setter method for approval, mapped from YANG variable /migrations/policy/approval (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_approval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_approval() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=approval.approval, is_container='container', yang_name="approval", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """approval must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=approval.approval, is_container='container', yang_name="approval", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__approval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_approval(self):
    self.__approval = YANGDynClass(base=approval.approval, is_container='container', yang_name="approval", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_create_policy(self):
    """
    Getter method for create_policy, mapped from YANG variable /migrations/policy/create_policy (container)
    """
    return self.__create_policy
      
  def _set_create_policy(self, v, load=False):
    """
    Setter method for create_policy, mapped from YANG variable /migrations/policy/create_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_create_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_create_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=create_policy.create_policy, is_container='container', yang_name="create-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """create_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=create_policy.create_policy, is_container='container', yang_name="create-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__create_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_create_policy(self):
    self.__create_policy = YANGDynClass(base=create_policy.create_policy, is_container='container', yang_name="create-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_delete_policy(self):
    """
    Getter method for delete_policy, mapped from YANG variable /migrations/policy/delete_policy (container)
    """
    return self.__delete_policy
      
  def _set_delete_policy(self, v, load=False):
    """
    Setter method for delete_policy, mapped from YANG variable /migrations/policy/delete_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delete_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delete_policy() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=delete_policy.delete_policy, is_container='container', yang_name="delete-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delete_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=delete_policy.delete_policy, is_container='container', yang_name="delete-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__delete_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delete_policy(self):
    self.__delete_policy = YANGDynClass(base=delete_policy.delete_policy, is_container='container', yang_name="delete-policy", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)

  enabled = __builtin__.property(_get_enabled, _set_enabled)
  maintenance_mode_mandatory = __builtin__.property(_get_maintenance_mode_mandatory, _set_maintenance_mode_mandatory)
  approval = __builtin__.property(_get_approval, _set_approval)
  create_policy = __builtin__.property(_get_create_policy, _set_create_policy)
  delete_policy = __builtin__.property(_get_delete_policy, _set_delete_policy)


  _pyangbind_elements = collections.OrderedDict([('enabled', enabled), ('maintenance_mode_mandatory', maintenance_mode_mandatory), ('approval', approval), ('create_policy', create_policy), ('delete_policy', delete_policy), ])


