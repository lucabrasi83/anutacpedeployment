
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import schema_diff
import data_diff
class upgrade_analysis(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /migrations/history/history/upgrade-analysis. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__schema_diff','__data_diff',)

  _yang_name = 'upgrade-analysis'
  _module_name = 'migration'
  _namespace = 'http://anutanetworks.com/migration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schema_diff = YANGDynClass(base=schema_diff.schema_diff, is_container='container', yang_name="schema-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    self.__data_diff = YANGDynClass(base=data_diff.data_diff, is_container='container', yang_name="data-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'migrations', u'history', u'history', u'upgrade-analysis']

  def _get_schema_diff(self):
    """
    Getter method for schema_diff, mapped from YANG variable /migrations/history/history/upgrade_analysis/schema_diff (container)
    """
    return self.__schema_diff
      
  def _set_schema_diff(self, v, load=False):
    """
    Setter method for schema_diff, mapped from YANG variable /migrations/history/history/upgrade_analysis/schema_diff (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schema_diff is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schema_diff() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=schema_diff.schema_diff, is_container='container', yang_name="schema-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schema_diff must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=schema_diff.schema_diff, is_container='container', yang_name="schema-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__schema_diff = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schema_diff(self):
    self.__schema_diff = YANGDynClass(base=schema_diff.schema_diff, is_container='container', yang_name="schema-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_data_diff(self):
    """
    Getter method for data_diff, mapped from YANG variable /migrations/history/history/upgrade_analysis/data_diff (container)
    """
    return self.__data_diff
      
  def _set_data_diff(self, v, load=False):
    """
    Setter method for data_diff, mapped from YANG variable /migrations/history/history/upgrade_analysis/data_diff (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_diff is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_diff() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=data_diff.data_diff, is_container='container', yang_name="data-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_diff must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=data_diff.data_diff, is_container='container', yang_name="data-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__data_diff = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_diff(self):
    self.__data_diff = YANGDynClass(base=data_diff.data_diff, is_container='container', yang_name="data-diff", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)

  schema_diff = __builtin__.property(_get_schema_diff, _set_schema_diff)
  data_diff = __builtin__.property(_get_data_diff, _set_data_diff)


  _pyangbind_elements = collections.OrderedDict([('schema_diff', schema_diff), ('data_diff', data_diff), ])


