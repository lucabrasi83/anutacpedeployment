
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import package
import state_machine_log
import upgrade_analysis
import upgrade_script
class history(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /migrations/history/history. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__task_id','__name','__package','__state_machine_log','__upgrade_analysis','__upgrade_script','__start_time','__end_time',)

  _yang_name = 'history'
  _module_name = 'migration'
  _namespace = 'http://anutanetworks.com/migration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__package = YANGDynClass(base=YANGListType("package_name",package.package, yang_name="package", module_name="migration", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='package-name'), is_container='list', yang_name="package", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='list', is_config=True)
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__state_machine_log = YANGDynClass(base=state_machine_log.state_machine_log, is_container='container', yang_name="state-machine-log", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    self.__end_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    self.__upgrade_script = YANGDynClass(base=upgrade_script.upgrade_script, is_container='container', yang_name="upgrade-script", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    self.__upgrade_analysis = YANGDynClass(base=upgrade_analysis.upgrade_analysis, is_container='container', yang_name="upgrade-analysis", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'migrations', u'history', u'history']

  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /migrations/history/history/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /migrations/history/history/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /migrations/history/history/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /migrations/history/history/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_package(self):
    """
    Getter method for package, mapped from YANG variable /migrations/history/history/package (list)
    """
    return self.__package
      
  def _set_package(self, v, load=False):
    """
    Setter method for package, mapped from YANG variable /migrations/history/history/package (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_package is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_package() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("package_name",package.package, yang_name="package", module_name="migration", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='package-name'), is_container='list', yang_name="package", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """package must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("package_name",package.package, yang_name="package", module_name="migration", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='package-name'), is_container='list', yang_name="package", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='list', is_config=True)""",
        })

    self.__package = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_package(self):
    self.__package = YANGDynClass(base=YANGListType("package_name",package.package, yang_name="package", module_name="migration", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='package-name'), is_container='list', yang_name="package", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='list', is_config=True)


  def _get_state_machine_log(self):
    """
    Getter method for state_machine_log, mapped from YANG variable /migrations/history/history/state_machine_log (container)
    """
    return self.__state_machine_log
      
  def _set_state_machine_log(self, v, load=False):
    """
    Setter method for state_machine_log, mapped from YANG variable /migrations/history/history/state_machine_log (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state_machine_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state_machine_log() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=state_machine_log.state_machine_log, is_container='container', yang_name="state-machine-log", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state_machine_log must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state_machine_log.state_machine_log, is_container='container', yang_name="state-machine-log", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__state_machine_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state_machine_log(self):
    self.__state_machine_log = YANGDynClass(base=state_machine_log.state_machine_log, is_container='container', yang_name="state-machine-log", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_upgrade_analysis(self):
    """
    Getter method for upgrade_analysis, mapped from YANG variable /migrations/history/history/upgrade_analysis (container)
    """
    return self.__upgrade_analysis
      
  def _set_upgrade_analysis(self, v, load=False):
    """
    Setter method for upgrade_analysis, mapped from YANG variable /migrations/history/history/upgrade_analysis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_upgrade_analysis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_upgrade_analysis() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=upgrade_analysis.upgrade_analysis, is_container='container', yang_name="upgrade-analysis", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """upgrade_analysis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=upgrade_analysis.upgrade_analysis, is_container='container', yang_name="upgrade-analysis", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__upgrade_analysis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_upgrade_analysis(self):
    self.__upgrade_analysis = YANGDynClass(base=upgrade_analysis.upgrade_analysis, is_container='container', yang_name="upgrade-analysis", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_upgrade_script(self):
    """
    Getter method for upgrade_script, mapped from YANG variable /migrations/history/history/upgrade_script (container)
    """
    return self.__upgrade_script
      
  def _set_upgrade_script(self, v, load=False):
    """
    Setter method for upgrade_script, mapped from YANG variable /migrations/history/history/upgrade_script (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_upgrade_script is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_upgrade_script() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=upgrade_script.upgrade_script, is_container='container', yang_name="upgrade-script", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """upgrade_script must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=upgrade_script.upgrade_script, is_container='container', yang_name="upgrade-script", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)""",
        })

    self.__upgrade_script = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_upgrade_script(self):
    self.__upgrade_script = YANGDynClass(base=upgrade_script.upgrade_script, is_container='container', yang_name="upgrade-script", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='container', is_config=True)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /migrations/history/history/start_time (string)

    YANG Description: string
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /migrations/history/history/start_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)


  def _get_end_time(self):
    """
    Getter method for end_time, mapped from YANG variable /migrations/history/history/end_time (string)

    YANG Description: string
    """
    return self.__end_time
      
  def _set_end_time(self, v, load=False):
    """
    Setter method for end_time, mapped from YANG variable /migrations/history/history/end_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="end-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)""",
        })

    self.__end_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_time(self):
    self.__end_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='string', is_config=True)

  task_id = __builtin__.property(_get_task_id, _set_task_id)
  name = __builtin__.property(_get_name, _set_name)
  package = __builtin__.property(_get_package, _set_package)
  state_machine_log = __builtin__.property(_get_state_machine_log, _set_state_machine_log)
  upgrade_analysis = __builtin__.property(_get_upgrade_analysis, _set_upgrade_analysis)
  upgrade_script = __builtin__.property(_get_upgrade_script, _set_upgrade_script)
  start_time = __builtin__.property(_get_start_time, _set_start_time)
  end_time = __builtin__.property(_get_end_time, _set_end_time)


  _pyangbind_elements = collections.OrderedDict([('task_id', task_id), ('name', name), ('package', package), ('state_machine_log', state_machine_log), ('upgrade_analysis', upgrade_analysis), ('upgrade_script', upgrade_script), ('start_time', start_time), ('end_time', end_time), ])


