
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import os_types
import vendors
import device_types
import operations
import response_patterns
import device_families
import device_platforms
import device_platform_capabilities
import capabilities
import device_roles
class device_support(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /device-support. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__os_types','__vendors','__device_types','__operations','__response_patterns','__device_families','__device_platforms','__device_platform_capabilities','__capabilities','__device_roles',)

  _yang_name = 'device-support'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__operations = YANGDynClass(base=operations.operations, is_container='container', yang_name="operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__device_roles = YANGDynClass(base=device_roles.device_roles, is_container='container', yang_name="device-roles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__device_platform_capabilities = YANGDynClass(base=device_platform_capabilities.device_platform_capabilities, is_container='container', yang_name="device-platform-capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__device_types = YANGDynClass(base=device_types.device_types, is_container='container', yang_name="device-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__os_types = YANGDynClass(base=os_types.os_types, is_container='container', yang_name="os-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__capabilities = YANGDynClass(base=capabilities.capabilities, is_container='container', yang_name="capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__response_patterns = YANGDynClass(base=response_patterns.response_patterns, is_container='container', yang_name="response-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__vendors = YANGDynClass(base=vendors.vendors, is_container='container', yang_name="vendors", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__device_platforms = YANGDynClass(base=device_platforms.device_platforms, is_container='container', yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__device_families = YANGDynClass(base=device_families.device_families, is_container='container', yang_name="device-families", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'device-support']

  def _get_os_types(self):
    """
    Getter method for os_types, mapped from YANG variable /device_support/os_types (container)
    """
    return self.__os_types
      
  def _set_os_types(self, v, load=False):
    """
    Setter method for os_types, mapped from YANG variable /device_support/os_types (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_os_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_os_types() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=os_types.os_types, is_container='container', yang_name="os-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """os_types must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=os_types.os_types, is_container='container', yang_name="os-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__os_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_os_types(self):
    self.__os_types = YANGDynClass(base=os_types.os_types, is_container='container', yang_name="os-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_vendors(self):
    """
    Getter method for vendors, mapped from YANG variable /device_support/vendors (container)
    """
    return self.__vendors
      
  def _set_vendors(self, v, load=False):
    """
    Setter method for vendors, mapped from YANG variable /device_support/vendors (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vendors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vendors() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=vendors.vendors, is_container='container', yang_name="vendors", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vendors must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vendors.vendors, is_container='container', yang_name="vendors", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__vendors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vendors(self):
    self.__vendors = YANGDynClass(base=vendors.vendors, is_container='container', yang_name="vendors", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_types(self):
    """
    Getter method for device_types, mapped from YANG variable /device_support/device_types (container)
    """
    return self.__device_types
      
  def _set_device_types(self, v, load=False):
    """
    Setter method for device_types, mapped from YANG variable /device_support/device_types (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_types() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=device_types.device_types, is_container='container', yang_name="device-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_types must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=device_types.device_types, is_container='container', yang_name="device-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__device_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_types(self):
    self.__device_types = YANGDynClass(base=device_types.device_types, is_container='container', yang_name="device-types", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_operations(self):
    """
    Getter method for operations, mapped from YANG variable /device_support/operations (container)
    """
    return self.__operations
      
  def _set_operations(self, v, load=False):
    """
    Setter method for operations, mapped from YANG variable /device_support/operations (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operations() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=operations.operations, is_container='container', yang_name="operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operations must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=operations.operations, is_container='container', yang_name="operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__operations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operations(self):
    self.__operations = YANGDynClass(base=operations.operations, is_container='container', yang_name="operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_response_patterns(self):
    """
    Getter method for response_patterns, mapped from YANG variable /device_support/response_patterns (container)
    """
    return self.__response_patterns
      
  def _set_response_patterns(self, v, load=False):
    """
    Setter method for response_patterns, mapped from YANG variable /device_support/response_patterns (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_response_patterns is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_response_patterns() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=response_patterns.response_patterns, is_container='container', yang_name="response-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """response_patterns must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=response_patterns.response_patterns, is_container='container', yang_name="response-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__response_patterns = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_response_patterns(self):
    self.__response_patterns = YANGDynClass(base=response_patterns.response_patterns, is_container='container', yang_name="response-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_families(self):
    """
    Getter method for device_families, mapped from YANG variable /device_support/device_families (container)
    """
    return self.__device_families
      
  def _set_device_families(self, v, load=False):
    """
    Setter method for device_families, mapped from YANG variable /device_support/device_families (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_families is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_families() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=device_families.device_families, is_container='container', yang_name="device-families", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_families must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=device_families.device_families, is_container='container', yang_name="device-families", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__device_families = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_families(self):
    self.__device_families = YANGDynClass(base=device_families.device_families, is_container='container', yang_name="device-families", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_platforms(self):
    """
    Getter method for device_platforms, mapped from YANG variable /device_support/device_platforms (container)
    """
    return self.__device_platforms
      
  def _set_device_platforms(self, v, load=False):
    """
    Setter method for device_platforms, mapped from YANG variable /device_support/device_platforms (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_platforms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_platforms() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=device_platforms.device_platforms, is_container='container', yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_platforms must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=device_platforms.device_platforms, is_container='container', yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__device_platforms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_platforms(self):
    self.__device_platforms = YANGDynClass(base=device_platforms.device_platforms, is_container='container', yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_platform_capabilities(self):
    """
    Getter method for device_platform_capabilities, mapped from YANG variable /device_support/device_platform_capabilities (container)
    """
    return self.__device_platform_capabilities
      
  def _set_device_platform_capabilities(self, v, load=False):
    """
    Setter method for device_platform_capabilities, mapped from YANG variable /device_support/device_platform_capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_platform_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_platform_capabilities() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=device_platform_capabilities.device_platform_capabilities, is_container='container', yang_name="device-platform-capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_platform_capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=device_platform_capabilities.device_platform_capabilities, is_container='container', yang_name="device-platform-capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__device_platform_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_platform_capabilities(self):
    self.__device_platform_capabilities = YANGDynClass(base=device_platform_capabilities.device_platform_capabilities, is_container='container', yang_name="device-platform-capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_capabilities(self):
    """
    Getter method for capabilities, mapped from YANG variable /device_support/capabilities (container)
    """
    return self.__capabilities
      
  def _set_capabilities(self, v, load=False):
    """
    Setter method for capabilities, mapped from YANG variable /device_support/capabilities (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capabilities() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=capabilities.capabilities, is_container='container', yang_name="capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capabilities must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=capabilities.capabilities, is_container='container', yang_name="capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capabilities(self):
    self.__capabilities = YANGDynClass(base=capabilities.capabilities, is_container='container', yang_name="capabilities", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_roles(self):
    """
    Getter method for device_roles, mapped from YANG variable /device_support/device_roles (container)
    """
    return self.__device_roles
      
  def _set_device_roles(self, v, load=False):
    """
    Setter method for device_roles, mapped from YANG variable /device_support/device_roles (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_roles is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_roles() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=device_roles.device_roles, is_container='container', yang_name="device-roles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_roles must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=device_roles.device_roles, is_container='container', yang_name="device-roles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__device_roles = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_roles(self):
    self.__device_roles = YANGDynClass(base=device_roles.device_roles, is_container='container', yang_name="device-roles", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  os_types = __builtin__.property(_get_os_types, _set_os_types)
  vendors = __builtin__.property(_get_vendors, _set_vendors)
  device_types = __builtin__.property(_get_device_types, _set_device_types)
  operations = __builtin__.property(_get_operations, _set_operations)
  response_patterns = __builtin__.property(_get_response_patterns, _set_response_patterns)
  device_families = __builtin__.property(_get_device_families, _set_device_families)
  device_platforms = __builtin__.property(_get_device_platforms, _set_device_platforms)
  device_platform_capabilities = __builtin__.property(_get_device_platform_capabilities, _set_device_platform_capabilities)
  capabilities = __builtin__.property(_get_capabilities, _set_capabilities)
  device_roles = __builtin__.property(_get_device_roles, _set_device_roles)


  _pyangbind_elements = collections.OrderedDict([('os_types', os_types), ('vendors', vendors), ('device_types', device_types), ('operations', operations), ('response_patterns', response_patterns), ('device_families', device_families), ('device_platforms', device_platforms), ('device_platform_capabilities', device_platform_capabilities), ('capabilities', capabilities), ('device_roles', device_roles), ])


