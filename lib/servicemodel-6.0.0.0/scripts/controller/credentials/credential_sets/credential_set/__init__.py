
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class credential_set(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /credentials/credential-sets/credential-set. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__description','__username','__password','__enable_password','__mgmt_vrf_name','__transport_type','__port_number','__command_execution_wait_time','__cli_configcmd_time_out','__snmp_version','__snmp_read_community_str','__snmp_write_community_str','__time_out','__snmp_security_level','__snmpv3_user_name','__snmpv3_password','__snmpv3_auth_algorithm','__snmpv3_priv_algorithm','__snmpv3_priv_password','__number_of_retries','__location','__organization','__config_retrieval_credential','__cr_user_name','__cr_password','__cr_enable_password','__cr_transport_type','__cr_port_number','__cr_time_out','__cr_wait_time',)

  _yang_name = 'credential-set'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__snmp_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SNMPV2C': {}, u'SNMPV1': {}, u'SNMPV3': {}},), is_leaf=True, yang_name="snmp-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-version', is_config=True)
    self.__snmpv3_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__enable_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:port-number', is_config=True)
    self.__snmpv3_priv_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__cr_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="cr-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__cli_configcmd_time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..600']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="cli-configcmd-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__mgmt_vrf_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cr_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__cr_transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="cr-transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cr-transport-type', is_config=True)
    self.__cr_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__config_retrieval_credential = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retrieval-credential", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__username = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cr_enable_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(10), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)
    self.__snmp_read_community_str = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-read-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__snmpv3_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__snmp_write_community_str = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-write-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    self.__snmp_security_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NOAUTHNOPRIV': {}, u'AUTHPRIV': {}, u'AUTHNOPRIV': {}},), is_leaf=True, yang_name="snmp-security-level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-securitylevel', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:namePattern64', is_config=True)
    self.__cr_port_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__snmpv3_priv_algorithm = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-priv-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__snmpv3_auth_algorithm = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-auth-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)
    self.__command_execution_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(150), is_leaf=True, yang_name="command-execution-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__organization = YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(30), is_leaf=True, yang_name="time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__cr_time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="cr-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'credentials', u'credential-sets', u'credential-set']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /credentials/credential_sets/credential_set/name (ndt:namePattern64)

    YANG Description: Credential set name. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /credentials/credential_sets/credential_set/name (ndt:namePattern64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Credential set name. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:namePattern64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with ndt:namePattern64""",
          'defined-type': "ndt:namePattern64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:namePattern64', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:namePattern64', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /credentials/credential_sets/credential_set/description (string)

    YANG Description: Description of the credential-set
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /credentials/credential_sets/credential_set/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: Description of the credential-set
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_username(self):
    """
    Getter method for username, mapped from YANG variable /credentials/credential_sets/credential_set/username (ndt:nameString64)

    YANG Description: Username for logging into devices. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    return self.__username
      
  def _set_username(self, v, load=False):
    """
    Setter method for username, mapped from YANG variable /credentials/credential_sets/credential_set/username (ndt:nameString64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_username is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_username() directly.

    YANG Description: Username for logging into devices. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """username must be of a type compatible with ndt:nameString64""",
          'defined-type': "ndt:nameString64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)""",
        })

    self.__username = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_username(self):
    self.__username = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /credentials/credential_sets/credential_set/password (ndt:password)

    YANG Description: Password for logging into devices
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /credentials/credential_sets/credential_set/password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: Password for logging into devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_enable_password(self):
    """
    Getter method for enable_password, mapped from YANG variable /credentials/credential_sets/credential_set/enable_password (ndt:password)

    YANG Description: Enable password used to enter into Privileged EXEC Mode on devices
    """
    return self.__enable_password
      
  def _set_enable_password(self, v, load=False):
    """
    Setter method for enable_password, mapped from YANG variable /credentials/credential_sets/credential_set/enable_password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_password() directly.

    YANG Description: Enable password used to enter into Privileged EXEC Mode on devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__enable_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_password(self):
    self.__enable_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_mgmt_vrf_name(self):
    """
    Getter method for mgmt_vrf_name, mapped from YANG variable /credentials/credential_sets/credential_set/mgmt_vrf_name (ndt:nameString64)

    YANG Description: VRF that the devices belong to. This will be used for NCX Audit Logs. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    return self.__mgmt_vrf_name
      
  def _set_mgmt_vrf_name(self, v, load=False):
    """
    Setter method for mgmt_vrf_name, mapped from YANG variable /credentials/credential_sets/credential_set/mgmt_vrf_name (ndt:nameString64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_vrf_name() directly.

    YANG Description: VRF that the devices belong to. This will be used for NCX Audit Logs. Can contain AlphaNumerics and underscore characters only. Max length is 64
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_vrf_name must be of a type compatible with ndt:nameString64""",
          'defined-type': "ndt:nameString64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)""",
        })

    self.__mgmt_vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_vrf_name(self):
    self.__mgmt_vrf_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:nameString64', is_config=True)


  def _get_transport_type(self):
    """
    Getter method for transport_type, mapped from YANG variable /credentials/credential_sets/credential_set/transport_type (ndt:transport-type)

    YANG Description: Type of communications with devices
    """
    return self.__transport_type
      
  def _set_transport_type(self, v, load=False):
    """
    Setter method for transport_type, mapped from YANG variable /credentials/credential_sets/credential_set/transport_type (ndt:transport-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_type() directly.

    YANG Description: Type of communications with devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_type must be of a type compatible with ndt:transport-type""",
          'defined-type': "ndt:transport-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)""",
        })

    self.__transport_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_type(self):
    self.__transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)


  def _get_port_number(self):
    """
    Getter method for port_number, mapped from YANG variable /credentials/credential_sets/credential_set/port_number (inet:port-number)

    YANG Description: Port number on the device for communicating with NCX
    """
    return self.__port_number
      
  def _set_port_number(self, v, load=False):
    """
    Setter method for port_number, mapped from YANG variable /credentials/credential_sets/credential_set/port_number (inet:port-number)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_number() directly.

    YANG Description: Port number on the device for communicating with NCX
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:port-number', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_number must be of a type compatible with inet:port-number""",
          'defined-type': "inet:port-number",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:port-number', is_config=True)""",
        })

    self.__port_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_number(self):
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='inet:port-number', is_config=True)


  def _get_command_execution_wait_time(self):
    """
    Getter method for command_execution_wait_time, mapped from YANG variable /credentials/credential_sets/credential_set/command_execution_wait_time (uint16)

    YANG Description: The time interval between consecutive command executions in milliseconds
    """
    return self.__command_execution_wait_time
      
  def _set_command_execution_wait_time(self, v, load=False):
    """
    Setter method for command_execution_wait_time, mapped from YANG variable /credentials/credential_sets/credential_set/command_execution_wait_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_execution_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_execution_wait_time() directly.

    YANG Description: The time interval between consecutive command executions in milliseconds
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(150), is_leaf=True, yang_name="command-execution-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_execution_wait_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(150), is_leaf=True, yang_name="command-execution-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__command_execution_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_execution_wait_time(self):
    self.__command_execution_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(150), is_leaf=True, yang_name="command-execution-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_cli_configcmd_time_out(self):
    """
    Getter method for cli_configcmd_time_out, mapped from YANG variable /credentials/credential_sets/credential_set/cli_configcmd_time_out (uint32)

    YANG Description: The time taken to display the command line prompt of the device in seconds
    """
    return self.__cli_configcmd_time_out
      
  def _set_cli_configcmd_time_out(self, v, load=False):
    """
    Setter method for cli_configcmd_time_out, mapped from YANG variable /credentials/credential_sets/credential_set/cli_configcmd_time_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cli_configcmd_time_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cli_configcmd_time_out() directly.

    YANG Description: The time taken to display the command line prompt of the device in seconds
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..600']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="cli-configcmd-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cli_configcmd_time_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..600']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="cli-configcmd-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__cli_configcmd_time_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cli_configcmd_time_out(self):
    self.__cli_configcmd_time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..600']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="cli-configcmd-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_snmp_version(self):
    """
    Getter method for snmp_version, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_version (snmp-version)

    YANG Description: SNMP version in which communicate to the device
    """
    return self.__snmp_version
      
  def _set_snmp_version(self, v, load=False):
    """
    Setter method for snmp_version, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_version (snmp-version)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_version() directly.

    YANG Description: SNMP version in which communicate to the device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SNMPV2C': {}, u'SNMPV1': {}, u'SNMPV3': {}},), is_leaf=True, yang_name="snmp-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-version', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_version must be of a type compatible with snmp-version""",
          'defined-type': "controller:snmp-version",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SNMPV2C': {}, u'SNMPV1': {}, u'SNMPV3': {}},), is_leaf=True, yang_name="snmp-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-version', is_config=True)""",
        })

    self.__snmp_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_version(self):
    self.__snmp_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SNMPV2C': {}, u'SNMPV1': {}, u'SNMPV3': {}},), is_leaf=True, yang_name="snmp-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-version', is_config=True)


  def _get_snmp_read_community_str(self):
    """
    Getter method for snmp_read_community_str, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_read_community_str (ndt:password)

    YANG Description: string
    """
    return self.__snmp_read_community_str
      
  def _set_snmp_read_community_str(self, v, load=False):
    """
    Setter method for snmp_read_community_str, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_read_community_str (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_read_community_str is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_read_community_str() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-read-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_read_community_str must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-read-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__snmp_read_community_str = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_read_community_str(self):
    self.__snmp_read_community_str = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-read-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_snmp_write_community_str(self):
    """
    Getter method for snmp_write_community_str, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_write_community_str (ndt:password)

    YANG Description: string
    """
    return self.__snmp_write_community_str
      
  def _set_snmp_write_community_str(self, v, load=False):
    """
    Setter method for snmp_write_community_str, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_write_community_str (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_write_community_str is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_write_community_str() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-write-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_write_community_str must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-write-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__snmp_write_community_str = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_write_community_str(self):
    self.__snmp_write_community_str = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmp-write-community-str", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_time_out(self):
    """
    Getter method for time_out, mapped from YANG variable /credentials/credential_sets/credential_set/time_out (uint16)

    YANG Description: SNMP Timeout in seconds. Also defines the connection timeout for HTTP/HTTPS connections.
    """
    return self.__time_out
      
  def _set_time_out(self, v, load=False):
    """
    Setter method for time_out, mapped from YANG variable /credentials/credential_sets/credential_set/time_out (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_out() directly.

    YANG Description: SNMP Timeout in seconds. Also defines the connection timeout for HTTP/HTTPS connections.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(30), is_leaf=True, yang_name="time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_out must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(30), is_leaf=True, yang_name="time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__time_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_out(self):
    self.__time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16)(30), is_leaf=True, yang_name="time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_snmp_security_level(self):
    """
    Getter method for snmp_security_level, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_security_level (snmp-securitylevel)

    YANG Description: NOAUTHNOPRIV
AUTHNOPRIV
AUTHPRIV

    """
    return self.__snmp_security_level
      
  def _set_snmp_security_level(self, v, load=False):
    """
    Setter method for snmp_security_level, mapped from YANG variable /credentials/credential_sets/credential_set/snmp_security_level (snmp-securitylevel)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_security_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_security_level() directly.

    YANG Description: NOAUTHNOPRIV
AUTHNOPRIV
AUTHPRIV

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NOAUTHNOPRIV': {}, u'AUTHPRIV': {}, u'AUTHNOPRIV': {}},), is_leaf=True, yang_name="snmp-security-level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-securitylevel', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_security_level must be of a type compatible with snmp-securitylevel""",
          'defined-type': "controller:snmp-securitylevel",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NOAUTHNOPRIV': {}, u'AUTHPRIV': {}, u'AUTHNOPRIV': {}},), is_leaf=True, yang_name="snmp-security-level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-securitylevel', is_config=True)""",
        })

    self.__snmp_security_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_security_level(self):
    self.__snmp_security_level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NOAUTHNOPRIV': {}, u'AUTHPRIV': {}, u'AUTHNOPRIV': {}},), is_leaf=True, yang_name="snmp-security-level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='snmp-securitylevel', is_config=True)


  def _get_snmpv3_user_name(self):
    """
    Getter method for snmpv3_user_name, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_user_name (string)

    YANG Description: string
    """
    return self.__snmpv3_user_name
      
  def _set_snmpv3_user_name(self, v, load=False):
    """
    Setter method for snmpv3_user_name, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_user_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_user_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_user_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmpv3-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_user_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmpv3_user_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_user_name(self):
    self.__snmpv3_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_snmpv3_password(self):
    """
    Getter method for snmpv3_password, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_password (ndt:password)

    YANG Description: string
    """
    return self.__snmpv3_password
      
  def _set_snmpv3_password(self, v, load=False):
    """
    Setter method for snmpv3_password, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__snmpv3_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_password(self):
    self.__snmpv3_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_snmpv3_auth_algorithm(self):
    """
    Getter method for snmpv3_auth_algorithm, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_auth_algorithm (string)

    YANG Description: string
    """
    return self.__snmpv3_auth_algorithm
      
  def _set_snmpv3_auth_algorithm(self, v, load=False):
    """
    Setter method for snmpv3_auth_algorithm, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_auth_algorithm (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_auth_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_auth_algorithm() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmpv3-auth-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_auth_algorithm must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-auth-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmpv3_auth_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_auth_algorithm(self):
    self.__snmpv3_auth_algorithm = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-auth-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_snmpv3_priv_algorithm(self):
    """
    Getter method for snmpv3_priv_algorithm, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_priv_algorithm (string)

    YANG Description: string
    """
    return self.__snmpv3_priv_algorithm
      
  def _set_snmpv3_priv_algorithm(self, v, load=False):
    """
    Setter method for snmpv3_priv_algorithm, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_priv_algorithm (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_priv_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_priv_algorithm() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmpv3-priv-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_priv_algorithm must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-priv-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmpv3_priv_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_priv_algorithm(self):
    self.__snmpv3_priv_algorithm = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmpv3-priv-algorithm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_snmpv3_priv_password(self):
    """
    Getter method for snmpv3_priv_password, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_priv_password (ndt:password)

    YANG Description: string
    """
    return self.__snmpv3_priv_password
      
  def _set_snmpv3_priv_password(self, v, load=False):
    """
    Setter method for snmpv3_priv_password, mapped from YANG variable /credentials/credential_sets/credential_set/snmpv3_priv_password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_priv_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_priv_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_priv_password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__snmpv3_priv_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_priv_password(self):
    self.__snmpv3_priv_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="snmpv3-priv-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_number_of_retries(self):
    """
    Getter method for number_of_retries, mapped from YANG variable /credentials/credential_sets/credential_set/number_of_retries (uint8)

    YANG Description: Number of retry for SNMP communication failure
    """
    return self.__number_of_retries
      
  def _set_number_of_retries(self, v, load=False):
    """
    Setter method for number_of_retries, mapped from YANG variable /credentials/credential_sets/credential_set/number_of_retries (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_retries() directly.

    YANG Description: Number of retry for SNMP communication failure
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(10), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_retries must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(10), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)""",
        })

    self.__number_of_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_retries(self):
    self.__number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(10), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /credentials/credential_sets/credential_set/location (string)

    YANG Description: Region for OpenStack related device communication
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /credentials/credential_sets/credential_set/location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.

    YANG Description: Region for OpenStack related device communication
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_organization(self):
    """
    Getter method for organization, mapped from YANG variable /credentials/credential_sets/credential_set/organization (string)

    YANG Description: Organization name for OpenStack related device communication
    """
    return self.__organization
      
  def _set_organization(self, v, load=False):
    """
    Setter method for organization, mapped from YANG variable /credentials/credential_sets/credential_set/organization (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_organization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_organization() directly.

    YANG Description: Organization name for OpenStack related device communication
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """organization must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__organization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_organization(self):
    self.__organization = YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_config_retrieval_credential(self):
    """
    Getter method for config_retrieval_credential, mapped from YANG variable /credentials/credential_sets/credential_set/config_retrieval_credential (boolean)

    YANG Description: Add Credentials for Config Retrieval
    """
    return self.__config_retrieval_credential
      
  def _set_config_retrieval_credential(self, v, load=False):
    """
    Setter method for config_retrieval_credential, mapped from YANG variable /credentials/credential_sets/credential_set/config_retrieval_credential (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_retrieval_credential is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_retrieval_credential() directly.

    YANG Description: Add Credentials for Config Retrieval
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-retrieval-credential", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_retrieval_credential must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retrieval-credential", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__config_retrieval_credential = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_retrieval_credential(self):
    self.__config_retrieval_credential = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retrieval-credential", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_cr_user_name(self):
    """
    Getter method for cr_user_name, mapped from YANG variable /credentials/credential_sets/credential_set/cr_user_name (string)

    YANG Description: Username for logging into devices
    """
    return self.__cr_user_name
      
  def _set_cr_user_name(self, v, load=False):
    """
    Setter method for cr_user_name, mapped from YANG variable /credentials/credential_sets/credential_set/cr_user_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_user_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_user_name() directly.

    YANG Description: Username for logging into devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cr-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_user_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__cr_user_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_user_name(self):
    self.__cr_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_cr_password(self):
    """
    Getter method for cr_password, mapped from YANG variable /credentials/credential_sets/credential_set/cr_password (ndt:password)

    YANG Description: Password for logging into devices
    """
    return self.__cr_password
      
  def _set_cr_password(self, v, load=False):
    """
    Setter method for cr_password, mapped from YANG variable /credentials/credential_sets/credential_set/cr_password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_password() directly.

    YANG Description: Password for logging into devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__cr_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_password(self):
    self.__cr_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_cr_enable_password(self):
    """
    Getter method for cr_enable_password, mapped from YANG variable /credentials/credential_sets/credential_set/cr_enable_password (ndt:password)

    YANG Description: Enable password used to enter into Privileged EXEC Mode on devices
    """
    return self.__cr_enable_password
      
  def _set_cr_enable_password(self, v, load=False):
    """
    Setter method for cr_enable_password, mapped from YANG variable /credentials/credential_sets/credential_set/cr_enable_password (ndt:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_enable_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_enable_password() directly.

    YANG Description: Enable password used to enter into Privileged EXEC Mode on devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_enable_password must be of a type compatible with ndt:password""",
          'defined-type': "ndt:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)""",
        })

    self.__cr_enable_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_enable_password(self):
    self.__cr_enable_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="cr-enable-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:password', is_config=True)


  def _get_cr_transport_type(self):
    """
    Getter method for cr_transport_type, mapped from YANG variable /credentials/credential_sets/credential_set/cr_transport_type (cr-transport-type)

    YANG Description: Type of communications with devices
    """
    return self.__cr_transport_type
      
  def _set_cr_transport_type(self, v, load=False):
    """
    Setter method for cr_transport_type, mapped from YANG variable /credentials/credential_sets/credential_set/cr_transport_type (cr-transport-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_transport_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_transport_type() directly.

    YANG Description: Type of communications with devices
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="cr-transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cr-transport-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_transport_type must be of a type compatible with cr-transport-type""",
          'defined-type': "controller:cr-transport-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="cr-transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cr-transport-type', is_config=True)""",
        })

    self.__cr_transport_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_transport_type(self):
    self.__cr_transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="cr-transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cr-transport-type', is_config=True)


  def _get_cr_port_number(self):
    """
    Getter method for cr_port_number, mapped from YANG variable /credentials/credential_sets/credential_set/cr_port_number (string)

    YANG Description: Port number on the device for communicating with NCX
    """
    return self.__cr_port_number
      
  def _set_cr_port_number(self, v, load=False):
    """
    Setter method for cr_port_number, mapped from YANG variable /credentials/credential_sets/credential_set/cr_port_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_port_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_port_number() directly.

    YANG Description: Port number on the device for communicating with NCX
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cr-port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_port_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__cr_port_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_port_number(self):
    self.__cr_port_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="cr-port-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_cr_time_out(self):
    """
    Getter method for cr_time_out, mapped from YANG variable /credentials/credential_sets/credential_set/cr_time_out (uint8)

    YANG Description: Timeout must be between 1 to 100
    """
    return self.__cr_time_out
      
  def _set_cr_time_out(self, v, load=False):
    """
    Setter method for cr_time_out, mapped from YANG variable /credentials/credential_sets/credential_set/cr_time_out (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_time_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_time_out() directly.

    YANG Description: Timeout must be between 1 to 100
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="cr-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_time_out must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="cr-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)""",
        })

    self.__cr_time_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_time_out(self):
    self.__cr_time_out = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..100']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(5), is_leaf=True, yang_name="cr-time-out", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)


  def _get_cr_wait_time(self):
    """
    Getter method for cr_wait_time, mapped from YANG variable /credentials/credential_sets/credential_set/cr_wait_time (uint32)

    YANG Description: Wait time must be between 10 to 5000
    """
    return self.__cr_wait_time
      
  def _set_cr_wait_time(self, v, load=False):
    """
    Setter method for cr_wait_time, mapped from YANG variable /credentials/credential_sets/credential_set/cr_wait_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cr_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cr_wait_time() directly.

    YANG Description: Wait time must be between 10 to 5000
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="cr-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cr_wait_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="cr-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__cr_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cr_wait_time(self):
    self.__cr_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..5000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="cr-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  username = __builtin__.property(_get_username, _set_username)
  password = __builtin__.property(_get_password, _set_password)
  enable_password = __builtin__.property(_get_enable_password, _set_enable_password)
  mgmt_vrf_name = __builtin__.property(_get_mgmt_vrf_name, _set_mgmt_vrf_name)
  transport_type = __builtin__.property(_get_transport_type, _set_transport_type)
  port_number = __builtin__.property(_get_port_number, _set_port_number)
  command_execution_wait_time = __builtin__.property(_get_command_execution_wait_time, _set_command_execution_wait_time)
  cli_configcmd_time_out = __builtin__.property(_get_cli_configcmd_time_out, _set_cli_configcmd_time_out)
  snmp_version = __builtin__.property(_get_snmp_version, _set_snmp_version)
  snmp_read_community_str = __builtin__.property(_get_snmp_read_community_str, _set_snmp_read_community_str)
  snmp_write_community_str = __builtin__.property(_get_snmp_write_community_str, _set_snmp_write_community_str)
  time_out = __builtin__.property(_get_time_out, _set_time_out)
  snmp_security_level = __builtin__.property(_get_snmp_security_level, _set_snmp_security_level)
  snmpv3_user_name = __builtin__.property(_get_snmpv3_user_name, _set_snmpv3_user_name)
  snmpv3_password = __builtin__.property(_get_snmpv3_password, _set_snmpv3_password)
  snmpv3_auth_algorithm = __builtin__.property(_get_snmpv3_auth_algorithm, _set_snmpv3_auth_algorithm)
  snmpv3_priv_algorithm = __builtin__.property(_get_snmpv3_priv_algorithm, _set_snmpv3_priv_algorithm)
  snmpv3_priv_password = __builtin__.property(_get_snmpv3_priv_password, _set_snmpv3_priv_password)
  number_of_retries = __builtin__.property(_get_number_of_retries, _set_number_of_retries)
  location = __builtin__.property(_get_location, _set_location)
  organization = __builtin__.property(_get_organization, _set_organization)
  config_retrieval_credential = __builtin__.property(_get_config_retrieval_credential, _set_config_retrieval_credential)
  cr_user_name = __builtin__.property(_get_cr_user_name, _set_cr_user_name)
  cr_password = __builtin__.property(_get_cr_password, _set_cr_password)
  cr_enable_password = __builtin__.property(_get_cr_enable_password, _set_cr_enable_password)
  cr_transport_type = __builtin__.property(_get_cr_transport_type, _set_cr_transport_type)
  cr_port_number = __builtin__.property(_get_cr_port_number, _set_cr_port_number)
  cr_time_out = __builtin__.property(_get_cr_time_out, _set_cr_time_out)
  cr_wait_time = __builtin__.property(_get_cr_wait_time, _set_cr_wait_time)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('description', description), ('username', username), ('password', password), ('enable_password', enable_password), ('mgmt_vrf_name', mgmt_vrf_name), ('transport_type', transport_type), ('port_number', port_number), ('command_execution_wait_time', command_execution_wait_time), ('cli_configcmd_time_out', cli_configcmd_time_out), ('snmp_version', snmp_version), ('snmp_read_community_str', snmp_read_community_str), ('snmp_write_community_str', snmp_write_community_str), ('time_out', time_out), ('snmp_security_level', snmp_security_level), ('snmpv3_user_name', snmpv3_user_name), ('snmpv3_password', snmpv3_password), ('snmpv3_auth_algorithm', snmpv3_auth_algorithm), ('snmpv3_priv_algorithm', snmpv3_priv_algorithm), ('snmpv3_priv_password', snmpv3_priv_password), ('number_of_retries', number_of_retries), ('location', location), ('organization', organization), ('config_retrieval_credential', config_retrieval_credential), ('cr_user_name', cr_user_name), ('cr_password', cr_password), ('cr_enable_password', cr_enable_password), ('cr_transport_type', cr_transport_type), ('cr_port_number', cr_port_number), ('cr_time_out', cr_time_out), ('cr_wait_time', cr_wait_time), ])


