
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class certificate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /credentials/certificates/certificate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__fqdn','__certificate_key','__csr','__certificate','__location','__certificate_generated','__certificate_details','__expiry_date','__issuer','__country','__state','__locality','__organization','__division','__email','__rsa_bit_size','__pre_provisioned','__cert_data','__key_data',)

  _yang_name = 'certificate'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__division = YANGDynClass(base=unicode, is_leaf=True, yang_name="division", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__pre_provisioned = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__certificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__certificate_generated = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="certificate-generated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__certificate_details = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__locality = YANGDynClass(base=unicode, is_leaf=True, yang_name="locality", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__fqdn = YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__key_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="key-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__certificate_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-key", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__expiry_date = YANGDynClass(base=unicode, is_leaf=True, yang_name="expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__organization = YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__issuer = YANGDynClass(base=unicode, is_leaf=True, yang_name="issuer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cert_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="cert-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__email = YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__rsa_bit_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsa-bit-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__csr = YANGDynClass(base=unicode, is_leaf=True, yang_name="csr", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'credentials', u'certificates', u'certificate']

  def _get_fqdn(self):
    """
    Getter method for fqdn, mapped from YANG variable /credentials/certificates/certificate/fqdn (string)

    YANG Description: string
    """
    return self.__fqdn
      
  def _set_fqdn(self, v, load=False):
    """
    Setter method for fqdn, mapped from YANG variable /credentials/certificates/certificate/fqdn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fqdn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fqdn() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="fqdn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fqdn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__fqdn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fqdn(self):
    self.__fqdn = YANGDynClass(base=unicode, is_leaf=True, yang_name="fqdn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_certificate_key(self):
    """
    Getter method for certificate_key, mapped from YANG variable /credentials/certificates/certificate/certificate_key (string)

    YANG Description: string
    """
    return self.__certificate_key
      
  def _set_certificate_key(self, v, load=False):
    """
    Setter method for certificate_key, mapped from YANG variable /credentials/certificates/certificate/certificate_key (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate_key() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="certificate-key", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate_key must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-key", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__certificate_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate_key(self):
    self.__certificate_key = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-key", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_csr(self):
    """
    Getter method for csr, mapped from YANG variable /credentials/certificates/certificate/csr (string)

    YANG Description: string
    """
    return self.__csr
      
  def _set_csr(self, v, load=False):
    """
    Setter method for csr, mapped from YANG variable /credentials/certificates/certificate/csr (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_csr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_csr() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="csr", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """csr must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="csr", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__csr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_csr(self):
    self.__csr = YANGDynClass(base=unicode, is_leaf=True, yang_name="csr", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_certificate(self):
    """
    Getter method for certificate, mapped from YANG variable /credentials/certificates/certificate/certificate (string)

    YANG Description: string
    """
    return self.__certificate
      
  def _set_certificate(self, v, load=False):
    """
    Setter method for certificate, mapped from YANG variable /credentials/certificates/certificate/certificate (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__certificate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate(self):
    self.__certificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_location(self):
    """
    Getter method for location, mapped from YANG variable /credentials/certificates/certificate/location (string)

    YANG Description: string
    """
    return self.__location
      
  def _set_location(self, v, load=False):
    """
    Setter method for location, mapped from YANG variable /credentials/certificates/certificate/location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_location() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_location(self):
    self.__location = YANGDynClass(base=unicode, is_leaf=True, yang_name="location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_certificate_generated(self):
    """
    Getter method for certificate_generated, mapped from YANG variable /credentials/certificates/certificate/certificate_generated (boolean)

    YANG Description: certificate-generated: True/False
    """
    return self.__certificate_generated
      
  def _set_certificate_generated(self, v, load=False):
    """
    Setter method for certificate_generated, mapped from YANG variable /credentials/certificates/certificate/certificate_generated (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate_generated is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate_generated() directly.

    YANG Description: certificate-generated: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="certificate-generated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate_generated must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="certificate-generated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__certificate_generated = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate_generated(self):
    self.__certificate_generated = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="certificate-generated", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_certificate_details(self):
    """
    Getter method for certificate_details, mapped from YANG variable /credentials/certificates/certificate/certificate_details (string)

    YANG Description: string
    """
    return self.__certificate_details
      
  def _set_certificate_details(self, v, load=False):
    """
    Setter method for certificate_details, mapped from YANG variable /credentials/certificates/certificate/certificate_details (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_certificate_details is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_certificate_details() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="certificate-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """certificate_details must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__certificate_details = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_certificate_details(self):
    self.__certificate_details = YANGDynClass(base=unicode, is_leaf=True, yang_name="certificate-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_expiry_date(self):
    """
    Getter method for expiry_date, mapped from YANG variable /credentials/certificates/certificate/expiry_date (string)

    YANG Description: string
    """
    return self.__expiry_date
      
  def _set_expiry_date(self, v, load=False):
    """
    Setter method for expiry_date, mapped from YANG variable /credentials/certificates/certificate/expiry_date (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_expiry_date is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_expiry_date() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """expiry_date must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__expiry_date = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_expiry_date(self):
    self.__expiry_date = YANGDynClass(base=unicode, is_leaf=True, yang_name="expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_issuer(self):
    """
    Getter method for issuer, mapped from YANG variable /credentials/certificates/certificate/issuer (string)

    YANG Description: string
    """
    return self.__issuer
      
  def _set_issuer(self, v, load=False):
    """
    Setter method for issuer, mapped from YANG variable /credentials/certificates/certificate/issuer (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_issuer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_issuer() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="issuer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """issuer must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="issuer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__issuer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_issuer(self):
    self.__issuer = YANGDynClass(base=unicode, is_leaf=True, yang_name="issuer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_country(self):
    """
    Getter method for country, mapped from YANG variable /credentials/certificates/certificate/country (string)

    YANG Description: string
    """
    return self.__country
      
  def _set_country(self, v, load=False):
    """
    Setter method for country, mapped from YANG variable /credentials/certificates/certificate/country (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_country is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_country() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """country must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__country = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_country(self):
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /credentials/certificates/certificate/state (string)

    YANG Description: string
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /credentials/certificates/certificate/state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_locality(self):
    """
    Getter method for locality, mapped from YANG variable /credentials/certificates/certificate/locality (string)

    YANG Description: string
    """
    return self.__locality
      
  def _set_locality(self, v, load=False):
    """
    Setter method for locality, mapped from YANG variable /credentials/certificates/certificate/locality (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_locality is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_locality() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="locality", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """locality must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="locality", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__locality = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_locality(self):
    self.__locality = YANGDynClass(base=unicode, is_leaf=True, yang_name="locality", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_organization(self):
    """
    Getter method for organization, mapped from YANG variable /credentials/certificates/certificate/organization (string)

    YANG Description: string
    """
    return self.__organization
      
  def _set_organization(self, v, load=False):
    """
    Setter method for organization, mapped from YANG variable /credentials/certificates/certificate/organization (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_organization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_organization() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """organization must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__organization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_organization(self):
    self.__organization = YANGDynClass(base=unicode, is_leaf=True, yang_name="organization", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_division(self):
    """
    Getter method for division, mapped from YANG variable /credentials/certificates/certificate/division (string)

    YANG Description: string
    """
    return self.__division
      
  def _set_division(self, v, load=False):
    """
    Setter method for division, mapped from YANG variable /credentials/certificates/certificate/division (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_division is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_division() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="division", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """division must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="division", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__division = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_division(self):
    self.__division = YANGDynClass(base=unicode, is_leaf=True, yang_name="division", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_email(self):
    """
    Getter method for email, mapped from YANG variable /credentials/certificates/certificate/email (string)

    YANG Description: string
    """
    return self.__email
      
  def _set_email(self, v, load=False):
    """
    Setter method for email, mapped from YANG variable /credentials/certificates/certificate/email (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_email is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_email() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """email must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__email = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_email(self):
    self.__email = YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_rsa_bit_size(self):
    """
    Getter method for rsa_bit_size, mapped from YANG variable /credentials/certificates/certificate/rsa_bit_size (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rsa_bit_size
      
  def _set_rsa_bit_size(self, v, load=False):
    """
    Setter method for rsa_bit_size, mapped from YANG variable /credentials/certificates/certificate/rsa_bit_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsa_bit_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsa_bit_size() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsa-bit-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsa_bit_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsa-bit-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__rsa_bit_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsa_bit_size(self):
    self.__rsa_bit_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsa-bit-size", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_pre_provisioned(self):
    """
    Getter method for pre_provisioned, mapped from YANG variable /credentials/certificates/certificate/pre_provisioned (boolean)

    YANG Description: pre-provisioned: True/False
    """
    return self.__pre_provisioned
      
  def _set_pre_provisioned(self, v, load=False):
    """
    Setter method for pre_provisioned, mapped from YANG variable /credentials/certificates/certificate/pre_provisioned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pre_provisioned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pre_provisioned() directly.

    YANG Description: pre-provisioned: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pre_provisioned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__pre_provisioned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pre_provisioned(self):
    self.__pre_provisioned = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_cert_data(self):
    """
    Getter method for cert_data, mapped from YANG variable /credentials/certificates/certificate/cert_data (string)

    YANG Description: string
    """
    return self.__cert_data
      
  def _set_cert_data(self, v, load=False):
    """
    Setter method for cert_data, mapped from YANG variable /credentials/certificates/certificate/cert_data (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cert_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cert_data() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cert-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cert_data must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cert-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__cert_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cert_data(self):
    self.__cert_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="cert-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_key_data(self):
    """
    Getter method for key_data, mapped from YANG variable /credentials/certificates/certificate/key_data (string)

    YANG Description: string
    """
    return self.__key_data
      
  def _set_key_data(self, v, load=False):
    """
    Setter method for key_data, mapped from YANG variable /credentials/certificates/certificate/key_data (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_data() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="key-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_data must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="key-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__key_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_data(self):
    self.__key_data = YANGDynClass(base=unicode, is_leaf=True, yang_name="key-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  fqdn = __builtin__.property(_get_fqdn, _set_fqdn)
  certificate_key = __builtin__.property(_get_certificate_key, _set_certificate_key)
  csr = __builtin__.property(_get_csr, _set_csr)
  certificate = __builtin__.property(_get_certificate, _set_certificate)
  location = __builtin__.property(_get_location, _set_location)
  certificate_generated = __builtin__.property(_get_certificate_generated, _set_certificate_generated)
  certificate_details = __builtin__.property(_get_certificate_details, _set_certificate_details)
  expiry_date = __builtin__.property(_get_expiry_date, _set_expiry_date)
  issuer = __builtin__.property(_get_issuer, _set_issuer)
  country = __builtin__.property(_get_country, _set_country)
  state = __builtin__.property(_get_state, _set_state)
  locality = __builtin__.property(_get_locality, _set_locality)
  organization = __builtin__.property(_get_organization, _set_organization)
  division = __builtin__.property(_get_division, _set_division)
  email = __builtin__.property(_get_email, _set_email)
  rsa_bit_size = __builtin__.property(_get_rsa_bit_size, _set_rsa_bit_size)
  pre_provisioned = __builtin__.property(_get_pre_provisioned, _set_pre_provisioned)
  cert_data = __builtin__.property(_get_cert_data, _set_cert_data)
  key_data = __builtin__.property(_get_key_data, _set_key_data)


  _pyangbind_elements = collections.OrderedDict([('fqdn', fqdn), ('certificate_key', certificate_key), ('csr', csr), ('certificate', certificate), ('location', location), ('certificate_generated', certificate_generated), ('certificate_details', certificate_details), ('expiry_date', expiry_date), ('issuer', issuer), ('country', country), ('state', state), ('locality', locality), ('organization', organization), ('division', division), ('email', email), ('rsa_bit_size', rsa_bit_size), ('pre_provisioned', pre_provisioned), ('cert_data', cert_data), ('key_data', key_data), ])


