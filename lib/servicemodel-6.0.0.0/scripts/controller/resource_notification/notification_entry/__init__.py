
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import param_map
class notification_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /resource-notification/notification-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__event_spec','__host','__date','__event_src','__raw_message','__facility','__level','__oid','__param_map',)

  _yang_name = 'notification-entry'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__facility = YANGDynClass(base=unicode, is_leaf=True, yang_name="facility", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'info': {'value': 6}, u'notice': {'value': 5}, u'emergency': {'value': 0}, u'alert': {'value': 1}, u'critical': {'value': 2}, u'error': {'value': 3}, u'debug': {'value': 7}, u'warning': {'value': 4}},), is_leaf=True, yang_name="level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='syslogtypes:severity', is_config=True)
    self.__raw_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="raw-message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__host = YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__param_map = YANGDynClass(base=YANGListType("param value",param_map.param_map, yang_name="param-map", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='param value'), is_container='list', yang_name="param-map", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__date = YANGDynClass(base=unicode, is_leaf=True, yang_name="date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__event_src = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSLOG': {}, u'TRAP': {}},), is_leaf=True, yang_name="event-src", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='Event-Source', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'resource-notification', u'notification-entry']

  def _get_event_spec(self):
    """
    Getter method for event_spec, mapped from YANG variable /resource_notification/notification_entry/event_spec (string)

    YANG Description: This is used to clasify the syslog message with respect NCX
    """
    return self.__event_spec
      
  def _set_event_spec(self, v, load=False):
    """
    Setter method for event_spec, mapped from YANG variable /resource_notification/notification_entry/event_spec (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_spec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_spec() directly.

    YANG Description: This is used to clasify the syslog message with respect NCX
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_spec must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__event_spec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_spec(self):
    self.__event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_host(self):
    """
    Getter method for host, mapped from YANG variable /resource_notification/notification_entry/host (string)

    YANG Description: Host in which syslog message gets triggered
    """
    return self.__host
      
  def _set_host(self, v, load=False):
    """
    Setter method for host, mapped from YANG variable /resource_notification/notification_entry/host (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host() directly.

    YANG Description: Host in which syslog message gets triggered
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host(self):
    self.__host = YANGDynClass(base=unicode, is_leaf=True, yang_name="host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_date(self):
    """
    Getter method for date, mapped from YANG variable /resource_notification/notification_entry/date (string)

    YANG Description: Time in which syslog message got triggered.
    """
    return self.__date
      
  def _set_date(self, v, load=False):
    """
    Setter method for date, mapped from YANG variable /resource_notification/notification_entry/date (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_date is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_date() directly.

    YANG Description: Time in which syslog message got triggered.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """date must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__date = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_date(self):
    self.__date = YANGDynClass(base=unicode, is_leaf=True, yang_name="date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_event_src(self):
    """
    Getter method for event_src, mapped from YANG variable /resource_notification/notification_entry/event_src (Event-Source)

    YANG Description: Event trigger by, example syslog, trap etc
    """
    return self.__event_src
      
  def _set_event_src(self, v, load=False):
    """
    Setter method for event_src, mapped from YANG variable /resource_notification/notification_entry/event_src (Event-Source)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_src is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_src() directly.

    YANG Description: Event trigger by, example syslog, trap etc
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSLOG': {}, u'TRAP': {}},), is_leaf=True, yang_name="event-src", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='Event-Source', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_src must be of a type compatible with Event-Source""",
          'defined-type': "controller:Event-Source",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSLOG': {}, u'TRAP': {}},), is_leaf=True, yang_name="event-src", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='Event-Source', is_config=True)""",
        })

    self.__event_src = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_src(self):
    self.__event_src = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SYSLOG': {}, u'TRAP': {}},), is_leaf=True, yang_name="event-src", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='Event-Source', is_config=True)


  def _get_raw_message(self):
    """
    Getter method for raw_message, mapped from YANG variable /resource_notification/notification_entry/raw_message (string)

    YANG Description: Syslog Message
    """
    return self.__raw_message
      
  def _set_raw_message(self, v, load=False):
    """
    Setter method for raw_message, mapped from YANG variable /resource_notification/notification_entry/raw_message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_raw_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_raw_message() directly.

    YANG Description: Syslog Message
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="raw-message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """raw_message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="raw-message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__raw_message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_raw_message(self):
    self.__raw_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="raw-message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_facility(self):
    """
    Getter method for facility, mapped from YANG variable /resource_notification/notification_entry/facility (string)

    YANG Description: A facility code is used to specify the type of program that is logging the message. Check RFC 3164 for more detail.
    """
    return self.__facility
      
  def _set_facility(self, v, load=False):
    """
    Setter method for facility, mapped from YANG variable /resource_notification/notification_entry/facility (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_facility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_facility() directly.

    YANG Description: A facility code is used to specify the type of program that is logging the message. Check RFC 3164 for more detail.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="facility", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """facility must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="facility", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__facility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_facility(self):
    self.__facility = YANGDynClass(base=unicode, is_leaf=True, yang_name="facility", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /resource_notification/notification_entry/level (syslogtypes:severity)

    YANG Description: Severity level, (0:Emergency, 1:Alert, 2:Critical, 3:Error, 4:Warning, 5:Notice,  6:Informational, 7:Debug)
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /resource_notification/notification_entry/level (syslogtypes:severity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: Severity level, (0:Emergency, 1:Alert, 2:Critical, 3:Error, 4:Warning, 5:Notice,  6:Informational, 7:Debug)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'info': {'value': 6}, u'notice': {'value': 5}, u'emergency': {'value': 0}, u'alert': {'value': 1}, u'critical': {'value': 2}, u'error': {'value': 3}, u'debug': {'value': 7}, u'warning': {'value': 4}},), is_leaf=True, yang_name="level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='syslogtypes:severity', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with syslogtypes:severity""",
          'defined-type': "syslogtypes:severity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'info': {'value': 6}, u'notice': {'value': 5}, u'emergency': {'value': 0}, u'alert': {'value': 1}, u'critical': {'value': 2}, u'error': {'value': 3}, u'debug': {'value': 7}, u'warning': {'value': 4}},), is_leaf=True, yang_name="level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='syslogtypes:severity', is_config=True)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'info': {'value': 6}, u'notice': {'value': 5}, u'emergency': {'value': 0}, u'alert': {'value': 1}, u'critical': {'value': 2}, u'error': {'value': 3}, u'debug': {'value': 7}, u'warning': {'value': 4}},), is_leaf=True, yang_name="level", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='syslogtypes:severity', is_config=True)


  def _get_oid(self):
    """
    Getter method for oid, mapped from YANG variable /resource_notification/notification_entry/oid (string)

    YANG Description: SNMP Trap OID
    """
    return self.__oid
      
  def _set_oid(self, v, load=False):
    """
    Setter method for oid, mapped from YANG variable /resource_notification/notification_entry/oid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oid() directly.

    YANG Description: SNMP Trap OID
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__oid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oid(self):
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_param_map(self):
    """
    Getter method for param_map, mapped from YANG variable /resource_notification/notification_entry/param_map (list)

    YANG Description: To Hold the param/value map that found on the syslog message or trap message.. Example: COMPONENT_NAME : Gig0/1
    """
    return self.__param_map
      
  def _set_param_map(self, v, load=False):
    """
    Setter method for param_map, mapped from YANG variable /resource_notification/notification_entry/param_map (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_param_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_param_map() directly.

    YANG Description: To Hold the param/value map that found on the syslog message or trap message.. Example: COMPONENT_NAME : Gig0/1
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("param value",param_map.param_map, yang_name="param-map", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='param value'), is_container='list', yang_name="param-map", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """param_map must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("param value",param_map.param_map, yang_name="param-map", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='param value'), is_container='list', yang_name="param-map", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__param_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_param_map(self):
    self.__param_map = YANGDynClass(base=YANGListType("param value",param_map.param_map, yang_name="param-map", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='param value'), is_container='list', yang_name="param-map", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)

  event_spec = __builtin__.property(_get_event_spec, _set_event_spec)
  host = __builtin__.property(_get_host, _set_host)
  date = __builtin__.property(_get_date, _set_date)
  event_src = __builtin__.property(_get_event_src, _set_event_src)
  raw_message = __builtin__.property(_get_raw_message, _set_raw_message)
  facility = __builtin__.property(_get_facility, _set_facility)
  level = __builtin__.property(_get_level, _set_level)
  oid = __builtin__.property(_get_oid, _set_oid)
  param_map = __builtin__.property(_get_param_map, _set_param_map)


  _pyangbind_elements = collections.OrderedDict([('event_spec', event_spec), ('host', host), ('date', date), ('event_src', event_src), ('raw_message', raw_message), ('facility', facility), ('level', level), ('oid', oid), ('param_map', param_map), ])


