
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class resource_capacity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /templates/capacity-templates/capacity-template/resource-capacity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__capacity_type','__description','__device_type','__maximum_limit','__updatable',)

  _yang_name = 'resource-capacity'
  _module_name = 'templates'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__updatable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__device_type = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__capacity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RP_CONTEXT': {}, u'WAN_OPTIMIZER': {}, u'SERVICE': {}, u'INTERFACE_OUT_BANDWIDTH': {}, u'VLAN': {}, u'FW_MID_CONTEXT': {}, u'AGGREGATE_CAPACITY': {}, u'WAN_BANDWIDTH': {}, u'FP_CONTEXT': {}, u'CPU': {}, u'VXLAN': {}, u'SERVERVLAN': {}, u'VCPUCORES': {}, u'FW_CONTEXT': {}, u'AGGREGATE_WORKLOAD': {}, u'INTERFACE_IN_UTILIZATION': {}, u'VRF': {}, u'VMEMORY': {}, u'REALSERVER': {}, u'LB_CONTEXT': {}, u'AGGREGATE_HEALTH': {}, u'INTERFACE_IN_ERRORS': {}, u'VIRTUAL_SERVICES_GATEWAY': {}, u'ACCESS_BANDWIDTH': {}, u'VM': {}, u'PUBLIC_IP_POOLS': {}, u'VIRTUAL_ACCESS_PORT': {}, u'INFRAVLAN': {}, u'FW_OUTSIDE_CONTEXT': {}, u'FW_INSIDE_CONTEXT': {}, u'INTERFACE_OUT_UTILIZATION': {}, u'COMPUTE_FIREWALL': {}, u'INTERFACE_OUT_ERRORS': {}, u'VCPU': {}, u'INTERFACE_IN_BANDWIDTH': {}, u'FW_VRI': {}, u'VIP': {}, u'MEMORY': {}, u'VRF_HA': {}, u'VNMC': {}, u'FW_ZONE': {}},), is_leaf=True, yang_name="capacity-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='capacity-type', is_config=True)
    self.__maximum_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-limit", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'templates', u'capacity-templates', u'capacity-template', u'resource-capacity']

  def _get_capacity_type(self):
    """
    Getter method for capacity_type, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/capacity_type (capacity-type)

    YANG Description: AGGREGATE_CAPACITY
AGGREGATE_WORKLOAD
AGGREGATE_HEALTH
WAN_BANDWIDTH
ACCESS_BANDWIDTH
SERVERVLAN
VLAN
VXLAN
INFRAVLAN
VRF
VRF_HA
CPU
VCPU
VCPUCORES
MEMORY
VMEMORY
VNMC
VIRTUAL_ACCESS_PORT
VM
FW_CONTEXT
FW_INSIDE_CONTEXT
FW_OUTSIDE_CONTEXT
FW_VRI
FW_ZONE
FW_MID_CONTEXT
LB_CONTEXT
RP_CONTEXT
FP_CONTEXT
COMPUTE_FIREWALL
VIRTUAL_SERVICES_GATEWAY
PUBLIC_IP_POOLS
INTERFACE_IN_UTILIZATION
INTERFACE_OUT_UTILIZATION
INTERFACE_IN_BANDWIDTH
INTERFACE_OUT_BANDWIDTH
INTERFACE_IN_ERRORS
INTERFACE_OUT_ERRORS
SERVICE
WAN_OPTIMIZER
VIP
REALSERVER

    """
    return self.__capacity_type
      
  def _set_capacity_type(self, v, load=False):
    """
    Setter method for capacity_type, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/capacity_type (capacity-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capacity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capacity_type() directly.

    YANG Description: AGGREGATE_CAPACITY
AGGREGATE_WORKLOAD
AGGREGATE_HEALTH
WAN_BANDWIDTH
ACCESS_BANDWIDTH
SERVERVLAN
VLAN
VXLAN
INFRAVLAN
VRF
VRF_HA
CPU
VCPU
VCPUCORES
MEMORY
VMEMORY
VNMC
VIRTUAL_ACCESS_PORT
VM
FW_CONTEXT
FW_INSIDE_CONTEXT
FW_OUTSIDE_CONTEXT
FW_VRI
FW_ZONE
FW_MID_CONTEXT
LB_CONTEXT
RP_CONTEXT
FP_CONTEXT
COMPUTE_FIREWALL
VIRTUAL_SERVICES_GATEWAY
PUBLIC_IP_POOLS
INTERFACE_IN_UTILIZATION
INTERFACE_OUT_UTILIZATION
INTERFACE_IN_BANDWIDTH
INTERFACE_OUT_BANDWIDTH
INTERFACE_IN_ERRORS
INTERFACE_OUT_ERRORS
SERVICE
WAN_OPTIMIZER
VIP
REALSERVER

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RP_CONTEXT': {}, u'WAN_OPTIMIZER': {}, u'SERVICE': {}, u'INTERFACE_OUT_BANDWIDTH': {}, u'VLAN': {}, u'FW_MID_CONTEXT': {}, u'AGGREGATE_CAPACITY': {}, u'WAN_BANDWIDTH': {}, u'FP_CONTEXT': {}, u'CPU': {}, u'VXLAN': {}, u'SERVERVLAN': {}, u'VCPUCORES': {}, u'FW_CONTEXT': {}, u'AGGREGATE_WORKLOAD': {}, u'INTERFACE_IN_UTILIZATION': {}, u'VRF': {}, u'VMEMORY': {}, u'REALSERVER': {}, u'LB_CONTEXT': {}, u'AGGREGATE_HEALTH': {}, u'INTERFACE_IN_ERRORS': {}, u'VIRTUAL_SERVICES_GATEWAY': {}, u'ACCESS_BANDWIDTH': {}, u'VM': {}, u'PUBLIC_IP_POOLS': {}, u'VIRTUAL_ACCESS_PORT': {}, u'INFRAVLAN': {}, u'FW_OUTSIDE_CONTEXT': {}, u'FW_INSIDE_CONTEXT': {}, u'INTERFACE_OUT_UTILIZATION': {}, u'COMPUTE_FIREWALL': {}, u'INTERFACE_OUT_ERRORS': {}, u'VCPU': {}, u'INTERFACE_IN_BANDWIDTH': {}, u'FW_VRI': {}, u'VIP': {}, u'MEMORY': {}, u'VRF_HA': {}, u'VNMC': {}, u'FW_ZONE': {}},), is_leaf=True, yang_name="capacity-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='capacity-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capacity_type must be of a type compatible with capacity-type""",
          'defined-type': "controller:capacity-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RP_CONTEXT': {}, u'WAN_OPTIMIZER': {}, u'SERVICE': {}, u'INTERFACE_OUT_BANDWIDTH': {}, u'VLAN': {}, u'FW_MID_CONTEXT': {}, u'AGGREGATE_CAPACITY': {}, u'WAN_BANDWIDTH': {}, u'FP_CONTEXT': {}, u'CPU': {}, u'VXLAN': {}, u'SERVERVLAN': {}, u'VCPUCORES': {}, u'FW_CONTEXT': {}, u'AGGREGATE_WORKLOAD': {}, u'INTERFACE_IN_UTILIZATION': {}, u'VRF': {}, u'VMEMORY': {}, u'REALSERVER': {}, u'LB_CONTEXT': {}, u'AGGREGATE_HEALTH': {}, u'INTERFACE_IN_ERRORS': {}, u'VIRTUAL_SERVICES_GATEWAY': {}, u'ACCESS_BANDWIDTH': {}, u'VM': {}, u'PUBLIC_IP_POOLS': {}, u'VIRTUAL_ACCESS_PORT': {}, u'INFRAVLAN': {}, u'FW_OUTSIDE_CONTEXT': {}, u'FW_INSIDE_CONTEXT': {}, u'INTERFACE_OUT_UTILIZATION': {}, u'COMPUTE_FIREWALL': {}, u'INTERFACE_OUT_ERRORS': {}, u'VCPU': {}, u'INTERFACE_IN_BANDWIDTH': {}, u'FW_VRI': {}, u'VIP': {}, u'MEMORY': {}, u'VRF_HA': {}, u'VNMC': {}, u'FW_ZONE': {}},), is_leaf=True, yang_name="capacity-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='capacity-type', is_config=True)""",
        })

    self.__capacity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capacity_type(self):
    self.__capacity_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RP_CONTEXT': {}, u'WAN_OPTIMIZER': {}, u'SERVICE': {}, u'INTERFACE_OUT_BANDWIDTH': {}, u'VLAN': {}, u'FW_MID_CONTEXT': {}, u'AGGREGATE_CAPACITY': {}, u'WAN_BANDWIDTH': {}, u'FP_CONTEXT': {}, u'CPU': {}, u'VXLAN': {}, u'SERVERVLAN': {}, u'VCPUCORES': {}, u'FW_CONTEXT': {}, u'AGGREGATE_WORKLOAD': {}, u'INTERFACE_IN_UTILIZATION': {}, u'VRF': {}, u'VMEMORY': {}, u'REALSERVER': {}, u'LB_CONTEXT': {}, u'AGGREGATE_HEALTH': {}, u'INTERFACE_IN_ERRORS': {}, u'VIRTUAL_SERVICES_GATEWAY': {}, u'ACCESS_BANDWIDTH': {}, u'VM': {}, u'PUBLIC_IP_POOLS': {}, u'VIRTUAL_ACCESS_PORT': {}, u'INFRAVLAN': {}, u'FW_OUTSIDE_CONTEXT': {}, u'FW_INSIDE_CONTEXT': {}, u'INTERFACE_OUT_UTILIZATION': {}, u'COMPUTE_FIREWALL': {}, u'INTERFACE_OUT_ERRORS': {}, u'VCPU': {}, u'INTERFACE_IN_BANDWIDTH': {}, u'FW_VRI': {}, u'VIP': {}, u'MEMORY': {}, u'VRF_HA': {}, u'VNMC': {}, u'FW_ZONE': {}},), is_leaf=True, yang_name="capacity-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='capacity-type', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_type(self):
    """
    Getter method for device_type, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/device_type (leafref)

    YANG Description: device-type
    """
    return self.__device_type
      
  def _set_device_type(self, v, load=False):
    """
    Setter method for device_type, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/device_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_type() directly.

    YANG Description: device-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_type(self):
    self.__device_type = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="device-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_maximum_limit(self):
    """
    Getter method for maximum_limit, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/maximum_limit (uint16)

    YANG Description: 0..65535
    """
    return self.__maximum_limit
      
  def _set_maximum_limit(self, v, load=False):
    """
    Setter method for maximum_limit, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/maximum_limit (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_limit() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-limit", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_limit must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-limit", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__maximum_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_limit(self):
    self.__maximum_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="maximum-limit", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_updatable(self):
    """
    Getter method for updatable, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/updatable (boolean)

    YANG Description: updatable: True/False
    """
    return self.__updatable
      
  def _set_updatable(self, v, load=False):
    """
    Setter method for updatable, mapped from YANG variable /templates/capacity_templates/capacity_template/resource_capacity/updatable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_updatable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_updatable() directly.

    YANG Description: updatable: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """updatable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__updatable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_updatable(self):
    self.__updatable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  capacity_type = __builtin__.property(_get_capacity_type, _set_capacity_type)
  description = __builtin__.property(_get_description, _set_description)
  device_type = __builtin__.property(_get_device_type, _set_device_type)
  maximum_limit = __builtin__.property(_get_maximum_limit, _set_maximum_limit)
  updatable = __builtin__.property(_get_updatable, _set_updatable)


  _pyangbind_elements = collections.OrderedDict([('capacity_type', capacity_type), ('description', description), ('device_type', device_type), ('maximum_limit', maximum_limit), ('updatable', updatable), ])


