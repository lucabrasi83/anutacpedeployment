
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import property_dependencies
class property(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /templates/job-templates/job-template/properties/property. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__mandatory','__default_value','__updatable','__customizable','__readonly','__admin_property','__custom_property','__vendor_property','__show_at_main_feature','__context','__sequence_number','__multiplicity','__label','__field_set','__hint','__simple_typedef','__complex_typedef','__dynamic_typedef','__pre_provisioned','__property_dependencies','__device_platforms',)

  _yang_name = 'property'
  _module_name = 'templates'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__property_dependencies = YANGDynClass(base=property_dependencies.property_dependencies, is_container='container', yang_name="property-dependencies", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__mandatory = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="mandatory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__simple_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="simple-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__field_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="field-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__default_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-value", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__admin_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="admin-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__hint = YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__readonly = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="readonly", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__show_at_main_feature = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="show-at-main-feature", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__complex_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="complex-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__custom_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="custom-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__dynamic_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__vendor_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="vendor-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__customizable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="customizable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__multiplicity = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="multiplicity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__updatable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__device_platforms = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__context = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'POLICY_QUALITY': {}, u'POLICY_ROUTING': {}, u'INTERCONNECT': {}, u'ADMIN_SETTINGS': {}, u'DEVICE_INVENTORY': {}, u'MONITOR_JOB': {}, u'SYSTEM_MAINTENANCE': {}, u'POLICY_ADVERTISE': {}, u'DEVICE_CONFIGURATION': {}, u'POLICY_TEST': {}, u'POLICY_ROUTING_PROPERTY': {}, u'POLICY_PROVISIONING': {}, u'POLICY_PREFIX_LIST': {}, u'POLICY_CUSTOM_ATTRIBUTES': {}, u'DEVICE_PING': {}, u'POLICY_ROUTE_MAP': {}, u'POLICY_SECURITY': {}, u'DISCOVERY_JOB_TEMPLATE': {}, u'POLICY_RP3TEMPLATE': {}, u'DEVICE_DIAGNOSTICS': {}},), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='contexttype', is_config=True)
    self.__pre_provisioned = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'templates', u'job-templates', u'job-template', u'properties', u'property']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /templates/job_templates/job_template/properties/property/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /templates/job_templates/job_template/properties/property/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_mandatory(self):
    """
    Getter method for mandatory, mapped from YANG variable /templates/job_templates/job_template/properties/property/mandatory (boolean)

    YANG Description: mandatory: True/False
    """
    return self.__mandatory
      
  def _set_mandatory(self, v, load=False):
    """
    Setter method for mandatory, mapped from YANG variable /templates/job_templates/job_template/properties/property/mandatory (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mandatory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mandatory() directly.

    YANG Description: mandatory: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="mandatory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mandatory must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="mandatory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__mandatory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mandatory(self):
    self.__mandatory = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="mandatory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_default_value(self):
    """
    Getter method for default_value, mapped from YANG variable /templates/job_templates/job_template/properties/property/default_value (string)

    YANG Description: string
    """
    return self.__default_value
      
  def _set_default_value(self, v, load=False):
    """
    Setter method for default_value, mapped from YANG variable /templates/job_templates/job_template/properties/property/default_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_value() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="default-value", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="default-value", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__default_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_value(self):
    self.__default_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="default-value", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_updatable(self):
    """
    Getter method for updatable, mapped from YANG variable /templates/job_templates/job_template/properties/property/updatable (boolean)

    YANG Description: updatable: True/False
    """
    return self.__updatable
      
  def _set_updatable(self, v, load=False):
    """
    Setter method for updatable, mapped from YANG variable /templates/job_templates/job_template/properties/property/updatable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_updatable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_updatable() directly.

    YANG Description: updatable: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """updatable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__updatable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_updatable(self):
    self.__updatable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="updatable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_customizable(self):
    """
    Getter method for customizable, mapped from YANG variable /templates/job_templates/job_template/properties/property/customizable (boolean)

    YANG Description: customizable: True/False
    """
    return self.__customizable
      
  def _set_customizable(self, v, load=False):
    """
    Setter method for customizable, mapped from YANG variable /templates/job_templates/job_template/properties/property/customizable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_customizable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_customizable() directly.

    YANG Description: customizable: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="customizable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """customizable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="customizable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__customizable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_customizable(self):
    self.__customizable = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="customizable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_readonly(self):
    """
    Getter method for readonly, mapped from YANG variable /templates/job_templates/job_template/properties/property/readonly (boolean)

    YANG Description: readonly: True/False
    """
    return self.__readonly
      
  def _set_readonly(self, v, load=False):
    """
    Setter method for readonly, mapped from YANG variable /templates/job_templates/job_template/properties/property/readonly (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_readonly is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_readonly() directly.

    YANG Description: readonly: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="readonly", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """readonly must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="readonly", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__readonly = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_readonly(self):
    self.__readonly = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="readonly", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_admin_property(self):
    """
    Getter method for admin_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/admin_property (boolean)

    YANG Description: admin-property: True/False
    """
    return self.__admin_property
      
  def _set_admin_property(self, v, load=False):
    """
    Setter method for admin_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/admin_property (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_property() directly.

    YANG Description: admin-property: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="admin-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_property must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="admin-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__admin_property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_property(self):
    self.__admin_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="admin-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_custom_property(self):
    """
    Getter method for custom_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/custom_property (boolean)

    YANG Description: custom-property: True/False
    """
    return self.__custom_property
      
  def _set_custom_property(self, v, load=False):
    """
    Setter method for custom_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/custom_property (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_custom_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_custom_property() directly.

    YANG Description: custom-property: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="custom-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """custom_property must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="custom-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__custom_property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_custom_property(self):
    self.__custom_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="custom-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_vendor_property(self):
    """
    Getter method for vendor_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/vendor_property (boolean)

    YANG Description: vendor-property: True/False
    """
    return self.__vendor_property
      
  def _set_vendor_property(self, v, load=False):
    """
    Setter method for vendor_property, mapped from YANG variable /templates/job_templates/job_template/properties/property/vendor_property (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vendor_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vendor_property() directly.

    YANG Description: vendor-property: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="vendor-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vendor_property must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="vendor-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__vendor_property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vendor_property(self):
    self.__vendor_property = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="vendor-property", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_show_at_main_feature(self):
    """
    Getter method for show_at_main_feature, mapped from YANG variable /templates/job_templates/job_template/properties/property/show_at_main_feature (boolean)

    YANG Description: show-at-main-feature: True/False
    """
    return self.__show_at_main_feature
      
  def _set_show_at_main_feature(self, v, load=False):
    """
    Setter method for show_at_main_feature, mapped from YANG variable /templates/job_templates/job_template/properties/property/show_at_main_feature (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_at_main_feature is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_at_main_feature() directly.

    YANG Description: show-at-main-feature: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="show-at-main-feature", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_at_main_feature must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="show-at-main-feature", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__show_at_main_feature = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_at_main_feature(self):
    self.__show_at_main_feature = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="show-at-main-feature", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_context(self):
    """
    Getter method for context, mapped from YANG variable /templates/job_templates/job_template/properties/property/context (contexttype)

    YANG Description: POLICY_PROVISIONING
POLICY_SECURITY
POLICY_QUALITY
POLICY_ROUTING
POLICY_RP3TEMPLATE
POLICY_TEST
DISCOVERY_JOB_TEMPLATE
DEVICE_PING
DEVICE_DIAGNOSTICS
MONITOR_JOB
DEVICE_INVENTORY
SYSTEM_MAINTENANCE
DEVICE_CONFIGURATION
ADMIN_SETTINGS
INTERCONNECT
POLICY_CUSTOM_ATTRIBUTES
POLICY_ROUTING_PROPERTY
POLICY_ADVERTISE
POLICY_PREFIX_LIST
POLICY_ROUTE_MAP

    """
    return self.__context
      
  def _set_context(self, v, load=False):
    """
    Setter method for context, mapped from YANG variable /templates/job_templates/job_template/properties/property/context (contexttype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context() directly.

    YANG Description: POLICY_PROVISIONING
POLICY_SECURITY
POLICY_QUALITY
POLICY_ROUTING
POLICY_RP3TEMPLATE
POLICY_TEST
DISCOVERY_JOB_TEMPLATE
DEVICE_PING
DEVICE_DIAGNOSTICS
MONITOR_JOB
DEVICE_INVENTORY
SYSTEM_MAINTENANCE
DEVICE_CONFIGURATION
ADMIN_SETTINGS
INTERCONNECT
POLICY_CUSTOM_ATTRIBUTES
POLICY_ROUTING_PROPERTY
POLICY_ADVERTISE
POLICY_PREFIX_LIST
POLICY_ROUTE_MAP

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'POLICY_QUALITY': {}, u'POLICY_ROUTING': {}, u'INTERCONNECT': {}, u'ADMIN_SETTINGS': {}, u'DEVICE_INVENTORY': {}, u'MONITOR_JOB': {}, u'SYSTEM_MAINTENANCE': {}, u'POLICY_ADVERTISE': {}, u'DEVICE_CONFIGURATION': {}, u'POLICY_TEST': {}, u'POLICY_ROUTING_PROPERTY': {}, u'POLICY_PROVISIONING': {}, u'POLICY_PREFIX_LIST': {}, u'POLICY_CUSTOM_ATTRIBUTES': {}, u'DEVICE_PING': {}, u'POLICY_ROUTE_MAP': {}, u'POLICY_SECURITY': {}, u'DISCOVERY_JOB_TEMPLATE': {}, u'POLICY_RP3TEMPLATE': {}, u'DEVICE_DIAGNOSTICS': {}},), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='contexttype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context must be of a type compatible with contexttype""",
          'defined-type': "controller:contexttype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'POLICY_QUALITY': {}, u'POLICY_ROUTING': {}, u'INTERCONNECT': {}, u'ADMIN_SETTINGS': {}, u'DEVICE_INVENTORY': {}, u'MONITOR_JOB': {}, u'SYSTEM_MAINTENANCE': {}, u'POLICY_ADVERTISE': {}, u'DEVICE_CONFIGURATION': {}, u'POLICY_TEST': {}, u'POLICY_ROUTING_PROPERTY': {}, u'POLICY_PROVISIONING': {}, u'POLICY_PREFIX_LIST': {}, u'POLICY_CUSTOM_ATTRIBUTES': {}, u'DEVICE_PING': {}, u'POLICY_ROUTE_MAP': {}, u'POLICY_SECURITY': {}, u'DISCOVERY_JOB_TEMPLATE': {}, u'POLICY_RP3TEMPLATE': {}, u'DEVICE_DIAGNOSTICS': {}},), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='contexttype', is_config=True)""",
        })

    self.__context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context(self):
    self.__context = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'POLICY_QUALITY': {}, u'POLICY_ROUTING': {}, u'INTERCONNECT': {}, u'ADMIN_SETTINGS': {}, u'DEVICE_INVENTORY': {}, u'MONITOR_JOB': {}, u'SYSTEM_MAINTENANCE': {}, u'POLICY_ADVERTISE': {}, u'DEVICE_CONFIGURATION': {}, u'POLICY_TEST': {}, u'POLICY_ROUTING_PROPERTY': {}, u'POLICY_PROVISIONING': {}, u'POLICY_PREFIX_LIST': {}, u'POLICY_CUSTOM_ATTRIBUTES': {}, u'DEVICE_PING': {}, u'POLICY_ROUTE_MAP': {}, u'POLICY_SECURITY': {}, u'DISCOVERY_JOB_TEMPLATE': {}, u'POLICY_RP3TEMPLATE': {}, u'DEVICE_DIAGNOSTICS': {}},), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='contexttype', is_config=True)


  def _get_sequence_number(self):
    """
    Getter method for sequence_number, mapped from YANG variable /templates/job_templates/job_template/properties/property/sequence_number (uint32)

    YANG Description: 0..4294967295
    """
    return self.__sequence_number
      
  def _set_sequence_number(self, v, load=False):
    """
    Setter method for sequence_number, mapped from YANG variable /templates/job_templates/job_template/properties/property/sequence_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence_number() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__sequence_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence_number(self):
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_multiplicity(self):
    """
    Getter method for multiplicity, mapped from YANG variable /templates/job_templates/job_template/properties/property/multiplicity (uint32)

    YANG Description: 0..4294967295
    """
    return self.__multiplicity
      
  def _set_multiplicity(self, v, load=False):
    """
    Setter method for multiplicity, mapped from YANG variable /templates/job_templates/job_template/properties/property/multiplicity (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multiplicity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multiplicity() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="multiplicity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multiplicity must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="multiplicity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__multiplicity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multiplicity(self):
    self.__multiplicity = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="multiplicity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /templates/job_templates/job_template/properties/property/label (string)

    YANG Description: string
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /templates/job_templates/job_template/properties/property/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_field_set(self):
    """
    Getter method for field_set, mapped from YANG variable /templates/job_templates/job_template/properties/property/field_set (string)

    YANG Description: string
    """
    return self.__field_set
      
  def _set_field_set(self, v, load=False):
    """
    Setter method for field_set, mapped from YANG variable /templates/job_templates/job_template/properties/property/field_set (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_field_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_field_set() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="field-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """field_set must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="field-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__field_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_field_set(self):
    self.__field_set = YANGDynClass(base=unicode, is_leaf=True, yang_name="field-set", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_hint(self):
    """
    Getter method for hint, mapped from YANG variable /templates/job_templates/job_template/properties/property/hint (string)

    YANG Description: string
    """
    return self.__hint
      
  def _set_hint(self, v, load=False):
    """
    Setter method for hint, mapped from YANG variable /templates/job_templates/job_template/properties/property/hint (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hint() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hint must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__hint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hint(self):
    self.__hint = YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_simple_typedef(self):
    """
    Getter method for simple_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/simple_typedef (leafref)

    YANG Description: simple-typedef
    """
    return self.__simple_typedef
      
  def _set_simple_typedef(self, v, load=False):
    """
    Setter method for simple_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/simple_typedef (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_simple_typedef is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_simple_typedef() directly.

    YANG Description: simple-typedef
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="simple-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """simple_typedef must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="simple-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__simple_typedef = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_simple_typedef(self):
    self.__simple_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="simple-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_complex_typedef(self):
    """
    Getter method for complex_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/complex_typedef (leafref)

    YANG Description: complex-typedef
    """
    return self.__complex_typedef
      
  def _set_complex_typedef(self, v, load=False):
    """
    Setter method for complex_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/complex_typedef (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_complex_typedef is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_complex_typedef() directly.

    YANG Description: complex-typedef
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="complex-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """complex_typedef must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="complex-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__complex_typedef = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_complex_typedef(self):
    self.__complex_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="complex-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_dynamic_typedef(self):
    """
    Getter method for dynamic_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/dynamic_typedef (leafref)

    YANG Description: dynamic-typedef
    """
    return self.__dynamic_typedef
      
  def _set_dynamic_typedef(self, v, load=False):
    """
    Setter method for dynamic_typedef, mapped from YANG variable /templates/job_templates/job_template/properties/property/dynamic_typedef (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_typedef is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_typedef() directly.

    YANG Description: dynamic-typedef
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dynamic-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_typedef must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__dynamic_typedef = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_typedef(self):
    self.__dynamic_typedef = YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-typedef", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_pre_provisioned(self):
    """
    Getter method for pre_provisioned, mapped from YANG variable /templates/job_templates/job_template/properties/property/pre_provisioned (boolean)

    YANG Description: pre-provisioned: True/False
    """
    return self.__pre_provisioned
      
  def _set_pre_provisioned(self, v, load=False):
    """
    Setter method for pre_provisioned, mapped from YANG variable /templates/job_templates/job_template/properties/property/pre_provisioned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pre_provisioned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pre_provisioned() directly.

    YANG Description: pre-provisioned: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pre_provisioned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__pre_provisioned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pre_provisioned(self):
    self.__pre_provisioned = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="pre-provisioned", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_property_dependencies(self):
    """
    Getter method for property_dependencies, mapped from YANG variable /templates/job_templates/job_template/properties/property/property_dependencies (container)
    """
    return self.__property_dependencies
      
  def _set_property_dependencies(self, v, load=False):
    """
    Setter method for property_dependencies, mapped from YANG variable /templates/job_templates/job_template/properties/property/property_dependencies (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_property_dependencies is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_property_dependencies() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=property_dependencies.property_dependencies, is_container='container', yang_name="property-dependencies", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """property_dependencies must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=property_dependencies.property_dependencies, is_container='container', yang_name="property-dependencies", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__property_dependencies = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_property_dependencies(self):
    self.__property_dependencies = YANGDynClass(base=property_dependencies.property_dependencies, is_container='container', yang_name="property-dependencies", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_device_platforms(self):
    """
    Getter method for device_platforms, mapped from YANG variable /templates/job_templates/job_template/properties/property/device_platforms (string)

    YANG Description: string
    """
    return self.__device_platforms
      
  def _set_device_platforms(self, v, load=False):
    """
    Setter method for device_platforms, mapped from YANG variable /templates/job_templates/job_template/properties/property/device_platforms (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_platforms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_platforms() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_platforms must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_platforms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_platforms(self):
    self.__device_platforms = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-platforms", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  mandatory = __builtin__.property(_get_mandatory, _set_mandatory)
  default_value = __builtin__.property(_get_default_value, _set_default_value)
  updatable = __builtin__.property(_get_updatable, _set_updatable)
  customizable = __builtin__.property(_get_customizable, _set_customizable)
  readonly = __builtin__.property(_get_readonly, _set_readonly)
  admin_property = __builtin__.property(_get_admin_property, _set_admin_property)
  custom_property = __builtin__.property(_get_custom_property, _set_custom_property)
  vendor_property = __builtin__.property(_get_vendor_property, _set_vendor_property)
  show_at_main_feature = __builtin__.property(_get_show_at_main_feature, _set_show_at_main_feature)
  context = __builtin__.property(_get_context, _set_context)
  sequence_number = __builtin__.property(_get_sequence_number, _set_sequence_number)
  multiplicity = __builtin__.property(_get_multiplicity, _set_multiplicity)
  label = __builtin__.property(_get_label, _set_label)
  field_set = __builtin__.property(_get_field_set, _set_field_set)
  hint = __builtin__.property(_get_hint, _set_hint)
  simple_typedef = __builtin__.property(_get_simple_typedef, _set_simple_typedef)
  complex_typedef = __builtin__.property(_get_complex_typedef, _set_complex_typedef)
  dynamic_typedef = __builtin__.property(_get_dynamic_typedef, _set_dynamic_typedef)
  pre_provisioned = __builtin__.property(_get_pre_provisioned, _set_pre_provisioned)
  property_dependencies = __builtin__.property(_get_property_dependencies, _set_property_dependencies)
  device_platforms = __builtin__.property(_get_device_platforms, _set_device_platforms)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('mandatory', mandatory), ('default_value', default_value), ('updatable', updatable), ('customizable', customizable), ('readonly', readonly), ('admin_property', admin_property), ('custom_property', custom_property), ('vendor_property', vendor_property), ('show_at_main_feature', show_at_main_feature), ('context', context), ('sequence_number', sequence_number), ('multiplicity', multiplicity), ('label', label), ('field_set', field_set), ('hint', hint), ('simple_typedef', simple_typedef), ('complex_typedef', complex_typedef), ('dynamic_typedef', dynamic_typedef), ('pre_provisioned', pre_provisioned), ('property_dependencies', property_dependencies), ('device_platforms', device_platforms), ])


