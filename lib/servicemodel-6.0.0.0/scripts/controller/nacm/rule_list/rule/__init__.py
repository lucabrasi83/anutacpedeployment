
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class rule(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /nacm/rule-list/rule. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: One access control rule.

Rules are processed in user-defined order until a match is
found.  A rule matches if 'rule-type', and
'access-operations' match the request.  If a rule
matches, the 'action' leaf determines if access is granted
or not.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__module_name_','__rpc_name','__path','__access_operations','__action','__cascade','__comment',)

  _yang_name = 'rule'
  _module_name = 'ietf-netconf-acm'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__comment = YANGDynClass(base=unicode, is_leaf=True, yang_name="comment", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..max']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cascade = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="cascade", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__access_operations = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="access-operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    self.__path = YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, choice=(u'rule-type', u'data-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='node-instance-identifier', is_config=True)
    self.__rpc_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'rule-type', u'protocol-operation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)
    self.__module_name_ = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="module-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'nacm', u'rule-list', u'rule']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /nacm/rule_list/rule/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /nacm/rule_list/rule/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..max']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..max']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..max']}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_module_name_(self):
    """
    Getter method for module_name_, mapped from YANG variable /nacm/rule_list/rule/module_name (union)

    YANG Description: Name of the module associated with this rule.

This leaf matches if it has the value '*' or if the
object being accessed is defined in the module with the
specified module name.
    """
    return self.__module_name_
      
  def _set_module_name_(self, v, load=False):
    """
    Setter method for module_name_, mapped from YANG variable /nacm/rule_list/rule/module_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_module_name_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_module_name_() directly.

    YANG Description: Name of the module associated with this rule.

This leaf matches if it has the value '*' or if the
object being accessed is defined in the module with the
specified module name.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="module-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """module_name_ must be of a type compatible with union""",
          'defined-type': "controller:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="module-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)""",
        })

    self.__module_name_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_module_name_(self):
    self.__module_name_ = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="module-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)


  def _get_rpc_name(self):
    """
    Getter method for rpc_name, mapped from YANG variable /nacm/rule_list/rule/rpc_name (union)

    YANG Description: This leaf matches if it has the value '*' or if
its value equals the requested protocol operation
name.
    """
    return self.__rpc_name
      
  def _set_rpc_name(self, v, load=False):
    """
    Setter method for rpc_name, mapped from YANG variable /nacm/rule_list/rule/rpc_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rpc_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rpc_name() directly.

    YANG Description: This leaf matches if it has the value '*' or if
its value equals the requested protocol operation
name.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'rule-type', u'protocol-operation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rpc_name must be of a type compatible with union""",
          'defined-type': "controller:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'rule-type', u'protocol-operation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)""",
        })

    self.__rpc_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rpc_name(self):
    self.__rpc_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'rule-type', u'protocol-operation'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)


  def _get_path(self):
    """
    Getter method for path, mapped from YANG variable /nacm/rule_list/rule/path (node-instance-identifier)

    YANG Description: Data Node Instance Identifier associated with the
data node controlled by this rule.

Configuration data or state data instance
identifiers start with a top-level data node.  A
complete instance identifier is required for this
type of path value.

The special value '/' refers to all possible
datastore contents.
    """
    return self.__path
      
  def _set_path(self, v, load=False):
    """
    Setter method for path, mapped from YANG variable /nacm/rule_list/rule/path (node-instance-identifier)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path() directly.

    YANG Description: Data Node Instance Identifier associated with the
data node controlled by this rule.

Configuration data or state data instance
identifiers start with a top-level data node.  A
complete instance identifier is required for this
type of path value.

The special value '/' refers to all possible
datastore contents.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, choice=(u'rule-type', u'data-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='node-instance-identifier', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path must be of a type compatible with node-instance-identifier""",
          'defined-type': "controller:node-instance-identifier",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, choice=(u'rule-type', u'data-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='node-instance-identifier', is_config=True)""",
        })

    self.__path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path(self):
    self.__path = YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, choice=(u'rule-type', u'data-node'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='node-instance-identifier', is_config=True)


  def _get_access_operations(self):
    """
    Getter method for access_operations, mapped from YANG variable /nacm/rule_list/rule/access_operations (union)

    YANG Description: Access operations associated with this rule.

This leaf matches if it has the value '*' or if the
bit corresponding to the requested operation is set.
    """
    return self.__access_operations
      
  def _set_access_operations(self, v, load=False):
    """
    Setter method for access_operations, mapped from YANG variable /nacm/rule_list/rule/access_operations (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_access_operations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_access_operations() directly.

    YANG Description: Access operations associated with this rule.

This leaf matches if it has the value '*' or if the
bit corresponding to the requested operation is set.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="access-operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """access_operations must be of a type compatible with union""",
          'defined-type': "controller:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="access-operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)""",
        })

    self.__access_operations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_access_operations(self):
    self.__access_operations = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\*'}),unicode,], default=unicode("*"), is_leaf=True, yang_name="access-operations", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='union', is_config=True)


  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /nacm/rule_list/rule/action (action-type)

    YANG Description: The access control action associated with the
rule.  If a rule is determined to match a
particular request, then this object is used
to determine whether to permit or deny the
request.
    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /nacm/rule_list/rule/action (action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.

    YANG Description: The access control action associated with the
rule.  If a rule is determined to match a
particular request, then this object is used
to determine whether to permit or deny the
request.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with action-type""",
          'defined-type': "controller:action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), is_leaf=True, yang_name="action", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)


  def _get_cascade(self):
    """
    Getter method for cascade, mapped from YANG variable /nacm/rule_list/rule/cascade (boolean)

    YANG Description: When cascade is false, the rule is not automatically applied to the sub tree of the affected objects
    """
    return self.__cascade
      
  def _set_cascade(self, v, load=False):
    """
    Setter method for cascade, mapped from YANG variable /nacm/rule_list/rule/cascade (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cascade is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cascade() directly.

    YANG Description: When cascade is false, the rule is not automatically applied to the sub tree of the affected objects
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="cascade", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cascade must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="cascade", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__cascade = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cascade(self):
    self.__cascade = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="cascade", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_comment(self):
    """
    Getter method for comment, mapped from YANG variable /nacm/rule_list/rule/comment (string)

    YANG Description: A textual description of the access rule.
    """
    return self.__comment
      
  def _set_comment(self, v, load=False):
    """
    Setter method for comment, mapped from YANG variable /nacm/rule_list/rule/comment (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_comment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_comment() directly.

    YANG Description: A textual description of the access rule.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="comment", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """comment must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="comment", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__comment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_comment(self):
    self.__comment = YANGDynClass(base=unicode, is_leaf=True, yang_name="comment", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  module_name_ = __builtin__.property(_get_module_name_, _set_module_name_)
  rpc_name = __builtin__.property(_get_rpc_name, _set_rpc_name)
  path = __builtin__.property(_get_path, _set_path)
  access_operations = __builtin__.property(_get_access_operations, _set_access_operations)
  action = __builtin__.property(_get_action, _set_action)
  cascade = __builtin__.property(_get_cascade, _set_cascade)
  comment = __builtin__.property(_get_comment, _set_comment)

  __choices__ = {u'rule-type': {u'protocol-operation': [u'rpc_name'], u'data-node': [u'path']}}
  _pyangbind_elements = collections.OrderedDict([('name', name), ('module_name_', module_name_), ('rpc_name', rpc_name), ('path', path), ('access_operations', access_operations), ('action', action), ('cascade', cascade), ('comment', comment), ])


