
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import groups
import rule_list
class nacm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /nacm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__enable_nacm','__read_default','__write_default','__exec_default','__enable_external_groups','__groups','__rule_list',)

  _yang_name = 'nacm'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__rule_list = YANGDynClass(base=YANGListType("name",rule_list.rule_list, yang_name="rule-list", module_name="controller", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="rule-list", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__write_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="write-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    self.__enable_external_groups = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-external-groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__enable_nacm = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-nacm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__groups = YANGDynClass(base=groups.groups, is_container='container', yang_name="groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__exec_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="exec-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    self.__read_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("permit"), is_leaf=True, yang_name="read-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'nacm']

  def _get_enable_nacm(self):
    """
    Getter method for enable_nacm, mapped from YANG variable /nacm/enable_nacm (boolean)

    YANG Description: Enables or disables all NETCONF access control
enforcement.  If 'true', then enforcement
is enabled.  If 'false', then enforcement
is disabled.
    """
    return self.__enable_nacm
      
  def _set_enable_nacm(self, v, load=False):
    """
    Setter method for enable_nacm, mapped from YANG variable /nacm/enable_nacm (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_nacm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_nacm() directly.

    YANG Description: Enables or disables all NETCONF access control
enforcement.  If 'true', then enforcement
is enabled.  If 'false', then enforcement
is disabled.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-nacm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_nacm must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-nacm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_nacm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_nacm(self):
    self.__enable_nacm = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-nacm", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_read_default(self):
    """
    Getter method for read_default, mapped from YANG variable /nacm/read_default (action-type)

    YANG Description: Controls whether read access is granted if
no appropriate rule is found for a
particular read request.
    """
    return self.__read_default
      
  def _set_read_default(self, v, load=False):
    """
    Setter method for read_default, mapped from YANG variable /nacm/read_default (action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_read_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_read_default() directly.

    YANG Description: Controls whether read access is granted if
no appropriate rule is found for a
particular read request.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("permit"), is_leaf=True, yang_name="read-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """read_default must be of a type compatible with action-type""",
          'defined-type': "controller:action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("permit"), is_leaf=True, yang_name="read-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)""",
        })

    self.__read_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_read_default(self):
    self.__read_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("permit"), is_leaf=True, yang_name="read-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)


  def _get_write_default(self):
    """
    Getter method for write_default, mapped from YANG variable /nacm/write_default (action-type)

    YANG Description: Controls whether create, update, or delete access
is granted if no appropriate rule is found for a
particular write request.
    """
    return self.__write_default
      
  def _set_write_default(self, v, load=False):
    """
    Setter method for write_default, mapped from YANG variable /nacm/write_default (action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_write_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_write_default() directly.

    YANG Description: Controls whether create, update, or delete access
is granted if no appropriate rule is found for a
particular write request.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="write-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """write_default must be of a type compatible with action-type""",
          'defined-type': "controller:action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="write-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)""",
        })

    self.__write_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_write_default(self):
    self.__write_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="write-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)


  def _get_exec_default(self):
    """
    Getter method for exec_default, mapped from YANG variable /nacm/exec_default (action-type)

    YANG Description: Controls whether exec access is granted if no appropriate
rule is found for a particular protocol operation request.
    """
    return self.__exec_default
      
  def _set_exec_default(self, v, load=False):
    """
    Setter method for exec_default, mapped from YANG variable /nacm/exec_default (action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exec_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exec_default() directly.

    YANG Description: Controls whether exec access is granted if no appropriate
rule is found for a particular protocol operation request.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="exec-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exec_default must be of a type compatible with action-type""",
          'defined-type': "controller:action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="exec-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)""",
        })

    self.__exec_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exec_default(self):
    self.__exec_default = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {}, u'permit': {}},), default=unicode("deny"), is_leaf=True, yang_name="exec-default", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='action-type', is_config=True)


  def _get_enable_external_groups(self):
    """
    Getter method for enable_external_groups, mapped from YANG variable /nacm/enable_external_groups (boolean)

    YANG Description: Controls whether the server uses the groups reported by the
NETCONF transport layer when it assigns the user to a set of
NACM groups.  If this leaf has the value 'false', any group
names reported by the transport layer are ignored by the
server.
    """
    return self.__enable_external_groups
      
  def _set_enable_external_groups(self, v, load=False):
    """
    Setter method for enable_external_groups, mapped from YANG variable /nacm/enable_external_groups (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_external_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_external_groups() directly.

    YANG Description: Controls whether the server uses the groups reported by the
NETCONF transport layer when it assigns the user to a set of
NACM groups.  If this leaf has the value 'false', any group
names reported by the transport layer are ignored by the
server.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-external-groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_external_groups must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-external-groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__enable_external_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_external_groups(self):
    self.__enable_external_groups = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable-external-groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_groups(self):
    """
    Getter method for groups, mapped from YANG variable /nacm/groups (container)

    YANG Description: NETCONF Access Control Groups.
    """
    return self.__groups
      
  def _set_groups(self, v, load=False):
    """
    Setter method for groups, mapped from YANG variable /nacm/groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_groups() directly.

    YANG Description: NETCONF Access Control Groups.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=groups.groups, is_container='container', yang_name="groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=groups.groups, is_container='container', yang_name="groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_groups(self):
    self.__groups = YANGDynClass(base=groups.groups, is_container='container', yang_name="groups", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_rule_list(self):
    """
    Getter method for rule_list, mapped from YANG variable /nacm/rule_list (list)

    YANG Description: An ordered collection of access control rules.
    """
    return self.__rule_list
      
  def _set_rule_list(self, v, load=False):
    """
    Setter method for rule_list, mapped from YANG variable /nacm/rule_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rule_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rule_list() directly.

    YANG Description: An ordered collection of access control rules.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",rule_list.rule_list, yang_name="rule-list", module_name="controller", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="rule-list", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rule_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",rule_list.rule_list, yang_name="rule-list", module_name="controller", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="rule-list", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__rule_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rule_list(self):
    self.__rule_list = YANGDynClass(base=YANGListType("name",rule_list.rule_list, yang_name="rule-list", module_name="controller", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name'), is_container='list', yang_name="rule-list", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)

  enable_nacm = __builtin__.property(_get_enable_nacm, _set_enable_nacm)
  read_default = __builtin__.property(_get_read_default, _set_read_default)
  write_default = __builtin__.property(_get_write_default, _set_write_default)
  exec_default = __builtin__.property(_get_exec_default, _set_exec_default)
  enable_external_groups = __builtin__.property(_get_enable_external_groups)
  groups = __builtin__.property(_get_groups, _set_groups)
  rule_list = __builtin__.property(_get_rule_list, _set_rule_list)


  _pyangbind_elements = collections.OrderedDict([('enable_nacm', enable_nacm), ('read_default', read_default), ('write_default', write_default), ('exec_default', exec_default), ('enable_external_groups', enable_external_groups), ('groups', groups), ('rule_list', rule_list), ])


