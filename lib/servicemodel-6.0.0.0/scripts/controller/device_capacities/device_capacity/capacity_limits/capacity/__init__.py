
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class capacity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module capacities - based on the path /device-capacities/device-capacity/capacity-limits/capacity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__capacity_type','__max_limit','__entity','__description',)

  _yang_name = 'capacity'
  _module_name = 'capacities'
  _namespace = 'http://anutanetworks.com/capacities'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__max_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="max-limit", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)
    self.__capacity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=True)
    self.__entity = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="entity", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:schemapath', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'device-capacities', u'device-capacity', u'capacity-limits', u'capacity']

  def _get_capacity_type(self):
    """
    Getter method for capacity_type, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/capacity_type (leafref)

    YANG Description: capacity-type
    """
    return self.__capacity_type
      
  def _set_capacity_type(self, v, load=False):
    """
    Setter method for capacity_type, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/capacity_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capacity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capacity_type() directly.

    YANG Description: capacity-type
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capacity_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=True)""",
        })

    self.__capacity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capacity_type(self):
    self.__capacity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=True)


  def _get_max_limit(self):
    """
    Getter method for max_limit, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/max_limit (uint32)

    YANG Description: 1..100000
    """
    return self.__max_limit
      
  def _set_max_limit(self, v, load=False):
    """
    Setter method for max_limit, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/max_limit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_limit() directly.

    YANG Description: 1..100000
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="max-limit", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_limit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="max-limit", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=True)""",
        })

    self.__max_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_limit(self):
    self.__max_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="max-limit", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=True)


  def _get_entity(self):
    """
    Getter method for entity, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/entity (ndt:schemapath)

    YANG Description: string
    """
    return self.__entity
      
  def _set_entity(self, v, load=False):
    """
    Setter method for entity, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/entity (ndt:schemapath)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entity() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="entity", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:schemapath', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entity must be of a type compatible with ndt:schemapath""",
          'defined-type': "ndt:schemapath",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="entity", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:schemapath', is_config=True)""",
        })

    self.__entity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entity(self):
    self.__entity = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="entity", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:schemapath', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /device_capacities/device_capacity/capacity_limits/capacity/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)

  capacity_type = __builtin__.property(_get_capacity_type, _set_capacity_type)
  max_limit = __builtin__.property(_get_max_limit, _set_max_limit)
  entity = __builtin__.property(_get_entity, _set_entity)
  description = __builtin__.property(_get_description, _set_description)


  _pyangbind_elements = collections.OrderedDict([('capacity_type', capacity_type), ('max_limit', max_limit), ('entity', entity), ('description', description), ])


