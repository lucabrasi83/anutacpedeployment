
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class policy(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /service-model/approval-policies/policy. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__service_target','__policy_name','__provision_approval_needed','__delete_approval_needed','__update_approval_needed','__service_approvers','__policy_type','__escalation_threshold',)

  _yang_name = 'policy'
  _module_name = 'servicemodel'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__service_approvers = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="service-approvers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__policy_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="policy-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__service_target = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="service-target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)
    self.__policy_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="policy-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='policy-type', is_config=True)
    self.__update_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__delete_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delete-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__provision_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="provision-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__escalation_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'service-model', u'approval-policies', u'policy']

  def _get_service_target(self):
    """
    Getter method for service_target, mapped from YANG variable /service_model/approval_policies/policy/service_target (ndt:schemapath)

    YANG Description: string
    """
    return self.__service_target
      
  def _set_service_target(self, v, load=False):
    """
    Setter method for service_target, mapped from YANG variable /service_model/approval_policies/policy/service_target (ndt:schemapath)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_target is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_target() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="service-target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_target must be of a type compatible with ndt:schemapath""",
          'defined-type': "ndt:schemapath",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="service-target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)""",
        })

    self.__service_target = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_target(self):
    self.__service_target = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="service-target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)


  def _get_policy_name(self):
    """
    Getter method for policy_name, mapped from YANG variable /service_model/approval_policies/policy/policy_name (string)

    YANG Description: Allows AlphaNumerics, hyphen, underscore and space characters only. Max length is 64
    """
    return self.__policy_name
      
  def _set_policy_name(self, v, load=False):
    """
    Setter method for policy_name, mapped from YANG variable /service_model/approval_policies/policy/policy_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_name() directly.

    YANG Description: Allows AlphaNumerics, hyphen, underscore and space characters only. Max length is 64
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="policy-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="policy-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__policy_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_name(self):
    self.__policy_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9_\\s-]+$', 'length': [u'1..64']}), is_leaf=True, yang_name="policy-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_provision_approval_needed(self):
    """
    Getter method for provision_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/provision_approval_needed (boolean)

    YANG Description: provision-approval-needed: True/False
    """
    return self.__provision_approval_needed
      
  def _set_provision_approval_needed(self, v, load=False):
    """
    Setter method for provision_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/provision_approval_needed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_provision_approval_needed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_provision_approval_needed() directly.

    YANG Description: provision-approval-needed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="provision-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """provision_approval_needed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="provision-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__provision_approval_needed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_provision_approval_needed(self):
    self.__provision_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="provision-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_delete_approval_needed(self):
    """
    Getter method for delete_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/delete_approval_needed (boolean)

    YANG Description: delete-approval-needed: True/False
    """
    return self.__delete_approval_needed
      
  def _set_delete_approval_needed(self, v, load=False):
    """
    Setter method for delete_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/delete_approval_needed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delete_approval_needed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delete_approval_needed() directly.

    YANG Description: delete-approval-needed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delete-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delete_approval_needed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delete-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__delete_approval_needed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delete_approval_needed(self):
    self.__delete_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="delete-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_update_approval_needed(self):
    """
    Getter method for update_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/update_approval_needed (boolean)

    YANG Description: update-approval-needed: True/False
    """
    return self.__update_approval_needed
      
  def _set_update_approval_needed(self, v, load=False):
    """
    Setter method for update_approval_needed, mapped from YANG variable /service_model/approval_policies/policy/update_approval_needed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_approval_needed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_approval_needed() directly.

    YANG Description: update-approval-needed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_approval_needed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__update_approval_needed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_approval_needed(self):
    self.__update_approval_needed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="update-approval-needed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_service_approvers(self):
    """
    Getter method for service_approvers, mapped from YANG variable /service_model/approval_policies/policy/service_approvers (leafref)

    YANG Description: Select one approver for a policy
    """
    return self.__service_approvers
      
  def _set_service_approvers(self, v, load=False):
    """
    Setter method for service_approvers, mapped from YANG variable /service_model/approval_policies/policy/service_approvers (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_approvers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_approvers() directly.

    YANG Description: Select one approver for a policy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="service-approvers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_approvers must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="service-approvers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__service_approvers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_approvers(self):
    self.__service_approvers = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="service-approvers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_policy_type(self):
    """
    Getter method for policy_type, mapped from YANG variable /service_model/approval_policies/policy/policy_type (policy-type)

    YANG Description: Type of policy to proceed with approval
    """
    return self.__policy_type
      
  def _set_policy_type(self, v, load=False):
    """
    Setter method for policy_type, mapped from YANG variable /service_model/approval_policies/policy/policy_type (policy-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_type() directly.

    YANG Description: Type of policy to proceed with approval
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="policy-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='policy-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_type must be of a type compatible with policy-type""",
          'defined-type': "controller:policy-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="policy-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='policy-type', is_config=True)""",
        })

    self.__policy_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_type(self):
    self.__policy_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ANY_ONE': {}, u'ALL': {}},), is_leaf=True, yang_name="policy-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='policy-type', is_config=True)


  def _get_escalation_threshold(self):
    """
    Getter method for escalation_threshold, mapped from YANG variable /service_model/approval_policies/policy/escalation_threshold (uint16)

    YANG Description: Number of days to wait before escalating
    """
    return self.__escalation_threshold
      
  def _set_escalation_threshold(self, v, load=False):
    """
    Setter method for escalation_threshold, mapped from YANG variable /service_model/approval_policies/policy/escalation_threshold (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_escalation_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_escalation_threshold() directly.

    YANG Description: Number of days to wait before escalating
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """escalation_threshold must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__escalation_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_escalation_threshold(self):
    self.__escalation_threshold = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="escalation-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)

  service_target = __builtin__.property(_get_service_target, _set_service_target)
  policy_name = __builtin__.property(_get_policy_name, _set_policy_name)
  provision_approval_needed = __builtin__.property(_get_provision_approval_needed, _set_provision_approval_needed)
  delete_approval_needed = __builtin__.property(_get_delete_approval_needed, _set_delete_approval_needed)
  update_approval_needed = __builtin__.property(_get_update_approval_needed, _set_update_approval_needed)
  service_approvers = __builtin__.property(_get_service_approvers, _set_service_approvers)
  policy_type = __builtin__.property(_get_policy_type, _set_policy_type)
  escalation_threshold = __builtin__.property(_get_escalation_threshold, _set_escalation_threshold)


  _pyangbind_elements = collections.OrderedDict([('service_target', service_target), ('policy_name', policy_name), ('provision_approval_needed', provision_approval_needed), ('delete_approval_needed', delete_approval_needed), ('update_approval_needed', update_approval_needed), ('service_approvers', service_approvers), ('policy_type', policy_type), ('escalation_threshold', escalation_threshold), ])


