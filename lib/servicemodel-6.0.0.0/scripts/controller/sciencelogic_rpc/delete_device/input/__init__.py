
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import device_ips
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module sciencelogic - based on the path /sciencelogic_rpc/delete-device/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__device_id','__cidn','__community','__collector','__sourceSystem','__device_ips',)

  _yang_name = 'input'
  _module_name = 'sciencelogic'
  _namespace = 'http://anutanetworks.com/sciencelogic'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cidn = YANGDynClass(base=unicode, is_leaf=True, yang_name="cidn", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    self.__sourceSystem = YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceSystem", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='leafref', is_config=True)
    self.__collector = YANGDynClass(base=unicode, is_leaf=True, yang_name="collector", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    self.__device_ips = YANGDynClass(base=YANGListType("device_ip",device_ips.device_ips, yang_name="device-ips", module_name="sciencelogic", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='device-ip'), is_container='list', yang_name="device-ips", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sciencelogic_rpc', u'delete-device', u'input']

  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /sciencelogic_rpc/delete_device/input/device_id (leafref)

    YANG Description: device-id
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /sciencelogic_rpc/delete_device/input/device_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: device-id
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='leafref', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='leafref', is_config=True)


  def _get_cidn(self):
    """
    Getter method for cidn, mapped from YANG variable /sciencelogic_rpc/delete_device/input/cidn (string)

    YANG Description: string
    """
    return self.__cidn
      
  def _set_cidn(self, v, load=False):
    """
    Setter method for cidn, mapped from YANG variable /sciencelogic_rpc/delete_device/input/cidn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cidn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cidn() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cidn", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cidn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cidn", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)""",
        })

    self.__cidn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cidn(self):
    self.__cidn = YANGDynClass(base=unicode, is_leaf=True, yang_name="cidn", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)


  def _get_community(self):
    """
    Getter method for community, mapped from YANG variable /sciencelogic_rpc/delete_device/input/community (string)

    YANG Description: string
    """
    return self.__community
      
  def _set_community(self, v, load=False):
    """
    Setter method for community, mapped from YANG variable /sciencelogic_rpc/delete_device/input/community (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_community is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_community() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="community", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """community must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)""",
        })

    self.__community = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_community(self):
    self.__community = YANGDynClass(base=unicode, is_leaf=True, yang_name="community", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)


  def _get_collector(self):
    """
    Getter method for collector, mapped from YANG variable /sciencelogic_rpc/delete_device/input/collector (string)

    YANG Description: string
    """
    return self.__collector
      
  def _set_collector(self, v, load=False):
    """
    Setter method for collector, mapped from YANG variable /sciencelogic_rpc/delete_device/input/collector (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_collector is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_collector() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="collector", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """collector must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="collector", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)""",
        })

    self.__collector = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_collector(self):
    self.__collector = YANGDynClass(base=unicode, is_leaf=True, yang_name="collector", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)


  def _get_sourceSystem(self):
    """
    Getter method for sourceSystem, mapped from YANG variable /sciencelogic_rpc/delete_device/input/sourceSystem (string)

    YANG Description: string
    """
    return self.__sourceSystem
      
  def _set_sourceSystem(self, v, load=False):
    """
    Setter method for sourceSystem, mapped from YANG variable /sciencelogic_rpc/delete_device/input/sourceSystem (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sourceSystem is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sourceSystem() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="sourceSystem", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sourceSystem must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceSystem", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)""",
        })

    self.__sourceSystem = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sourceSystem(self):
    self.__sourceSystem = YANGDynClass(base=unicode, is_leaf=True, yang_name="sourceSystem", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='string', is_config=True)


  def _get_device_ips(self):
    """
    Getter method for device_ips, mapped from YANG variable /sciencelogic_rpc/delete_device/input/device_ips (list)
    """
    return self.__device_ips
      
  def _set_device_ips(self, v, load=False):
    """
    Setter method for device_ips, mapped from YANG variable /sciencelogic_rpc/delete_device/input/device_ips (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_ips is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_ips() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("device_ip",device_ips.device_ips, yang_name="device-ips", module_name="sciencelogic", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='device-ip'), is_container='list', yang_name="device-ips", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_ips must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("device_ip",device_ips.device_ips, yang_name="device-ips", module_name="sciencelogic", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='device-ip'), is_container='list', yang_name="device-ips", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='list', is_config=True)""",
        })

    self.__device_ips = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_ips(self):
    self.__device_ips = YANGDynClass(base=YANGListType("device_ip",device_ips.device_ips, yang_name="device-ips", module_name="sciencelogic", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='device-ip'), is_container='list', yang_name="device-ips", module_name="sciencelogic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/sciencelogic', defining_module='sciencelogic', yang_type='list', is_config=True)

  device_id = __builtin__.property(_get_device_id, _set_device_id)
  cidn = __builtin__.property(_get_cidn, _set_cidn)
  community = __builtin__.property(_get_community, _set_community)
  collector = __builtin__.property(_get_collector, _set_collector)
  sourceSystem = __builtin__.property(_get_sourceSystem, _set_sourceSystem)
  device_ips = __builtin__.property(_get_device_ips, _set_device_ips)


  _pyangbind_elements = collections.OrderedDict([('device_id', device_id), ('cidn', cidn), ('community', community), ('collector', collector), ('sourceSystem', sourceSystem), ('device_ips', device_ips), ])


