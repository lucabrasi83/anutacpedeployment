
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import template
class report(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module device-comp - based on the path /compliance-execution-reports/report. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__id','__invocation_by','__template_rcpath','__run_by_user','__start_time','__end_time','__status','__template',)

  _yang_name = 'report'
  _module_name = 'device-comp'
  _namespace = 'http://anutanetworks.com/device-comp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__run_by_user = YANGDynClass(base=unicode, is_leaf=True, yang_name="run-by-user", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__template = YANGDynClass(base=YANGListType("template_name",template.template, yang_name="template", module_name="device-comp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='template-name'), is_container='list', yang_name="template", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='list', is_config=True)
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__end_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__template_rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="template-rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    self.__invocation_by = YANGDynClass(base=unicode, is_leaf=True, yang_name="invocation-by", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'compliance-execution-reports', u'report']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /compliance_execution_reports/report/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /compliance_execution_reports/report/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_invocation_by(self):
    """
    Getter method for invocation_by, mapped from YANG variable /compliance_execution_reports/report/invocation_by (string)

    YANG Description: string
    """
    return self.__invocation_by
      
  def _set_invocation_by(self, v, load=False):
    """
    Setter method for invocation_by, mapped from YANG variable /compliance_execution_reports/report/invocation_by (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invocation_by is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invocation_by() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="invocation-by", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invocation_by must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="invocation-by", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__invocation_by = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invocation_by(self):
    self.__invocation_by = YANGDynClass(base=unicode, is_leaf=True, yang_name="invocation-by", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_template_rcpath(self):
    """
    Getter method for template_rcpath, mapped from YANG variable /compliance_execution_reports/report/template_rcpath (string)

    YANG Description: string
    """
    return self.__template_rcpath
      
  def _set_template_rcpath(self, v, load=False):
    """
    Setter method for template_rcpath, mapped from YANG variable /compliance_execution_reports/report/template_rcpath (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_template_rcpath is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_template_rcpath() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="template-rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """template_rcpath must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="template-rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__template_rcpath = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_template_rcpath(self):
    self.__template_rcpath = YANGDynClass(base=unicode, is_leaf=True, yang_name="template-rcpath", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_run_by_user(self):
    """
    Getter method for run_by_user, mapped from YANG variable /compliance_execution_reports/report/run_by_user (string)

    YANG Description: string
    """
    return self.__run_by_user
      
  def _set_run_by_user(self, v, load=False):
    """
    Setter method for run_by_user, mapped from YANG variable /compliance_execution_reports/report/run_by_user (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_run_by_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_run_by_user() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="run-by-user", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """run_by_user must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="run-by-user", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__run_by_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_run_by_user(self):
    self.__run_by_user = YANGDynClass(base=unicode, is_leaf=True, yang_name="run-by-user", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /compliance_execution_reports/report/start_time (string)

    YANG Description: string
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /compliance_execution_reports/report/start_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_end_time(self):
    """
    Getter method for end_time, mapped from YANG variable /compliance_execution_reports/report/end_time (string)

    YANG Description: string
    """
    return self.__end_time
      
  def _set_end_time(self, v, load=False):
    """
    Setter method for end_time, mapped from YANG variable /compliance_execution_reports/report/end_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="end-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__end_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_time(self):
    self.__end_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="end-time", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /compliance_execution_reports/report/status (string)

    YANG Description: string
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /compliance_execution_reports/report/status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="status", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='string', is_config=True)


  def _get_template(self):
    """
    Getter method for template, mapped from YANG variable /compliance_execution_reports/report/template (list)
    """
    return self.__template
      
  def _set_template(self, v, load=False):
    """
    Setter method for template, mapped from YANG variable /compliance_execution_reports/report/template (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_template is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_template() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("template_name",template.template, yang_name="template", module_name="device-comp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='template-name'), is_container='list', yang_name="template", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """template must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("template_name",template.template, yang_name="template", module_name="device-comp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='template-name'), is_container='list', yang_name="template", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='list', is_config=True)""",
        })

    self.__template = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_template(self):
    self.__template = YANGDynClass(base=YANGListType("template_name",template.template, yang_name="template", module_name="device-comp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='template-name'), is_container='list', yang_name="template", module_name="device-comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/device-comp', defining_module='device-comp', yang_type='list', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  invocation_by = __builtin__.property(_get_invocation_by, _set_invocation_by)
  template_rcpath = __builtin__.property(_get_template_rcpath, _set_template_rcpath)
  run_by_user = __builtin__.property(_get_run_by_user, _set_run_by_user)
  start_time = __builtin__.property(_get_start_time, _set_start_time)
  end_time = __builtin__.property(_get_end_time, _set_end_time)
  status = __builtin__.property(_get_status, _set_status)
  template = __builtin__.property(_get_template, _set_template)


  _pyangbind_elements = collections.OrderedDict([('id', id), ('invocation_by', invocation_by), ('template_rcpath', template_rcpath), ('run_by_user', run_by_user), ('start_time', start_time), ('end_time', end_time), ('status', status), ('template', template), ])


