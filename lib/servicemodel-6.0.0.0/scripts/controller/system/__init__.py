
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import server_config
import agent_config
import file_sync
import internal
import tables
class system(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__server_config','__agent_config','__file_sync','__internal','__tables',)

  _yang_name = 'system'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__agent_config = YANGDynClass(base=agent_config.agent_config, is_container='container', yang_name="agent-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__tables = YANGDynClass(base=tables.tables, is_container='container', yang_name="tables", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__server_config = YANGDynClass(base=server_config.server_config, is_container='container', yang_name="server-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__file_sync = YANGDynClass(base=file_sync.file_sync, is_container='container', yang_name="file-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__internal = YANGDynClass(base=internal.internal, is_container='container', yang_name="internal", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system']

  def _get_server_config(self):
    """
    Getter method for server_config, mapped from YANG variable /system/server_config (container)
    """
    return self.__server_config
      
  def _set_server_config(self, v, load=False):
    """
    Setter method for server_config, mapped from YANG variable /system/server_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_server_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_server_config() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=server_config.server_config, is_container='container', yang_name="server-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """server_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=server_config.server_config, is_container='container', yang_name="server-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__server_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_server_config(self):
    self.__server_config = YANGDynClass(base=server_config.server_config, is_container='container', yang_name="server-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_agent_config(self):
    """
    Getter method for agent_config, mapped from YANG variable /system/agent_config (container)
    """
    return self.__agent_config
      
  def _set_agent_config(self, v, load=False):
    """
    Setter method for agent_config, mapped from YANG variable /system/agent_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_agent_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_agent_config() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=agent_config.agent_config, is_container='container', yang_name="agent-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """agent_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=agent_config.agent_config, is_container='container', yang_name="agent-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__agent_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_agent_config(self):
    self.__agent_config = YANGDynClass(base=agent_config.agent_config, is_container='container', yang_name="agent-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_file_sync(self):
    """
    Getter method for file_sync, mapped from YANG variable /system/file_sync (container)
    """
    return self.__file_sync
      
  def _set_file_sync(self, v, load=False):
    """
    Setter method for file_sync, mapped from YANG variable /system/file_sync (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_file_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_file_sync() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=file_sync.file_sync, is_container='container', yang_name="file-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """file_sync must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=file_sync.file_sync, is_container='container', yang_name="file-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__file_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_file_sync(self):
    self.__file_sync = YANGDynClass(base=file_sync.file_sync, is_container='container', yang_name="file-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_internal(self):
    """
    Getter method for internal, mapped from YANG variable /system/internal (container)
    """
    return self.__internal
      
  def _set_internal(self, v, load=False):
    """
    Setter method for internal, mapped from YANG variable /system/internal (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_internal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_internal() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=internal.internal, is_container='container', yang_name="internal", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """internal must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=internal.internal, is_container='container', yang_name="internal", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__internal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_internal(self):
    self.__internal = YANGDynClass(base=internal.internal, is_container='container', yang_name="internal", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_tables(self):
    """
    Getter method for tables, mapped from YANG variable /system/tables (container)
    """
    return self.__tables
      
  def _set_tables(self, v, load=False):
    """
    Setter method for tables, mapped from YANG variable /system/tables (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tables is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tables() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=tables.tables, is_container='container', yang_name="tables", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tables must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=tables.tables, is_container='container', yang_name="tables", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__tables = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tables(self):
    self.__tables = YANGDynClass(base=tables.tables, is_container='container', yang_name="tables", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  server_config = __builtin__.property(_get_server_config, _set_server_config)
  agent_config = __builtin__.property(_get_agent_config, _set_agent_config)
  file_sync = __builtin__.property(_get_file_sync, _set_file_sync)
  internal = __builtin__.property(_get_internal, _set_internal)
  tables = __builtin__.property(_get_tables, _set_tables)


  _pyangbind_elements = collections.OrderedDict([('server_config', server_config), ('agent_config', agent_config), ('file_sync', file_sync), ('internal', internal), ('tables', tables), ])


