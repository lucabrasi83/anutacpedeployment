
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class role_to_permission(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/role-to-permissions/role-to-permission. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__role_to_permission_id','__deleted','__context','__role_id','__permission','__name','__row_version',)

  _yang_name = 'role-to-permission'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__permission = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permission", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__deleted = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__role_to_permission_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="role-to-permission-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__role_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="role-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__row_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="row-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'role-to-permissions', u'role-to-permission']

  def _get_role_to_permission_id(self):
    """
    Getter method for role_to_permission_id, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/role_to_permission_id (string)

    YANG Description: string
    """
    return self.__role_to_permission_id
      
  def _set_role_to_permission_id(self, v, load=False):
    """
    Setter method for role_to_permission_id, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/role_to_permission_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_to_permission_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_to_permission_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="role-to-permission-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_to_permission_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="role-to-permission-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__role_to_permission_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_to_permission_id(self):
    self.__role_to_permission_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="role-to-permission-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_deleted(self):
    """
    Getter method for deleted, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/deleted (boolean)

    YANG Description: deleted: True/False
    """
    return self.__deleted
      
  def _set_deleted(self, v, load=False):
    """
    Setter method for deleted, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/deleted (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deleted is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deleted() directly.

    YANG Description: deleted: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deleted must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__deleted = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deleted(self):
    self.__deleted = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_context(self):
    """
    Getter method for context, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/context (string)

    YANG Description: string
    """
    return self.__context
      
  def _set_context(self, v, load=False):
    """
    Setter method for context, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/context (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context(self):
    self.__context = YANGDynClass(base=unicode, is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_role_id(self):
    """
    Getter method for role_id, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/role_id (string)

    YANG Description: string
    """
    return self.__role_id
      
  def _set_role_id(self, v, load=False):
    """
    Setter method for role_id, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/role_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="role-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="role-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__role_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_id(self):
    self.__role_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="role-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_permission(self):
    """
    Getter method for permission, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/permission (boolean)

    YANG Description: permission: True/False
    """
    return self.__permission
      
  def _set_permission(self, v, load=False):
    """
    Setter method for permission, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/permission (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_permission is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_permission() directly.

    YANG Description: permission: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="permission", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """permission must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permission", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__permission = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_permission(self):
    self.__permission = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="permission", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_row_version(self):
    """
    Getter method for row_version, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/row_version (uint32)

    YANG Description: 0..4294967295
    """
    return self.__row_version
      
  def _set_row_version(self, v, load=False):
    """
    Setter method for row_version, mapped from YANG variable /system/tables/role_to_permissions/role_to_permission/row_version (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_row_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_row_version() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="row-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """row_version must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="row-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__row_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_row_version(self):
    self.__row_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="row-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

  role_to_permission_id = __builtin__.property(_get_role_to_permission_id, _set_role_to_permission_id)
  deleted = __builtin__.property(_get_deleted, _set_deleted)
  context = __builtin__.property(_get_context, _set_context)
  role_id = __builtin__.property(_get_role_id, _set_role_id)
  permission = __builtin__.property(_get_permission, _set_permission)
  name = __builtin__.property(_get_name, _set_name)
  row_version = __builtin__.property(_get_row_version, _set_row_version)


  _pyangbind_elements = collections.OrderedDict([('role_to_permission_id', role_to_permission_id), ('deleted', deleted), ('context', context), ('role_id', role_id), ('permission', permission), ('name', name), ('row_version', row_version), ])


