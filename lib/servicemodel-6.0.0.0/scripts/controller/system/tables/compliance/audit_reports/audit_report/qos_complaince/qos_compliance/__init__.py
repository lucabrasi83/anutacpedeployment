
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class qos_compliance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/compliance/audit-reports/audit-report/qos-complaince/qos-compliance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__compliance_id','__service_class','__last_executed','__compliant','__device_id',)

  _yang_name = 'qos-compliance'
  _module_name = 'compliance'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__service_class = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-class", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__compliant = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="compliant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__compliance_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="compliance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__last_executed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-executed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'compliance', u'audit-reports', u'audit-report', u'qos-complaince', u'qos-compliance']

  def _get_compliance_id(self):
    """
    Getter method for compliance_id, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/compliance_id (string)

    YANG Description: string
    """
    return self.__compliance_id
      
  def _set_compliance_id(self, v, load=False):
    """
    Setter method for compliance_id, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/compliance_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compliance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compliance_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="compliance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compliance_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="compliance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__compliance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compliance_id(self):
    self.__compliance_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="compliance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_service_class(self):
    """
    Getter method for service_class, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/service_class (string)

    YANG Description: string
    """
    return self.__service_class
      
  def _set_service_class(self, v, load=False):
    """
    Setter method for service_class, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/service_class (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_class is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_class() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="service-class", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_class must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="service-class", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__service_class = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_class(self):
    self.__service_class = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-class", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_last_executed(self):
    """
    Getter method for last_executed, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/last_executed (uint32)

    YANG Description: 0..4294967295
    """
    return self.__last_executed
      
  def _set_last_executed(self, v, load=False):
    """
    Setter method for last_executed, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/last_executed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_executed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_executed() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-executed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_executed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-executed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__last_executed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_executed(self):
    self.__last_executed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-executed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_compliant(self):
    """
    Getter method for compliant, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/compliant (boolean)

    YANG Description: compliant: True/False
    """
    return self.__compliant
      
  def _set_compliant(self, v, load=False):
    """
    Setter method for compliant, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/compliant (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_compliant is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_compliant() directly.

    YANG Description: compliant: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="compliant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """compliant must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="compliant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__compliant = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_compliant(self):
    self.__compliant = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="compliant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/device_id (string)

    YANG Description: string
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /system/tables/compliance/audit_reports/audit_report/qos_complaince/qos_compliance/device_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  compliance_id = __builtin__.property(_get_compliance_id, _set_compliance_id)
  service_class = __builtin__.property(_get_service_class, _set_service_class)
  last_executed = __builtin__.property(_get_last_executed, _set_last_executed)
  compliant = __builtin__.property(_get_compliant, _set_compliant)
  device_id = __builtin__.property(_get_device_id, _set_device_id)


  _pyangbind_elements = collections.OrderedDict([('compliance_id', compliance_id), ('service_class', service_class), ('last_executed', last_executed), ('compliant', compliant), ('device_id', device_id), ])


