
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class naas_event_spec(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/naas-event-specs/naas-event-spec. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__label','__user_visible','__event_source_type','__event_severity','__event_category_spec',)

  _yang_name = 'naas-event-spec'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_DELETE_OPERATION_START': {}, u'MONGODB_DISCONNECTED': {}, u'ALL_DEVICES_DISABLE_SNMPTRAPS': {}, u'STALE_INTERFACE_DATA': {}, u'STALE_DEVICE_DATA': {}, u'LICENSE_DEVICE_LIMIT_EXCEEDED': {}, u'PENDING_APPROVAL_ESCALATION': {}, u'OPENLDAP_CONNECTION_FAILURE': {}, u'CONFIG_OUT_OF_SYNC': {}, u'SERVICE_CREATE_OPERATION_END': {}, u'STALE_CLUSTER_DATA': {}, u'DISCOVERED_NEW_DEVICE': {}, u'ALL_DEVICES_ENABLE_SNMPTRAPS': {}, u'STALE_VSWITCH_DATA': {}, u'DEVICE_MODULE_CHANGE': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}, u'NET_INTERFACE_DOWN': {}, u'DEVICE_VENDER_CHANGE': {}, u'LICENSE_EXPIRY_WARNING': {}, u'OFFLINE': {}, u'HIGH_PROCESSOR_CPU': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'AGENT_HEARTBEAT_LOSS': {}, u'ACTIVE_DIRECTORY_CONNECTION_FAILURE': {}, u'MONGODB_OUT_OF_SPACE': {}, u'ALL_DEVICES_ENABLE_SYSLOG': {}, u'AGENT_OUT_OF_SYNC': {}, u'NET_IP_SLA_THRESHOLD_VIOLATION': {}, u'SNMP_FAILURE': {}, u'HIGH_DISK_UTILIZATION': {}, u'STALE_INV_DATA_CLEANUP': {}, u'REPLACE_EXISTING_DEVICE': {}, u'HIGH_DATABASE_DISK_UTILIZATION': {}, u'AGENT_QUEUES_BUSY': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_SNMP_TIMEOUT': {}, u'SERVICE_OPERATION_APPROVED': {}, u'DEVICE_TYPE_CHANGE': {}, u'SERVICE_CREATE_OPERATION_START': {}, u'HOST_DELETE': {}, u'DEVICE_DELETE': {}, u'DEVICE_RECONCILIATION': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'ALL_DEVICES_DISABLE_SYSLOG': {}, u'SERVICE_UPDATE_OPERATION_END': {}, u'SERVICE_UNAVAILABLE': {}, u'STALE_VLAN_DATA': {}, u'MONGODB_AUTH_FAILURE': {}, u'SERVICE_UPDATE_OPERATION_START': {}, u'HIGH_SWAP_MEMORY': {}, u'STALE_DEVICE_MODULE_DATA': {}, u'LICENSE_ERROR': {}, u'INTERFACE_INVENTORY_FAILED': {}, u'UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP': {}, u'AMQP_NOTIFICATION': {}, u'UNABLE_TO_SUBSCRIBE_TO_SYSLOG': {}, u'NET_INTERFACE_UP_MODE': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'SOFTWARE_EOL_WARNING': {}, u'DEVICE_CONFIG_CHANGE': {}, u'PASSWORD_EXPIRY': {}, u'SERVICE_OPERATION_WAITING': {}, u'DEVICE_OUT_OF_SYNC': {}, u'SERVICE_DELETE_OPERATION_END': {}, u'AGENT_QUEUES_FULL': {}, u'HIGH_SYSTEM_CPU': {}, u'DEVICE_CONNECTION': {}, u'NET_DEVICE_SYSTEM_RELOAD': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'NET_INTERFACE_UP': {}, u'HIGH_PHYSICAL_MEMORY': {}, u'NET_DEVICE_SYSTEM_RESTART': {}, u'NO_CONNECTED_AGENTS': {}, u'STALE_LINE_CARD_DATA': {}, u'HIGH_MONGO_DISK_UTILIZATION': {}, u'STALE_NETWORK_CONNECTION_DATA': {}, u'UNSUPPORTED_DEVICE': {}, u'SERVICE_OPERATION_REJECTED': {}},), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='naas-event-spec-type', is_config=True)
    self.__event_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CRITICAL': {}, u'NOTICE': {}, u'EMERGENCY': {}, u'REQUEST': {}, u'ALERT': {}, u'WARNING': {}, u'ERROR': {}, u'INFORMATIONAL': {}},), is_leaf=True, yang_name="event-severity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-severity', is_config=True)
    self.__event_category_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-category-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__event_source_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERNAL': {}, u'EXTERNAL': {}},), is_leaf=True, yang_name="event-source-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-source-type', is_config=True)
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__user_visible = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="user-visible", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'naas-event-specs', u'naas-event-spec']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/name (naas-event-spec-type)

    YANG Description: SERVICE_CREATE_OPERATION_START
SERVICE_UPDATE_OPERATION_START
SERVICE_CREATE_OPERATION_END
SERVICE_UPDATE_OPERATION_END
SERVICE_OPERATION_WAITING
SERVICE_OPERATION_APPROVED
SERVICE_OPERATION_REJECTED
SERVICE_DELETE_OPERATION_START
SERVICE_DELETE_OPERATION_END
DEVICE_TYPE_CHANGE
PASSWORD_EXPIRY
DISCOVERED_NEW_DEVICE
DEVICE_CONNECTION
AGENT_DISCONNECTED
MONGODB_DISCONNECTED
MONGODB_AUTH_FAILURE
MONGODB_OUT_OF_SPACE
DEVICE_CONFIG_CHANGE
NO_CONNECTED_AGENTS
DEVICE_DELETE
HOST_DELETE
SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP
SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG
UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG
UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP
DEVICE_RECONCILIATION
LICENSE_ERROR
LICENSE_EXPIRY_WARNING
SOFTWARE_EOL_WARNING
STALE_INV_DATA_CLEANUP
CONFIG_OUT_OF_SYNC
SERVICE_UNAVAILABLE
DEVICE_OSTYPE_CHANGE
DEVICE_VENDER_CHANGE
DEVICE_MODULE_CHANGE
UNSUPPORTED_DEVICE
HIGH_PROCESSOR_CPU
HIGH_SYSTEM_CPU
HIGH_PHYSICAL_MEMORY
HIGH_SWAP_MEMORY
HIGH_DISK_UTILIZATION
HIGH_DATABASE_DISK_UTILIZATION
HIGH_MONGO_DISK_UTILIZATION
REPLACE_EXISTING_DEVICE
DEVICE_SERIAL_NUMBER_CHANGE
NET_INTERFACE_UP
NET_INTERFACE_UP_MODE
NET_INTERFACE_DOWN
DEVICE_SNMP_TIMEOUT
SNMP_FAILURE
AGENT_HEARTBEAT_LOSS
OPENLDAP_CONNECTION_FAILURE
ACTIVE_DIRECTORY_CONNECTION_FAILURE
STALE_INTERFACE_DATA
STALE_CLUSTER_DATA
STALE_VSWITCH_DATA
STALE_NETWORK_CONNECTION_DATA
STALE_DEVICE_MODULE_DATA
STALE_LINE_CARD_DATA
STALE_DEVICE_DATA
STALE_VLAN_DATA
NET_IP_SLA_THRESHOLD_VIOLATION
NET_DEVICE_SYSTEM_RELOAD
NET_DEVICE_SYSTEM_RESTART
OFFLINE
DEVICE_OUT_OF_SYNC
AGENT_OUT_OF_SYNC
AGENT_QUEUES_BUSY
AGENT_QUEUES_FULL
UNABLE_TO_SUBSCRIBE_TO_SYSLOG
UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP
ALL_DEVICES_DISABLE_SYSLOG
ALL_DEVICES_ENABLE_SYSLOG
ALL_DEVICES_DISABLE_SNMPTRAPS
ALL_DEVICES_ENABLE_SNMPTRAPS
LICENSE_DEVICE_LIMIT_EXCEEDED
PENDING_APPROVAL_ESCALATION
AMQP_NOTIFICATION
INTERFACE_INVENTORY_FAILED

    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/name (naas-event-spec-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: SERVICE_CREATE_OPERATION_START
SERVICE_UPDATE_OPERATION_START
SERVICE_CREATE_OPERATION_END
SERVICE_UPDATE_OPERATION_END
SERVICE_OPERATION_WAITING
SERVICE_OPERATION_APPROVED
SERVICE_OPERATION_REJECTED
SERVICE_DELETE_OPERATION_START
SERVICE_DELETE_OPERATION_END
DEVICE_TYPE_CHANGE
PASSWORD_EXPIRY
DISCOVERED_NEW_DEVICE
DEVICE_CONNECTION
AGENT_DISCONNECTED
MONGODB_DISCONNECTED
MONGODB_AUTH_FAILURE
MONGODB_OUT_OF_SPACE
DEVICE_CONFIG_CHANGE
NO_CONNECTED_AGENTS
DEVICE_DELETE
HOST_DELETE
SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP
SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG
UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG
UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP
DEVICE_RECONCILIATION
LICENSE_ERROR
LICENSE_EXPIRY_WARNING
SOFTWARE_EOL_WARNING
STALE_INV_DATA_CLEANUP
CONFIG_OUT_OF_SYNC
SERVICE_UNAVAILABLE
DEVICE_OSTYPE_CHANGE
DEVICE_VENDER_CHANGE
DEVICE_MODULE_CHANGE
UNSUPPORTED_DEVICE
HIGH_PROCESSOR_CPU
HIGH_SYSTEM_CPU
HIGH_PHYSICAL_MEMORY
HIGH_SWAP_MEMORY
HIGH_DISK_UTILIZATION
HIGH_DATABASE_DISK_UTILIZATION
HIGH_MONGO_DISK_UTILIZATION
REPLACE_EXISTING_DEVICE
DEVICE_SERIAL_NUMBER_CHANGE
NET_INTERFACE_UP
NET_INTERFACE_UP_MODE
NET_INTERFACE_DOWN
DEVICE_SNMP_TIMEOUT
SNMP_FAILURE
AGENT_HEARTBEAT_LOSS
OPENLDAP_CONNECTION_FAILURE
ACTIVE_DIRECTORY_CONNECTION_FAILURE
STALE_INTERFACE_DATA
STALE_CLUSTER_DATA
STALE_VSWITCH_DATA
STALE_NETWORK_CONNECTION_DATA
STALE_DEVICE_MODULE_DATA
STALE_LINE_CARD_DATA
STALE_DEVICE_DATA
STALE_VLAN_DATA
NET_IP_SLA_THRESHOLD_VIOLATION
NET_DEVICE_SYSTEM_RELOAD
NET_DEVICE_SYSTEM_RESTART
OFFLINE
DEVICE_OUT_OF_SYNC
AGENT_OUT_OF_SYNC
AGENT_QUEUES_BUSY
AGENT_QUEUES_FULL
UNABLE_TO_SUBSCRIBE_TO_SYSLOG
UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP
ALL_DEVICES_DISABLE_SYSLOG
ALL_DEVICES_ENABLE_SYSLOG
ALL_DEVICES_DISABLE_SNMPTRAPS
ALL_DEVICES_ENABLE_SNMPTRAPS
LICENSE_DEVICE_LIMIT_EXCEEDED
PENDING_APPROVAL_ESCALATION
AMQP_NOTIFICATION
INTERFACE_INVENTORY_FAILED

    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_DELETE_OPERATION_START': {}, u'MONGODB_DISCONNECTED': {}, u'ALL_DEVICES_DISABLE_SNMPTRAPS': {}, u'STALE_INTERFACE_DATA': {}, u'STALE_DEVICE_DATA': {}, u'LICENSE_DEVICE_LIMIT_EXCEEDED': {}, u'PENDING_APPROVAL_ESCALATION': {}, u'OPENLDAP_CONNECTION_FAILURE': {}, u'CONFIG_OUT_OF_SYNC': {}, u'SERVICE_CREATE_OPERATION_END': {}, u'STALE_CLUSTER_DATA': {}, u'DISCOVERED_NEW_DEVICE': {}, u'ALL_DEVICES_ENABLE_SNMPTRAPS': {}, u'STALE_VSWITCH_DATA': {}, u'DEVICE_MODULE_CHANGE': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}, u'NET_INTERFACE_DOWN': {}, u'DEVICE_VENDER_CHANGE': {}, u'LICENSE_EXPIRY_WARNING': {}, u'OFFLINE': {}, u'HIGH_PROCESSOR_CPU': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'AGENT_HEARTBEAT_LOSS': {}, u'ACTIVE_DIRECTORY_CONNECTION_FAILURE': {}, u'MONGODB_OUT_OF_SPACE': {}, u'ALL_DEVICES_ENABLE_SYSLOG': {}, u'AGENT_OUT_OF_SYNC': {}, u'NET_IP_SLA_THRESHOLD_VIOLATION': {}, u'SNMP_FAILURE': {}, u'HIGH_DISK_UTILIZATION': {}, u'STALE_INV_DATA_CLEANUP': {}, u'REPLACE_EXISTING_DEVICE': {}, u'HIGH_DATABASE_DISK_UTILIZATION': {}, u'AGENT_QUEUES_BUSY': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_SNMP_TIMEOUT': {}, u'SERVICE_OPERATION_APPROVED': {}, u'DEVICE_TYPE_CHANGE': {}, u'SERVICE_CREATE_OPERATION_START': {}, u'HOST_DELETE': {}, u'DEVICE_DELETE': {}, u'DEVICE_RECONCILIATION': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'ALL_DEVICES_DISABLE_SYSLOG': {}, u'SERVICE_UPDATE_OPERATION_END': {}, u'SERVICE_UNAVAILABLE': {}, u'STALE_VLAN_DATA': {}, u'MONGODB_AUTH_FAILURE': {}, u'SERVICE_UPDATE_OPERATION_START': {}, u'HIGH_SWAP_MEMORY': {}, u'STALE_DEVICE_MODULE_DATA': {}, u'LICENSE_ERROR': {}, u'INTERFACE_INVENTORY_FAILED': {}, u'UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP': {}, u'AMQP_NOTIFICATION': {}, u'UNABLE_TO_SUBSCRIBE_TO_SYSLOG': {}, u'NET_INTERFACE_UP_MODE': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'SOFTWARE_EOL_WARNING': {}, u'DEVICE_CONFIG_CHANGE': {}, u'PASSWORD_EXPIRY': {}, u'SERVICE_OPERATION_WAITING': {}, u'DEVICE_OUT_OF_SYNC': {}, u'SERVICE_DELETE_OPERATION_END': {}, u'AGENT_QUEUES_FULL': {}, u'HIGH_SYSTEM_CPU': {}, u'DEVICE_CONNECTION': {}, u'NET_DEVICE_SYSTEM_RELOAD': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'NET_INTERFACE_UP': {}, u'HIGH_PHYSICAL_MEMORY': {}, u'NET_DEVICE_SYSTEM_RESTART': {}, u'NO_CONNECTED_AGENTS': {}, u'STALE_LINE_CARD_DATA': {}, u'HIGH_MONGO_DISK_UTILIZATION': {}, u'STALE_NETWORK_CONNECTION_DATA': {}, u'UNSUPPORTED_DEVICE': {}, u'SERVICE_OPERATION_REJECTED': {}},), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='naas-event-spec-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with naas-event-spec-type""",
          'defined-type': "controller:naas-event-spec-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_DELETE_OPERATION_START': {}, u'MONGODB_DISCONNECTED': {}, u'ALL_DEVICES_DISABLE_SNMPTRAPS': {}, u'STALE_INTERFACE_DATA': {}, u'STALE_DEVICE_DATA': {}, u'LICENSE_DEVICE_LIMIT_EXCEEDED': {}, u'PENDING_APPROVAL_ESCALATION': {}, u'OPENLDAP_CONNECTION_FAILURE': {}, u'CONFIG_OUT_OF_SYNC': {}, u'SERVICE_CREATE_OPERATION_END': {}, u'STALE_CLUSTER_DATA': {}, u'DISCOVERED_NEW_DEVICE': {}, u'ALL_DEVICES_ENABLE_SNMPTRAPS': {}, u'STALE_VSWITCH_DATA': {}, u'DEVICE_MODULE_CHANGE': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}, u'NET_INTERFACE_DOWN': {}, u'DEVICE_VENDER_CHANGE': {}, u'LICENSE_EXPIRY_WARNING': {}, u'OFFLINE': {}, u'HIGH_PROCESSOR_CPU': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'AGENT_HEARTBEAT_LOSS': {}, u'ACTIVE_DIRECTORY_CONNECTION_FAILURE': {}, u'MONGODB_OUT_OF_SPACE': {}, u'ALL_DEVICES_ENABLE_SYSLOG': {}, u'AGENT_OUT_OF_SYNC': {}, u'NET_IP_SLA_THRESHOLD_VIOLATION': {}, u'SNMP_FAILURE': {}, u'HIGH_DISK_UTILIZATION': {}, u'STALE_INV_DATA_CLEANUP': {}, u'REPLACE_EXISTING_DEVICE': {}, u'HIGH_DATABASE_DISK_UTILIZATION': {}, u'AGENT_QUEUES_BUSY': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_SNMP_TIMEOUT': {}, u'SERVICE_OPERATION_APPROVED': {}, u'DEVICE_TYPE_CHANGE': {}, u'SERVICE_CREATE_OPERATION_START': {}, u'HOST_DELETE': {}, u'DEVICE_DELETE': {}, u'DEVICE_RECONCILIATION': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'ALL_DEVICES_DISABLE_SYSLOG': {}, u'SERVICE_UPDATE_OPERATION_END': {}, u'SERVICE_UNAVAILABLE': {}, u'STALE_VLAN_DATA': {}, u'MONGODB_AUTH_FAILURE': {}, u'SERVICE_UPDATE_OPERATION_START': {}, u'HIGH_SWAP_MEMORY': {}, u'STALE_DEVICE_MODULE_DATA': {}, u'LICENSE_ERROR': {}, u'INTERFACE_INVENTORY_FAILED': {}, u'UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP': {}, u'AMQP_NOTIFICATION': {}, u'UNABLE_TO_SUBSCRIBE_TO_SYSLOG': {}, u'NET_INTERFACE_UP_MODE': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'SOFTWARE_EOL_WARNING': {}, u'DEVICE_CONFIG_CHANGE': {}, u'PASSWORD_EXPIRY': {}, u'SERVICE_OPERATION_WAITING': {}, u'DEVICE_OUT_OF_SYNC': {}, u'SERVICE_DELETE_OPERATION_END': {}, u'AGENT_QUEUES_FULL': {}, u'HIGH_SYSTEM_CPU': {}, u'DEVICE_CONNECTION': {}, u'NET_DEVICE_SYSTEM_RELOAD': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'NET_INTERFACE_UP': {}, u'HIGH_PHYSICAL_MEMORY': {}, u'NET_DEVICE_SYSTEM_RESTART': {}, u'NO_CONNECTED_AGENTS': {}, u'STALE_LINE_CARD_DATA': {}, u'HIGH_MONGO_DISK_UTILIZATION': {}, u'STALE_NETWORK_CONNECTION_DATA': {}, u'UNSUPPORTED_DEVICE': {}, u'SERVICE_OPERATION_REJECTED': {}},), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='naas-event-spec-type', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_DELETE_OPERATION_START': {}, u'MONGODB_DISCONNECTED': {}, u'ALL_DEVICES_DISABLE_SNMPTRAPS': {}, u'STALE_INTERFACE_DATA': {}, u'STALE_DEVICE_DATA': {}, u'LICENSE_DEVICE_LIMIT_EXCEEDED': {}, u'PENDING_APPROVAL_ESCALATION': {}, u'OPENLDAP_CONNECTION_FAILURE': {}, u'CONFIG_OUT_OF_SYNC': {}, u'SERVICE_CREATE_OPERATION_END': {}, u'STALE_CLUSTER_DATA': {}, u'DISCOVERED_NEW_DEVICE': {}, u'ALL_DEVICES_ENABLE_SNMPTRAPS': {}, u'STALE_VSWITCH_DATA': {}, u'DEVICE_MODULE_CHANGE': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}, u'NET_INTERFACE_DOWN': {}, u'DEVICE_VENDER_CHANGE': {}, u'LICENSE_EXPIRY_WARNING': {}, u'OFFLINE': {}, u'HIGH_PROCESSOR_CPU': {}, u'UNSUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'AGENT_HEARTBEAT_LOSS': {}, u'ACTIVE_DIRECTORY_CONNECTION_FAILURE': {}, u'MONGODB_OUT_OF_SPACE': {}, u'ALL_DEVICES_ENABLE_SYSLOG': {}, u'AGENT_OUT_OF_SYNC': {}, u'NET_IP_SLA_THRESHOLD_VIOLATION': {}, u'SNMP_FAILURE': {}, u'HIGH_DISK_UTILIZATION': {}, u'STALE_INV_DATA_CLEANUP': {}, u'REPLACE_EXISTING_DEVICE': {}, u'HIGH_DATABASE_DISK_UTILIZATION': {}, u'AGENT_QUEUES_BUSY': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_SNMP_TIMEOUT': {}, u'SERVICE_OPERATION_APPROVED': {}, u'DEVICE_TYPE_CHANGE': {}, u'SERVICE_CREATE_OPERATION_START': {}, u'HOST_DELETE': {}, u'DEVICE_DELETE': {}, u'DEVICE_RECONCILIATION': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SNMPTRAP': {}, u'ALL_DEVICES_DISABLE_SYSLOG': {}, u'SERVICE_UPDATE_OPERATION_END': {}, u'SERVICE_UNAVAILABLE': {}, u'STALE_VLAN_DATA': {}, u'MONGODB_AUTH_FAILURE': {}, u'SERVICE_UPDATE_OPERATION_START': {}, u'HIGH_SWAP_MEMORY': {}, u'STALE_DEVICE_MODULE_DATA': {}, u'LICENSE_ERROR': {}, u'INTERFACE_INVENTORY_FAILED': {}, u'UNABLE_TO_SUBSCRIBE_TO_SNMPTRAP': {}, u'AMQP_NOTIFICATION': {}, u'UNABLE_TO_SUBSCRIBE_TO_SYSLOG': {}, u'NET_INTERFACE_UP_MODE': {}, u'SUBSCRIBE_TO_DEVICE_FEATURE_SYSLOG': {}, u'SOFTWARE_EOL_WARNING': {}, u'DEVICE_CONFIG_CHANGE': {}, u'PASSWORD_EXPIRY': {}, u'SERVICE_OPERATION_WAITING': {}, u'DEVICE_OUT_OF_SYNC': {}, u'SERVICE_DELETE_OPERATION_END': {}, u'AGENT_QUEUES_FULL': {}, u'HIGH_SYSTEM_CPU': {}, u'DEVICE_CONNECTION': {}, u'NET_DEVICE_SYSTEM_RELOAD': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'NET_INTERFACE_UP': {}, u'HIGH_PHYSICAL_MEMORY': {}, u'NET_DEVICE_SYSTEM_RESTART': {}, u'NO_CONNECTED_AGENTS': {}, u'STALE_LINE_CARD_DATA': {}, u'HIGH_MONGO_DISK_UTILIZATION': {}, u'STALE_NETWORK_CONNECTION_DATA': {}, u'UNSUPPORTED_DEVICE': {}, u'SERVICE_OPERATION_REJECTED': {}},), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='naas-event-spec-type', is_config=True)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/label (string)

    YANG Description: string
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_visible(self):
    """
    Getter method for user_visible, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/user_visible (boolean)

    YANG Description: user-visible: True/False
    """
    return self.__user_visible
      
  def _set_user_visible(self, v, load=False):
    """
    Setter method for user_visible, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/user_visible (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_visible is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_visible() directly.

    YANG Description: user-visible: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="user-visible", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_visible must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="user-visible", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__user_visible = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_visible(self):
    self.__user_visible = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="user-visible", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_event_source_type(self):
    """
    Getter method for event_source_type, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_source_type (event-source-type)

    YANG Description: INTERNAL
EXTERNAL

    """
    return self.__event_source_type
      
  def _set_event_source_type(self, v, load=False):
    """
    Setter method for event_source_type, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_source_type (event-source-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_source_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_source_type() directly.

    YANG Description: INTERNAL
EXTERNAL

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERNAL': {}, u'EXTERNAL': {}},), is_leaf=True, yang_name="event-source-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-source-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_source_type must be of a type compatible with event-source-type""",
          'defined-type': "controller:event-source-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERNAL': {}, u'EXTERNAL': {}},), is_leaf=True, yang_name="event-source-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-source-type', is_config=True)""",
        })

    self.__event_source_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_source_type(self):
    self.__event_source_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'INTERNAL': {}, u'EXTERNAL': {}},), is_leaf=True, yang_name="event-source-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-source-type', is_config=True)


  def _get_event_severity(self):
    """
    Getter method for event_severity, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_severity (event-severity)

    YANG Description: INFORMATIONAL
REQUEST
NOTICE
WARNING
ERROR
CRITICAL
ALERT
EMERGENCY

    """
    return self.__event_severity
      
  def _set_event_severity(self, v, load=False):
    """
    Setter method for event_severity, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_severity (event-severity)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_severity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_severity() directly.

    YANG Description: INFORMATIONAL
REQUEST
NOTICE
WARNING
ERROR
CRITICAL
ALERT
EMERGENCY

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CRITICAL': {}, u'NOTICE': {}, u'EMERGENCY': {}, u'REQUEST': {}, u'ALERT': {}, u'WARNING': {}, u'ERROR': {}, u'INFORMATIONAL': {}},), is_leaf=True, yang_name="event-severity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-severity', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_severity must be of a type compatible with event-severity""",
          'defined-type': "controller:event-severity",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CRITICAL': {}, u'NOTICE': {}, u'EMERGENCY': {}, u'REQUEST': {}, u'ALERT': {}, u'WARNING': {}, u'ERROR': {}, u'INFORMATIONAL': {}},), is_leaf=True, yang_name="event-severity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-severity', is_config=True)""",
        })

    self.__event_severity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_severity(self):
    self.__event_severity = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CRITICAL': {}, u'NOTICE': {}, u'EMERGENCY': {}, u'REQUEST': {}, u'ALERT': {}, u'WARNING': {}, u'ERROR': {}, u'INFORMATIONAL': {}},), is_leaf=True, yang_name="event-severity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-severity', is_config=True)


  def _get_event_category_spec(self):
    """
    Getter method for event_category_spec, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_category_spec (leafref)

    YANG Description: event-category-spec
    """
    return self.__event_category_spec
      
  def _set_event_category_spec(self, v, load=False):
    """
    Setter method for event_category_spec, mapped from YANG variable /system/tables/naas_event_specs/naas_event_spec/event_category_spec (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_category_spec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_category_spec() directly.

    YANG Description: event-category-spec
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-category-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_category_spec must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-category-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__event_category_spec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_category_spec(self):
    self.__event_category_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-category-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  label = __builtin__.property(_get_label, _set_label)
  user_visible = __builtin__.property(_get_user_visible, _set_user_visible)
  event_source_type = __builtin__.property(_get_event_source_type, _set_event_source_type)
  event_severity = __builtin__.property(_get_event_severity, _set_event_severity)
  event_category_spec = __builtin__.property(_get_event_category_spec, _set_event_category_spec)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('label', label), ('user_visible', user_visible), ('event_source_type', event_source_type), ('event_severity', event_severity), ('event_category_spec', event_category_spec), ])


