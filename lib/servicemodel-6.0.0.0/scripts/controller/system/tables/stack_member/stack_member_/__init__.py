
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class stack_member(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/stack-member/stack-member. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__stack_member_id','__stack_member_index','__mac_address','__image_name','__state','__device_id','__stale_entry',)

  _yang_name = 'stack-member'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__stale_entry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__stack_member_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="stack-member-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__stack_member_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="stack-member-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__image_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="image-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VERMISMATCH': {}, u'PROVISIONED': {}, u'ADDED': {}, u'FEATUREMISMATCH': {}, u'PROGRESSING': {}, u'INVALID': {}, u'WAITING': {}, u'READY': {}, u'REMOVED': {}, u'SDMMISMATCH': {}, u'NEWMASTERINIT': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='stack-member-state', is_config=True)
    self.__mac_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'stack-member', u'stack-member']

  def _get_stack_member_id(self):
    """
    Getter method for stack_member_id, mapped from YANG variable /system/tables/stack_member/stack_member/stack_member_id (string)

    YANG Description: string
    """
    return self.__stack_member_id
      
  def _set_stack_member_id(self, v, load=False):
    """
    Setter method for stack_member_id, mapped from YANG variable /system/tables/stack_member/stack_member/stack_member_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stack_member_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stack_member_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="stack-member-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stack_member_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="stack-member-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__stack_member_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stack_member_id(self):
    self.__stack_member_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="stack-member-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_stack_member_index(self):
    """
    Getter method for stack_member_index, mapped from YANG variable /system/tables/stack_member/stack_member/stack_member_index (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__stack_member_index
      
  def _set_stack_member_index(self, v, load=False):
    """
    Setter method for stack_member_index, mapped from YANG variable /system/tables/stack_member/stack_member/stack_member_index (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stack_member_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stack_member_index() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="stack-member-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stack_member_index must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="stack-member-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__stack_member_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stack_member_index(self):
    self.__stack_member_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="stack-member-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_mac_address(self):
    """
    Getter method for mac_address, mapped from YANG variable /system/tables/stack_member/stack_member/mac_address (string)

    YANG Description: string
    """
    return self.__mac_address
      
  def _set_mac_address(self, v, load=False):
    """
    Setter method for mac_address, mapped from YANG variable /system/tables/stack_member/stack_member/mac_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_address(self):
    self.__mac_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="mac-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_image_name(self):
    """
    Getter method for image_name, mapped from YANG variable /system/tables/stack_member/stack_member/image_name (string)

    YANG Description: string
    """
    return self.__image_name
      
  def _set_image_name(self, v, load=False):
    """
    Setter method for image_name, mapped from YANG variable /system/tables/stack_member/stack_member/image_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_image_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_image_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="image-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """image_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="image-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__image_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_image_name(self):
    self.__image_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="image-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /system/tables/stack_member/stack_member/state (stack-member-state)

    YANG Description: WAITING
PROGRESSING
ADDED
READY
SDMMISMATCH
VERMISMATCH
FEATUREMISMATCH
NEWMASTERINIT
PROVISIONED
INVALID
REMOVED

    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /system/tables/stack_member/stack_member/state (stack-member-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: WAITING
PROGRESSING
ADDED
READY
SDMMISMATCH
VERMISMATCH
FEATUREMISMATCH
NEWMASTERINIT
PROVISIONED
INVALID
REMOVED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VERMISMATCH': {}, u'PROVISIONED': {}, u'ADDED': {}, u'FEATUREMISMATCH': {}, u'PROGRESSING': {}, u'INVALID': {}, u'WAITING': {}, u'READY': {}, u'REMOVED': {}, u'SDMMISMATCH': {}, u'NEWMASTERINIT': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='stack-member-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with stack-member-state""",
          'defined-type': "controller:stack-member-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VERMISMATCH': {}, u'PROVISIONED': {}, u'ADDED': {}, u'FEATUREMISMATCH': {}, u'PROGRESSING': {}, u'INVALID': {}, u'WAITING': {}, u'READY': {}, u'REMOVED': {}, u'SDMMISMATCH': {}, u'NEWMASTERINIT': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='stack-member-state', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VERMISMATCH': {}, u'PROVISIONED': {}, u'ADDED': {}, u'FEATUREMISMATCH': {}, u'PROGRESSING': {}, u'INVALID': {}, u'WAITING': {}, u'READY': {}, u'REMOVED': {}, u'SDMMISMATCH': {}, u'NEWMASTERINIT': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='stack-member-state', is_config=True)


  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /system/tables/stack_member/stack_member/device_id (leafref)

    YANG Description: device-id
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /system/tables/stack_member/stack_member/device_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: device-id
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_stale_entry(self):
    """
    Getter method for stale_entry, mapped from YANG variable /system/tables/stack_member/stack_member/stale_entry (boolean)

    YANG Description: stale-entry: True/False
    """
    return self.__stale_entry
      
  def _set_stale_entry(self, v, load=False):
    """
    Setter method for stale_entry, mapped from YANG variable /system/tables/stack_member/stack_member/stale_entry (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_entry() directly.

    YANG Description: stale-entry: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_entry must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__stale_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_entry(self):
    self.__stale_entry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  stack_member_id = __builtin__.property(_get_stack_member_id, _set_stack_member_id)
  stack_member_index = __builtin__.property(_get_stack_member_index, _set_stack_member_index)
  mac_address = __builtin__.property(_get_mac_address, _set_mac_address)
  image_name = __builtin__.property(_get_image_name, _set_image_name)
  state = __builtin__.property(_get_state, _set_state)
  device_id = __builtin__.property(_get_device_id, _set_device_id)
  stale_entry = __builtin__.property(_get_stale_entry, _set_stale_entry)


  _pyangbind_elements = collections.OrderedDict([('stack_member_id', stack_member_id), ('stack_member_index', stack_member_index), ('mac_address', mac_address), ('image_name', image_name), ('state', state), ('device_id', device_id), ('stale_entry', stale_entry), ])


