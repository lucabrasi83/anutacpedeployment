
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class job_schedule(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/job-schedules/job-schedule. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__job_schedule_id','__active','__interval','__repeat_count','__start_time','__end_time','__repeat_forever','__job_id','__trigger_id','__interval_type','__job_type',)

  _yang_name = 'job-schedule'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__interval_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MILLISECOND': {}, u'SECOND': {}, u'HOUR': {}, u'MINUTE': {}},), is_leaf=True, yang_name="interval-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='interval-category', is_config=True)
    self.__job_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__job_schedule_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-schedule-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__job_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DIAGNOSTICS_GROUP': {}, u'DEVICE_MONITOR_JOB': {}, u'MONITOR': {}, u'INVENTORY': {}, u'DIAGNOSTICS_JOB': {}, u'DEVICE_INVENTORY_GROUP': {}, u'DEVICE_INVENTORY': {}, u'PING': {}, u'PING_GROUP': {}, u'MONITOR_GROUP': {}, u'DISCOVERY_GROUP': {}, u'MAINTENANCE': {}, u'DIAGNOSTICS': {}, u'MAINTENANCE_GROUP': {}, u'CONFIGURATION': {}, u'DISCOVERY': {}, u'INVENTORY_GROUP': {}, u'CAPACITY_MONITOR_JOB': {}},), is_leaf=True, yang_name="job-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='job-category', is_config=True)
    self.__trigger_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="trigger-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__repeat_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="repeat-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__repeat_forever = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="repeat-forever", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'job-schedules', u'job-schedule']

  def _get_job_schedule_id(self):
    """
    Getter method for job_schedule_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_schedule_id (string)

    YANG Description: string
    """
    return self.__job_schedule_id
      
  def _set_job_schedule_id(self, v, load=False):
    """
    Setter method for job_schedule_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_schedule_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job_schedule_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job_schedule_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job-schedule-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job_schedule_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job-schedule-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__job_schedule_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job_schedule_id(self):
    self.__job_schedule_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-schedule-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_active(self):
    """
    Getter method for active, mapped from YANG variable /system/tables/job_schedules/job_schedule/active (boolean)

    YANG Description: active: True/False
    """
    return self.__active
      
  def _set_active(self, v, load=False):
    """
    Setter method for active, mapped from YANG variable /system/tables/job_schedules/job_schedule/active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active() directly.

    YANG Description: active: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active(self):
    self.__active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_interval(self):
    """
    Getter method for interval, mapped from YANG variable /system/tables/job_schedules/job_schedule/interval (uint16)

    YANG Description: 0..65535
    """
    return self.__interval
      
  def _set_interval(self, v, load=False):
    """
    Setter method for interval, mapped from YANG variable /system/tables/job_schedules/job_schedule/interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interval() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interval(self):
    self.__interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="interval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_repeat_count(self):
    """
    Getter method for repeat_count, mapped from YANG variable /system/tables/job_schedules/job_schedule/repeat_count (uint16)

    YANG Description: 0..65535
    """
    return self.__repeat_count
      
  def _set_repeat_count(self, v, load=False):
    """
    Setter method for repeat_count, mapped from YANG variable /system/tables/job_schedules/job_schedule/repeat_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repeat_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repeat_count() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="repeat-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repeat_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="repeat-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__repeat_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repeat_count(self):
    self.__repeat_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="repeat-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /system/tables/job_schedules/job_schedule/start_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /system/tables/job_schedules/job_schedule/start_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_end_time(self):
    """
    Getter method for end_time, mapped from YANG variable /system/tables/job_schedules/job_schedule/end_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__end_time
      
  def _set_end_time(self, v, load=False):
    """
    Setter method for end_time, mapped from YANG variable /system/tables/job_schedules/job_schedule/end_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__end_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_time(self):
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_repeat_forever(self):
    """
    Getter method for repeat_forever, mapped from YANG variable /system/tables/job_schedules/job_schedule/repeat_forever (boolean)

    YANG Description: repeat-forever: True/False
    """
    return self.__repeat_forever
      
  def _set_repeat_forever(self, v, load=False):
    """
    Setter method for repeat_forever, mapped from YANG variable /system/tables/job_schedules/job_schedule/repeat_forever (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repeat_forever is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repeat_forever() directly.

    YANG Description: repeat-forever: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="repeat-forever", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repeat_forever must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="repeat-forever", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__repeat_forever = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repeat_forever(self):
    self.__repeat_forever = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="repeat-forever", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_job_id(self):
    """
    Getter method for job_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_id (string)

    YANG Description: string
    """
    return self.__job_id
      
  def _set_job_id(self, v, load=False):
    """
    Setter method for job_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__job_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job_id(self):
    self.__job_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_trigger_id(self):
    """
    Getter method for trigger_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/trigger_id (string)

    YANG Description: string
    """
    return self.__trigger_id
      
  def _set_trigger_id(self, v, load=False):
    """
    Setter method for trigger_id, mapped from YANG variable /system/tables/job_schedules/job_schedule/trigger_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trigger_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trigger_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="trigger-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trigger_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="trigger-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__trigger_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trigger_id(self):
    self.__trigger_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="trigger-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_interval_type(self):
    """
    Getter method for interval_type, mapped from YANG variable /system/tables/job_schedules/job_schedule/interval_type (interval-category)

    YANG Description: MILLISECOND
SECOND
MINUTE
HOUR

    """
    return self.__interval_type
      
  def _set_interval_type(self, v, load=False):
    """
    Setter method for interval_type, mapped from YANG variable /system/tables/job_schedules/job_schedule/interval_type (interval-category)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interval_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interval_type() directly.

    YANG Description: MILLISECOND
SECOND
MINUTE
HOUR

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MILLISECOND': {}, u'SECOND': {}, u'HOUR': {}, u'MINUTE': {}},), is_leaf=True, yang_name="interval-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='interval-category', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interval_type must be of a type compatible with interval-category""",
          'defined-type': "controller:interval-category",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MILLISECOND': {}, u'SECOND': {}, u'HOUR': {}, u'MINUTE': {}},), is_leaf=True, yang_name="interval-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='interval-category', is_config=True)""",
        })

    self.__interval_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interval_type(self):
    self.__interval_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MILLISECOND': {}, u'SECOND': {}, u'HOUR': {}, u'MINUTE': {}},), is_leaf=True, yang_name="interval-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='interval-category', is_config=True)


  def _get_job_type(self):
    """
    Getter method for job_type, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_type (job-category)

    YANG Description: CAPACITY_MONITOR_JOB
DEVICE_INVENTORY
DEVICE_INVENTORY_GROUP
DEVICE_MONITOR_JOB
PING_GROUP
DIAGNOSTICS_JOB
DISCOVERY
PING
DISCOVERY_GROUP
DIAGNOSTICS
DIAGNOSTICS_GROUP
MONITOR
MONITOR_GROUP
INVENTORY
INVENTORY_GROUP
CONFIGURATION
MAINTENANCE
MAINTENANCE_GROUP

    """
    return self.__job_type
      
  def _set_job_type(self, v, load=False):
    """
    Setter method for job_type, mapped from YANG variable /system/tables/job_schedules/job_schedule/job_type (job-category)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job_type() directly.

    YANG Description: CAPACITY_MONITOR_JOB
DEVICE_INVENTORY
DEVICE_INVENTORY_GROUP
DEVICE_MONITOR_JOB
PING_GROUP
DIAGNOSTICS_JOB
DISCOVERY
PING
DISCOVERY_GROUP
DIAGNOSTICS
DIAGNOSTICS_GROUP
MONITOR
MONITOR_GROUP
INVENTORY
INVENTORY_GROUP
CONFIGURATION
MAINTENANCE
MAINTENANCE_GROUP

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DIAGNOSTICS_GROUP': {}, u'DEVICE_MONITOR_JOB': {}, u'MONITOR': {}, u'INVENTORY': {}, u'DIAGNOSTICS_JOB': {}, u'DEVICE_INVENTORY_GROUP': {}, u'DEVICE_INVENTORY': {}, u'PING': {}, u'PING_GROUP': {}, u'MONITOR_GROUP': {}, u'DISCOVERY_GROUP': {}, u'MAINTENANCE': {}, u'DIAGNOSTICS': {}, u'MAINTENANCE_GROUP': {}, u'CONFIGURATION': {}, u'DISCOVERY': {}, u'INVENTORY_GROUP': {}, u'CAPACITY_MONITOR_JOB': {}},), is_leaf=True, yang_name="job-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='job-category', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job_type must be of a type compatible with job-category""",
          'defined-type': "controller:job-category",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DIAGNOSTICS_GROUP': {}, u'DEVICE_MONITOR_JOB': {}, u'MONITOR': {}, u'INVENTORY': {}, u'DIAGNOSTICS_JOB': {}, u'DEVICE_INVENTORY_GROUP': {}, u'DEVICE_INVENTORY': {}, u'PING': {}, u'PING_GROUP': {}, u'MONITOR_GROUP': {}, u'DISCOVERY_GROUP': {}, u'MAINTENANCE': {}, u'DIAGNOSTICS': {}, u'MAINTENANCE_GROUP': {}, u'CONFIGURATION': {}, u'DISCOVERY': {}, u'INVENTORY_GROUP': {}, u'CAPACITY_MONITOR_JOB': {}},), is_leaf=True, yang_name="job-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='job-category', is_config=True)""",
        })

    self.__job_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job_type(self):
    self.__job_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DIAGNOSTICS_GROUP': {}, u'DEVICE_MONITOR_JOB': {}, u'MONITOR': {}, u'INVENTORY': {}, u'DIAGNOSTICS_JOB': {}, u'DEVICE_INVENTORY_GROUP': {}, u'DEVICE_INVENTORY': {}, u'PING': {}, u'PING_GROUP': {}, u'MONITOR_GROUP': {}, u'DISCOVERY_GROUP': {}, u'MAINTENANCE': {}, u'DIAGNOSTICS': {}, u'MAINTENANCE_GROUP': {}, u'CONFIGURATION': {}, u'DISCOVERY': {}, u'INVENTORY_GROUP': {}, u'CAPACITY_MONITOR_JOB': {}},), is_leaf=True, yang_name="job-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='job-category', is_config=True)

  job_schedule_id = __builtin__.property(_get_job_schedule_id, _set_job_schedule_id)
  active = __builtin__.property(_get_active, _set_active)
  interval = __builtin__.property(_get_interval, _set_interval)
  repeat_count = __builtin__.property(_get_repeat_count, _set_repeat_count)
  start_time = __builtin__.property(_get_start_time, _set_start_time)
  end_time = __builtin__.property(_get_end_time, _set_end_time)
  repeat_forever = __builtin__.property(_get_repeat_forever, _set_repeat_forever)
  job_id = __builtin__.property(_get_job_id, _set_job_id)
  trigger_id = __builtin__.property(_get_trigger_id, _set_trigger_id)
  interval_type = __builtin__.property(_get_interval_type, _set_interval_type)
  job_type = __builtin__.property(_get_job_type, _set_job_type)


  _pyangbind_elements = collections.OrderedDict([('job_schedule_id', job_schedule_id), ('active', active), ('interval', interval), ('repeat_count', repeat_count), ('start_time', start_time), ('end_time', end_time), ('repeat_forever', repeat_forever), ('job_id', job_id), ('trigger_id', trigger_id), ('interval_type', interval_type), ('job_type', job_type), ])


