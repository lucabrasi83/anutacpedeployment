
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class event(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/events/event. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__event_id','__time_stamp','__message','__resource_id','__tenant_id','__status','__type','__user_id','__device_id','__credential_set_name','__transport_type',)

  _yang_name = 'event'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FAILED': {}, u'IN_PROGRESS': {}, u'WARNING': {}, u'SUCCESS': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-status', is_config=True)
    self.__user_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__resource_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__event_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__tenant_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="tenant-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__credential_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)
    self.__time_stamp = YANGDynClass(base=unicode, is_leaf=True, yang_name="time-stamp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DEVICE_MODULE_CHANGE': {}, u'DEVICE_IPADDRESS_CHANGE': {}, u'DISCOVERED_NEW_DEVICE': {}, u'USER_LOCK': {}, u'CONFIG_SCRIPT': {}, u'RMA_BUILD_NEW_DEVICE': {}, u'INTERFACE_STATE_CHANGE': {}, u'AGENT_HBLOSS': {}, u'DEVICE_EXT_INVENTORY': {}, u'USER_ENABLE': {}, u'USER_CREATE': {}, u'USER_UPDATE': {}, u'VDC_CREATE': {}, u'USER_DELETE': {}, u'RESOURCE_UPDATE': {}, u'RESOURCE_CREATE': {}, u'USER_LOGIN': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_CREDENTIALSET_CHANGED': {}, u'DEVICE_TYPE_CHANGE': {}, u'VDC_UPDATE': {}, u'VDC_DELETE': {}, u'AGENT_CONNECTED': {}, u'RESOURCE_DELETE': {}, u'RMA_REPLACE_DEVICE': {}, u'USER_DISABLE': {}, u'DEVICE_VENDER_CHANGE': {}, u'DEVICE_STATE_CHANGEDTO_ONLINE': {}, u'DEVICE_CONFIG_CHANGE': {}, u'NO_CONNECTED_AGENTS': {}, u'DEVICE_MGMT_IP_CHANGED': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'ON_BOARD_DEVICE_INVENTORY': {}, u'USER_LOGOUT': {}, u'DEVICE_REBOOT': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-type', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'events', u'event']

  def _get_event_id(self):
    """
    Getter method for event_id, mapped from YANG variable /system/tables/events/event/event_id (string)

    YANG Description: string
    """
    return self.__event_id
      
  def _set_event_id(self, v, load=False):
    """
    Setter method for event_id, mapped from YANG variable /system/tables/events/event/event_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__event_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_id(self):
    self.__event_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_time_stamp(self):
    """
    Getter method for time_stamp, mapped from YANG variable /system/tables/events/event/time_stamp (string)

    YANG Description: string
    """
    return self.__time_stamp
      
  def _set_time_stamp(self, v, load=False):
    """
    Setter method for time_stamp, mapped from YANG variable /system/tables/events/event/time_stamp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_stamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_stamp() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="time-stamp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_stamp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="time-stamp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__time_stamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_stamp(self):
    self.__time_stamp = YANGDynClass(base=unicode, is_leaf=True, yang_name="time-stamp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_message(self):
    """
    Getter method for message, mapped from YANG variable /system/tables/events/event/message (string)

    YANG Description: string
    """
    return self.__message
      
  def _set_message(self, v, load=False):
    """
    Setter method for message, mapped from YANG variable /system/tables/events/event/message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message(self):
    self.__message = YANGDynClass(base=unicode, is_leaf=True, yang_name="message", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_resource_id(self):
    """
    Getter method for resource_id, mapped from YANG variable /system/tables/events/event/resource_id (string)

    YANG Description: string
    """
    return self.__resource_id
      
  def _set_resource_id(self, v, load=False):
    """
    Setter method for resource_id, mapped from YANG variable /system/tables/events/event/resource_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__resource_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource_id(self):
    self.__resource_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_tenant_id(self):
    """
    Getter method for tenant_id, mapped from YANG variable /system/tables/events/event/tenant_id (string)

    YANG Description: string
    """
    return self.__tenant_id
      
  def _set_tenant_id(self, v, load=False):
    """
    Setter method for tenant_id, mapped from YANG variable /system/tables/events/event/tenant_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tenant_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tenant_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tenant-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tenant_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tenant-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__tenant_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tenant_id(self):
    self.__tenant_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="tenant-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/tables/events/event/status (event-status)

    YANG Description: SUCCESS
FAILED
IN_PROGRESS
WARNING

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/tables/events/event/status (event-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: SUCCESS
FAILED
IN_PROGRESS
WARNING

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FAILED': {}, u'IN_PROGRESS': {}, u'WARNING': {}, u'SUCCESS': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with event-status""",
          'defined-type': "controller:event-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FAILED': {}, u'IN_PROGRESS': {}, u'WARNING': {}, u'SUCCESS': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-status', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'FAILED': {}, u'IN_PROGRESS': {}, u'WARNING': {}, u'SUCCESS': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-status', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /system/tables/events/event/type (event-type)

    YANG Description: RESOURCE_CREATE
RESOURCE_UPDATE
RESOURCE_DELETE
VDC_CREATE
VDC_UPDATE
VDC_DELETE
USER_LOGIN
USER_LOGOUT
USER_DELETE
USER_CREATE
USER_DISABLE
USER_UPDATE
USER_ENABLE
USER_LOCK
DEVICE_STATE_CHANGEDTO_ONLINE
DEVICE_CREDENTIALSET_CHANGED
DEVICE_MGMT_IP_CHANGED
DEVICE_EXT_INVENTORY
AGENT_CONNECTED
AGENT_DISCONNECTED
NO_CONNECTED_AGENTS
AGENT_HBLOSS
INTERFACE_STATE_CHANGE
DEVICE_IPADDRESS_CHANGE
DEVICE_VENDER_CHANGE
DEVICE_OSTYPE_CHANGE
DEVICE_TYPE_CHANGE
DEVICE_SERIAL_NUMBER_CHANGE
DISCOVERED_NEW_DEVICE
DEVICE_MODULE_CHANGE
RMA_BUILD_NEW_DEVICE
RMA_REPLACE_DEVICE
CONFIG_SCRIPT
DEVICE_CONFIG_CHANGE
ON_BOARD_DEVICE_INVENTORY
DEVICE_REBOOT

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /system/tables/events/event/type (event-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: RESOURCE_CREATE
RESOURCE_UPDATE
RESOURCE_DELETE
VDC_CREATE
VDC_UPDATE
VDC_DELETE
USER_LOGIN
USER_LOGOUT
USER_DELETE
USER_CREATE
USER_DISABLE
USER_UPDATE
USER_ENABLE
USER_LOCK
DEVICE_STATE_CHANGEDTO_ONLINE
DEVICE_CREDENTIALSET_CHANGED
DEVICE_MGMT_IP_CHANGED
DEVICE_EXT_INVENTORY
AGENT_CONNECTED
AGENT_DISCONNECTED
NO_CONNECTED_AGENTS
AGENT_HBLOSS
INTERFACE_STATE_CHANGE
DEVICE_IPADDRESS_CHANGE
DEVICE_VENDER_CHANGE
DEVICE_OSTYPE_CHANGE
DEVICE_TYPE_CHANGE
DEVICE_SERIAL_NUMBER_CHANGE
DISCOVERED_NEW_DEVICE
DEVICE_MODULE_CHANGE
RMA_BUILD_NEW_DEVICE
RMA_REPLACE_DEVICE
CONFIG_SCRIPT
DEVICE_CONFIG_CHANGE
ON_BOARD_DEVICE_INVENTORY
DEVICE_REBOOT

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DEVICE_MODULE_CHANGE': {}, u'DEVICE_IPADDRESS_CHANGE': {}, u'DISCOVERED_NEW_DEVICE': {}, u'USER_LOCK': {}, u'CONFIG_SCRIPT': {}, u'RMA_BUILD_NEW_DEVICE': {}, u'INTERFACE_STATE_CHANGE': {}, u'AGENT_HBLOSS': {}, u'DEVICE_EXT_INVENTORY': {}, u'USER_ENABLE': {}, u'USER_CREATE': {}, u'USER_UPDATE': {}, u'VDC_CREATE': {}, u'USER_DELETE': {}, u'RESOURCE_UPDATE': {}, u'RESOURCE_CREATE': {}, u'USER_LOGIN': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_CREDENTIALSET_CHANGED': {}, u'DEVICE_TYPE_CHANGE': {}, u'VDC_UPDATE': {}, u'VDC_DELETE': {}, u'AGENT_CONNECTED': {}, u'RESOURCE_DELETE': {}, u'RMA_REPLACE_DEVICE': {}, u'USER_DISABLE': {}, u'DEVICE_VENDER_CHANGE': {}, u'DEVICE_STATE_CHANGEDTO_ONLINE': {}, u'DEVICE_CONFIG_CHANGE': {}, u'NO_CONNECTED_AGENTS': {}, u'DEVICE_MGMT_IP_CHANGED': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'ON_BOARD_DEVICE_INVENTORY': {}, u'USER_LOGOUT': {}, u'DEVICE_REBOOT': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with event-type""",
          'defined-type': "controller:event-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DEVICE_MODULE_CHANGE': {}, u'DEVICE_IPADDRESS_CHANGE': {}, u'DISCOVERED_NEW_DEVICE': {}, u'USER_LOCK': {}, u'CONFIG_SCRIPT': {}, u'RMA_BUILD_NEW_DEVICE': {}, u'INTERFACE_STATE_CHANGE': {}, u'AGENT_HBLOSS': {}, u'DEVICE_EXT_INVENTORY': {}, u'USER_ENABLE': {}, u'USER_CREATE': {}, u'USER_UPDATE': {}, u'VDC_CREATE': {}, u'USER_DELETE': {}, u'RESOURCE_UPDATE': {}, u'RESOURCE_CREATE': {}, u'USER_LOGIN': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_CREDENTIALSET_CHANGED': {}, u'DEVICE_TYPE_CHANGE': {}, u'VDC_UPDATE': {}, u'VDC_DELETE': {}, u'AGENT_CONNECTED': {}, u'RESOURCE_DELETE': {}, u'RMA_REPLACE_DEVICE': {}, u'USER_DISABLE': {}, u'DEVICE_VENDER_CHANGE': {}, u'DEVICE_STATE_CHANGEDTO_ONLINE': {}, u'DEVICE_CONFIG_CHANGE': {}, u'NO_CONNECTED_AGENTS': {}, u'DEVICE_MGMT_IP_CHANGED': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'ON_BOARD_DEVICE_INVENTORY': {}, u'USER_LOGOUT': {}, u'DEVICE_REBOOT': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-type', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DEVICE_MODULE_CHANGE': {}, u'DEVICE_IPADDRESS_CHANGE': {}, u'DISCOVERED_NEW_DEVICE': {}, u'USER_LOCK': {}, u'CONFIG_SCRIPT': {}, u'RMA_BUILD_NEW_DEVICE': {}, u'INTERFACE_STATE_CHANGE': {}, u'AGENT_HBLOSS': {}, u'DEVICE_EXT_INVENTORY': {}, u'USER_ENABLE': {}, u'USER_CREATE': {}, u'USER_UPDATE': {}, u'VDC_CREATE': {}, u'USER_DELETE': {}, u'RESOURCE_UPDATE': {}, u'RESOURCE_CREATE': {}, u'USER_LOGIN': {}, u'AGENT_DISCONNECTED': {}, u'DEVICE_CREDENTIALSET_CHANGED': {}, u'DEVICE_TYPE_CHANGE': {}, u'VDC_UPDATE': {}, u'VDC_DELETE': {}, u'AGENT_CONNECTED': {}, u'RESOURCE_DELETE': {}, u'RMA_REPLACE_DEVICE': {}, u'USER_DISABLE': {}, u'DEVICE_VENDER_CHANGE': {}, u'DEVICE_STATE_CHANGEDTO_ONLINE': {}, u'DEVICE_CONFIG_CHANGE': {}, u'NO_CONNECTED_AGENTS': {}, u'DEVICE_MGMT_IP_CHANGED': {}, u'DEVICE_OSTYPE_CHANGE': {}, u'ON_BOARD_DEVICE_INVENTORY': {}, u'USER_LOGOUT': {}, u'DEVICE_REBOOT': {}, u'DEVICE_SERIAL_NUMBER_CHANGE': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='event-type', is_config=True)


  def _get_user_id(self):
    """
    Getter method for user_id, mapped from YANG variable /system/tables/events/event/user_id (string)

    YANG Description: string
    """
    return self.__user_id
      
  def _set_user_id(self, v, load=False):
    """
    Setter method for user_id, mapped from YANG variable /system/tables/events/event/user_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_id(self):
    self.__user_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /system/tables/events/event/device_id (string)

    YANG Description: string
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /system/tables/events/event/device_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_credential_set_name(self):
    """
    Getter method for credential_set_name, mapped from YANG variable /system/tables/events/event/credential_set_name (string)

    YANG Description: string
    """
    return self.__credential_set_name
      
  def _set_credential_set_name(self, v, load=False):
    """
    Setter method for credential_set_name, mapped from YANG variable /system/tables/events/event/credential_set_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credential_set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credential_set_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credential_set_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__credential_set_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credential_set_name(self):
    self.__credential_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_transport_type(self):
    """
    Getter method for transport_type, mapped from YANG variable /system/tables/events/event/transport_type (ndt:transport-type)

    YANG Description: SSH
HTTP_HTTPS
TELNET

    """
    return self.__transport_type
      
  def _set_transport_type(self, v, load=False):
    """
    Setter method for transport_type, mapped from YANG variable /system/tables/events/event/transport_type (ndt:transport-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_type() directly.

    YANG Description: SSH
HTTP_HTTPS
TELNET

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_type must be of a type compatible with ndt:transport-type""",
          'defined-type': "ndt:transport-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)""",
        })

    self.__transport_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_type(self):
    self.__transport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HTTP_HTTPS': {}, u'SSH': {}, u'TELNET': {}},), is_leaf=True, yang_name="transport-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:transport-type', is_config=True)

  event_id = __builtin__.property(_get_event_id, _set_event_id)
  time_stamp = __builtin__.property(_get_time_stamp, _set_time_stamp)
  message = __builtin__.property(_get_message, _set_message)
  resource_id = __builtin__.property(_get_resource_id, _set_resource_id)
  tenant_id = __builtin__.property(_get_tenant_id, _set_tenant_id)
  status = __builtin__.property(_get_status, _set_status)
  type = __builtin__.property(_get_type, _set_type)
  user_id = __builtin__.property(_get_user_id, _set_user_id)
  device_id = __builtin__.property(_get_device_id, _set_device_id)
  credential_set_name = __builtin__.property(_get_credential_set_name, _set_credential_set_name)
  transport_type = __builtin__.property(_get_transport_type, _set_transport_type)


  _pyangbind_elements = collections.OrderedDict([('event_id', event_id), ('time_stamp', time_stamp), ('message', message), ('resource_id', resource_id), ('tenant_id', tenant_id), ('status', status), ('type', type), ('user_id', user_id), ('device_id', device_id), ('credential_set_name', credential_set_name), ('transport_type', transport_type), ])


