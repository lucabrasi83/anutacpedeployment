
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class report(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/reports/report. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__report_id','__status','__type','__start_time','__end_time','__subnetwork_id','__user_id','__res_type','__path',)

  _yang_name = 'report'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CANCELLED': {}, u'RESERVE-RESOURCES-FAILED': {}, u'RESOURCES-RESERVED': {}, u'RESERVE-OPERATIONAL-RESOURCES-FAILED': {}, u'IN-PROGRESS': {}, u'RESOURCES-PROVISIONED': {}, u'SCHEDULED-FOR-PROVISION': {}, u'OPERATIONAL-RESOURCES-UNRESERVED': {}, u'WAITING': {}, u'COMPLETE': {}, u'OPERATIONAL-RESOURCES-RESERVED': {}, u'NOT-STARTED': {}, u'VALIDATED': {}, u'ERROR': {}, u'PROVISION-RESOURCES-FAILED': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='task-status', is_config=True)
    self.__res_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="res-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__user_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__subnetwork_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="subnetwork-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__path = YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCE_ALLOCATION': {}, u'CAPACITY': {}, u'SWITCH_PORT': {}, u'SERVICE': {}, u'VPC_DEVICES': {}, u'TENANT': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='report-type', is_config=True)
    self.__report_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="report-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'reports', u'report']

  def _get_report_id(self):
    """
    Getter method for report_id, mapped from YANG variable /system/tables/reports/report/report_id (string)

    YANG Description: string
    """
    return self.__report_id
      
  def _set_report_id(self, v, load=False):
    """
    Setter method for report_id, mapped from YANG variable /system/tables/reports/report/report_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_report_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_report_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="report-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """report_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="report-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__report_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_report_id(self):
    self.__report_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="report-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/tables/reports/report/status (task-status)

    YANG Description: NOT-STARTED
IN-PROGRESS
VALIDATED
RESERVE-RESOURCES-FAILED
RESOURCES-RESERVED
RESERVE-OPERATIONAL-RESOURCES-FAILED
OPERATIONAL-RESOURCES-RESERVED
OPERATIONAL-RESOURCES-UNRESERVED
PROVISION-RESOURCES-FAILED
RESOURCES-PROVISIONED
SCHEDULED-FOR-PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/tables/reports/report/status (task-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: NOT-STARTED
IN-PROGRESS
VALIDATED
RESERVE-RESOURCES-FAILED
RESOURCES-RESERVED
RESERVE-OPERATIONAL-RESOURCES-FAILED
OPERATIONAL-RESOURCES-RESERVED
OPERATIONAL-RESOURCES-UNRESERVED
PROVISION-RESOURCES-FAILED
RESOURCES-PROVISIONED
SCHEDULED-FOR-PROVISION
ERROR
WAITING
COMPLETE
CANCELLED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CANCELLED': {}, u'RESERVE-RESOURCES-FAILED': {}, u'RESOURCES-RESERVED': {}, u'RESERVE-OPERATIONAL-RESOURCES-FAILED': {}, u'IN-PROGRESS': {}, u'RESOURCES-PROVISIONED': {}, u'SCHEDULED-FOR-PROVISION': {}, u'OPERATIONAL-RESOURCES-UNRESERVED': {}, u'WAITING': {}, u'COMPLETE': {}, u'OPERATIONAL-RESOURCES-RESERVED': {}, u'NOT-STARTED': {}, u'VALIDATED': {}, u'ERROR': {}, u'PROVISION-RESOURCES-FAILED': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='task-status', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with task-status""",
          'defined-type': "controller:task-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CANCELLED': {}, u'RESERVE-RESOURCES-FAILED': {}, u'RESOURCES-RESERVED': {}, u'RESERVE-OPERATIONAL-RESOURCES-FAILED': {}, u'IN-PROGRESS': {}, u'RESOURCES-PROVISIONED': {}, u'SCHEDULED-FOR-PROVISION': {}, u'OPERATIONAL-RESOURCES-UNRESERVED': {}, u'WAITING': {}, u'COMPLETE': {}, u'OPERATIONAL-RESOURCES-RESERVED': {}, u'NOT-STARTED': {}, u'VALIDATED': {}, u'ERROR': {}, u'PROVISION-RESOURCES-FAILED': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='task-status', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CANCELLED': {}, u'RESERVE-RESOURCES-FAILED': {}, u'RESOURCES-RESERVED': {}, u'RESERVE-OPERATIONAL-RESOURCES-FAILED': {}, u'IN-PROGRESS': {}, u'RESOURCES-PROVISIONED': {}, u'SCHEDULED-FOR-PROVISION': {}, u'OPERATIONAL-RESOURCES-UNRESERVED': {}, u'WAITING': {}, u'COMPLETE': {}, u'OPERATIONAL-RESOURCES-RESERVED': {}, u'NOT-STARTED': {}, u'VALIDATED': {}, u'ERROR': {}, u'PROVISION-RESOURCES-FAILED': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='task-status', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /system/tables/reports/report/type (report-type)

    YANG Description: SERVICE
RESOURCE_ALLOCATION
CAPACITY
SWITCH_PORT
VPC_DEVICES
TENANT

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /system/tables/reports/report/type (report-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: SERVICE
RESOURCE_ALLOCATION
CAPACITY
SWITCH_PORT
VPC_DEVICES
TENANT

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCE_ALLOCATION': {}, u'CAPACITY': {}, u'SWITCH_PORT': {}, u'SERVICE': {}, u'VPC_DEVICES': {}, u'TENANT': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='report-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with report-type""",
          'defined-type': "controller:report-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCE_ALLOCATION': {}, u'CAPACITY': {}, u'SWITCH_PORT': {}, u'SERVICE': {}, u'VPC_DEVICES': {}, u'TENANT': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='report-type', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RESOURCE_ALLOCATION': {}, u'CAPACITY': {}, u'SWITCH_PORT': {}, u'SERVICE': {}, u'VPC_DEVICES': {}, u'TENANT': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='report-type', is_config=True)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /system/tables/reports/report/start_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /system/tables/reports/report/start_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_end_time(self):
    """
    Getter method for end_time, mapped from YANG variable /system/tables/reports/report/end_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__end_time
      
  def _set_end_time(self, v, load=False):
    """
    Setter method for end_time, mapped from YANG variable /system/tables/reports/report/end_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__end_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_time(self):
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_subnetwork_id(self):
    """
    Getter method for subnetwork_id, mapped from YANG variable /system/tables/reports/report/subnetwork_id (string)

    YANG Description: string
    """
    return self.__subnetwork_id
      
  def _set_subnetwork_id(self, v, load=False):
    """
    Setter method for subnetwork_id, mapped from YANG variable /system/tables/reports/report/subnetwork_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_subnetwork_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_subnetwork_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="subnetwork-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """subnetwork_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="subnetwork-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__subnetwork_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_subnetwork_id(self):
    self.__subnetwork_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="subnetwork-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_id(self):
    """
    Getter method for user_id, mapped from YANG variable /system/tables/reports/report/user_id (string)

    YANG Description: string
    """
    return self.__user_id
      
  def _set_user_id(self, v, load=False):
    """
    Setter method for user_id, mapped from YANG variable /system/tables/reports/report/user_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_id(self):
    self.__user_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_res_type(self):
    """
    Getter method for res_type, mapped from YANG variable /system/tables/reports/report/res_type (string)

    YANG Description: string
    """
    return self.__res_type
      
  def _set_res_type(self, v, load=False):
    """
    Setter method for res_type, mapped from YANG variable /system/tables/reports/report/res_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_res_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_res_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="res-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """res_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="res-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__res_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_res_type(self):
    self.__res_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="res-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_path(self):
    """
    Getter method for path, mapped from YANG variable /system/tables/reports/report/path (string)

    YANG Description: string
    """
    return self.__path
      
  def _set_path(self, v, load=False):
    """
    Setter method for path, mapped from YANG variable /system/tables/reports/report/path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path(self):
    self.__path = YANGDynClass(base=unicode, is_leaf=True, yang_name="path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  report_id = __builtin__.property(_get_report_id, _set_report_id)
  status = __builtin__.property(_get_status, _set_status)
  type = __builtin__.property(_get_type, _set_type)
  start_time = __builtin__.property(_get_start_time, _set_start_time)
  end_time = __builtin__.property(_get_end_time, _set_end_time)
  subnetwork_id = __builtin__.property(_get_subnetwork_id, _set_subnetwork_id)
  user_id = __builtin__.property(_get_user_id, _set_user_id)
  res_type = __builtin__.property(_get_res_type, _set_res_type)
  path = __builtin__.property(_get_path, _set_path)


  _pyangbind_elements = collections.OrderedDict([('report_id', report_id), ('status', status), ('type', type), ('start_time', start_time), ('end_time', end_time), ('subnetwork_id', subnetwork_id), ('user_id', user_id), ('res_type', res_type), ('path', path), ])


