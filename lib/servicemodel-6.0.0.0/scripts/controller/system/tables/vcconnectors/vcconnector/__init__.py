
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class vcconnector(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/vcconnectors/vcconnector. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__vcconnector_id','__system_tenant','__anuta_dc_location','__status','__successful','__vcenter','__count','__max_ports',)

  _yang_name = 'vcconnector'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__successful = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="successful", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__anuta_dc_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="anuta-dc-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__max_ports = YANGDynClass(base=unicode, is_leaf=True, yang_name="max-ports", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__vcconnector_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcconnector-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__vcenter = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcenter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__system_tenant = YANGDynClass(base=unicode, is_leaf=True, yang_name="system-tenant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'vcconnectors', u'vcconnector']

  def _get_vcconnector_id(self):
    """
    Getter method for vcconnector_id, mapped from YANG variable /system/tables/vcconnectors/vcconnector/vcconnector_id (string)

    YANG Description: string
    """
    return self.__vcconnector_id
      
  def _set_vcconnector_id(self, v, load=False):
    """
    Setter method for vcconnector_id, mapped from YANG variable /system/tables/vcconnectors/vcconnector/vcconnector_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vcconnector_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vcconnector_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vcconnector-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vcconnector_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vcconnector-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__vcconnector_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vcconnector_id(self):
    self.__vcconnector_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcconnector-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_system_tenant(self):
    """
    Getter method for system_tenant, mapped from YANG variable /system/tables/vcconnectors/vcconnector/system_tenant (string)

    YANG Description: string
    """
    return self.__system_tenant
      
  def _set_system_tenant(self, v, load=False):
    """
    Setter method for system_tenant, mapped from YANG variable /system/tables/vcconnectors/vcconnector/system_tenant (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_tenant is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_tenant() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="system-tenant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_tenant must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="system-tenant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__system_tenant = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_tenant(self):
    self.__system_tenant = YANGDynClass(base=unicode, is_leaf=True, yang_name="system-tenant", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_anuta_dc_location(self):
    """
    Getter method for anuta_dc_location, mapped from YANG variable /system/tables/vcconnectors/vcconnector/anuta_dc_location (string)

    YANG Description: string
    """
    return self.__anuta_dc_location
      
  def _set_anuta_dc_location(self, v, load=False):
    """
    Setter method for anuta_dc_location, mapped from YANG variable /system/tables/vcconnectors/vcconnector/anuta_dc_location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_anuta_dc_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_anuta_dc_location() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="anuta-dc-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """anuta_dc_location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="anuta-dc-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__anuta_dc_location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_anuta_dc_location(self):
    self.__anuta_dc_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="anuta-dc-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/tables/vcconnectors/vcconnector/status (string)

    YANG Description: string
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/tables/vcconnectors/vcconnector/status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_successful(self):
    """
    Getter method for successful, mapped from YANG variable /system/tables/vcconnectors/vcconnector/successful (boolean)

    YANG Description: successful: True/False
    """
    return self.__successful
      
  def _set_successful(self, v, load=False):
    """
    Setter method for successful, mapped from YANG variable /system/tables/vcconnectors/vcconnector/successful (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_successful is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_successful() directly.

    YANG Description: successful: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="successful", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """successful must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="successful", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__successful = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_successful(self):
    self.__successful = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="successful", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_vcenter(self):
    """
    Getter method for vcenter, mapped from YANG variable /system/tables/vcconnectors/vcconnector/vcenter (string)

    YANG Description: string
    """
    return self.__vcenter
      
  def _set_vcenter(self, v, load=False):
    """
    Setter method for vcenter, mapped from YANG variable /system/tables/vcconnectors/vcconnector/vcenter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vcenter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vcenter() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vcenter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vcenter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vcenter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__vcenter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vcenter(self):
    self.__vcenter = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcenter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_count(self):
    """
    Getter method for count, mapped from YANG variable /system/tables/vcconnectors/vcconnector/count (uint32)

    YANG Description: 0..4294967295
    """
    return self.__count
      
  def _set_count(self, v, load=False):
    """
    Setter method for count, mapped from YANG variable /system/tables/vcconnectors/vcconnector/count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_count() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_count(self):
    self.__count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_max_ports(self):
    """
    Getter method for max_ports, mapped from YANG variable /system/tables/vcconnectors/vcconnector/max_ports (string)

    YANG Description: string
    """
    return self.__max_ports
      
  def _set_max_ports(self, v, load=False):
    """
    Setter method for max_ports, mapped from YANG variable /system/tables/vcconnectors/vcconnector/max_ports (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_ports() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="max-ports", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_ports must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="max-ports", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__max_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_ports(self):
    self.__max_ports = YANGDynClass(base=unicode, is_leaf=True, yang_name="max-ports", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  vcconnector_id = __builtin__.property(_get_vcconnector_id, _set_vcconnector_id)
  system_tenant = __builtin__.property(_get_system_tenant, _set_system_tenant)
  anuta_dc_location = __builtin__.property(_get_anuta_dc_location, _set_anuta_dc_location)
  status = __builtin__.property(_get_status, _set_status)
  successful = __builtin__.property(_get_successful, _set_successful)
  vcenter = __builtin__.property(_get_vcenter, _set_vcenter)
  count = __builtin__.property(_get_count, _set_count)
  max_ports = __builtin__.property(_get_max_ports, _set_max_ports)


  _pyangbind_elements = collections.OrderedDict([('vcconnector_id', vcconnector_id), ('system_tenant', system_tenant), ('anuta_dc_location', anuta_dc_location), ('status', status), ('successful', successful), ('vcenter', vcenter), ('count', count), ('max_ports', max_ports), ])


