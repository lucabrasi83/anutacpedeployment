
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class datapathconfig(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/datapathconfig/datapathconfig. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__datapathconfig_id','__port_profile','__configure_default_gateway','__ha_port_profile','__mgmt_interface','__use_mgmt_interface','__vlan',)

  _yang_name = 'datapathconfig'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__mgmt_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__ha_port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="ha-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__datapathconfig_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="datapathconfig-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__configure_default_gateway = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-default-gateway", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__use_mgmt_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="use-mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'datapathconfig', u'datapathconfig']

  def _get_datapathconfig_id(self):
    """
    Getter method for datapathconfig_id, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/datapathconfig_id (string)

    YANG Description: string
    """
    return self.__datapathconfig_id
      
  def _set_datapathconfig_id(self, v, load=False):
    """
    Setter method for datapathconfig_id, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/datapathconfig_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_datapathconfig_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_datapathconfig_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="datapathconfig-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """datapathconfig_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="datapathconfig-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__datapathconfig_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_datapathconfig_id(self):
    self.__datapathconfig_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="datapathconfig-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_port_profile(self):
    """
    Getter method for port_profile, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/port_profile (string)

    YANG Description: string
    """
    return self.__port_profile
      
  def _set_port_profile(self, v, load=False):
    """
    Setter method for port_profile, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/port_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_profile() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__port_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_profile(self):
    self.__port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_configure_default_gateway(self):
    """
    Getter method for configure_default_gateway, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/configure_default_gateway (boolean)

    YANG Description: configure-default-gateway: True/False
    """
    return self.__configure_default_gateway
      
  def _set_configure_default_gateway(self, v, load=False):
    """
    Setter method for configure_default_gateway, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/configure_default_gateway (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configure_default_gateway is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configure_default_gateway() directly.

    YANG Description: configure-default-gateway: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="configure-default-gateway", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configure_default_gateway must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-default-gateway", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__configure_default_gateway = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configure_default_gateway(self):
    self.__configure_default_gateway = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-default-gateway", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_ha_port_profile(self):
    """
    Getter method for ha_port_profile, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/ha_port_profile (string)

    YANG Description: string
    """
    return self.__ha_port_profile
      
  def _set_ha_port_profile(self, v, load=False):
    """
    Setter method for ha_port_profile, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/ha_port_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ha_port_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ha_port_profile() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ha-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ha_port_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ha-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__ha_port_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ha_port_profile(self):
    self.__ha_port_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="ha-port-profile", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_mgmt_interface(self):
    """
    Getter method for mgmt_interface, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/mgmt_interface (string)

    YANG Description: string
    """
    return self.__mgmt_interface
      
  def _set_mgmt_interface(self, v, load=False):
    """
    Setter method for mgmt_interface, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/mgmt_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mgmt_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_interface(self):
    self.__mgmt_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_use_mgmt_interface(self):
    """
    Getter method for use_mgmt_interface, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/use_mgmt_interface (string)

    YANG Description: string
    """
    return self.__use_mgmt_interface
      
  def _set_use_mgmt_interface(self, v, load=False):
    """
    Setter method for use_mgmt_interface, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/use_mgmt_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_use_mgmt_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_use_mgmt_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="use-mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """use_mgmt_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="use-mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__use_mgmt_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_use_mgmt_interface(self):
    self.__use_mgmt_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="use-mgmt-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/vlan (uint32)

    YANG Description: 0..4294967295
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /system/tables/datapathconfig/datapathconfig/vlan (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vlan", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

  datapathconfig_id = __builtin__.property(_get_datapathconfig_id, _set_datapathconfig_id)
  port_profile = __builtin__.property(_get_port_profile, _set_port_profile)
  configure_default_gateway = __builtin__.property(_get_configure_default_gateway, _set_configure_default_gateway)
  ha_port_profile = __builtin__.property(_get_ha_port_profile, _set_ha_port_profile)
  mgmt_interface = __builtin__.property(_get_mgmt_interface, _set_mgmt_interface)
  use_mgmt_interface = __builtin__.property(_get_use_mgmt_interface, _set_use_mgmt_interface)
  vlan = __builtin__.property(_get_vlan, _set_vlan)


  _pyangbind_elements = collections.OrderedDict([('datapathconfig_id', datapathconfig_id), ('port_profile', port_profile), ('configure_default_gateway', configure_default_gateway), ('ha_port_profile', ha_port_profile), ('mgmt_interface', mgmt_interface), ('use_mgmt_interface', use_mgmt_interface), ('vlan', vlan), ])


