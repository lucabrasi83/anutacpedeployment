
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class openstack_resource_mapping(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/openstack-resource-mappings/openstack-resource-mapping. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__openstack_resource_mapping_id','__resource_id','__segmentation_id','__resource_type','__mapping_id',)

  _yang_name = 'openstack-resource-mapping'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mapping_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__segmentation_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="segmentation-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__openstack_resource_mapping_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="openstack-resource-mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__resource_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'JOB_TEMPLATES': {}, u'ReverseProxy': {}, u'PING_GROUP': {}, u'DIAGNOSTICS_JOB_GROUP': {}, u'LINK': {}, u'ServerFarm': {}, u'MAINTENANCE_GROUP': {}, u'DynamicNAT': {}, u'ObjectGroup': {}, u'STACKMEMBER': {}, u'GlobalLBTopology': {}, u'CONFIGURATION_GROUP': {}, u'Vlan': {}, u'ApplicationSet': {}, u'DEVICE_CONFIGURATION': {}, u'JOB': {}, u'ExternalNetwork': {}, u'IpAddressEntry': {}, u'NetworkFunction': {}, u'CustomFeature': {}, u'IPSSensor': {}, u'L3Zone': {}, u'ParentServerPort': {}, u'LBSSLCertificate': {}, u'ForwardingHost': {}, u'Protocol': {}, u'ServicePolicy': {}, u'DEVICE_INVENTORY': {}, u'ComputeFirewall': {}, u'FilterUrlTraffic': {}, u'CP_SERVICE_OBJECT': {}, u'DEVICE_CONFIGURATION_GROUP': {}, u'PortProfile': {}, u'StaticRoute': {}, u'Application': {}, u'VDC': {}, u'DISCOVERY_GROUP': {}, u'SecurityProfile': {}, u'DISCOVERY': {}, u'NONE': {}, u'GlobalVirtualServer': {}, u'HUB': {}, u'CustomOperation': {}, u'HealthMonitor': {}, u'JOB_TEMPLATE_INSTANCES': {}, u'FwUserGroup': {}, u'VirtualNetwork': {}, u'DIAGNOSTICS_JOB_TEMPLATES': {}, u'MONITOR': {}, u'ADMIN_SETTINGS': {}, u'vZone': {}, u'NATExempt': {}, u'MAINTENANCE': {}, u'NATOverload': {}, u'ComputeFirewallObjectGroup': {}, u'RServicePool': {}, u'FirewallRule': {}, u'GlobalVDC': {}, u'ServicePolicyRule': {}, u'DEVICE_INVENTORY_TEMPLATES': {}, u'SecurityPolicy': {}, u'DEVICE_INVENTORY_GROUP': {}, u'RouteLeak': {}, u'RouterSecurityPolicy': {}, u'DISCOVERY_JOB_TEMPLATES': {}, u'StaticNAT': {}, u'IDS': {}, u'ALL_JOBS_GROUP': {}, u'PerformanceRoutingPolicy': {}, u'ReplaceDevice': {}, u'GlobalApplicationService': {}, u'InfraVlan': {}, u'FwUser': {}, u'UNKNOWN_JOB_TYPE_TEMPLATES': {}, u'SSLKey': {}, u'SAVED_TEMPLATES': {}, u'MONITOR_GROUP': {}, u'FirewallZone': {}, u'vZoneCondition': {}, u'ProtocolGroup': {}, u'ServerPort': {}, u'RService': {}, u'CONFIGURATION': {}, u'JOB_TEMPLATE': {}, u'DHCPPool': {}, u'NetworkObject': {}, u'JOB_GROUP': {}, u'INVENTORY': {}, u'INVENTORY_GROUP': {}, u'HACLUSTER': {}, u'IpAddressPool': {}, u'TENANT': {}, u'PolicyGroup': {}, u'VirtualRoutingInstance': {}, u'Firewall': {}, u'WANOptimizer': {}, u'GroupPolicy': {}, u'ConfigScript': {}, u'InterConnectNetworks': {}, u'FOLDER': {}, u'RealServer': {}, u'DMVPN': {}, u'RemoteAccessVPN': {}, u'DIAGNOSTICS_GROUP': {}, u'ASSOCIATED_RESOURCE': {}, u'UNKNOWN_JOB_TYPE': {}, u'DIAGNOSTICS': {}, u'LBSSLKey': {}, u'JOB_LIST': {}, u'JOB_RESULTS': {}, u'PolicyRouting': {}, u'RUNNING_TASKS': {}, u'JOBS_EXECUTED': {}, u'AddressSet': {}, u'WANEdgeQOSPolicy': {}, u'IPSec': {}, u'WirelessLAN': {}, u'CP_DYNAMIC_OBJECT': {}, u'VDOMLink': {}, u'AddressBook': {}, u'VM': {}, u'DNSProxy': {}, u'ObjectGroupCondition': {}, u'WANOpRedirectionCondition': {}, u'Addresses': {}, u'DIAGNOSTICS_JOB': {}, u'AddDevice': {}, u'PING': {}, u'ForwardProxy': {}, u'SERVICE_SEGMENT': {}, u'ExtNetwork': {}, u'PolicyCondition': {}, u'Port': {}, u'LoadBalancer': {}},), is_leaf=True, yang_name="resource-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resourcetype', is_config=True)
    self.__resource_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'openstack-resource-mappings', u'openstack-resource-mapping']

  def _get_openstack_resource_mapping_id(self):
    """
    Getter method for openstack_resource_mapping_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/openstack_resource_mapping_id (string)

    YANG Description: string
    """
    return self.__openstack_resource_mapping_id
      
  def _set_openstack_resource_mapping_id(self, v, load=False):
    """
    Setter method for openstack_resource_mapping_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/openstack_resource_mapping_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_openstack_resource_mapping_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_openstack_resource_mapping_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="openstack-resource-mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """openstack_resource_mapping_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="openstack-resource-mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__openstack_resource_mapping_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_openstack_resource_mapping_id(self):
    self.__openstack_resource_mapping_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="openstack-resource-mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_resource_id(self):
    """
    Getter method for resource_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/resource_id (string)

    YANG Description: string
    """
    return self.__resource_id
      
  def _set_resource_id(self, v, load=False):
    """
    Setter method for resource_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/resource_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__resource_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource_id(self):
    self.__resource_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="resource-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_segmentation_id(self):
    """
    Getter method for segmentation_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/segmentation_id (string)

    YANG Description: string
    """
    return self.__segmentation_id
      
  def _set_segmentation_id(self, v, load=False):
    """
    Setter method for segmentation_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/segmentation_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_segmentation_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_segmentation_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="segmentation-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """segmentation_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="segmentation-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__segmentation_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_segmentation_id(self):
    self.__segmentation_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="segmentation-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_resource_type(self):
    """
    Getter method for resource_type, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/resource_type (resourcetype)

    YANG Description: VDC
ExternalNetwork
L3Zone
VirtualNetwork
NetworkFunction
LoadBalancer
ReverseProxy
ExtNetwork
PortProfile
Firewall
RemoteAccessVPN
ComputeFirewall
GlobalVDC
WirelessLAN
ForwardProxy
WANOptimizer
CustomFeature
IDS
AddDevice
ReplaceDevice
ConfigScript
SSLKey
IpAddressPool
IpAddressEntry
InterConnectNetworks
Port
FirewallRule
RouteLeak
AddressBook
Addresses
AddressSet
Application
ApplicationSet
VDOMLink
DNSProxy
DHCPPool
NetworkObject
ObjectGroup
ComputeFirewallObjectGroup
ObjectGroupCondition
RealServer
ServerFarm
RServicePool
RService
LBSSLCertificate
LBSSLKey
GlobalApplicationService
GlobalVirtualServer
GlobalLBTopology
CustomOperation
DynamicNAT
StaticNAT
NATOverload
NATExempt
ForwardingHost
FilterUrlTraffic
StaticRoute
SecurityProfile
ServicePolicy
ServicePolicyRule
PolicyCondition
vZone
vZoneCondition
Vlan
InfraVlan
ServerPort
PolicyGroup
GroupPolicy
Protocol
ProtocolGroup
ParentServerPort
STACKMEMBER
HACLUSTER
FwUser
FwUserGroup
IPSSensor
IPSec
JOB
JOB_LIST
JOB_GROUP
SAVED_TEMPLATES
RUNNING_TASKS
JOB_TEMPLATES
JOB_TEMPLATE_INSTANCES
DISCOVERY_JOB_TEMPLATES
DIAGNOSTICS_JOB_TEMPLATES
DEVICE_INVENTORY_TEMPLATES
UNKNOWN_JOB_TYPE_TEMPLATES
DISCOVERY
DIAGNOSTICS
PING
MONITOR
INVENTORY
MAINTENANCE
CONFIGURATION
DISCOVERY_GROUP
DIAGNOSTICS_GROUP
MONITOR_GROUP
INVENTORY_GROUP
MAINTENANCE_GROUP
CONFIGURATION_GROUP
ALL_JOBS_GROUP
DIAGNOSTICS_JOB
DEVICE_INVENTORY
DIAGNOSTICS_JOB_GROUP
DEVICE_INVENTORY_GROUP
DEVICE_CONFIGURATION
DEVICE_CONFIGURATION_GROUP
PING_GROUP
UNKNOWN_JOB_TYPE
JOBS_EXECUTED
JOB_TEMPLATE
JOB_RESULTS
ADMIN_SETTINGS
VirtualRoutingInstance
FirewallZone
WANOpRedirectionCondition
VM
PolicyRouting
PerformanceRoutingPolicy
WANEdgeQOSPolicy
SecurityPolicy
RouterSecurityPolicy
TENANT
FOLDER
SERVICE_SEGMENT
ASSOCIATED_RESOURCE
CP_DYNAMIC_OBJECT
CP_SERVICE_OBJECT
HealthMonitor
LINK
DMVPN
NONE
HUB

    """
    return self.__resource_type
      
  def _set_resource_type(self, v, load=False):
    """
    Setter method for resource_type, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/resource_type (resourcetype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource_type() directly.

    YANG Description: VDC
ExternalNetwork
L3Zone
VirtualNetwork
NetworkFunction
LoadBalancer
ReverseProxy
ExtNetwork
PortProfile
Firewall
RemoteAccessVPN
ComputeFirewall
GlobalVDC
WirelessLAN
ForwardProxy
WANOptimizer
CustomFeature
IDS
AddDevice
ReplaceDevice
ConfigScript
SSLKey
IpAddressPool
IpAddressEntry
InterConnectNetworks
Port
FirewallRule
RouteLeak
AddressBook
Addresses
AddressSet
Application
ApplicationSet
VDOMLink
DNSProxy
DHCPPool
NetworkObject
ObjectGroup
ComputeFirewallObjectGroup
ObjectGroupCondition
RealServer
ServerFarm
RServicePool
RService
LBSSLCertificate
LBSSLKey
GlobalApplicationService
GlobalVirtualServer
GlobalLBTopology
CustomOperation
DynamicNAT
StaticNAT
NATOverload
NATExempt
ForwardingHost
FilterUrlTraffic
StaticRoute
SecurityProfile
ServicePolicy
ServicePolicyRule
PolicyCondition
vZone
vZoneCondition
Vlan
InfraVlan
ServerPort
PolicyGroup
GroupPolicy
Protocol
ProtocolGroup
ParentServerPort
STACKMEMBER
HACLUSTER
FwUser
FwUserGroup
IPSSensor
IPSec
JOB
JOB_LIST
JOB_GROUP
SAVED_TEMPLATES
RUNNING_TASKS
JOB_TEMPLATES
JOB_TEMPLATE_INSTANCES
DISCOVERY_JOB_TEMPLATES
DIAGNOSTICS_JOB_TEMPLATES
DEVICE_INVENTORY_TEMPLATES
UNKNOWN_JOB_TYPE_TEMPLATES
DISCOVERY
DIAGNOSTICS
PING
MONITOR
INVENTORY
MAINTENANCE
CONFIGURATION
DISCOVERY_GROUP
DIAGNOSTICS_GROUP
MONITOR_GROUP
INVENTORY_GROUP
MAINTENANCE_GROUP
CONFIGURATION_GROUP
ALL_JOBS_GROUP
DIAGNOSTICS_JOB
DEVICE_INVENTORY
DIAGNOSTICS_JOB_GROUP
DEVICE_INVENTORY_GROUP
DEVICE_CONFIGURATION
DEVICE_CONFIGURATION_GROUP
PING_GROUP
UNKNOWN_JOB_TYPE
JOBS_EXECUTED
JOB_TEMPLATE
JOB_RESULTS
ADMIN_SETTINGS
VirtualRoutingInstance
FirewallZone
WANOpRedirectionCondition
VM
PolicyRouting
PerformanceRoutingPolicy
WANEdgeQOSPolicy
SecurityPolicy
RouterSecurityPolicy
TENANT
FOLDER
SERVICE_SEGMENT
ASSOCIATED_RESOURCE
CP_DYNAMIC_OBJECT
CP_SERVICE_OBJECT
HealthMonitor
LINK
DMVPN
NONE
HUB

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'JOB_TEMPLATES': {}, u'ReverseProxy': {}, u'PING_GROUP': {}, u'DIAGNOSTICS_JOB_GROUP': {}, u'LINK': {}, u'ServerFarm': {}, u'MAINTENANCE_GROUP': {}, u'DynamicNAT': {}, u'ObjectGroup': {}, u'STACKMEMBER': {}, u'GlobalLBTopology': {}, u'CONFIGURATION_GROUP': {}, u'Vlan': {}, u'ApplicationSet': {}, u'DEVICE_CONFIGURATION': {}, u'JOB': {}, u'ExternalNetwork': {}, u'IpAddressEntry': {}, u'NetworkFunction': {}, u'CustomFeature': {}, u'IPSSensor': {}, u'L3Zone': {}, u'ParentServerPort': {}, u'LBSSLCertificate': {}, u'ForwardingHost': {}, u'Protocol': {}, u'ServicePolicy': {}, u'DEVICE_INVENTORY': {}, u'ComputeFirewall': {}, u'FilterUrlTraffic': {}, u'CP_SERVICE_OBJECT': {}, u'DEVICE_CONFIGURATION_GROUP': {}, u'PortProfile': {}, u'StaticRoute': {}, u'Application': {}, u'VDC': {}, u'DISCOVERY_GROUP': {}, u'SecurityProfile': {}, u'DISCOVERY': {}, u'NONE': {}, u'GlobalVirtualServer': {}, u'HUB': {}, u'CustomOperation': {}, u'HealthMonitor': {}, u'JOB_TEMPLATE_INSTANCES': {}, u'FwUserGroup': {}, u'VirtualNetwork': {}, u'DIAGNOSTICS_JOB_TEMPLATES': {}, u'MONITOR': {}, u'ADMIN_SETTINGS': {}, u'vZone': {}, u'NATExempt': {}, u'MAINTENANCE': {}, u'NATOverload': {}, u'ComputeFirewallObjectGroup': {}, u'RServicePool': {}, u'FirewallRule': {}, u'GlobalVDC': {}, u'ServicePolicyRule': {}, u'DEVICE_INVENTORY_TEMPLATES': {}, u'SecurityPolicy': {}, u'DEVICE_INVENTORY_GROUP': {}, u'RouteLeak': {}, u'RouterSecurityPolicy': {}, u'DISCOVERY_JOB_TEMPLATES': {}, u'StaticNAT': {}, u'IDS': {}, u'ALL_JOBS_GROUP': {}, u'PerformanceRoutingPolicy': {}, u'ReplaceDevice': {}, u'GlobalApplicationService': {}, u'InfraVlan': {}, u'FwUser': {}, u'UNKNOWN_JOB_TYPE_TEMPLATES': {}, u'SSLKey': {}, u'SAVED_TEMPLATES': {}, u'MONITOR_GROUP': {}, u'FirewallZone': {}, u'vZoneCondition': {}, u'ProtocolGroup': {}, u'ServerPort': {}, u'RService': {}, u'CONFIGURATION': {}, u'JOB_TEMPLATE': {}, u'DHCPPool': {}, u'NetworkObject': {}, u'JOB_GROUP': {}, u'INVENTORY': {}, u'INVENTORY_GROUP': {}, u'HACLUSTER': {}, u'IpAddressPool': {}, u'TENANT': {}, u'PolicyGroup': {}, u'VirtualRoutingInstance': {}, u'Firewall': {}, u'WANOptimizer': {}, u'GroupPolicy': {}, u'ConfigScript': {}, u'InterConnectNetworks': {}, u'FOLDER': {}, u'RealServer': {}, u'DMVPN': {}, u'RemoteAccessVPN': {}, u'DIAGNOSTICS_GROUP': {}, u'ASSOCIATED_RESOURCE': {}, u'UNKNOWN_JOB_TYPE': {}, u'DIAGNOSTICS': {}, u'LBSSLKey': {}, u'JOB_LIST': {}, u'JOB_RESULTS': {}, u'PolicyRouting': {}, u'RUNNING_TASKS': {}, u'JOBS_EXECUTED': {}, u'AddressSet': {}, u'WANEdgeQOSPolicy': {}, u'IPSec': {}, u'WirelessLAN': {}, u'CP_DYNAMIC_OBJECT': {}, u'VDOMLink': {}, u'AddressBook': {}, u'VM': {}, u'DNSProxy': {}, u'ObjectGroupCondition': {}, u'WANOpRedirectionCondition': {}, u'Addresses': {}, u'DIAGNOSTICS_JOB': {}, u'AddDevice': {}, u'PING': {}, u'ForwardProxy': {}, u'SERVICE_SEGMENT': {}, u'ExtNetwork': {}, u'PolicyCondition': {}, u'Port': {}, u'LoadBalancer': {}},), is_leaf=True, yang_name="resource-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resourcetype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource_type must be of a type compatible with resourcetype""",
          'defined-type': "controller:resourcetype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'JOB_TEMPLATES': {}, u'ReverseProxy': {}, u'PING_GROUP': {}, u'DIAGNOSTICS_JOB_GROUP': {}, u'LINK': {}, u'ServerFarm': {}, u'MAINTENANCE_GROUP': {}, u'DynamicNAT': {}, u'ObjectGroup': {}, u'STACKMEMBER': {}, u'GlobalLBTopology': {}, u'CONFIGURATION_GROUP': {}, u'Vlan': {}, u'ApplicationSet': {}, u'DEVICE_CONFIGURATION': {}, u'JOB': {}, u'ExternalNetwork': {}, u'IpAddressEntry': {}, u'NetworkFunction': {}, u'CustomFeature': {}, u'IPSSensor': {}, u'L3Zone': {}, u'ParentServerPort': {}, u'LBSSLCertificate': {}, u'ForwardingHost': {}, u'Protocol': {}, u'ServicePolicy': {}, u'DEVICE_INVENTORY': {}, u'ComputeFirewall': {}, u'FilterUrlTraffic': {}, u'CP_SERVICE_OBJECT': {}, u'DEVICE_CONFIGURATION_GROUP': {}, u'PortProfile': {}, u'StaticRoute': {}, u'Application': {}, u'VDC': {}, u'DISCOVERY_GROUP': {}, u'SecurityProfile': {}, u'DISCOVERY': {}, u'NONE': {}, u'GlobalVirtualServer': {}, u'HUB': {}, u'CustomOperation': {}, u'HealthMonitor': {}, u'JOB_TEMPLATE_INSTANCES': {}, u'FwUserGroup': {}, u'VirtualNetwork': {}, u'DIAGNOSTICS_JOB_TEMPLATES': {}, u'MONITOR': {}, u'ADMIN_SETTINGS': {}, u'vZone': {}, u'NATExempt': {}, u'MAINTENANCE': {}, u'NATOverload': {}, u'ComputeFirewallObjectGroup': {}, u'RServicePool': {}, u'FirewallRule': {}, u'GlobalVDC': {}, u'ServicePolicyRule': {}, u'DEVICE_INVENTORY_TEMPLATES': {}, u'SecurityPolicy': {}, u'DEVICE_INVENTORY_GROUP': {}, u'RouteLeak': {}, u'RouterSecurityPolicy': {}, u'DISCOVERY_JOB_TEMPLATES': {}, u'StaticNAT': {}, u'IDS': {}, u'ALL_JOBS_GROUP': {}, u'PerformanceRoutingPolicy': {}, u'ReplaceDevice': {}, u'GlobalApplicationService': {}, u'InfraVlan': {}, u'FwUser': {}, u'UNKNOWN_JOB_TYPE_TEMPLATES': {}, u'SSLKey': {}, u'SAVED_TEMPLATES': {}, u'MONITOR_GROUP': {}, u'FirewallZone': {}, u'vZoneCondition': {}, u'ProtocolGroup': {}, u'ServerPort': {}, u'RService': {}, u'CONFIGURATION': {}, u'JOB_TEMPLATE': {}, u'DHCPPool': {}, u'NetworkObject': {}, u'JOB_GROUP': {}, u'INVENTORY': {}, u'INVENTORY_GROUP': {}, u'HACLUSTER': {}, u'IpAddressPool': {}, u'TENANT': {}, u'PolicyGroup': {}, u'VirtualRoutingInstance': {}, u'Firewall': {}, u'WANOptimizer': {}, u'GroupPolicy': {}, u'ConfigScript': {}, u'InterConnectNetworks': {}, u'FOLDER': {}, u'RealServer': {}, u'DMVPN': {}, u'RemoteAccessVPN': {}, u'DIAGNOSTICS_GROUP': {}, u'ASSOCIATED_RESOURCE': {}, u'UNKNOWN_JOB_TYPE': {}, u'DIAGNOSTICS': {}, u'LBSSLKey': {}, u'JOB_LIST': {}, u'JOB_RESULTS': {}, u'PolicyRouting': {}, u'RUNNING_TASKS': {}, u'JOBS_EXECUTED': {}, u'AddressSet': {}, u'WANEdgeQOSPolicy': {}, u'IPSec': {}, u'WirelessLAN': {}, u'CP_DYNAMIC_OBJECT': {}, u'VDOMLink': {}, u'AddressBook': {}, u'VM': {}, u'DNSProxy': {}, u'ObjectGroupCondition': {}, u'WANOpRedirectionCondition': {}, u'Addresses': {}, u'DIAGNOSTICS_JOB': {}, u'AddDevice': {}, u'PING': {}, u'ForwardProxy': {}, u'SERVICE_SEGMENT': {}, u'ExtNetwork': {}, u'PolicyCondition': {}, u'Port': {}, u'LoadBalancer': {}},), is_leaf=True, yang_name="resource-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resourcetype', is_config=True)""",
        })

    self.__resource_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource_type(self):
    self.__resource_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'JOB_TEMPLATES': {}, u'ReverseProxy': {}, u'PING_GROUP': {}, u'DIAGNOSTICS_JOB_GROUP': {}, u'LINK': {}, u'ServerFarm': {}, u'MAINTENANCE_GROUP': {}, u'DynamicNAT': {}, u'ObjectGroup': {}, u'STACKMEMBER': {}, u'GlobalLBTopology': {}, u'CONFIGURATION_GROUP': {}, u'Vlan': {}, u'ApplicationSet': {}, u'DEVICE_CONFIGURATION': {}, u'JOB': {}, u'ExternalNetwork': {}, u'IpAddressEntry': {}, u'NetworkFunction': {}, u'CustomFeature': {}, u'IPSSensor': {}, u'L3Zone': {}, u'ParentServerPort': {}, u'LBSSLCertificate': {}, u'ForwardingHost': {}, u'Protocol': {}, u'ServicePolicy': {}, u'DEVICE_INVENTORY': {}, u'ComputeFirewall': {}, u'FilterUrlTraffic': {}, u'CP_SERVICE_OBJECT': {}, u'DEVICE_CONFIGURATION_GROUP': {}, u'PortProfile': {}, u'StaticRoute': {}, u'Application': {}, u'VDC': {}, u'DISCOVERY_GROUP': {}, u'SecurityProfile': {}, u'DISCOVERY': {}, u'NONE': {}, u'GlobalVirtualServer': {}, u'HUB': {}, u'CustomOperation': {}, u'HealthMonitor': {}, u'JOB_TEMPLATE_INSTANCES': {}, u'FwUserGroup': {}, u'VirtualNetwork': {}, u'DIAGNOSTICS_JOB_TEMPLATES': {}, u'MONITOR': {}, u'ADMIN_SETTINGS': {}, u'vZone': {}, u'NATExempt': {}, u'MAINTENANCE': {}, u'NATOverload': {}, u'ComputeFirewallObjectGroup': {}, u'RServicePool': {}, u'FirewallRule': {}, u'GlobalVDC': {}, u'ServicePolicyRule': {}, u'DEVICE_INVENTORY_TEMPLATES': {}, u'SecurityPolicy': {}, u'DEVICE_INVENTORY_GROUP': {}, u'RouteLeak': {}, u'RouterSecurityPolicy': {}, u'DISCOVERY_JOB_TEMPLATES': {}, u'StaticNAT': {}, u'IDS': {}, u'ALL_JOBS_GROUP': {}, u'PerformanceRoutingPolicy': {}, u'ReplaceDevice': {}, u'GlobalApplicationService': {}, u'InfraVlan': {}, u'FwUser': {}, u'UNKNOWN_JOB_TYPE_TEMPLATES': {}, u'SSLKey': {}, u'SAVED_TEMPLATES': {}, u'MONITOR_GROUP': {}, u'FirewallZone': {}, u'vZoneCondition': {}, u'ProtocolGroup': {}, u'ServerPort': {}, u'RService': {}, u'CONFIGURATION': {}, u'JOB_TEMPLATE': {}, u'DHCPPool': {}, u'NetworkObject': {}, u'JOB_GROUP': {}, u'INVENTORY': {}, u'INVENTORY_GROUP': {}, u'HACLUSTER': {}, u'IpAddressPool': {}, u'TENANT': {}, u'PolicyGroup': {}, u'VirtualRoutingInstance': {}, u'Firewall': {}, u'WANOptimizer': {}, u'GroupPolicy': {}, u'ConfigScript': {}, u'InterConnectNetworks': {}, u'FOLDER': {}, u'RealServer': {}, u'DMVPN': {}, u'RemoteAccessVPN': {}, u'DIAGNOSTICS_GROUP': {}, u'ASSOCIATED_RESOURCE': {}, u'UNKNOWN_JOB_TYPE': {}, u'DIAGNOSTICS': {}, u'LBSSLKey': {}, u'JOB_LIST': {}, u'JOB_RESULTS': {}, u'PolicyRouting': {}, u'RUNNING_TASKS': {}, u'JOBS_EXECUTED': {}, u'AddressSet': {}, u'WANEdgeQOSPolicy': {}, u'IPSec': {}, u'WirelessLAN': {}, u'CP_DYNAMIC_OBJECT': {}, u'VDOMLink': {}, u'AddressBook': {}, u'VM': {}, u'DNSProxy': {}, u'ObjectGroupCondition': {}, u'WANOpRedirectionCondition': {}, u'Addresses': {}, u'DIAGNOSTICS_JOB': {}, u'AddDevice': {}, u'PING': {}, u'ForwardProxy': {}, u'SERVICE_SEGMENT': {}, u'ExtNetwork': {}, u'PolicyCondition': {}, u'Port': {}, u'LoadBalancer': {}},), is_leaf=True, yang_name="resource-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='resourcetype', is_config=True)


  def _get_mapping_id(self):
    """
    Getter method for mapping_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/mapping_id (string)

    YANG Description: string
    """
    return self.__mapping_id
      
  def _set_mapping_id(self, v, load=False):
    """
    Setter method for mapping_id, mapped from YANG variable /system/tables/openstack_resource_mappings/openstack_resource_mapping/mapping_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mapping_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mapping_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mapping_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mapping_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mapping_id(self):
    self.__mapping_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="mapping-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  openstack_resource_mapping_id = __builtin__.property(_get_openstack_resource_mapping_id, _set_openstack_resource_mapping_id)
  resource_id = __builtin__.property(_get_resource_id, _set_resource_id)
  segmentation_id = __builtin__.property(_get_segmentation_id, _set_segmentation_id)
  resource_type = __builtin__.property(_get_resource_type, _set_resource_type)
  mapping_id = __builtin__.property(_get_mapping_id, _set_mapping_id)


  _pyangbind_elements = collections.OrderedDict([('openstack_resource_mapping_id', openstack_resource_mapping_id), ('resource_id', resource_id), ('segmentation_id', segmentation_id), ('resource_type', resource_type), ('mapping_id', mapping_id), ])


