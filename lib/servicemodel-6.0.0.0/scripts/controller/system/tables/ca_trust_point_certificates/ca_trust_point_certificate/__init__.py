
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ca_trust_point_certificate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/ca-trust-point-certificates/ca-trust-point-certificate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__url','__serial_number','__mgmt_vrf_name','__ip_address','__mgmt_vrf','__add_serial_number','__add_auto_enroll','__add_ip','__password','__revocation_check','__source_interface','__auto_entroll_period','__ca_certificate',)

  _yang_name = 'ca-trust-point-certificate'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__add_serial_number = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__add_auto_enroll = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-auto-enroll", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__ca_certificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="ca-certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__revocation_check = YANGDynClass(base=unicode, is_leaf=True, yang_name="revocation-check", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__add_ip = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__mgmt_vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__mgmt_vrf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgmt-vrf", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__auto_entroll_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="auto-entroll-period", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'ca-trust-point-certificates', u'ca-trust-point-certificate']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_url(self):
    """
    Getter method for url, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/url (string)

    YANG Description: string
    """
    return self.__url
      
  def _set_url(self, v, load=False):
    """
    Setter method for url, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_url() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_url(self):
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_serial_number(self):
    """
    Getter method for serial_number, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/serial_number (string)

    YANG Description: string
    """
    return self.__serial_number
      
  def _set_serial_number(self, v, load=False):
    """
    Setter method for serial_number, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/serial_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serial_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serial_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serial_number(self):
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_mgmt_vrf_name(self):
    """
    Getter method for mgmt_vrf_name, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/mgmt_vrf_name (string)

    YANG Description: string
    """
    return self.__mgmt_vrf_name
      
  def _set_mgmt_vrf_name(self, v, load=False):
    """
    Setter method for mgmt_vrf_name, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/mgmt_vrf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_vrf_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_vrf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__mgmt_vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_vrf_name(self):
    self.__mgmt_vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mgmt-vrf-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_ip_address(self):
    """
    Getter method for ip_address, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/ip_address (string)

    YANG Description: string
    """
    return self.__ip_address
      
  def _set_ip_address(self, v, load=False):
    """
    Setter method for ip_address, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/ip_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_address(self):
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_mgmt_vrf(self):
    """
    Getter method for mgmt_vrf, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/mgmt_vrf (boolean)

    YANG Description: mgmt-vrf: True/False
    """
    return self.__mgmt_vrf
      
  def _set_mgmt_vrf(self, v, load=False):
    """
    Setter method for mgmt_vrf, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/mgmt_vrf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mgmt_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mgmt_vrf() directly.

    YANG Description: mgmt-vrf: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mgmt-vrf", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mgmt_vrf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgmt-vrf", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__mgmt_vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mgmt_vrf(self):
    self.__mgmt_vrf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mgmt-vrf", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_add_serial_number(self):
    """
    Getter method for add_serial_number, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_serial_number (boolean)

    YANG Description: add-serial-number: True/False
    """
    return self.__add_serial_number
      
  def _set_add_serial_number(self, v, load=False):
    """
    Setter method for add_serial_number, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_serial_number (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_add_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_add_serial_number() directly.

    YANG Description: add-serial-number: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="add-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """add_serial_number must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__add_serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_add_serial_number(self):
    self.__add_serial_number = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_add_auto_enroll(self):
    """
    Getter method for add_auto_enroll, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_auto_enroll (boolean)

    YANG Description: add-auto-enroll: True/False
    """
    return self.__add_auto_enroll
      
  def _set_add_auto_enroll(self, v, load=False):
    """
    Setter method for add_auto_enroll, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_auto_enroll (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_add_auto_enroll is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_add_auto_enroll() directly.

    YANG Description: add-auto-enroll: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="add-auto-enroll", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """add_auto_enroll must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-auto-enroll", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__add_auto_enroll = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_add_auto_enroll(self):
    self.__add_auto_enroll = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-auto-enroll", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_add_ip(self):
    """
    Getter method for add_ip, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_ip (boolean)

    YANG Description: add-ip: True/False
    """
    return self.__add_ip
      
  def _set_add_ip(self, v, load=False):
    """
    Setter method for add_ip, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/add_ip (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_add_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_add_ip() directly.

    YANG Description: add-ip: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="add-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """add_ip must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__add_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_add_ip(self):
    self.__add_ip = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="add-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/password (string)

    YANG Description: string
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=unicode, is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_revocation_check(self):
    """
    Getter method for revocation_check, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/revocation_check (string)

    YANG Description: string
    """
    return self.__revocation_check
      
  def _set_revocation_check(self, v, load=False):
    """
    Setter method for revocation_check, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/revocation_check (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_revocation_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_revocation_check() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="revocation-check", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """revocation_check must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="revocation-check", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__revocation_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_revocation_check(self):
    self.__revocation_check = YANGDynClass(base=unicode, is_leaf=True, yang_name="revocation-check", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_source_interface(self):
    """
    Getter method for source_interface, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/source_interface (string)

    YANG Description: string
    """
    return self.__source_interface
      
  def _set_source_interface(self, v, load=False):
    """
    Setter method for source_interface, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/source_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_interface() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="source-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__source_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_interface(self):
    self.__source_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="source-interface", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_auto_entroll_period(self):
    """
    Getter method for auto_entroll_period, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/auto_entroll_period (uint32)

    YANG Description: 0..4294967295
    """
    return self.__auto_entroll_period
      
  def _set_auto_entroll_period(self, v, load=False):
    """
    Setter method for auto_entroll_period, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/auto_entroll_period (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_entroll_period is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_entroll_period() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="auto-entroll-period", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_entroll_period must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="auto-entroll-period", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__auto_entroll_period = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_entroll_period(self):
    self.__auto_entroll_period = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="auto-entroll-period", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_ca_certificate(self):
    """
    Getter method for ca_certificate, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/ca_certificate (string)

    YANG Description: string
    """
    return self.__ca_certificate
      
  def _set_ca_certificate(self, v, load=False):
    """
    Setter method for ca_certificate, mapped from YANG variable /system/tables/ca_trust_point_certificates/ca_trust_point_certificate/ca_certificate (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ca_certificate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ca_certificate() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ca-certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ca_certificate must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ca-certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__ca_certificate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ca_certificate(self):
    self.__ca_certificate = YANGDynClass(base=unicode, is_leaf=True, yang_name="ca-certificate", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  url = __builtin__.property(_get_url, _set_url)
  serial_number = __builtin__.property(_get_serial_number, _set_serial_number)
  mgmt_vrf_name = __builtin__.property(_get_mgmt_vrf_name, _set_mgmt_vrf_name)
  ip_address = __builtin__.property(_get_ip_address, _set_ip_address)
  mgmt_vrf = __builtin__.property(_get_mgmt_vrf, _set_mgmt_vrf)
  add_serial_number = __builtin__.property(_get_add_serial_number, _set_add_serial_number)
  add_auto_enroll = __builtin__.property(_get_add_auto_enroll, _set_add_auto_enroll)
  add_ip = __builtin__.property(_get_add_ip, _set_add_ip)
  password = __builtin__.property(_get_password, _set_password)
  revocation_check = __builtin__.property(_get_revocation_check, _set_revocation_check)
  source_interface = __builtin__.property(_get_source_interface, _set_source_interface)
  auto_entroll_period = __builtin__.property(_get_auto_entroll_period, _set_auto_entroll_period)
  ca_certificate = __builtin__.property(_get_ca_certificate, _set_ca_certificate)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('url', url), ('serial_number', serial_number), ('mgmt_vrf_name', mgmt_vrf_name), ('ip_address', ip_address), ('mgmt_vrf', mgmt_vrf), ('add_serial_number', add_serial_number), ('add_auto_enroll', add_auto_enroll), ('add_ip', add_ip), ('password', password), ('revocation_check', revocation_check), ('source_interface', source_interface), ('auto_entroll_period', auto_entroll_period), ('ca_certificate', ca_certificate), ])


