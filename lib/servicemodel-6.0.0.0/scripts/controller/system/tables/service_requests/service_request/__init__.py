
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import operation_request
class service_request(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/service-requests/service-request. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__entity_id','__start_date_time','__end_date_time','__task','__rollback','__operation_request',)

  _yang_name = 'service-request'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__entity_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__task = YANGDynClass(base=unicode, is_leaf=True, yang_name="task", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__operation_request = YANGDynClass(base=YANGListType("operation_request_id",operation_request.operation_request, yang_name="operation-request", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='operation-request-id'), is_container='list', yang_name="operation-request", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__start_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__end_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__rollback = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'service-requests', u'service-request']

  def _get_entity_id(self):
    """
    Getter method for entity_id, mapped from YANG variable /system/tables/service_requests/service_request/entity_id (string)

    YANG Description: string
    """
    return self.__entity_id
      
  def _set_entity_id(self, v, load=False):
    """
    Setter method for entity_id, mapped from YANG variable /system/tables/service_requests/service_request/entity_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entity_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entity_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entity-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entity_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__entity_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entity_id(self):
    self.__entity_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_start_date_time(self):
    """
    Getter method for start_date_time, mapped from YANG variable /system/tables/service_requests/service_request/start_date_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__start_date_time
      
  def _set_start_date_time(self, v, load=False):
    """
    Setter method for start_date_time, mapped from YANG variable /system/tables/service_requests/service_request/start_date_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_date_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_date_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_date_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__start_date_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_date_time(self):
    self.__start_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_end_date_time(self):
    """
    Getter method for end_date_time, mapped from YANG variable /system/tables/service_requests/service_request/end_date_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__end_date_time
      
  def _set_end_date_time(self, v, load=False):
    """
    Setter method for end_date_time, mapped from YANG variable /system/tables/service_requests/service_request/end_date_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_date_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_date_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_date_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__end_date_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_date_time(self):
    self.__end_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_task(self):
    """
    Getter method for task, mapped from YANG variable /system/tables/service_requests/service_request/task (string)

    YANG Description: string
    """
    return self.__task
      
  def _set_task(self, v, load=False):
    """
    Setter method for task, mapped from YANG variable /system/tables/service_requests/service_request/task (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__task = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task(self):
    self.__task = YANGDynClass(base=unicode, is_leaf=True, yang_name="task", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_rollback(self):
    """
    Getter method for rollback, mapped from YANG variable /system/tables/service_requests/service_request/rollback (boolean)

    YANG Description: rollback: True/False
    """
    return self.__rollback
      
  def _set_rollback(self, v, load=False):
    """
    Setter method for rollback, mapped from YANG variable /system/tables/service_requests/service_request/rollback (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rollback is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rollback() directly.

    YANG Description: rollback: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rollback must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__rollback = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rollback(self):
    self.__rollback = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_operation_request(self):
    """
    Getter method for operation_request, mapped from YANG variable /system/tables/service_requests/service_request/operation_request (list)
    """
    return self.__operation_request
      
  def _set_operation_request(self, v, load=False):
    """
    Setter method for operation_request, mapped from YANG variable /system/tables/service_requests/service_request/operation_request (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_request is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_request() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("operation_request_id",operation_request.operation_request, yang_name="operation-request", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='operation-request-id'), is_container='list', yang_name="operation-request", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_request must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("operation_request_id",operation_request.operation_request, yang_name="operation-request", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='operation-request-id'), is_container='list', yang_name="operation-request", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__operation_request = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_request(self):
    self.__operation_request = YANGDynClass(base=YANGListType("operation_request_id",operation_request.operation_request, yang_name="operation-request", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='operation-request-id'), is_container='list', yang_name="operation-request", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)

  entity_id = __builtin__.property(_get_entity_id, _set_entity_id)
  start_date_time = __builtin__.property(_get_start_date_time, _set_start_date_time)
  end_date_time = __builtin__.property(_get_end_date_time, _set_end_date_time)
  task = __builtin__.property(_get_task, _set_task)
  rollback = __builtin__.property(_get_rollback, _set_rollback)
  operation_request = __builtin__.property(_get_operation_request, _set_operation_request)


  _pyangbind_elements = collections.OrderedDict([('entity_id', entity_id), ('start_date_time', start_date_time), ('end_date_time', end_date_time), ('task', task), ('rollback', rollback), ('operation_request', operation_request), ])


