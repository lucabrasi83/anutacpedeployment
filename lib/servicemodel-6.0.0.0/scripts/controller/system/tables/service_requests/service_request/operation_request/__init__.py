
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import device_command_log
class operation_request(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/service-requests/service-request/operation-request. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__operation_request_id','__sequence_number','__context_id','__operation_step_completed','__operation_name','__target','__data_node_id','__is_rollback','__status','__device_id','__basic_device_details','__device_command_log',)

  _yang_name = 'operation-request'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__target = YANGDynClass(base=unicode, is_leaf=True, yang_name="target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__context_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="context-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__operation_request_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__basic_device_details = YANGDynClass(base=unicode, is_leaf=True, yang_name="basic-device-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__is_rollback = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="is-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__data_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="data-node-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__operation_step_completed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="operation-step-completed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__device_command_log = YANGDynClass(base=YANGListType("sequence_number",device_command_log.device_command_log, yang_name="device-command-log", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence-number'), is_container='list', yang_name="device-command-log", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'service-requests', u'service-request', u'operation-request']

  def _get_operation_request_id(self):
    """
    Getter method for operation_request_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_request_id (string)

    YANG Description: string
    """
    return self.__operation_request_id
      
  def _set_operation_request_id(self, v, load=False):
    """
    Setter method for operation_request_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_request_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_request_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_request_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operation-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_request_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__operation_request_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_request_id(self):
    self.__operation_request_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_sequence_number(self):
    """
    Getter method for sequence_number, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/sequence_number (uint16)

    YANG Description: 0..65535
    """
    return self.__sequence_number
      
  def _set_sequence_number(self, v, load=False):
    """
    Setter method for sequence_number, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/sequence_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence_number() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__sequence_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence_number(self):
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_context_id(self):
    """
    Getter method for context_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/context_id (string)

    YANG Description: string
    """
    return self.__context_id
      
  def _set_context_id(self, v, load=False):
    """
    Setter method for context_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/context_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="context-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="context-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__context_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context_id(self):
    self.__context_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="context-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_operation_step_completed(self):
    """
    Getter method for operation_step_completed, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_step_completed (boolean)

    YANG Description: operation-step-completed: True/False
    """
    return self.__operation_step_completed
      
  def _set_operation_step_completed(self, v, load=False):
    """
    Setter method for operation_step_completed, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_step_completed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_step_completed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_step_completed() directly.

    YANG Description: operation-step-completed: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="operation-step-completed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_step_completed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="operation-step-completed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__operation_step_completed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_step_completed(self):
    self.__operation_step_completed = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="operation-step-completed", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_operation_name(self):
    """
    Getter method for operation_name, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_name (string)

    YANG Description: string
    """
    return self.__operation_name
      
  def _set_operation_name(self, v, load=False):
    """
    Setter method for operation_name, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/operation_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="operation-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__operation_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_name(self):
    self.__operation_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="operation-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_target(self):
    """
    Getter method for target, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/target (string)

    YANG Description: string
    """
    return self.__target
      
  def _set_target(self, v, load=False):
    """
    Setter method for target, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/target (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_target is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_target() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """target must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__target = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_target(self):
    self.__target = YANGDynClass(base=unicode, is_leaf=True, yang_name="target", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_data_node_id(self):
    """
    Getter method for data_node_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/data_node_id (string)

    YANG Description: string
    """
    return self.__data_node_id
      
  def _set_data_node_id(self, v, load=False):
    """
    Setter method for data_node_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/data_node_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_node_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_node_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="data-node-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_node_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="data-node-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__data_node_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_node_id(self):
    self.__data_node_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="data-node-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_is_rollback(self):
    """
    Getter method for is_rollback, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/is_rollback (boolean)

    YANG Description: is-rollback: True/False
    """
    return self.__is_rollback
      
  def _set_is_rollback(self, v, load=False):
    """
    Setter method for is_rollback, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/is_rollback (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_rollback is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_rollback() directly.

    YANG Description: is-rollback: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="is-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_rollback must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="is-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__is_rollback = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_rollback(self):
    self.__is_rollback = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="is-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/status (string)

    YANG Description: string
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=unicode, is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_id (leafref)

    YANG Description: device-id
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: device-id
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_basic_device_details(self):
    """
    Getter method for basic_device_details, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/basic_device_details (leafref)

    YANG Description: basic-device-details
    """
    return self.__basic_device_details
      
  def _set_basic_device_details(self, v, load=False):
    """
    Setter method for basic_device_details, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/basic_device_details (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_basic_device_details is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_basic_device_details() directly.

    YANG Description: basic-device-details
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="basic-device-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """basic_device_details must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="basic-device-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__basic_device_details = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_basic_device_details(self):
    self.__basic_device_details = YANGDynClass(base=unicode, is_leaf=True, yang_name="basic-device-details", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_device_command_log(self):
    """
    Getter method for device_command_log, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log (list)
    """
    return self.__device_command_log
      
  def _set_device_command_log(self, v, load=False):
    """
    Setter method for device_command_log, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_command_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_command_log() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("sequence_number",device_command_log.device_command_log, yang_name="device-command-log", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence-number'), is_container='list', yang_name="device-command-log", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_command_log must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("sequence_number",device_command_log.device_command_log, yang_name="device-command-log", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence-number'), is_container='list', yang_name="device-command-log", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__device_command_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_command_log(self):
    self.__device_command_log = YANGDynClass(base=YANGListType("sequence_number",device_command_log.device_command_log, yang_name="device-command-log", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='sequence-number'), is_container='list', yang_name="device-command-log", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)

  operation_request_id = __builtin__.property(_get_operation_request_id, _set_operation_request_id)
  sequence_number = __builtin__.property(_get_sequence_number, _set_sequence_number)
  context_id = __builtin__.property(_get_context_id, _set_context_id)
  operation_step_completed = __builtin__.property(_get_operation_step_completed, _set_operation_step_completed)
  operation_name = __builtin__.property(_get_operation_name, _set_operation_name)
  target = __builtin__.property(_get_target, _set_target)
  data_node_id = __builtin__.property(_get_data_node_id, _set_data_node_id)
  is_rollback = __builtin__.property(_get_is_rollback, _set_is_rollback)
  status = __builtin__.property(_get_status, _set_status)
  device_id = __builtin__.property(_get_device_id, _set_device_id)
  basic_device_details = __builtin__.property(_get_basic_device_details, _set_basic_device_details)
  device_command_log = __builtin__.property(_get_device_command_log, _set_device_command_log)


  _pyangbind_elements = collections.OrderedDict([('operation_request_id', operation_request_id), ('sequence_number', sequence_number), ('context_id', context_id), ('operation_step_completed', operation_step_completed), ('operation_name', operation_name), ('target', target), ('data_node_id', data_node_id), ('is_rollback', is_rollback), ('status', status), ('device_id', device_id), ('basic_device_details', basic_device_details), ('device_command_log', device_command_log), ])


