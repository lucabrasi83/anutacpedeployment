
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class device_command_log(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/service-requests/service-request/operation-request/device-command-log. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__sequence_number','__command_line','__command_summary','__undo_command_line','__response_pattern','__context','__command_context',)

  _yang_name = 'device-command-log'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__undo_command_line = YANGDynClass(base=unicode, is_leaf=True, yang_name="undo-command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__command_summary = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-summary", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__command_line = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__command_context = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__context = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__response_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="response-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'service-requests', u'service-request', u'operation-request', u'device-command-log']

  def _get_sequence_number(self):
    """
    Getter method for sequence_number, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/sequence_number (uint16)

    YANG Description: 0..65535
    """
    return self.__sequence_number
      
  def _set_sequence_number(self, v, load=False):
    """
    Setter method for sequence_number, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/sequence_number (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sequence_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sequence_number() directly.

    YANG Description: 0..65535
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sequence_number must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__sequence_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sequence_number(self):
    self.__sequence_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="sequence-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_command_line(self):
    """
    Getter method for command_line, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_line (string)

    YANG Description: string
    """
    return self.__command_line
      
  def _set_command_line(self, v, load=False):
    """
    Setter method for command_line, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_line (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_line is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_line() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_line must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__command_line = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_line(self):
    self.__command_line = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_command_summary(self):
    """
    Getter method for command_summary, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_summary (string)

    YANG Description: string
    """
    return self.__command_summary
      
  def _set_command_summary(self, v, load=False):
    """
    Setter method for command_summary, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_summary (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_summary() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="command-summary", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_summary must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="command-summary", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__command_summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_summary(self):
    self.__command_summary = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-summary", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_undo_command_line(self):
    """
    Getter method for undo_command_line, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/undo_command_line (string)

    YANG Description: string
    """
    return self.__undo_command_line
      
  def _set_undo_command_line(self, v, load=False):
    """
    Setter method for undo_command_line, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/undo_command_line (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_undo_command_line is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_undo_command_line() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="undo-command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """undo_command_line must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="undo-command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__undo_command_line = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_undo_command_line(self):
    self.__undo_command_line = YANGDynClass(base=unicode, is_leaf=True, yang_name="undo-command-line", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_response_pattern(self):
    """
    Getter method for response_pattern, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/response_pattern (string)

    YANG Description: string
    """
    return self.__response_pattern
      
  def _set_response_pattern(self, v, load=False):
    """
    Setter method for response_pattern, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/response_pattern (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_response_pattern is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_response_pattern() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="response-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """response_pattern must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="response-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__response_pattern = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_response_pattern(self):
    self.__response_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="response-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_context(self):
    """
    Getter method for context, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/context (boolean)

    YANG Description: context: True/False
    """
    return self.__context
      
  def _set_context(self, v, load=False):
    """
    Setter method for context, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/context (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context() directly.

    YANG Description: context: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context(self):
    self.__context = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_command_context(self):
    """
    Getter method for command_context, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_context (string)

    YANG Description: string
    """
    return self.__command_context
      
  def _set_command_context(self, v, load=False):
    """
    Setter method for command_context, mapped from YANG variable /system/tables/service_requests/service_request/operation_request/device_command_log/command_context (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_context is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_context() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="command-context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_context must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="command-context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__command_context = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_context(self):
    self.__command_context = YANGDynClass(base=unicode, is_leaf=True, yang_name="command-context", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  sequence_number = __builtin__.property(_get_sequence_number, _set_sequence_number)
  command_line = __builtin__.property(_get_command_line, _set_command_line)
  command_summary = __builtin__.property(_get_command_summary, _set_command_summary)
  undo_command_line = __builtin__.property(_get_undo_command_line, _set_undo_command_line)
  response_pattern = __builtin__.property(_get_response_pattern, _set_response_pattern)
  context = __builtin__.property(_get_context, _set_context)
  command_context = __builtin__.property(_get_command_context, _set_command_context)


  _pyangbind_elements = collections.OrderedDict([('sequence_number', sequence_number), ('command_line', command_line), ('command_summary', command_summary), ('undo_command_line', undo_command_line), ('response_pattern', response_pattern), ('context', context), ('command_context', command_context), ])


