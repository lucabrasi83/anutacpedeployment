
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ha_cluster(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/ha-clusters/ha-cluster. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__cluster_name','__device_id','__cluster_auto_sync','__cluster_mode','__clusterlbschedule',)

  _yang_name = 'ha-cluster'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__cluster_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cluster_auto_sync = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="cluster-auto-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ha-auto-sync-state', is_config=True)
    self.__cluster_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE_PASSIVE': {}, u'ACTIVE_ACTIVE': {}, u'STANDALONE': {}},), is_leaf=True, yang_name="cluster-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-mode', is_config=True)
    self.__clusterlbschedule = YANGDynClass(base=unicode, is_leaf=True, yang_name="clusterlbschedule", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'ha-clusters', u'ha-cluster']

  def _get_cluster_name(self):
    """
    Getter method for cluster_name, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_name (string)

    YANG Description: string
    """
    return self.__cluster_name
      
  def _set_cluster_name(self, v, load=False):
    """
    Setter method for cluster_name, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__cluster_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_name(self):
    self.__cluster_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/device_id (leafref)

    YANG Description: device-id
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/device_id (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: device-id
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_cluster_auto_sync(self):
    """
    Getter method for cluster_auto_sync, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_auto_sync (ha-auto-sync-state)

    YANG Description: ENABLED
DISABLED

    """
    return self.__cluster_auto_sync
      
  def _set_cluster_auto_sync(self, v, load=False):
    """
    Setter method for cluster_auto_sync, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_auto_sync (ha-auto-sync-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_auto_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_auto_sync() directly.

    YANG Description: ENABLED
DISABLED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="cluster-auto-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ha-auto-sync-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_auto_sync must be of a type compatible with ha-auto-sync-state""",
          'defined-type': "controller:ha-auto-sync-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="cluster-auto-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ha-auto-sync-state', is_config=True)""",
        })

    self.__cluster_auto_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_auto_sync(self):
    self.__cluster_auto_sync = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DISABLED': {}, u'ENABLED': {}},), is_leaf=True, yang_name="cluster-auto-sync", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ha-auto-sync-state', is_config=True)


  def _get_cluster_mode(self):
    """
    Getter method for cluster_mode, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_mode (cluster-mode)

    YANG Description: STANDALONE
ACTIVE_ACTIVE
ACTIVE_PASSIVE

    """
    return self.__cluster_mode
      
  def _set_cluster_mode(self, v, load=False):
    """
    Setter method for cluster_mode, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/cluster_mode (cluster-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_mode() directly.

    YANG Description: STANDALONE
ACTIVE_ACTIVE
ACTIVE_PASSIVE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE_PASSIVE': {}, u'ACTIVE_ACTIVE': {}, u'STANDALONE': {}},), is_leaf=True, yang_name="cluster-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_mode must be of a type compatible with cluster-mode""",
          'defined-type': "controller:cluster-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE_PASSIVE': {}, u'ACTIVE_ACTIVE': {}, u'STANDALONE': {}},), is_leaf=True, yang_name="cluster-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-mode', is_config=True)""",
        })

    self.__cluster_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_mode(self):
    self.__cluster_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ACTIVE_PASSIVE': {}, u'ACTIVE_ACTIVE': {}, u'STANDALONE': {}},), is_leaf=True, yang_name="cluster-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-mode', is_config=True)


  def _get_clusterlbschedule(self):
    """
    Getter method for clusterlbschedule, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/clusterlbschedule (string)

    YANG Description: string
    """
    return self.__clusterlbschedule
      
  def _set_clusterlbschedule(self, v, load=False):
    """
    Setter method for clusterlbschedule, mapped from YANG variable /system/tables/ha_clusters/ha_cluster/clusterlbschedule (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clusterlbschedule is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clusterlbschedule() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="clusterlbschedule", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clusterlbschedule must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="clusterlbschedule", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__clusterlbschedule = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clusterlbschedule(self):
    self.__clusterlbschedule = YANGDynClass(base=unicode, is_leaf=True, yang_name="clusterlbschedule", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  cluster_name = __builtin__.property(_get_cluster_name, _set_cluster_name)
  device_id = __builtin__.property(_get_device_id, _set_device_id)
  cluster_auto_sync = __builtin__.property(_get_cluster_auto_sync, _set_cluster_auto_sync)
  cluster_mode = __builtin__.property(_get_cluster_mode, _set_cluster_mode)
  clusterlbschedule = __builtin__.property(_get_clusterlbschedule, _set_clusterlbschedule)


  _pyangbind_elements = collections.OrderedDict([('cluster_name', cluster_name), ('device_id', device_id), ('cluster_auto_sync', cluster_auto_sync), ('cluster_mode', cluster_mode), ('clusterlbschedule', clusterlbschedule), ])


