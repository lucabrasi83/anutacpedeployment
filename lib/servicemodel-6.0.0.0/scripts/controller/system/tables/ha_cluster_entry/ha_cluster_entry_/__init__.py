
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ha_cluster_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/ha-cluster-entry/ha-cluster-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__host_name','__cluster_index','__cluster_entry_mode','__serial_number','__master_serial_number','__cluster','__stale_entry',)

  _yang_name = 'ha-cluster-entry'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__stale_entry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__cluster = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__cluster_index = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__cluster_entry_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SLAVE': {}, u'MASTER': {}},), is_leaf=True, yang_name="cluster-entry-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-oper-mode', is_config=True)
    self.__master_serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="master-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'ha-cluster-entry', u'ha-cluster-entry']

  def _get_host_name(self):
    """
    Getter method for host_name, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/host_name (string)

    YANG Description: string
    """
    return self.__host_name
      
  def _set_host_name(self, v, load=False):
    """
    Setter method for host_name, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/host_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__host_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_name(self):
    self.__host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_cluster_index(self):
    """
    Getter method for cluster_index, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster_index (string)

    YANG Description: string
    """
    return self.__cluster_index
      
  def _set_cluster_index(self, v, load=False):
    """
    Setter method for cluster_index, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster_index (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_index() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_index must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__cluster_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_index(self):
    self.__cluster_index = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_cluster_entry_mode(self):
    """
    Getter method for cluster_entry_mode, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster_entry_mode (cluster-oper-mode)

    YANG Description: MASTER
SLAVE

    """
    return self.__cluster_entry_mode
      
  def _set_cluster_entry_mode(self, v, load=False):
    """
    Setter method for cluster_entry_mode, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster_entry_mode (cluster-oper-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_entry_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_entry_mode() directly.

    YANG Description: MASTER
SLAVE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SLAVE': {}, u'MASTER': {}},), is_leaf=True, yang_name="cluster-entry-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-oper-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_entry_mode must be of a type compatible with cluster-oper-mode""",
          'defined-type': "controller:cluster-oper-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SLAVE': {}, u'MASTER': {}},), is_leaf=True, yang_name="cluster-entry-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-oper-mode', is_config=True)""",
        })

    self.__cluster_entry_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_entry_mode(self):
    self.__cluster_entry_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SLAVE': {}, u'MASTER': {}},), is_leaf=True, yang_name="cluster-entry-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='cluster-oper-mode', is_config=True)


  def _get_serial_number(self):
    """
    Getter method for serial_number, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/serial_number (string)

    YANG Description: string
    """
    return self.__serial_number
      
  def _set_serial_number(self, v, load=False):
    """
    Setter method for serial_number, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/serial_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serial_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serial_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serial_number(self):
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_master_serial_number(self):
    """
    Getter method for master_serial_number, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/master_serial_number (string)

    YANG Description: string
    """
    return self.__master_serial_number
      
  def _set_master_serial_number(self, v, load=False):
    """
    Setter method for master_serial_number, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/master_serial_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_master_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_master_serial_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="master-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """master_serial_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="master-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__master_serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_master_serial_number(self):
    self.__master_serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="master-serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_cluster(self):
    """
    Getter method for cluster, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster (leafref)

    YANG Description: cluster
    """
    return self.__cluster
      
  def _set_cluster(self, v, load=False):
    """
    Setter method for cluster, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/cluster (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster() directly.

    YANG Description: cluster
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__cluster = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster(self):
    self.__cluster = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_stale_entry(self):
    """
    Getter method for stale_entry, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/stale_entry (boolean)

    YANG Description: stale-entry: True/False
    """
    return self.__stale_entry
      
  def _set_stale_entry(self, v, load=False):
    """
    Setter method for stale_entry, mapped from YANG variable /system/tables/ha_cluster_entry/ha_cluster_entry/stale_entry (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stale_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stale_entry() directly.

    YANG Description: stale-entry: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stale_entry must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__stale_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stale_entry(self):
    self.__stale_entry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="stale-entry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  host_name = __builtin__.property(_get_host_name, _set_host_name)
  cluster_index = __builtin__.property(_get_cluster_index, _set_cluster_index)
  cluster_entry_mode = __builtin__.property(_get_cluster_entry_mode, _set_cluster_entry_mode)
  serial_number = __builtin__.property(_get_serial_number, _set_serial_number)
  master_serial_number = __builtin__.property(_get_master_serial_number, _set_master_serial_number)
  cluster = __builtin__.property(_get_cluster, _set_cluster)
  stale_entry = __builtin__.property(_get_stale_entry, _set_stale_entry)


  _pyangbind_elements = collections.OrderedDict([('host_name', host_name), ('cluster_index', cluster_index), ('cluster_entry_mode', cluster_entry_mode), ('serial_number', serial_number), ('master_serial_number', master_serial_number), ('cluster', cluster), ('stale_entry', stale_entry), ])


