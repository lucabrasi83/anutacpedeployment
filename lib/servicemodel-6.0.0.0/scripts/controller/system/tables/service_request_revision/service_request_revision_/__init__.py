
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class service_request_revision(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/service-request-revision/service-request-revision. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__request_revision_id','__task_id','__service_request_id','__revision_number','__create_date_time','__status','__repo_file_name','__device_ip','__end_time','__start_time','__changeset_source','__retry_count','__description','__device','__file_name',)

  _yang_name = 'service-request-revision'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__request_revision_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="request-revision-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RETRIEVED': {}, u'DISABLED': {}, u'FAILED': {}, u'ERROR': {}, u'IN_PROGRESS': {}, u'PENDING': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='config-reqstatus', is_config=True)
    self.__device_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__changeset_source = YANGDynClass(base=unicode, is_leaf=True, yang_name="changeset-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__file_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__service_request_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="retry-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__create_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="create-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__revision_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="revision-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__device = YANGDynClass(base=unicode, is_leaf=True, yang_name="device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__repo_file_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="repo-file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'service-request-revision', u'service-request-revision']

  def _get_request_revision_id(self):
    """
    Getter method for request_revision_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/request_revision_id (string)

    YANG Description: string
    """
    return self.__request_revision_id
      
  def _set_request_revision_id(self, v, load=False):
    """
    Setter method for request_revision_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/request_revision_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_request_revision_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_request_revision_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="request-revision-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """request_revision_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="request-revision-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__request_revision_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_request_revision_id(self):
    self.__request_revision_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="request-revision-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_service_request_id(self):
    """
    Getter method for service_request_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/service_request_id (string)

    YANG Description: string
    """
    return self.__service_request_id
      
  def _set_service_request_id(self, v, load=False):
    """
    Setter method for service_request_id, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/service_request_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_request_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_request_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="service-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_request_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="service-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__service_request_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_request_id(self):
    self.__service_request_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="service-request-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_revision_number(self):
    """
    Getter method for revision_number, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/revision_number (uint32)

    YANG Description: 0..4294967295
    """
    return self.__revision_number
      
  def _set_revision_number(self, v, load=False):
    """
    Setter method for revision_number, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/revision_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_revision_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_revision_number() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="revision-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """revision_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="revision-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__revision_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_revision_number(self):
    self.__revision_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="revision-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_create_date_time(self):
    """
    Getter method for create_date_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/create_date_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__create_date_time
      
  def _set_create_date_time(self, v, load=False):
    """
    Setter method for create_date_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/create_date_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_create_date_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_create_date_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="create-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """create_date_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="create-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__create_date_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_create_date_time(self):
    self.__create_date_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="create-date-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/status (config-reqstatus)

    YANG Description: ERROR
PENDING
IN_PROGRESS
RETRIEVED
DISABLED
FAILED

    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/status (config-reqstatus)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: ERROR
PENDING
IN_PROGRESS
RETRIEVED
DISABLED
FAILED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RETRIEVED': {}, u'DISABLED': {}, u'FAILED': {}, u'ERROR': {}, u'IN_PROGRESS': {}, u'PENDING': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='config-reqstatus', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with config-reqstatus""",
          'defined-type': "controller:config-reqstatus",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RETRIEVED': {}, u'DISABLED': {}, u'FAILED': {}, u'ERROR': {}, u'IN_PROGRESS': {}, u'PENDING': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='config-reqstatus', is_config=True)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'RETRIEVED': {}, u'DISABLED': {}, u'FAILED': {}, u'ERROR': {}, u'IN_PROGRESS': {}, u'PENDING': {}},), is_leaf=True, yang_name="status", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='config-reqstatus', is_config=True)


  def _get_repo_file_name(self):
    """
    Getter method for repo_file_name, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/repo_file_name (string)

    YANG Description: string
    """
    return self.__repo_file_name
      
  def _set_repo_file_name(self, v, load=False):
    """
    Setter method for repo_file_name, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/repo_file_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_repo_file_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_repo_file_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="repo-file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """repo_file_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="repo-file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__repo_file_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_repo_file_name(self):
    self.__repo_file_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="repo-file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_ip(self):
    """
    Getter method for device_ip, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/device_ip (string)

    YANG Description: string
    """
    return self.__device_ip
      
  def _set_device_ip(self, v, load=False):
    """
    Setter method for device_ip, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/device_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_ip() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_ip(self):
    self.__device_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_end_time(self):
    """
    Getter method for end_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/end_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__end_time
      
  def _set_end_time(self, v, load=False):
    """
    Setter method for end_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/end_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__end_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_time(self):
    self.__end_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="end-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/start_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/start_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="start-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_changeset_source(self):
    """
    Getter method for changeset_source, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/changeset_source (string)

    YANG Description: string
    """
    return self.__changeset_source
      
  def _set_changeset_source(self, v, load=False):
    """
    Setter method for changeset_source, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/changeset_source (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_changeset_source is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_changeset_source() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="changeset-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """changeset_source must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="changeset-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__changeset_source = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_changeset_source(self):
    self.__changeset_source = YANGDynClass(base=unicode, is_leaf=True, yang_name="changeset-source", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_retry_count(self):
    """
    Getter method for retry_count, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/retry_count (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__retry_count
      
  def _set_retry_count(self, v, load=False):
    """
    Setter method for retry_count, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/retry_count (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retry_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retry_count() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="retry-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retry_count must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="retry-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__retry_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retry_count(self):
    self.__retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="retry-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device(self):
    """
    Getter method for device, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/device (string)

    YANG Description: string
    """
    return self.__device
      
  def _set_device(self, v, load=False):
    """
    Setter method for device, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/device (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device(self):
    self.__device = YANGDynClass(base=unicode, is_leaf=True, yang_name="device", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_file_name(self):
    """
    Getter method for file_name, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/file_name (string)

    YANG Description: string
    """
    return self.__file_name
      
  def _set_file_name(self, v, load=False):
    """
    Setter method for file_name, mapped from YANG variable /system/tables/service_request_revision/service_request_revision/file_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_file_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_file_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """file_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__file_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_file_name(self):
    self.__file_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="file-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  request_revision_id = __builtin__.property(_get_request_revision_id, _set_request_revision_id)
  task_id = __builtin__.property(_get_task_id, _set_task_id)
  service_request_id = __builtin__.property(_get_service_request_id, _set_service_request_id)
  revision_number = __builtin__.property(_get_revision_number, _set_revision_number)
  create_date_time = __builtin__.property(_get_create_date_time, _set_create_date_time)
  status = __builtin__.property(_get_status, _set_status)
  repo_file_name = __builtin__.property(_get_repo_file_name, _set_repo_file_name)
  device_ip = __builtin__.property(_get_device_ip, _set_device_ip)
  end_time = __builtin__.property(_get_end_time, _set_end_time)
  start_time = __builtin__.property(_get_start_time, _set_start_time)
  changeset_source = __builtin__.property(_get_changeset_source, _set_changeset_source)
  retry_count = __builtin__.property(_get_retry_count, _set_retry_count)
  description = __builtin__.property(_get_description, _set_description)
  device = __builtin__.property(_get_device, _set_device)
  file_name = __builtin__.property(_get_file_name, _set_file_name)


  _pyangbind_elements = collections.OrderedDict([('request_revision_id', request_revision_id), ('task_id', task_id), ('service_request_id', service_request_id), ('revision_number', revision_number), ('create_date_time', create_date_time), ('status', status), ('repo_file_name', repo_file_name), ('device_ip', device_ip), ('end_time', end_time), ('start_time', start_time), ('changeset_source', changeset_source), ('retry_count', retry_count), ('description', description), ('device', device), ('file_name', file_name), ])


