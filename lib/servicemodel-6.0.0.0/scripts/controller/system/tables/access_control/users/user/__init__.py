
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import event_subscription
import snmpv3
class user(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/access-control/users/user. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__username','__first_name','__last_name','__email','__phone_number','__account_enabled','__account_expired','__account_locked','__password_expiry_date','__snmpv3_enabled','__credentials_expired','__local_authentication','__authentication_mode','__security_question','__security_answer','__password','__enable_address','__address','__city','__country','__postal_code','__province','__version','__ldap_user','__deleted','__event_subscription','__role','__snmpv3',)

  _yang_name = 'user'
  _module_name = 'accesscontrol'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__phone_number = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9+/-]+$', 'length': [u'1..15']}), is_leaf=True, yang_name="phone-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__last_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__account_expired = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__credentials_expired = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="credentials-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__postal_code = YANGDynClass(base=unicode, is_leaf=True, yang_name="postal-code", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__snmpv3 = YANGDynClass(base=snmpv3.snmpv3, is_container='container', yang_name="snmpv3", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__city = YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__first_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__province = YANGDynClass(base=unicode, is_leaf=True, yang_name="province", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__enable_address = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__version = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=False)
    self.__account_enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="account-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__ldap_user = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldap-user", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__role = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="role", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__email = YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:multiemail', is_config=True)
    self.__username = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9#\\.&$^!*\\{\\}\\[\\]\\(\\)_+\\\\=/,-]+'}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__snmpv3_enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmpv3-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__deleted = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__local_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-authentication", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__address = YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__authentication_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    self.__account_locked = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-locked", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    self.__password_expiry_date = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="password-expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='yang:date-and-time', is_config=False)
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__security_answer = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="security-answer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    self.__security_question = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'What school did you attend for sixth grade?': {}, u'What is the country of your ultimate dream vacation?': {}, u'Who was your childhood hero?': {}, u'In what city or town was your first job?': {}, u'What was your dream job as a child?': {}},), is_leaf=True, yang_name="security-question", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='security-question', is_config=True)
    self.__event_subscription = YANGDynClass(base=YANGListType("id",event_subscription.event_subscription, yang_name="event-subscription", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id'), is_container='list', yang_name="event-subscription", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'access-control', u'users', u'user']

  def _get_username(self):
    """
    Getter method for username, mapped from YANG variable /system/tables/access_control/users/user/username (string)

    YANG Description: Allows AlphaNumerics,!#$^&*{}[]()_+\=/.- characters only
    """
    return self.__username
      
  def _set_username(self, v, load=False):
    """
    Setter method for username, mapped from YANG variable /system/tables/access_control/users/user/username (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_username is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_username() directly.

    YANG Description: Allows AlphaNumerics,!#$^&*{}[]()_+\=/.- characters only
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9#\\.&$^!*\\{\\}\\[\\]\\(\\)_+\\\\=/,-]+'}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """username must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9#\\.&$^!*\\{\\}\\[\\]\\(\\)_+\\\\=/,-]+'}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__username = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_username(self):
    self.__username = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9#\\.&$^!*\\{\\}\\[\\]\\(\\)_+\\\\=/,-]+'}), is_leaf=True, yang_name="username", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_first_name(self):
    """
    Getter method for first_name, mapped from YANG variable /system/tables/access_control/users/user/first_name (string)

    YANG Description: string
    """
    return self.__first_name
      
  def _set_first_name(self, v, load=False):
    """
    Setter method for first_name, mapped from YANG variable /system/tables/access_control/users/user/first_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="first-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="first-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__first_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_name(self):
    self.__first_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_last_name(self):
    """
    Getter method for last_name, mapped from YANG variable /system/tables/access_control/users/user/last_name (string)

    YANG Description: string
    """
    return self.__last_name
      
  def _set_last_name(self, v, load=False):
    """
    Setter method for last_name, mapped from YANG variable /system/tables/access_control/users/user/last_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__last_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_name(self):
    self.__last_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_email(self):
    """
    Getter method for email, mapped from YANG variable /system/tables/access_control/users/user/email (nct:multiemail)

    YANG Description: multiple emails can be added separated by ; 
    """
    return self.__email
      
  def _set_email(self, v, load=False):
    """
    Setter method for email, mapped from YANG variable /system/tables/access_control/users/user/email (nct:multiemail)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_email is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_email() directly.

    YANG Description: multiple emails can be added separated by ; 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:multiemail', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """email must be of a type compatible with nct:multiemail""",
          'defined-type': "nct:multiemail",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:multiemail', is_config=True)""",
        })

    self.__email = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_email(self):
    self.__email = YANGDynClass(base=unicode, is_leaf=True, yang_name="email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:multiemail', is_config=True)


  def _get_phone_number(self):
    """
    Getter method for phone_number, mapped from YANG variable /system/tables/access_control/users/user/phone_number (string)

    YANG Description: string
    """
    return self.__phone_number
      
  def _set_phone_number(self, v, load=False):
    """
    Setter method for phone_number, mapped from YANG variable /system/tables/access_control/users/user/phone_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_phone_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_phone_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9+/-]+$', 'length': [u'1..15']}), is_leaf=True, yang_name="phone-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """phone_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9+/-]+$', 'length': [u'1..15']}), is_leaf=True, yang_name="phone-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__phone_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_phone_number(self):
    self.__phone_number = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[0-9+/-]+$', 'length': [u'1..15']}), is_leaf=True, yang_name="phone-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_account_enabled(self):
    """
    Getter method for account_enabled, mapped from YANG variable /system/tables/access_control/users/user/account_enabled (boolean)

    YANG Description: account-enabled: True/False
    """
    return self.__account_enabled
      
  def _set_account_enabled(self, v, load=False):
    """
    Setter method for account_enabled, mapped from YANG variable /system/tables/access_control/users/user/account_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_account_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_account_enabled() directly.

    YANG Description: account-enabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="account-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """account_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="account-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__account_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_account_enabled(self):
    self.__account_enabled = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="account-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_account_expired(self):
    """
    Getter method for account_expired, mapped from YANG variable /system/tables/access_control/users/user/account_expired (boolean)

    YANG Description: account-expired: True/False
    """
    return self.__account_expired
      
  def _set_account_expired(self, v, load=False):
    """
    Setter method for account_expired, mapped from YANG variable /system/tables/access_control/users/user/account_expired (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_account_expired is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_account_expired() directly.

    YANG Description: account-expired: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """account_expired must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__account_expired = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_account_expired(self):
    self.__account_expired = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_account_locked(self):
    """
    Getter method for account_locked, mapped from YANG variable /system/tables/access_control/users/user/account_locked (boolean)

    YANG Description: account-locked: True/False
    """
    return self.__account_locked
      
  def _set_account_locked(self, v, load=False):
    """
    Setter method for account_locked, mapped from YANG variable /system/tables/access_control/users/user/account_locked (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_account_locked is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_account_locked() directly.

    YANG Description: account-locked: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-locked", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """account_locked must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-locked", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__account_locked = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_account_locked(self):
    self.__account_locked = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="account-locked", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_password_expiry_date(self):
    """
    Getter method for password_expiry_date, mapped from YANG variable /system/tables/access_control/users/user/password_expiry_date (yang:date-and-time)

    YANG Description: string
    """
    return self.__password_expiry_date
      
  def _set_password_expiry_date(self, v, load=False):
    """
    Setter method for password_expiry_date, mapped from YANG variable /system/tables/access_control/users/user/password_expiry_date (yang:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_expiry_date is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_expiry_date() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="password-expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='yang:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_expiry_date must be of a type compatible with yang:date-and-time""",
          'defined-type': "yang:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="password-expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='yang:date-and-time', is_config=False)""",
        })

    self.__password_expiry_date = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_expiry_date(self):
    self.__password_expiry_date = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="password-expiry-date", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='yang:date-and-time', is_config=False)


  def _get_snmpv3_enabled(self):
    """
    Getter method for snmpv3_enabled, mapped from YANG variable /system/tables/access_control/users/user/snmpv3_enabled (boolean)

    YANG Description: snmpv3-enabled: True/False
    """
    return self.__snmpv3_enabled
      
  def _set_snmpv3_enabled(self, v, load=False):
    """
    Setter method for snmpv3_enabled, mapped from YANG variable /system/tables/access_control/users/user/snmpv3_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3_enabled() directly.

    YANG Description: snmpv3-enabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmpv3-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmpv3-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__snmpv3_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3_enabled(self):
    self.__snmpv3_enabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="snmpv3-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_credentials_expired(self):
    """
    Getter method for credentials_expired, mapped from YANG variable /system/tables/access_control/users/user/credentials_expired (boolean)

    YANG Description: credentials-expired: True/False
    """
    return self.__credentials_expired
      
  def _set_credentials_expired(self, v, load=False):
    """
    Setter method for credentials_expired, mapped from YANG variable /system/tables/access_control/users/user/credentials_expired (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credentials_expired is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credentials_expired() directly.

    YANG Description: credentials-expired: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="credentials-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credentials_expired must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="credentials-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__credentials_expired = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credentials_expired(self):
    self.__credentials_expired = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="credentials-expired", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_local_authentication(self):
    """
    Getter method for local_authentication, mapped from YANG variable /system/tables/access_control/users/user/local_authentication (boolean)

    YANG Description: Use this property to make use of NCX implementation of authentication. NCX will attempt local authentication when no other methods are chosen or other methods fail.
This option is very useful during local testing, POCs, demos etc. For Production deployments customers are recommended to use other mechanisms such as LDAP, AD, TACACS etc
    """
    return self.__local_authentication
      
  def _set_local_authentication(self, v, load=False):
    """
    Setter method for local_authentication, mapped from YANG variable /system/tables/access_control/users/user/local_authentication (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_authentication is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_authentication() directly.

    YANG Description: Use this property to make use of NCX implementation of authentication. NCX will attempt local authentication when no other methods are chosen or other methods fail.
This option is very useful during local testing, POCs, demos etc. For Production deployments customers are recommended to use other mechanisms such as LDAP, AD, TACACS etc
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="local-authentication", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_authentication must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-authentication", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__local_authentication = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_authentication(self):
    self.__local_authentication = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-authentication", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_authentication_mode(self):
    """
    Getter method for authentication_mode, mapped from YANG variable /system/tables/access_control/users/user/authentication_mode (leafref)

    YANG Description: Use this property to choose one of existing authentication priorities.
An Authentication Priority lists out individual methods (LDAP, AD, TCACS, LOCAL etc) to be used and their order.
Admin can create new priorities as per needs.
Note that you can specify local-authentication too, in addition to this, in which case local will be used in the chosen priority order
    """
    return self.__authentication_mode
      
  def _set_authentication_mode(self, v, load=False):
    """
    Setter method for authentication_mode, mapped from YANG variable /system/tables/access_control/users/user/authentication_mode (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_mode() directly.

    YANG Description: Use this property to choose one of existing authentication priorities.
An Authentication Priority lists out individual methods (LDAP, AD, TCACS, LOCAL etc) to be used and their order.
Admin can create new priorities as per needs.
Note that you can specify local-authentication too, in addition to this, in which case local will be used in the chosen priority order
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="authentication-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_mode must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__authentication_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_mode(self):
    self.__authentication_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_security_question(self):
    """
    Getter method for security_question, mapped from YANG variable /system/tables/access_control/users/user/security_question (security-question)

    YANG Description: In what city or town was your first job?
What school did you attend for sixth grade?
What is the country of your ultimate dream vacation?
What was your dream job as a child?
Who was your childhood hero?

    """
    return self.__security_question
      
  def _set_security_question(self, v, load=False):
    """
    Setter method for security_question, mapped from YANG variable /system/tables/access_control/users/user/security_question (security-question)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_security_question is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_security_question() directly.

    YANG Description: In what city or town was your first job?
What school did you attend for sixth grade?
What is the country of your ultimate dream vacation?
What was your dream job as a child?
Who was your childhood hero?

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'What school did you attend for sixth grade?': {}, u'What is the country of your ultimate dream vacation?': {}, u'Who was your childhood hero?': {}, u'In what city or town was your first job?': {}, u'What was your dream job as a child?': {}},), is_leaf=True, yang_name="security-question", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='security-question', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """security_question must be of a type compatible with security-question""",
          'defined-type': "controller:security-question",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'What school did you attend for sixth grade?': {}, u'What is the country of your ultimate dream vacation?': {}, u'Who was your childhood hero?': {}, u'In what city or town was your first job?': {}, u'What was your dream job as a child?': {}},), is_leaf=True, yang_name="security-question", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='security-question', is_config=True)""",
        })

    self.__security_question = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_security_question(self):
    self.__security_question = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'What school did you attend for sixth grade?': {}, u'What is the country of your ultimate dream vacation?': {}, u'Who was your childhood hero?': {}, u'In what city or town was your first job?': {}, u'What was your dream job as a child?': {}},), is_leaf=True, yang_name="security-question", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='security-question', is_config=True)


  def _get_security_answer(self):
    """
    Getter method for security_answer, mapped from YANG variable /system/tables/access_control/users/user/security_answer (nct:password)

    YANG Description: string
    """
    return self.__security_answer
      
  def _set_security_answer(self, v, load=False):
    """
    Setter method for security_answer, mapped from YANG variable /system/tables/access_control/users/user/security_answer (nct:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_security_answer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_security_answer() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="security-answer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """security_answer must be of a type compatible with nct:password""",
          'defined-type': "nct:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="security-answer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)""",
        })

    self.__security_answer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_security_answer(self):
    self.__security_answer = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="security-answer", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)


  def _get_password(self):
    """
    Getter method for password, mapped from YANG variable /system/tables/access_control/users/user/password (nct:password)

    YANG Description: string
    """
    return self.__password
      
  def _set_password(self, v, load=False):
    """
    Setter method for password, mapped from YANG variable /system/tables/access_control/users/user/password (nct:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password must be of a type compatible with nct:password""",
          'defined-type': "nct:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)""",
        })

    self.__password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password(self):
    self.__password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)


  def _get_enable_address(self):
    """
    Getter method for enable_address, mapped from YANG variable /system/tables/access_control/users/user/enable_address (boolean)

    YANG Description: enable-address: True/False
    """
    return self.__enable_address
      
  def _set_enable_address(self, v, load=False):
    """
    Setter method for enable_address, mapped from YANG variable /system/tables/access_control/users/user/enable_address (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_address() directly.

    YANG Description: enable-address: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_address must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_address(self):
    self.__enable_address = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="enable-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_address(self):
    """
    Getter method for address, mapped from YANG variable /system/tables/access_control/users/user/address (string)

    YANG Description: string
    """
    return self.__address
      
  def _set_address(self, v, load=False):
    """
    Setter method for address, mapped from YANG variable /system/tables/access_control/users/user/address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_address(self):
    self.__address = YANGDynClass(base=unicode, is_leaf=True, yang_name="address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_city(self):
    """
    Getter method for city, mapped from YANG variable /system/tables/access_control/users/user/city (string)

    YANG Description: string
    """
    return self.__city
      
  def _set_city(self, v, load=False):
    """
    Setter method for city, mapped from YANG variable /system/tables/access_control/users/user/city (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_city is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_city() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="city", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """city must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__city = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_city(self):
    self.__city = YANGDynClass(base=unicode, is_leaf=True, yang_name="city", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_country(self):
    """
    Getter method for country, mapped from YANG variable /system/tables/access_control/users/user/country (string)

    YANG Description: string
    """
    return self.__country
      
  def _set_country(self, v, load=False):
    """
    Setter method for country, mapped from YANG variable /system/tables/access_control/users/user/country (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_country is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_country() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """country must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__country = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_country(self):
    self.__country = YANGDynClass(base=unicode, is_leaf=True, yang_name="country", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_postal_code(self):
    """
    Getter method for postal_code, mapped from YANG variable /system/tables/access_control/users/user/postal_code (string)

    YANG Description: string
    """
    return self.__postal_code
      
  def _set_postal_code(self, v, load=False):
    """
    Setter method for postal_code, mapped from YANG variable /system/tables/access_control/users/user/postal_code (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_postal_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_postal_code() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="postal-code", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """postal_code must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="postal-code", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__postal_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_postal_code(self):
    self.__postal_code = YANGDynClass(base=unicode, is_leaf=True, yang_name="postal-code", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_province(self):
    """
    Getter method for province, mapped from YANG variable /system/tables/access_control/users/user/province (string)

    YANG Description: string
    """
    return self.__province
      
  def _set_province(self, v, load=False):
    """
    Setter method for province, mapped from YANG variable /system/tables/access_control/users/user/province (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_province is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_province() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="province", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """province must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="province", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__province = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_province(self):
    self.__province = YANGDynClass(base=unicode, is_leaf=True, yang_name="province", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /system/tables/access_control/users/user/version (uint16)

    YANG Description: 0..65535
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /system/tables/access_control/users/user/version (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: 0..65535
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=False)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=False)


  def _get_ldap_user(self):
    """
    Getter method for ldap_user, mapped from YANG variable /system/tables/access_control/users/user/ldap_user (boolean)

    YANG Description: ldap-user: True/False
    """
    return self.__ldap_user
      
  def _set_ldap_user(self, v, load=False):
    """
    Setter method for ldap_user, mapped from YANG variable /system/tables/access_control/users/user/ldap_user (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldap_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldap_user() directly.

    YANG Description: ldap-user: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ldap-user", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldap_user must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldap-user", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__ldap_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldap_user(self):
    self.__ldap_user = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldap-user", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_deleted(self):
    """
    Getter method for deleted, mapped from YANG variable /system/tables/access_control/users/user/deleted (boolean)

    YANG Description: deleted: True/False
    """
    return self.__deleted
      
  def _set_deleted(self, v, load=False):
    """
    Setter method for deleted, mapped from YANG variable /system/tables/access_control/users/user/deleted (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deleted is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deleted() directly.

    YANG Description: deleted: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deleted must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)""",
        })

    self.__deleted = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deleted(self):
    self.__deleted = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="deleted", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=False)


  def _get_event_subscription(self):
    """
    Getter method for event_subscription, mapped from YANG variable /system/tables/access_control/users/user/event_subscription (list)
    """
    return self.__event_subscription
      
  def _set_event_subscription(self, v, load=False):
    """
    Setter method for event_subscription, mapped from YANG variable /system/tables/access_control/users/user/event_subscription (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_subscription is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_subscription() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("id",event_subscription.event_subscription, yang_name="event-subscription", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id'), is_container='list', yang_name="event-subscription", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_subscription must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("id",event_subscription.event_subscription, yang_name="event-subscription", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id'), is_container='list', yang_name="event-subscription", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__event_subscription = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_subscription(self):
    self.__event_subscription = YANGDynClass(base=YANGListType("id",event_subscription.event_subscription, yang_name="event-subscription", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='id'), is_container='list', yang_name="event-subscription", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)


  def _get_role(self):
    """
    Getter method for role, mapped from YANG variable /system/tables/access_control/users/user/role (leafref)

    YANG Description: role
    """
    return self.__role
      
  def _set_role(self, v, load=False):
    """
    Setter method for role, mapped from YANG variable /system/tables/access_control/users/user/role (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role() directly.

    YANG Description: role
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="role", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="role", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role(self):
    self.__role = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="role", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_snmpv3(self):
    """
    Getter method for snmpv3, mapped from YANG variable /system/tables/access_control/users/user/snmpv3 (container)
    """
    return self.__snmpv3
      
  def _set_snmpv3(self, v, load=False):
    """
    Setter method for snmpv3, mapped from YANG variable /system/tables/access_control/users/user/snmpv3 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmpv3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmpv3() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=snmpv3.snmpv3, is_container='container', yang_name="snmpv3", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmpv3 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=snmpv3.snmpv3, is_container='container', yang_name="snmpv3", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__snmpv3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmpv3(self):
    self.__snmpv3 = YANGDynClass(base=snmpv3.snmpv3, is_container='container', yang_name="snmpv3", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  username = __builtin__.property(_get_username, _set_username)
  first_name = __builtin__.property(_get_first_name, _set_first_name)
  last_name = __builtin__.property(_get_last_name, _set_last_name)
  email = __builtin__.property(_get_email, _set_email)
  phone_number = __builtin__.property(_get_phone_number, _set_phone_number)
  account_enabled = __builtin__.property(_get_account_enabled, _set_account_enabled)
  account_expired = __builtin__.property(_get_account_expired)
  account_locked = __builtin__.property(_get_account_locked)
  password_expiry_date = __builtin__.property(_get_password_expiry_date)
  snmpv3_enabled = __builtin__.property(_get_snmpv3_enabled)
  credentials_expired = __builtin__.property(_get_credentials_expired)
  local_authentication = __builtin__.property(_get_local_authentication, _set_local_authentication)
  authentication_mode = __builtin__.property(_get_authentication_mode, _set_authentication_mode)
  security_question = __builtin__.property(_get_security_question, _set_security_question)
  security_answer = __builtin__.property(_get_security_answer, _set_security_answer)
  password = __builtin__.property(_get_password, _set_password)
  enable_address = __builtin__.property(_get_enable_address, _set_enable_address)
  address = __builtin__.property(_get_address, _set_address)
  city = __builtin__.property(_get_city, _set_city)
  country = __builtin__.property(_get_country, _set_country)
  postal_code = __builtin__.property(_get_postal_code, _set_postal_code)
  province = __builtin__.property(_get_province, _set_province)
  version = __builtin__.property(_get_version)
  ldap_user = __builtin__.property(_get_ldap_user)
  deleted = __builtin__.property(_get_deleted)
  event_subscription = __builtin__.property(_get_event_subscription, _set_event_subscription)
  role = __builtin__.property(_get_role, _set_role)
  snmpv3 = __builtin__.property(_get_snmpv3, _set_snmpv3)


  _pyangbind_elements = collections.OrderedDict([('username', username), ('first_name', first_name), ('last_name', last_name), ('email', email), ('phone_number', phone_number), ('account_enabled', account_enabled), ('account_expired', account_expired), ('account_locked', account_locked), ('password_expiry_date', password_expiry_date), ('snmpv3_enabled', snmpv3_enabled), ('credentials_expired', credentials_expired), ('local_authentication', local_authentication), ('authentication_mode', authentication_mode), ('security_question', security_question), ('security_answer', security_answer), ('password', password), ('enable_address', enable_address), ('address', address), ('city', city), ('country', country), ('postal_code', postal_code), ('province', province), ('version', version), ('ldap_user', ldap_user), ('deleted', deleted), ('event_subscription', event_subscription), ('role', role), ('snmpv3', snmpv3), ])


