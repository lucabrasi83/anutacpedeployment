
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class event_subscription(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/access-control/users/user/event-subscription. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__id','__naas_event_spec','__immediate_email','__schedule_email',)

  _yang_name = 'event-subscription'
  _module_name = 'accesscontrol'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__schedule_email = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HOURLY': {}, u'DAILY': {}, u'WEEKLY': {}},), is_leaf=True, yang_name="schedule-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='schedule', is_config=True)
    self.__immediate_email = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="immediate-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__naas_event_spec = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'access-control', u'users', u'user', u'event-subscription']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/id (uint8)

    YANG Description: Id Range 0-255
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Id Range 0-255
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint8', is_config=True)


  def _get_naas_event_spec(self):
    """
    Getter method for naas_event_spec, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/naas_event_spec (leafref)

    YANG Description: naas-event-spec
    """
    return self.__naas_event_spec
      
  def _set_naas_event_spec(self, v, load=False):
    """
    Setter method for naas_event_spec, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/naas_event_spec (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_naas_event_spec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_naas_event_spec() directly.

    YANG Description: naas-event-spec
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """naas_event_spec must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__naas_event_spec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_naas_event_spec(self):
    self.__naas_event_spec = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_immediate_email(self):
    """
    Getter method for immediate_email, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/immediate_email (boolean)

    YANG Description: immediate-email: True/False
    """
    return self.__immediate_email
      
  def _set_immediate_email(self, v, load=False):
    """
    Setter method for immediate_email, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/immediate_email (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_immediate_email is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_immediate_email() directly.

    YANG Description: immediate-email: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="immediate-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """immediate_email must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="immediate-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__immediate_email = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_immediate_email(self):
    self.__immediate_email = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="immediate-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_schedule_email(self):
    """
    Getter method for schedule_email, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/schedule_email (schedule)

    YANG Description: HOURLY
DAILY
WEEKLY

    """
    return self.__schedule_email
      
  def _set_schedule_email(self, v, load=False):
    """
    Setter method for schedule_email, mapped from YANG variable /system/tables/access_control/users/user/event_subscription/schedule_email (schedule)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_schedule_email is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_schedule_email() directly.

    YANG Description: HOURLY
DAILY
WEEKLY

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HOURLY': {}, u'DAILY': {}, u'WEEKLY': {}},), is_leaf=True, yang_name="schedule-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='schedule', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """schedule_email must be of a type compatible with schedule""",
          'defined-type': "controller:schedule",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HOURLY': {}, u'DAILY': {}, u'WEEKLY': {}},), is_leaf=True, yang_name="schedule-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='schedule', is_config=True)""",
        })

    self.__schedule_email = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_schedule_email(self):
    self.__schedule_email = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HOURLY': {}, u'DAILY': {}, u'WEEKLY': {}},), is_leaf=True, yang_name="schedule-email", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='schedule', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  naas_event_spec = __builtin__.property(_get_naas_event_spec, _set_naas_event_spec)
  immediate_email = __builtin__.property(_get_immediate_email, _set_immediate_email)
  schedule_email = __builtin__.property(_get_schedule_email, _set_schedule_email)


  _pyangbind_elements = collections.OrderedDict([('id', id), ('naas_event_spec', naas_event_spec), ('immediate_email', immediate_email), ('schedule_email', schedule_email), ])


