
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class ldap(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/tables/access-control/ldaps/ldap. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__url','__manager_dn','__manager_password','__user_search_filter','__user_search_base','__group_search_filter','__group_search_base','__group_role_attribute','__user_lastname_attribute','__user_firstname_attribute','__sync_freq_in_hours','__last_sync_req_time',)

  _yang_name = 'ldap'
  _module_name = 'accesscontrol'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__manager_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="manager-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    self.__group_role_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-role-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__user_lastname_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-lastname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__group_search_base = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__last_sync_req_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-sync-req-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__group_search_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__manager_dn = YANGDynClass(base=unicode, is_leaf=True, yang_name="manager-dn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__user_search_base = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__user_firstname_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-firstname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__sync_freq_in_hours = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-freq-in-hours", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__user_search_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'tables', u'access-control', u'ldaps', u'ldap']

  def _get_url(self):
    """
    Getter method for url, mapped from YANG variable /system/tables/access_control/ldaps/ldap/url (string)

    YANG Description: ldap://172.16.2.222:10389/0=user[OrganizationName]
    """
    return self.__url
      
  def _set_url(self, v, load=False):
    """
    Setter method for url, mapped from YANG variable /system/tables/access_control/ldaps/ldap/url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_url() directly.

    YANG Description: ldap://172.16.2.222:10389/0=user[OrganizationName]
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_url(self):
    self.__url = YANGDynClass(base=unicode, is_leaf=True, yang_name="url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_manager_dn(self):
    """
    Getter method for manager_dn, mapped from YANG variable /system/tables/access_control/ldaps/ldap/manager_dn (string)

    YANG Description: uid=admin, ou=system
    """
    return self.__manager_dn
      
  def _set_manager_dn(self, v, load=False):
    """
    Setter method for manager_dn, mapped from YANG variable /system/tables/access_control/ldaps/ldap/manager_dn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_manager_dn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_manager_dn() directly.

    YANG Description: uid=admin, ou=system
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="manager-dn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """manager_dn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="manager-dn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__manager_dn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_manager_dn(self):
    self.__manager_dn = YANGDynClass(base=unicode, is_leaf=True, yang_name="manager-dn", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_manager_password(self):
    """
    Getter method for manager_password, mapped from YANG variable /system/tables/access_control/ldaps/ldap/manager_password (nct:password)

    YANG Description: Enter a string
    """
    return self.__manager_password
      
  def _set_manager_password(self, v, load=False):
    """
    Setter method for manager_password, mapped from YANG variable /system/tables/access_control/ldaps/ldap/manager_password (nct:password)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_manager_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_manager_password() directly.

    YANG Description: Enter a string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="manager-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """manager_password must be of a type compatible with nct:password""",
          'defined-type': "nct:password",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="manager-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)""",
        })

    self.__manager_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_manager_password(self):
    self.__manager_password = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..80']}), is_leaf=True, yang_name="manager-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='nct:password', is_config=True)


  def _get_user_search_filter(self):
    """
    Getter method for user_search_filter, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_search_filter (string)

    YANG Description: Eg: (uid={0})
    """
    return self.__user_search_filter
      
  def _set_user_search_filter(self, v, load=False):
    """
    Setter method for user_search_filter, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_search_filter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_search_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_search_filter() directly.

    YANG Description: Eg: (uid={0})
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_search_filter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_search_filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_search_filter(self):
    self.__user_search_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_search_base(self):
    """
    Getter method for user_search_base, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_search_base (string)

    YANG Description: Eg: ou=users
    """
    return self.__user_search_base
      
  def _set_user_search_base(self, v, load=False):
    """
    Setter method for user_search_base, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_search_base (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_search_base is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_search_base() directly.

    YANG Description: Eg: ou=users
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_search_base must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_search_base = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_search_base(self):
    self.__user_search_base = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_group_search_filter(self):
    """
    Getter method for group_search_filter, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_search_filter (string)

    YANG Description: Eg: (uniqueNumber={0})
    """
    return self.__group_search_filter
      
  def _set_group_search_filter(self, v, load=False):
    """
    Setter method for group_search_filter, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_search_filter (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_search_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_search_filter() directly.

    YANG Description: Eg: (uniqueNumber={0})
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="group-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_search_filter must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__group_search_filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_search_filter(self):
    self.__group_search_filter = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-filter", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_group_search_base(self):
    """
    Getter method for group_search_base, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_search_base (string)

    YANG Description: Eg: ou=groups
    """
    return self.__group_search_base
      
  def _set_group_search_base(self, v, load=False):
    """
    Setter method for group_search_base, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_search_base (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_search_base is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_search_base() directly.

    YANG Description: Eg: ou=groups
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="group-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_search_base must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__group_search_base = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_search_base(self):
    self.__group_search_base = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-search-base", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_group_role_attribute(self):
    """
    Getter method for group_role_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_role_attribute (string)

    YANG Description: Eg: cn
    """
    return self.__group_role_attribute
      
  def _set_group_role_attribute(self, v, load=False):
    """
    Setter method for group_role_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/group_role_attribute (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_role_attribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_role_attribute() directly.

    YANG Description: Eg: cn
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="group-role-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_role_attribute must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="group-role-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__group_role_attribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_role_attribute(self):
    self.__group_role_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="group-role-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_lastname_attribute(self):
    """
    Getter method for user_lastname_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_lastname_attribute (string)

    YANG Description: Eg: sn
    """
    return self.__user_lastname_attribute
      
  def _set_user_lastname_attribute(self, v, load=False):
    """
    Setter method for user_lastname_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_lastname_attribute (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_lastname_attribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_lastname_attribute() directly.

    YANG Description: Eg: sn
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-lastname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_lastname_attribute must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-lastname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_lastname_attribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_lastname_attribute(self):
    self.__user_lastname_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-lastname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_firstname_attribute(self):
    """
    Getter method for user_firstname_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_firstname_attribute (string)

    YANG Description: Eg: cn
    """
    return self.__user_firstname_attribute
      
  def _set_user_firstname_attribute(self, v, load=False):
    """
    Setter method for user_firstname_attribute, mapped from YANG variable /system/tables/access_control/ldaps/ldap/user_firstname_attribute (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_firstname_attribute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_firstname_attribute() directly.

    YANG Description: Eg: cn
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="user-firstname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_firstname_attribute must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="user-firstname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__user_firstname_attribute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_firstname_attribute(self):
    self.__user_firstname_attribute = YANGDynClass(base=unicode, is_leaf=True, yang_name="user-firstname-attribute", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_sync_freq_in_hours(self):
    """
    Getter method for sync_freq_in_hours, mapped from YANG variable /system/tables/access_control/ldaps/ldap/sync_freq_in_hours (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__sync_freq_in_hours
      
  def _set_sync_freq_in_hours(self, v, load=False):
    """
    Setter method for sync_freq_in_hours, mapped from YANG variable /system/tables/access_control/ldaps/ldap/sync_freq_in_hours (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync_freq_in_hours is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync_freq_in_hours() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-freq-in-hours", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync_freq_in_hours must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-freq-in-hours", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__sync_freq_in_hours = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync_freq_in_hours(self):
    self.__sync_freq_in_hours = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-freq-in-hours", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_last_sync_req_time(self):
    """
    Getter method for last_sync_req_time, mapped from YANG variable /system/tables/access_control/ldaps/ldap/last_sync_req_time (uint32)

    YANG Description: 0..4294967295
    """
    return self.__last_sync_req_time
      
  def _set_last_sync_req_time(self, v, load=False):
    """
    Setter method for last_sync_req_time, mapped from YANG variable /system/tables/access_control/ldaps/ldap/last_sync_req_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_sync_req_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_sync_req_time() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-sync-req-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_sync_req_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-sync-req-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__last_sync_req_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_sync_req_time(self):
    self.__last_sync_req_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-sync-req-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)

  url = __builtin__.property(_get_url, _set_url)
  manager_dn = __builtin__.property(_get_manager_dn, _set_manager_dn)
  manager_password = __builtin__.property(_get_manager_password, _set_manager_password)
  user_search_filter = __builtin__.property(_get_user_search_filter, _set_user_search_filter)
  user_search_base = __builtin__.property(_get_user_search_base, _set_user_search_base)
  group_search_filter = __builtin__.property(_get_group_search_filter, _set_group_search_filter)
  group_search_base = __builtin__.property(_get_group_search_base, _set_group_search_base)
  group_role_attribute = __builtin__.property(_get_group_role_attribute, _set_group_role_attribute)
  user_lastname_attribute = __builtin__.property(_get_user_lastname_attribute, _set_user_lastname_attribute)
  user_firstname_attribute = __builtin__.property(_get_user_firstname_attribute, _set_user_firstname_attribute)
  sync_freq_in_hours = __builtin__.property(_get_sync_freq_in_hours, _set_sync_freq_in_hours)
  last_sync_req_time = __builtin__.property(_get_last_sync_req_time, _set_last_sync_req_time)


  _pyangbind_elements = collections.OrderedDict([('url', url), ('manager_dn', manager_dn), ('manager_password', manager_password), ('user_search_filter', user_search_filter), ('user_search_base', user_search_base), ('group_search_filter', group_search_filter), ('group_search_base', group_search_base), ('group_role_attribute', group_role_attribute), ('user_lastname_attribute', user_lastname_attribute), ('user_firstname_attribute', user_firstname_attribute), ('sync_freq_in_hours', sync_freq_in_hours), ('last_sync_req_time', last_sync_req_time), ])


