
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class discovered_device(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/internal/tables/discovered-devices/discovered-device. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__ip_address','__discovered_time','__task_id','__job_template_instance_id','__serial_number','__parent_ip_address','__device_port','__hop_count','__device_family_id','__credential_set_id','__device_type_id','__device_descriptor','__discovery_type','__device_identifier','__state','__credential_set_name',)

  _yang_name = 'discovered-device'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__discovered_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="discovered-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__credential_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__discovery_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="discovery-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_family_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_descriptor = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-descriptor", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__hop_count = YANGDynClass(base=unicode, is_leaf=True, yang_name="hop-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_type_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__device_identifier = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-identifier", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__job_template_instance_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-template-instance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNMANAGEABLE': {}, u'UNREACHABLE': {}, u'MANAGEABLE': {}, u'UNSUPPORTED': {}, u'FILTERED': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:discovered-device-state', is_config=True)
    self.__device_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__parent_ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__credential_set_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'internal', u'tables', u'discovered-devices', u'discovered-device']

  def _get_ip_address(self):
    """
    Getter method for ip_address, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/ip_address (string)

    YANG Description: string
    """
    return self.__ip_address
      
  def _set_ip_address(self, v, load=False):
    """
    Setter method for ip_address, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/ip_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_address() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_address(self):
    self.__ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_discovered_time(self):
    """
    Getter method for discovered_time, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/discovered_time (string)

    YANG Description: string
    """
    return self.__discovered_time
      
  def _set_discovered_time(self, v, load=False):
    """
    Setter method for discovered_time, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/discovered_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discovered_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discovered_time() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="discovered-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discovered_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="discovered-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__discovered_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discovered_time(self):
    self.__discovered_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="discovered-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_task_id(self):
    """
    Getter method for task_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/task_id (string)

    YANG Description: string
    """
    return self.__task_id
      
  def _set_task_id(self, v, load=False):
    """
    Setter method for task_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/task_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_task_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_task_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """task_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__task_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_task_id(self):
    self.__task_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="task-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_job_template_instance_id(self):
    """
    Getter method for job_template_instance_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/job_template_instance_id (string)

    YANG Description: string
    """
    return self.__job_template_instance_id
      
  def _set_job_template_instance_id(self, v, load=False):
    """
    Setter method for job_template_instance_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/job_template_instance_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_job_template_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_job_template_instance_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="job-template-instance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """job_template_instance_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="job-template-instance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__job_template_instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_job_template_instance_id(self):
    self.__job_template_instance_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="job-template-instance-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_serial_number(self):
    """
    Getter method for serial_number, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/serial_number (string)

    YANG Description: string
    """
    return self.__serial_number
      
  def _set_serial_number(self, v, load=False):
    """
    Setter method for serial_number, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/serial_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serial_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serial_number() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serial_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__serial_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serial_number(self):
    self.__serial_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="serial-number", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_parent_ip_address(self):
    """
    Getter method for parent_ip_address, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/parent_ip_address (string)

    YANG Description: string
    """
    return self.__parent_ip_address
      
  def _set_parent_ip_address(self, v, load=False):
    """
    Setter method for parent_ip_address, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/parent_ip_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_ip_address() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="parent-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_ip_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__parent_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_ip_address(self):
    self.__parent_ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="parent-ip-address", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_port(self):
    """
    Getter method for device_port, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_port (string)

    YANG Description: string
    """
    return self.__device_port
      
  def _set_device_port(self, v, load=False):
    """
    Setter method for device_port, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_port (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_port() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_port must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_port(self):
    self.__device_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_hop_count(self):
    """
    Getter method for hop_count, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/hop_count (string)

    YANG Description: string
    """
    return self.__hop_count
      
  def _set_hop_count(self, v, load=False):
    """
    Setter method for hop_count, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/hop_count (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hop_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hop_count() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="hop-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hop_count must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="hop-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__hop_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hop_count(self):
    self.__hop_count = YANGDynClass(base=unicode, is_leaf=True, yang_name="hop-count", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_family_id(self):
    """
    Getter method for device_family_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_family_id (string)

    YANG Description: string
    """
    return self.__device_family_id
      
  def _set_device_family_id(self, v, load=False):
    """
    Setter method for device_family_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_family_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_family_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_family_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-family-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_family_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_family_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_family_id(self):
    self.__device_family_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_credential_set_id(self):
    """
    Getter method for credential_set_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/credential_set_id (string)

    YANG Description: string
    """
    return self.__credential_set_id
      
  def _set_credential_set_id(self, v, load=False):
    """
    Setter method for credential_set_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/credential_set_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credential_set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credential_set_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="credential-set-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credential_set_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__credential_set_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credential_set_id(self):
    self.__credential_set_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_type_id(self):
    """
    Getter method for device_type_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_type_id (string)

    YANG Description: string
    """
    return self.__device_type_id
      
  def _set_device_type_id(self, v, load=False):
    """
    Setter method for device_type_id, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_type_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_type_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_type_id() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-type-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_type_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_type_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_type_id(self):
    self.__device_type_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-type-id", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_descriptor(self):
    """
    Getter method for device_descriptor, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_descriptor (string)

    YANG Description: string
    """
    return self.__device_descriptor
      
  def _set_device_descriptor(self, v, load=False):
    """
    Setter method for device_descriptor, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_descriptor (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_descriptor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_descriptor() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-descriptor", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_descriptor must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-descriptor", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_descriptor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_descriptor(self):
    self.__device_descriptor = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-descriptor", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_discovery_type(self):
    """
    Getter method for discovery_type, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/discovery_type (string)

    YANG Description: string
    """
    return self.__discovery_type
      
  def _set_discovery_type(self, v, load=False):
    """
    Setter method for discovery_type, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/discovery_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discovery_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discovery_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="discovery-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discovery_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="discovery-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__discovery_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discovery_type(self):
    self.__discovery_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="discovery-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_identifier(self):
    """
    Getter method for device_identifier, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_identifier (string)

    YANG Description: string
    """
    return self.__device_identifier
      
  def _set_device_identifier(self, v, load=False):
    """
    Setter method for device_identifier, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/device_identifier (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_identifier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_identifier() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-identifier", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_identifier must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-identifier", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__device_identifier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_identifier(self):
    self.__device_identifier = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-identifier", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/state (ndt:discovered-device-state)

    YANG Description: MANAGEABLE
UNMANAGEABLE
UNREACHABLE
UNSUPPORTED
FILTERED

    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/state (ndt:discovered-device-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: MANAGEABLE
UNMANAGEABLE
UNREACHABLE
UNSUPPORTED
FILTERED

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNMANAGEABLE': {}, u'UNREACHABLE': {}, u'MANAGEABLE': {}, u'UNSUPPORTED': {}, u'FILTERED': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:discovered-device-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with ndt:discovered-device-state""",
          'defined-type': "ndt:discovered-device-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNMANAGEABLE': {}, u'UNREACHABLE': {}, u'MANAGEABLE': {}, u'UNSUPPORTED': {}, u'FILTERED': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:discovered-device-state', is_config=True)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'UNMANAGEABLE': {}, u'UNREACHABLE': {}, u'MANAGEABLE': {}, u'UNSUPPORTED': {}, u'FILTERED': {}},), is_leaf=True, yang_name="state", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:discovered-device-state', is_config=True)


  def _get_credential_set_name(self):
    """
    Getter method for credential_set_name, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/credential_set_name (leafref)

    YANG Description: credential-set-name
    """
    return self.__credential_set_name
      
  def _set_credential_set_name(self, v, load=False):
    """
    Setter method for credential_set_name, mapped from YANG variable /system/internal/tables/discovered_devices/discovered_device/credential_set_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_credential_set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_credential_set_name() directly.

    YANG Description: credential-set-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """credential_set_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__credential_set_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_credential_set_name(self):
    self.__credential_set_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="credential-set-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  ip_address = __builtin__.property(_get_ip_address, _set_ip_address)
  discovered_time = __builtin__.property(_get_discovered_time, _set_discovered_time)
  task_id = __builtin__.property(_get_task_id, _set_task_id)
  job_template_instance_id = __builtin__.property(_get_job_template_instance_id, _set_job_template_instance_id)
  serial_number = __builtin__.property(_get_serial_number, _set_serial_number)
  parent_ip_address = __builtin__.property(_get_parent_ip_address, _set_parent_ip_address)
  device_port = __builtin__.property(_get_device_port, _set_device_port)
  hop_count = __builtin__.property(_get_hop_count, _set_hop_count)
  device_family_id = __builtin__.property(_get_device_family_id, _set_device_family_id)
  credential_set_id = __builtin__.property(_get_credential_set_id, _set_credential_set_id)
  device_type_id = __builtin__.property(_get_device_type_id, _set_device_type_id)
  device_descriptor = __builtin__.property(_get_device_descriptor, _set_device_descriptor)
  discovery_type = __builtin__.property(_get_discovery_type, _set_discovery_type)
  device_identifier = __builtin__.property(_get_device_identifier, _set_device_identifier)
  state = __builtin__.property(_get_state, _set_state)
  credential_set_name = __builtin__.property(_get_credential_set_name, _set_credential_set_name)


  _pyangbind_elements = collections.OrderedDict([('ip_address', ip_address), ('discovered_time', discovered_time), ('task_id', task_id), ('job_template_instance_id', job_template_instance_id), ('serial_number', serial_number), ('parent_ip_address', parent_ip_address), ('device_port', device_port), ('hop_count', hop_count), ('device_family_id', device_family_id), ('credential_set_id', credential_set_id), ('device_type_id', device_type_id), ('device_descriptor', device_descriptor), ('discovery_type', discovery_type), ('device_identifier', device_identifier), ('state', state), ('credential_set_name', credential_set_name), ])


