
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class transaction_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /system/server-config/system-state/history/history-entry/transaction-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__fail_fast','__validation_scope','__command_sequence_policy','__auto_rollback',)

  _yang_name = 'transaction-config'
  _module_name = 'system'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__fail_fast = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="fail-fast", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__validation_scope = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMMITTED_DATA': {}, u'UNCOMMITTED_DATA': {}},), default=unicode("COMMITTED_DATA"), is_leaf=True, yang_name="validation-scope", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='validation-scope-type', is_config=True)
    self.__command_sequence_policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NONE': {}, u'DEPENDENCY_BASED': {}},), default=unicode("DEPENDENCY_BASED"), is_leaf=True, yang_name="command-sequence-policy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='command-sequence-policy-type', is_config=True)
    self.__auto_rollback = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system', u'server-config', u'system-state', u'history', u'history-entry', u'transaction-config']

  def _get_fail_fast(self):
    """
    Getter method for fail_fast, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/fail_fast (boolean)

    YANG Description: flag to control if reference validation to be done immediately. 'false' will defer the validation to after
commit-task
    """
    return self.__fail_fast
      
  def _set_fail_fast(self, v, load=False):
    """
    Setter method for fail_fast, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/fail_fast (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fail_fast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fail_fast() directly.

    YANG Description: flag to control if reference validation to be done immediately. 'false' will defer the validation to after
commit-task
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="fail-fast", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fail_fast must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="fail-fast", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__fail_fast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fail_fast(self):
    self.__fail_fast = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="fail-fast", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_validation_scope(self):
    """
    Getter method for validation_scope, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/validation_scope (validation-scope-type)

    YANG Description: flag to control the data validation scope, this is similar transaction isolation
    """
    return self.__validation_scope
      
  def _set_validation_scope(self, v, load=False):
    """
    Setter method for validation_scope, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/validation_scope (validation-scope-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_validation_scope is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_validation_scope() directly.

    YANG Description: flag to control the data validation scope, this is similar transaction isolation
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMMITTED_DATA': {}, u'UNCOMMITTED_DATA': {}},), default=unicode("COMMITTED_DATA"), is_leaf=True, yang_name="validation-scope", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='validation-scope-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """validation_scope must be of a type compatible with validation-scope-type""",
          'defined-type': "controller:validation-scope-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMMITTED_DATA': {}, u'UNCOMMITTED_DATA': {}},), default=unicode("COMMITTED_DATA"), is_leaf=True, yang_name="validation-scope", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='validation-scope-type', is_config=True)""",
        })

    self.__validation_scope = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_validation_scope(self):
    self.__validation_scope = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'COMMITTED_DATA': {}, u'UNCOMMITTED_DATA': {}},), default=unicode("COMMITTED_DATA"), is_leaf=True, yang_name="validation-scope", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='validation-scope-type', is_config=True)


  def _get_command_sequence_policy(self):
    """
    Getter method for command_sequence_policy, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/command_sequence_policy (command-sequence-policy-type)

    YANG Description: DEPENDENCY_BASED
NONE

    """
    return self.__command_sequence_policy
      
  def _set_command_sequence_policy(self, v, load=False):
    """
    Setter method for command_sequence_policy, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/command_sequence_policy (command-sequence-policy-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_command_sequence_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_command_sequence_policy() directly.

    YANG Description: DEPENDENCY_BASED
NONE

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NONE': {}, u'DEPENDENCY_BASED': {}},), default=unicode("DEPENDENCY_BASED"), is_leaf=True, yang_name="command-sequence-policy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='command-sequence-policy-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """command_sequence_policy must be of a type compatible with command-sequence-policy-type""",
          'defined-type': "controller:command-sequence-policy-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NONE': {}, u'DEPENDENCY_BASED': {}},), default=unicode("DEPENDENCY_BASED"), is_leaf=True, yang_name="command-sequence-policy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='command-sequence-policy-type', is_config=True)""",
        })

    self.__command_sequence_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_command_sequence_policy(self):
    self.__command_sequence_policy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'NONE': {}, u'DEPENDENCY_BASED': {}},), default=unicode("DEPENDENCY_BASED"), is_leaf=True, yang_name="command-sequence-policy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='command-sequence-policy-type', is_config=True)


  def _get_auto_rollback(self):
    """
    Getter method for auto_rollback, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/auto_rollback (boolean)

    YANG Description: flag to control if the partial changes done during the transaction are rolled back on error automatically.
If set to false, partial changes done are not rolled back, rollback-task has to be called explicitly to
rollback the changes
    """
    return self.__auto_rollback
      
  def _set_auto_rollback(self, v, load=False):
    """
    Setter method for auto_rollback, mapped from YANG variable /system/server_config/system_state/history/history_entry/transaction_config/auto_rollback (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_rollback is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_rollback() directly.

    YANG Description: flag to control if the partial changes done during the transaction are rolled back on error automatically.
If set to false, partial changes done are not rolled back, rollback-task has to be called explicitly to
rollback the changes
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_rollback must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__auto_rollback = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_rollback(self):
    self.__auto_rollback = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="auto-rollback", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  fail_fast = __builtin__.property(_get_fail_fast, _set_fail_fast)
  validation_scope = __builtin__.property(_get_validation_scope, _set_validation_scope)
  command_sequence_policy = __builtin__.property(_get_command_sequence_policy, _set_command_sequence_policy)
  auto_rollback = __builtin__.property(_get_auto_rollback, _set_auto_rollback)


  _pyangbind_elements = collections.OrderedDict([('fail_fast', fail_fast), ('validation_scope', validation_scope), ('command_sequence_policy', command_sequence_policy), ('auto_rollback', auto_rollback), ])


