
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class circuit(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module location - based on the path /circuits/circuit. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__standard_name','__allow_multiple_mapping','__type','__category','__oep_label','__oep_type','__oep_building','__oep_room','__oep_comment','__tep_label','__tep_type','__tep_building','__tep_room','__tep_comment',)

  _yang_name = 'circuit'
  _module_name = 'location'
  _namespace = 'http://anutanetworks.com/location'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__category = YANGDynClass(base=unicode, is_leaf=True, yang_name="category", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__tep_building = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__tep_room = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    self.__oep_room = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__oep_building = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__tep_comment = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="tep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    self.__tep_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__oep_comment = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="oep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    self.__standard_name = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="standard-name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)
    self.__oep_label = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    self.__oep_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    self.__tep_label = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    self.__allow_multiple_mapping = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-multiple-mapping", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)
    self.__type = YANGDynClass(base=unicode, is_leaf=True, yang_name="type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'circuits', u'circuit']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /circuits/circuit/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /circuits/circuit/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..36']}), is_leaf=True, yang_name="name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)


  def _get_standard_name(self):
    """
    Getter method for standard_name, mapped from YANG variable /circuits/circuit/standard_name (boolean)

    YANG Description: standard-name: True/False
    """
    return self.__standard_name
      
  def _set_standard_name(self, v, load=False):
    """
    Setter method for standard_name, mapped from YANG variable /circuits/circuit/standard_name (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_standard_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_standard_name() directly.

    YANG Description: standard-name: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="standard-name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """standard_name must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="standard-name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)""",
        })

    self.__standard_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_standard_name(self):
    self.__standard_name = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="standard-name", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)


  def _get_allow_multiple_mapping(self):
    """
    Getter method for allow_multiple_mapping, mapped from YANG variable /circuits/circuit/allow_multiple_mapping (boolean)

    YANG Description: allow-multiple-mapping: True/False
    """
    return self.__allow_multiple_mapping
      
  def _set_allow_multiple_mapping(self, v, load=False):
    """
    Setter method for allow_multiple_mapping, mapped from YANG variable /circuits/circuit/allow_multiple_mapping (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allow_multiple_mapping is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allow_multiple_mapping() directly.

    YANG Description: allow-multiple-mapping: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="allow-multiple-mapping", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allow_multiple_mapping must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-multiple-mapping", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)""",
        })

    self.__allow_multiple_mapping = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allow_multiple_mapping(self):
    self.__allow_multiple_mapping = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-multiple-mapping", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='boolean', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /circuits/circuit/type (leafref)

    YANG Description: type
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /circuits/circuit/type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=unicode, is_leaf=True, yang_name="type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_category(self):
    """
    Getter method for category, mapped from YANG variable /circuits/circuit/category (leafref)

    YANG Description: category
    """
    return self.__category
      
  def _set_category(self, v, load=False):
    """
    Setter method for category, mapped from YANG variable /circuits/circuit/category (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_category is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_category() directly.

    YANG Description: category
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="category", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """category must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="category", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__category = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_category(self):
    self.__category = YANGDynClass(base=unicode, is_leaf=True, yang_name="category", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_oep_label(self):
    """
    Getter method for oep_label, mapped from YANG variable /circuits/circuit/oep_label (string)

    YANG Description: string
    """
    return self.__oep_label
      
  def _set_oep_label(self, v, load=False):
    """
    Setter method for oep_label, mapped from YANG variable /circuits/circuit/oep_label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oep_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oep_label() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oep_label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)""",
        })

    self.__oep_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oep_label(self):
    self.__oep_label = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)


  def _get_oep_type(self):
    """
    Getter method for oep_type, mapped from YANG variable /circuits/circuit/oep_type (leafref)

    YANG Description: oep-type
    """
    return self.__oep_type
      
  def _set_oep_type(self, v, load=False):
    """
    Setter method for oep_type, mapped from YANG variable /circuits/circuit/oep_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oep_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oep_type() directly.

    YANG Description: oep-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oep_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__oep_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oep_type(self):
    self.__oep_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_oep_building(self):
    """
    Getter method for oep_building, mapped from YANG variable /circuits/circuit/oep_building (leafref)

    YANG Description: oep-building
    """
    return self.__oep_building
      
  def _set_oep_building(self, v, load=False):
    """
    Setter method for oep_building, mapped from YANG variable /circuits/circuit/oep_building (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oep_building is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oep_building() directly.

    YANG Description: oep-building
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oep_building must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__oep_building = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oep_building(self):
    self.__oep_building = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_oep_room(self):
    """
    Getter method for oep_room, mapped from YANG variable /circuits/circuit/oep_room (leafref)

    YANG Description: oep-room
    """
    return self.__oep_room
      
  def _set_oep_room(self, v, load=False):
    """
    Setter method for oep_room, mapped from YANG variable /circuits/circuit/oep_room (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oep_room is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oep_room() directly.

    YANG Description: oep-room
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oep_room must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__oep_room = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oep_room(self):
    self.__oep_room = YANGDynClass(base=unicode, is_leaf=True, yang_name="oep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_oep_comment(self):
    """
    Getter method for oep_comment, mapped from YANG variable /circuits/circuit/oep_comment (string)

    YANG Description: string
    """
    return self.__oep_comment
      
  def _set_oep_comment(self, v, load=False):
    """
    Setter method for oep_comment, mapped from YANG variable /circuits/circuit/oep_comment (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oep_comment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oep_comment() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="oep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oep_comment must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="oep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)""",
        })

    self.__oep_comment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oep_comment(self):
    self.__oep_comment = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="oep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)


  def _get_tep_label(self):
    """
    Getter method for tep_label, mapped from YANG variable /circuits/circuit/tep_label (string)

    YANG Description: string
    """
    return self.__tep_label
      
  def _set_tep_label(self, v, load=False):
    """
    Setter method for tep_label, mapped from YANG variable /circuits/circuit/tep_label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tep_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tep_label() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tep_label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)""",
        })

    self.__tep_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tep_label(self):
    self.__tep_label = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-label", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)


  def _get_tep_type(self):
    """
    Getter method for tep_type, mapped from YANG variable /circuits/circuit/tep_type (leafref)

    YANG Description: tep-type
    """
    return self.__tep_type
      
  def _set_tep_type(self, v, load=False):
    """
    Setter method for tep_type, mapped from YANG variable /circuits/circuit/tep_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tep_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tep_type() directly.

    YANG Description: tep-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tep_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__tep_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tep_type(self):
    self.__tep_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-type", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_tep_building(self):
    """
    Getter method for tep_building, mapped from YANG variable /circuits/circuit/tep_building (leafref)

    YANG Description: tep-building
    """
    return self.__tep_building
      
  def _set_tep_building(self, v, load=False):
    """
    Setter method for tep_building, mapped from YANG variable /circuits/circuit/tep_building (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tep_building is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tep_building() directly.

    YANG Description: tep-building
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tep_building must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__tep_building = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tep_building(self):
    self.__tep_building = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-building", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_tep_room(self):
    """
    Getter method for tep_room, mapped from YANG variable /circuits/circuit/tep_room (leafref)

    YANG Description: tep-room
    """
    return self.__tep_room
      
  def _set_tep_room(self, v, load=False):
    """
    Setter method for tep_room, mapped from YANG variable /circuits/circuit/tep_room (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tep_room is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tep_room() directly.

    YANG Description: tep-room
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tep_room must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)""",
        })

    self.__tep_room = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tep_room(self):
    self.__tep_room = YANGDynClass(base=unicode, is_leaf=True, yang_name="tep-room", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='leafref', is_config=True)


  def _get_tep_comment(self):
    """
    Getter method for tep_comment, mapped from YANG variable /circuits/circuit/tep_comment (string)

    YANG Description: string
    """
    return self.__tep_comment
      
  def _set_tep_comment(self, v, load=False):
    """
    Setter method for tep_comment, mapped from YANG variable /circuits/circuit/tep_comment (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tep_comment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tep_comment() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="tep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tep_comment must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="tep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)""",
        })

    self.__tep_comment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tep_comment(self):
    self.__tep_comment = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'0..128']}), is_leaf=True, yang_name="tep-comment", module_name="location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/location', defining_module='location', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  standard_name = __builtin__.property(_get_standard_name, _set_standard_name)
  allow_multiple_mapping = __builtin__.property(_get_allow_multiple_mapping, _set_allow_multiple_mapping)
  type = __builtin__.property(_get_type, _set_type)
  category = __builtin__.property(_get_category, _set_category)
  oep_label = __builtin__.property(_get_oep_label, _set_oep_label)
  oep_type = __builtin__.property(_get_oep_type, _set_oep_type)
  oep_building = __builtin__.property(_get_oep_building, _set_oep_building)
  oep_room = __builtin__.property(_get_oep_room, _set_oep_room)
  oep_comment = __builtin__.property(_get_oep_comment, _set_oep_comment)
  tep_label = __builtin__.property(_get_tep_label, _set_tep_label)
  tep_type = __builtin__.property(_get_tep_type, _set_tep_type)
  tep_building = __builtin__.property(_get_tep_building, _set_tep_building)
  tep_room = __builtin__.property(_get_tep_room, _set_tep_room)
  tep_comment = __builtin__.property(_get_tep_comment, _set_tep_comment)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('standard_name', standard_name), ('allow_multiple_mapping', allow_multiple_mapping), ('type', type), ('category', category), ('oep_label', oep_label), ('oep_type', oep_type), ('oep_building', oep_building), ('oep_room', oep_room), ('oep_comment', oep_comment), ('tep_label', tep_label), ('tep_type', tep_type), ('tep_building', tep_building), ('tep_room', tep_room), ('tep_comment', tep_comment), ])


