
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module networkfunctionssupport - based on the path /networkfunctionssupport_rpc/interface-event-handler/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__device_id','__device_ip','__event_src','__event_name','__event_msg','__payload','__event_spec_path','__attribute_map_path',)

  _yang_name = 'input'
  _module_name = 'networkfunctionssupport'
  _namespace = 'http://anutanetworks.com/networkfunctionssupport'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__event_spec_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__attribute_map_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="attribute-map-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__device_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__event_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-msg", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__event_src = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-src", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__payload = YANGDynClass(base=unicode, is_leaf=True, yang_name="payload", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'networkfunctionssupport_rpc', u'interface-event-handler', u'input']

  def _get_device_id(self):
    """
    Getter method for device_id, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/device_id (string)

    YANG Description: Device-Id in which syslog/trap generated.
    """
    return self.__device_id
      
  def _set_device_id(self, v, load=False):
    """
    Setter method for device_id, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/device_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_id() directly.

    YANG Description: Device-Id in which syslog/trap generated.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-id", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__device_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_id(self):
    self.__device_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-id", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_device_ip(self):
    """
    Getter method for device_ip, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/device_ip (string)

    YANG Description: Device-IP in which syslog/trap generated.
    """
    return self.__device_ip
      
  def _set_device_ip(self, v, load=False):
    """
    Setter method for device_ip, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/device_ip (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_ip() directly.

    YANG Description: Device-IP in which syslog/trap generated.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-ip", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_ip must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__device_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_ip(self):
    self.__device_ip = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-ip", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_event_src(self):
    """
    Getter method for event_src, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_src (string)

    YANG Description: Event source, Example: Trap/Syslog
    """
    return self.__event_src
      
  def _set_event_src(self, v, load=False):
    """
    Setter method for event_src, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_src (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_src is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_src() directly.

    YANG Description: Event source, Example: Trap/Syslog
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-src", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_src must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-src", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__event_src = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_src(self):
    self.__event_src = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-src", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_event_name(self):
    """
    Getter method for event_name, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_name (string)

    YANG Description: Name of the Event. Example: LEVEL-3-UP-DOWN
    """
    return self.__event_name
      
  def _set_event_name(self, v, load=False):
    """
    Setter method for event_name, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_name() directly.

    YANG Description: Name of the Event. Example: LEVEL-3-UP-DOWN
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-name", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__event_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_name(self):
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_event_msg(self):
    """
    Getter method for event_msg, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_msg (string)

    YANG Description: Message that is received from the device
    """
    return self.__event_msg
      
  def _set_event_msg(self, v, load=False):
    """
    Setter method for event_msg, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_msg (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_msg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_msg() directly.

    YANG Description: Message that is received from the device
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-msg", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_msg must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-msg", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__event_msg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_msg(self):
    self.__event_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-msg", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_payload(self):
    """
    Getter method for payload, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/payload (string)

    YANG Description: Payload that is framed to update the DataNode
    """
    return self.__payload
      
  def _set_payload(self, v, load=False):
    """
    Setter method for payload, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/payload (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_payload is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_payload() directly.

    YANG Description: Payload that is framed to update the DataNode
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="payload", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """payload must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="payload", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__payload = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_payload(self):
    self.__payload = YANGDynClass(base=unicode, is_leaf=True, yang_name="payload", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_event_spec_path(self):
    """
    Getter method for event_spec_path, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_spec_path (string)

    YANG Description: Event spec rc-path
    """
    return self.__event_spec_path
      
  def _set_event_spec_path(self, v, load=False):
    """
    Setter method for event_spec_path, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/event_spec_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_spec_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_spec_path() directly.

    YANG Description: Event spec rc-path
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-spec-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_spec_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__event_spec_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_spec_path(self):
    self.__event_spec_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)


  def _get_attribute_map_path(self):
    """
    Getter method for attribute_map_path, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/attribute_map_path (string)

    YANG Description: Pattern Map rc Path
    """
    return self.__attribute_map_path
      
  def _set_attribute_map_path(self, v, load=False):
    """
    Setter method for attribute_map_path, mapped from YANG variable /networkfunctionssupport_rpc/interface_event_handler/input/attribute_map_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attribute_map_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attribute_map_path() directly.

    YANG Description: Pattern Map rc Path
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="attribute-map-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attribute_map_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="attribute-map-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)""",
        })

    self.__attribute_map_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attribute_map_path(self):
    self.__attribute_map_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="attribute-map-path", module_name="networkfunctionssupport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/networkfunctionssupport', defining_module='networkfunctionssupport', yang_type='string', is_config=True)

  device_id = __builtin__.property(_get_device_id, _set_device_id)
  device_ip = __builtin__.property(_get_device_ip, _set_device_ip)
  event_src = __builtin__.property(_get_event_src, _set_event_src)
  event_name = __builtin__.property(_get_event_name, _set_event_name)
  event_msg = __builtin__.property(_get_event_msg, _set_event_msg)
  payload = __builtin__.property(_get_payload, _set_payload)
  event_spec_path = __builtin__.property(_get_event_spec_path, _set_event_spec_path)
  attribute_map_path = __builtin__.property(_get_attribute_map_path, _set_attribute_map_path)


  _pyangbind_elements = collections.OrderedDict([('device_id', device_id), ('device_ip', device_ip), ('event_src', event_src), ('event_name', event_name), ('event_msg', event_msg), ('payload', payload), ('event_spec_path', event_spec_path), ('attribute_map_path', attribute_map_path), ])


