
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import allocated_vlan
class vlan_pool(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module vlangroups - based on the path /vlan-pool-groups/vlan-pool-group/vlan-pools/vlan-pool. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of vlan-pools.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__start_vlan','__end_vlan','__description','__resource_pool','__allocated_vlan',)

  _yang_name = 'vlan-pool'
  _module_name = 'vlangroups'
  _namespace = 'http://anutanetworks.com/vlans'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__resource_pool = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="resource-pool", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='leafref', is_config=True)
    self.__allocated_vlan = YANGDynClass(base=YANGListType("vlan",allocated_vlan.allocated_vlan, yang_name="allocated-vlan", module_name="vlangroups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan'), is_container='list', yang_name="allocated-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='list', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)
    self.__end_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="end-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)
    self.__start_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="start-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'vlan-pool-groups', u'vlan-pool-group', u'vlan-pools', u'vlan-pool']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/name (string)

    YANG Description: Unique name for vlan-pool.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Unique name for vlan-pool.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)


  def _get_start_vlan(self):
    """
    Getter method for start_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/start_vlan (uint16)

    YANG Description: Start vlan number. Range : 1-4094
    """
    return self.__start_vlan
      
  def _set_start_vlan(self, v, load=False):
    """
    Setter method for start_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/start_vlan (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_vlan() directly.

    YANG Description: Start vlan number. Range : 1-4094
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="start-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_vlan must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="start-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)""",
        })

    self.__start_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_vlan(self):
    self.__start_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="start-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)


  def _get_end_vlan(self):
    """
    Getter method for end_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/end_vlan (uint16)

    YANG Description: End vlan number. Range : 1-4094
    """
    return self.__end_vlan
      
  def _set_end_vlan(self, v, load=False):
    """
    Setter method for end_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/end_vlan (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_end_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_end_vlan() directly.

    YANG Description: End vlan number. Range : 1-4094
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="end-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """end_vlan must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="end-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)""",
        })

    self.__end_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_end_vlan(self):
    self.__end_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..4094']}), is_leaf=True, yang_name="end-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='uint16', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='string', is_config=True)


  def _get_resource_pool(self):
    """
    Getter method for resource_pool, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/resource_pool (leafref)

    YANG Description: resource-pool
    """
    return self.__resource_pool
      
  def _set_resource_pool(self, v, load=False):
    """
    Setter method for resource_pool, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/resource_pool (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resource_pool is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resource_pool() directly.

    YANG Description: resource-pool
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="resource-pool", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resource_pool must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="resource-pool", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='leafref', is_config=True)""",
        })

    self.__resource_pool = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resource_pool(self):
    self.__resource_pool = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="resource-pool", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='leafref', is_config=True)


  def _get_allocated_vlan(self):
    """
    Getter method for allocated_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/allocated_vlan (list)
    """
    return self.__allocated_vlan
      
  def _set_allocated_vlan(self, v, load=False):
    """
    Setter method for allocated_vlan, mapped from YANG variable /vlan_pool_groups/vlan_pool_group/vlan_pools/vlan_pool/allocated_vlan (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allocated_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allocated_vlan() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("vlan",allocated_vlan.allocated_vlan, yang_name="allocated-vlan", module_name="vlangroups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan'), is_container='list', yang_name="allocated-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allocated_vlan must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan",allocated_vlan.allocated_vlan, yang_name="allocated-vlan", module_name="vlangroups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan'), is_container='list', yang_name="allocated-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='list', is_config=True)""",
        })

    self.__allocated_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allocated_vlan(self):
    self.__allocated_vlan = YANGDynClass(base=YANGListType("vlan",allocated_vlan.allocated_vlan, yang_name="allocated-vlan", module_name="vlangroups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan'), is_container='list', yang_name="allocated-vlan", module_name="vlangroups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/vlans', defining_module='vlangroups', yang_type='list', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  start_vlan = __builtin__.property(_get_start_vlan, _set_start_vlan)
  end_vlan = __builtin__.property(_get_end_vlan, _set_end_vlan)
  description = __builtin__.property(_get_description, _set_description)
  resource_pool = __builtin__.property(_get_resource_pool, _set_resource_pool)
  allocated_vlan = __builtin__.property(_get_allocated_vlan, _set_allocated_vlan)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('start_vlan', start_vlan), ('end_vlan', end_vlan), ('description', description), ('resource_pool', resource_pool), ('allocated_vlan', allocated_vlan), ])


