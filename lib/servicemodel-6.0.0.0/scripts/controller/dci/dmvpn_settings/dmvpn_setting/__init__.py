
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class dmvpn_setting(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module dcinterconnect - based on the path /dci/dmvpn-settings/dmvpn-setting. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__id','__dmvpn_name','__internal_igp','__rd_val','__as_val','__ospf_area','__key_chain','__authentication_type','__configure_front_vrf','__front_vrf','__crypto_info','__vpc_ids',)

  _yang_name = 'dmvpn-setting'
  _module_name = 'dcinterconnect'
  _namespace = 'http://anutanetworks.com/dcinterconnect'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__front_vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__configure_front_vrf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)
    self.__dmvpn_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__key_chain = YANGDynClass(base=unicode, is_leaf=True, yang_name="key-chain", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__crypto_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__authentication_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__ospf_area = YANGDynClass(base=unicode, is_leaf=True, yang_name="ospf-area", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__internal_igp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="internal-igp", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='internal-igp', is_config=True)
    self.__vpc_ids = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="vpc-ids", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__rd_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rd-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    self.__as_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'dci', u'dmvpn-settings', u'dmvpn-setting']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_dmvpn_name(self):
    """
    Getter method for dmvpn_name, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/dmvpn_name (string)

    YANG Description: string
    """
    return self.__dmvpn_name
      
  def _set_dmvpn_name(self, v, load=False):
    """
    Setter method for dmvpn_name, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/dmvpn_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dmvpn_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dmvpn_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dmvpn-name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dmvpn_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__dmvpn_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dmvpn_name(self):
    self.__dmvpn_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_internal_igp(self):
    """
    Getter method for internal_igp, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/internal_igp (internal-igp)

    YANG Description: EIGRP
BGP
OSPF
Default

    """
    return self.__internal_igp
      
  def _set_internal_igp(self, v, load=False):
    """
    Setter method for internal_igp, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/internal_igp (internal-igp)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_internal_igp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_internal_igp() directly.

    YANG Description: EIGRP
BGP
OSPF
Default

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="internal-igp", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='internal-igp', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """internal_igp must be of a type compatible with internal-igp""",
          'defined-type': "dcinterconnect:internal-igp",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="internal-igp", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='internal-igp', is_config=True)""",
        })

    self.__internal_igp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_internal_igp(self):
    self.__internal_igp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'EIGRP': {}, u'OSPF': {}},), is_leaf=True, yang_name="internal-igp", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='internal-igp', is_config=True)


  def _get_rd_val(self):
    """
    Getter method for rd_val, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/rd_val (uint32)

    YANG Description: 0..4294967295
    """
    return self.__rd_val
      
  def _set_rd_val(self, v, load=False):
    """
    Setter method for rd_val, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/rd_val (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rd_val is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rd_val() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rd-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rd_val must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rd-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)""",
        })

    self.__rd_val = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rd_val(self):
    self.__rd_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rd-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)


  def _get_as_val(self):
    """
    Getter method for as_val, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/as_val (uint32)

    YANG Description: 0..4294967295
    """
    return self.__as_val
      
  def _set_as_val(self, v, load=False):
    """
    Setter method for as_val, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/as_val (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_val is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_val() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_val must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)""",
        })

    self.__as_val = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_val(self):
    self.__as_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)


  def _get_ospf_area(self):
    """
    Getter method for ospf_area, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/ospf_area (string)

    YANG Description: string
    """
    return self.__ospf_area
      
  def _set_ospf_area(self, v, load=False):
    """
    Setter method for ospf_area, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/ospf_area (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_area() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ospf-area", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_area must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ospf-area", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__ospf_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_area(self):
    self.__ospf_area = YANGDynClass(base=unicode, is_leaf=True, yang_name="ospf-area", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_key_chain(self):
    """
    Getter method for key_chain, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/key_chain (string)

    YANG Description: string
    """
    return self.__key_chain
      
  def _set_key_chain(self, v, load=False):
    """
    Setter method for key_chain, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/key_chain (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_chain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_chain() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="key-chain", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_chain must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="key-chain", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__key_chain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_chain(self):
    self.__key_chain = YANGDynClass(base=unicode, is_leaf=True, yang_name="key-chain", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_authentication_type(self):
    """
    Getter method for authentication_type, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/authentication_type (string)

    YANG Description: string
    """
    return self.__authentication_type
      
  def _set_authentication_type(self, v, load=False):
    """
    Setter method for authentication_type, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/authentication_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_authentication_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_authentication_type() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="authentication-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """authentication_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__authentication_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_authentication_type(self):
    self.__authentication_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="authentication-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_configure_front_vrf(self):
    """
    Getter method for configure_front_vrf, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/configure_front_vrf (boolean)

    YANG Description: configure-front-vrf: True/False
    """
    return self.__configure_front_vrf
      
  def _set_configure_front_vrf(self, v, load=False):
    """
    Setter method for configure_front_vrf, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/configure_front_vrf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configure_front_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configure_front_vrf() directly.

    YANG Description: configure-front-vrf: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="configure-front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configure_front_vrf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)""",
        })

    self.__configure_front_vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configure_front_vrf(self):
    self.__configure_front_vrf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configure-front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)


  def _get_front_vrf(self):
    """
    Getter method for front_vrf, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/front_vrf (string)

    YANG Description: string
    """
    return self.__front_vrf
      
  def _set_front_vrf(self, v, load=False):
    """
    Setter method for front_vrf, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/front_vrf (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_front_vrf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_front_vrf() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """front_vrf must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__front_vrf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_front_vrf(self):
    self.__front_vrf = YANGDynClass(base=unicode, is_leaf=True, yang_name="front-vrf", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_crypto_info(self):
    """
    Getter method for crypto_info, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/crypto_info (leafref)

    YANG Description: crypto-info
    """
    return self.__crypto_info
      
  def _set_crypto_info(self, v, load=False):
    """
    Setter method for crypto_info, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/crypto_info (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_crypto_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_crypto_info() directly.

    YANG Description: crypto-info
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """crypto_info must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__crypto_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_crypto_info(self):
    self.__crypto_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)


  def _get_vpc_ids(self):
    """
    Getter method for vpc_ids, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/vpc_ids (string)

    YANG Description: string
    """
    return self.__vpc_ids
      
  def _set_vpc_ids(self, v, load=False):
    """
    Setter method for vpc_ids, mapped from YANG variable /dci/dmvpn_settings/dmvpn_setting/vpc_ids (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vpc_ids is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vpc_ids() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="vpc-ids", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vpc_ids must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="vpc-ids", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__vpc_ids = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vpc_ids(self):
    self.__vpc_ids = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="vpc-ids", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  dmvpn_name = __builtin__.property(_get_dmvpn_name, _set_dmvpn_name)
  internal_igp = __builtin__.property(_get_internal_igp, _set_internal_igp)
  rd_val = __builtin__.property(_get_rd_val, _set_rd_val)
  as_val = __builtin__.property(_get_as_val, _set_as_val)
  ospf_area = __builtin__.property(_get_ospf_area, _set_ospf_area)
  key_chain = __builtin__.property(_get_key_chain, _set_key_chain)
  authentication_type = __builtin__.property(_get_authentication_type, _set_authentication_type)
  configure_front_vrf = __builtin__.property(_get_configure_front_vrf, _set_configure_front_vrf)
  front_vrf = __builtin__.property(_get_front_vrf, _set_front_vrf)
  crypto_info = __builtin__.property(_get_crypto_info, _set_crypto_info)
  vpc_ids = __builtin__.property(_get_vpc_ids, _set_vpc_ids)


  _pyangbind_elements = collections.OrderedDict([('id', id), ('dmvpn_name', dmvpn_name), ('internal_igp', internal_igp), ('rd_val', rd_val), ('as_val', as_val), ('ospf_area', ospf_area), ('key_chain', key_chain), ('authentication_type', authentication_type), ('configure_front_vrf', configure_front_vrf), ('front_vrf', front_vrf), ('crypto_info', crypto_info), ('vpc_ids', vpc_ids), ])


