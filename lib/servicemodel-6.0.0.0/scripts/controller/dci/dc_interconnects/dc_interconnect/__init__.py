
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class dc_interconnect(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module dcinterconnect - based on the path /dci/dc-interconnects/dc-interconnect. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__description','__dci_type','__default_dci','__dmvpn_config','__dci_resource_pool_setting','__nhrp_map_group',)

  _yang_name = 'dc-interconnect'
  _module_name = 'dcinterconnect'
  _namespace = 'http://anutanetworks.com/dcinterconnect'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__dmvpn_config = YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-config", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__nhrp_map_group = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="nhrp-map-group", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__dci_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DUAL_DMVPN': {}, u'MPLS_L3VPN': {}, u'DMVPN': {}, u'CUSTOM': {}},), default=unicode("DMVPN"), is_leaf=True, yang_name="dci-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='dci-type', is_config=True)
    self.__dci_resource_pool_setting = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="dci-resource-pool-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__default_dci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-dci", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'dci', u'dc-interconnects', u'dc-interconnect']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_dci_type(self):
    """
    Getter method for dci_type, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dci_type (dci-type)

    YANG Description: DMVPN
DUAL_DMVPN
CUSTOM
MPLS_L3VPN

    """
    return self.__dci_type
      
  def _set_dci_type(self, v, load=False):
    """
    Setter method for dci_type, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dci_type (dci-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dci_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dci_type() directly.

    YANG Description: DMVPN
DUAL_DMVPN
CUSTOM
MPLS_L3VPN

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DUAL_DMVPN': {}, u'MPLS_L3VPN': {}, u'DMVPN': {}, u'CUSTOM': {}},), default=unicode("DMVPN"), is_leaf=True, yang_name="dci-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='dci-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dci_type must be of a type compatible with dci-type""",
          'defined-type': "dcinterconnect:dci-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DUAL_DMVPN': {}, u'MPLS_L3VPN': {}, u'DMVPN': {}, u'CUSTOM': {}},), default=unicode("DMVPN"), is_leaf=True, yang_name="dci-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='dci-type', is_config=True)""",
        })

    self.__dci_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dci_type(self):
    self.__dci_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'DUAL_DMVPN': {}, u'MPLS_L3VPN': {}, u'DMVPN': {}, u'CUSTOM': {}},), default=unicode("DMVPN"), is_leaf=True, yang_name="dci-type", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='dci-type', is_config=True)


  def _get_default_dci(self):
    """
    Getter method for default_dci, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/default_dci (boolean)

    YANG Description: default-dci: True/False
    """
    return self.__default_dci
      
  def _set_default_dci(self, v, load=False):
    """
    Setter method for default_dci, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/default_dci (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_dci is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_dci() directly.

    YANG Description: default-dci: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="default-dci", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_dci must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-dci", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)""",
        })

    self.__default_dci = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_dci(self):
    self.__default_dci = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="default-dci", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='boolean', is_config=True)


  def _get_dmvpn_config(self):
    """
    Getter method for dmvpn_config, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dmvpn_config (leafref)

    YANG Description: dmvpn-config
    """
    return self.__dmvpn_config
      
  def _set_dmvpn_config(self, v, load=False):
    """
    Setter method for dmvpn_config, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dmvpn_config (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dmvpn_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dmvpn_config() directly.

    YANG Description: dmvpn-config
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dmvpn-config", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dmvpn_config must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-config", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__dmvpn_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dmvpn_config(self):
    self.__dmvpn_config = YANGDynClass(base=unicode, is_leaf=True, yang_name="dmvpn-config", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)


  def _get_dci_resource_pool_setting(self):
    """
    Getter method for dci_resource_pool_setting, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dci_resource_pool_setting (leafref)

    YANG Description: dci-resource-pool-setting
    """
    return self.__dci_resource_pool_setting
      
  def _set_dci_resource_pool_setting(self, v, load=False):
    """
    Setter method for dci_resource_pool_setting, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/dci_resource_pool_setting (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dci_resource_pool_setting is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dci_resource_pool_setting() directly.

    YANG Description: dci-resource-pool-setting
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="dci-resource-pool-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dci_resource_pool_setting must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="dci-resource-pool-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__dci_resource_pool_setting = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dci_resource_pool_setting(self):
    self.__dci_resource_pool_setting = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="dci-resource-pool-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)


  def _get_nhrp_map_group(self):
    """
    Getter method for nhrp_map_group, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/nhrp_map_group (leafref)

    YANG Description: nhrp-map-group
    """
    return self.__nhrp_map_group
      
  def _set_nhrp_map_group(self, v, load=False):
    """
    Setter method for nhrp_map_group, mapped from YANG variable /dci/dc_interconnects/dc_interconnect/nhrp_map_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nhrp_map_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nhrp_map_group() directly.

    YANG Description: nhrp-map-group
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="nhrp-map-group", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nhrp_map_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="nhrp-map-group", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__nhrp_map_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nhrp_map_group(self):
    self.__nhrp_map_group = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="nhrp-map-group", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  description = __builtin__.property(_get_description, _set_description)
  dci_type = __builtin__.property(_get_dci_type, _set_dci_type)
  default_dci = __builtin__.property(_get_default_dci, _set_default_dci)
  dmvpn_config = __builtin__.property(_get_dmvpn_config, _set_dmvpn_config)
  dci_resource_pool_setting = __builtin__.property(_get_dci_resource_pool_setting, _set_dci_resource_pool_setting)
  nhrp_map_group = __builtin__.property(_get_nhrp_map_group, _set_nhrp_map_group)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('description', description), ('dci_type', dci_type), ('default_dci', default_dci), ('dmvpn_config', dmvpn_config), ('dci_resource_pool_setting', dci_resource_pool_setting), ('nhrp_map_group', nhrp_map_group), ])


