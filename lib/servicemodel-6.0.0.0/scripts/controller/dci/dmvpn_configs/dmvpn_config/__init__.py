
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class dmvpn_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module dcinterconnect - based on the path /dci/dmvpn-configs/dmvpn-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__id','__enterprise_prefix','__spoke_prefix','__dc_prefix','__as_val','__primary_dmvpn_setting','__secondary_dmvpn_setting',)

  _yang_name = 'dmvpn-config'
  _module_name = 'dcinterconnect'
  _namespace = 'http://anutanetworks.com/dcinterconnect'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__secondary_dmvpn_setting = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__dc_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="dc-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__spoke_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="spoke-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__enterprise_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    self.__primary_dmvpn_setting = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    self.__as_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'dci', u'dmvpn-configs', u'dmvpn-config']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/id (string)

    YANG Description: string
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_enterprise_prefix(self):
    """
    Getter method for enterprise_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/enterprise_prefix (string)

    YANG Description: string
    """
    return self.__enterprise_prefix
      
  def _set_enterprise_prefix(self, v, load=False):
    """
    Setter method for enterprise_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/enterprise_prefix (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enterprise_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enterprise_prefix() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="enterprise-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enterprise_prefix must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__enterprise_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enterprise_prefix(self):
    self.__enterprise_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="enterprise-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_spoke_prefix(self):
    """
    Getter method for spoke_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/spoke_prefix (string)

    YANG Description: string
    """
    return self.__spoke_prefix
      
  def _set_spoke_prefix(self, v, load=False):
    """
    Setter method for spoke_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/spoke_prefix (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spoke_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spoke_prefix() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="spoke-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spoke_prefix must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="spoke-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__spoke_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spoke_prefix(self):
    self.__spoke_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="spoke-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_dc_prefix(self):
    """
    Getter method for dc_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/dc_prefix (string)

    YANG Description: string
    """
    return self.__dc_prefix
      
  def _set_dc_prefix(self, v, load=False):
    """
    Setter method for dc_prefix, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/dc_prefix (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dc_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dc_prefix() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dc-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dc_prefix must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dc-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)""",
        })

    self.__dc_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dc_prefix(self):
    self.__dc_prefix = YANGDynClass(base=unicode, is_leaf=True, yang_name="dc-prefix", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='string', is_config=True)


  def _get_as_val(self):
    """
    Getter method for as_val, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/as_val (uint32)

    YANG Description: 0..4294967295
    """
    return self.__as_val
      
  def _set_as_val(self, v, load=False):
    """
    Setter method for as_val, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/as_val (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_as_val is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_as_val() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """as_val must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)""",
        })

    self.__as_val = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_as_val(self):
    self.__as_val = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="as-val", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='uint32', is_config=True)


  def _get_primary_dmvpn_setting(self):
    """
    Getter method for primary_dmvpn_setting, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/primary_dmvpn_setting (leafref)

    YANG Description: primary-dmvpn-setting
    """
    return self.__primary_dmvpn_setting
      
  def _set_primary_dmvpn_setting(self, v, load=False):
    """
    Setter method for primary_dmvpn_setting, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/primary_dmvpn_setting (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_dmvpn_setting is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_dmvpn_setting() directly.

    YANG Description: primary-dmvpn-setting
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="primary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_dmvpn_setting must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__primary_dmvpn_setting = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_dmvpn_setting(self):
    self.__primary_dmvpn_setting = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)


  def _get_secondary_dmvpn_setting(self):
    """
    Getter method for secondary_dmvpn_setting, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/secondary_dmvpn_setting (leafref)

    YANG Description: secondary-dmvpn-setting
    """
    return self.__secondary_dmvpn_setting
      
  def _set_secondary_dmvpn_setting(self, v, load=False):
    """
    Setter method for secondary_dmvpn_setting, mapped from YANG variable /dci/dmvpn_configs/dmvpn_config/secondary_dmvpn_setting (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_dmvpn_setting is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_dmvpn_setting() directly.

    YANG Description: secondary-dmvpn-setting
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secondary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_dmvpn_setting must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)""",
        })

    self.__secondary_dmvpn_setting = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_dmvpn_setting(self):
    self.__secondary_dmvpn_setting = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-dmvpn-setting", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='leafref', is_config=True)

  id = __builtin__.property(_get_id, _set_id)
  enterprise_prefix = __builtin__.property(_get_enterprise_prefix, _set_enterprise_prefix)
  spoke_prefix = __builtin__.property(_get_spoke_prefix, _set_spoke_prefix)
  dc_prefix = __builtin__.property(_get_dc_prefix, _set_dc_prefix)
  as_val = __builtin__.property(_get_as_val, _set_as_val)
  primary_dmvpn_setting = __builtin__.property(_get_primary_dmvpn_setting, _set_primary_dmvpn_setting)
  secondary_dmvpn_setting = __builtin__.property(_get_secondary_dmvpn_setting, _set_secondary_dmvpn_setting)


  _pyangbind_elements = collections.OrderedDict([('id', id), ('enterprise_prefix', enterprise_prefix), ('spoke_prefix', spoke_prefix), ('dc_prefix', dc_prefix), ('as_val', as_val), ('primary_dmvpn_setting', primary_dmvpn_setting), ('secondary_dmvpn_setting', secondary_dmvpn_setting), ])


