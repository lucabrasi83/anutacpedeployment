
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import dc_interconnects
import dmvpn_configs
import dmvpn_settings
import dci_resource_pool_settings
import crypto_info
import nhrp_map_groups
class dci(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module dcinterconnect - based on the path /dci. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__dc_interconnects','__dmvpn_configs','__dmvpn_settings','__dci_resource_pool_settings','__crypto_info','__nhrp_map_groups',)

  _yang_name = 'dci'
  _module_name = 'dcinterconnect'
  _namespace = 'http://anutanetworks.com/dcinterconnect'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__dmvpn_settings = YANGDynClass(base=dmvpn_settings.dmvpn_settings, is_container='container', yang_name="dmvpn-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    self.__dci_resource_pool_settings = YANGDynClass(base=dci_resource_pool_settings.dci_resource_pool_settings, is_container='container', yang_name="dci-resource-pool-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    self.__crypto_info = YANGDynClass(base=crypto_info.crypto_info, is_container='container', yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    self.__dc_interconnects = YANGDynClass(base=dc_interconnects.dc_interconnects, is_container='container', yang_name="dc-interconnects", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    self.__dmvpn_configs = YANGDynClass(base=dmvpn_configs.dmvpn_configs, is_container='container', yang_name="dmvpn-configs", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    self.__nhrp_map_groups = YANGDynClass(base=nhrp_map_groups.nhrp_map_groups, is_container='container', yang_name="nhrp-map-groups", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'dci']

  def _get_dc_interconnects(self):
    """
    Getter method for dc_interconnects, mapped from YANG variable /dci/dc_interconnects (container)
    """
    return self.__dc_interconnects
      
  def _set_dc_interconnects(self, v, load=False):
    """
    Setter method for dc_interconnects, mapped from YANG variable /dci/dc_interconnects (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dc_interconnects is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dc_interconnects() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=dc_interconnects.dc_interconnects, is_container='container', yang_name="dc-interconnects", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dc_interconnects must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dc_interconnects.dc_interconnects, is_container='container', yang_name="dc-interconnects", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__dc_interconnects = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dc_interconnects(self):
    self.__dc_interconnects = YANGDynClass(base=dc_interconnects.dc_interconnects, is_container='container', yang_name="dc-interconnects", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)


  def _get_dmvpn_configs(self):
    """
    Getter method for dmvpn_configs, mapped from YANG variable /dci/dmvpn_configs (container)
    """
    return self.__dmvpn_configs
      
  def _set_dmvpn_configs(self, v, load=False):
    """
    Setter method for dmvpn_configs, mapped from YANG variable /dci/dmvpn_configs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dmvpn_configs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dmvpn_configs() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=dmvpn_configs.dmvpn_configs, is_container='container', yang_name="dmvpn-configs", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dmvpn_configs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dmvpn_configs.dmvpn_configs, is_container='container', yang_name="dmvpn-configs", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__dmvpn_configs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dmvpn_configs(self):
    self.__dmvpn_configs = YANGDynClass(base=dmvpn_configs.dmvpn_configs, is_container='container', yang_name="dmvpn-configs", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)


  def _get_dmvpn_settings(self):
    """
    Getter method for dmvpn_settings, mapped from YANG variable /dci/dmvpn_settings (container)
    """
    return self.__dmvpn_settings
      
  def _set_dmvpn_settings(self, v, load=False):
    """
    Setter method for dmvpn_settings, mapped from YANG variable /dci/dmvpn_settings (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dmvpn_settings is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dmvpn_settings() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=dmvpn_settings.dmvpn_settings, is_container='container', yang_name="dmvpn-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dmvpn_settings must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dmvpn_settings.dmvpn_settings, is_container='container', yang_name="dmvpn-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__dmvpn_settings = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dmvpn_settings(self):
    self.__dmvpn_settings = YANGDynClass(base=dmvpn_settings.dmvpn_settings, is_container='container', yang_name="dmvpn-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)


  def _get_dci_resource_pool_settings(self):
    """
    Getter method for dci_resource_pool_settings, mapped from YANG variable /dci/dci_resource_pool_settings (container)
    """
    return self.__dci_resource_pool_settings
      
  def _set_dci_resource_pool_settings(self, v, load=False):
    """
    Setter method for dci_resource_pool_settings, mapped from YANG variable /dci/dci_resource_pool_settings (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dci_resource_pool_settings is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dci_resource_pool_settings() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=dci_resource_pool_settings.dci_resource_pool_settings, is_container='container', yang_name="dci-resource-pool-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dci_resource_pool_settings must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dci_resource_pool_settings.dci_resource_pool_settings, is_container='container', yang_name="dci-resource-pool-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__dci_resource_pool_settings = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dci_resource_pool_settings(self):
    self.__dci_resource_pool_settings = YANGDynClass(base=dci_resource_pool_settings.dci_resource_pool_settings, is_container='container', yang_name="dci-resource-pool-settings", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)


  def _get_crypto_info(self):
    """
    Getter method for crypto_info, mapped from YANG variable /dci/crypto_info (container)
    """
    return self.__crypto_info
      
  def _set_crypto_info(self, v, load=False):
    """
    Setter method for crypto_info, mapped from YANG variable /dci/crypto_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_crypto_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_crypto_info() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=crypto_info.crypto_info, is_container='container', yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """crypto_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=crypto_info.crypto_info, is_container='container', yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__crypto_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_crypto_info(self):
    self.__crypto_info = YANGDynClass(base=crypto_info.crypto_info, is_container='container', yang_name="crypto-info", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)


  def _get_nhrp_map_groups(self):
    """
    Getter method for nhrp_map_groups, mapped from YANG variable /dci/nhrp_map_groups (container)
    """
    return self.__nhrp_map_groups
      
  def _set_nhrp_map_groups(self, v, load=False):
    """
    Setter method for nhrp_map_groups, mapped from YANG variable /dci/nhrp_map_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nhrp_map_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nhrp_map_groups() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=nhrp_map_groups.nhrp_map_groups, is_container='container', yang_name="nhrp-map-groups", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nhrp_map_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=nhrp_map_groups.nhrp_map_groups, is_container='container', yang_name="nhrp-map-groups", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)""",
        })

    self.__nhrp_map_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nhrp_map_groups(self):
    self.__nhrp_map_groups = YANGDynClass(base=nhrp_map_groups.nhrp_map_groups, is_container='container', yang_name="nhrp-map-groups", module_name="dcinterconnect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/dcinterconnect', defining_module='dcinterconnect', yang_type='container', is_config=True)

  dc_interconnects = __builtin__.property(_get_dc_interconnects, _set_dc_interconnects)
  dmvpn_configs = __builtin__.property(_get_dmvpn_configs, _set_dmvpn_configs)
  dmvpn_settings = __builtin__.property(_get_dmvpn_settings, _set_dmvpn_settings)
  dci_resource_pool_settings = __builtin__.property(_get_dci_resource_pool_settings, _set_dci_resource_pool_settings)
  crypto_info = __builtin__.property(_get_crypto_info, _set_crypto_info)
  nhrp_map_groups = __builtin__.property(_get_nhrp_map_groups, _set_nhrp_map_groups)


  _pyangbind_elements = collections.OrderedDict([('dc_interconnects', dc_interconnects), ('dmvpn_configs', dmvpn_configs), ('dmvpn_settings', dmvpn_settings), ('dci_resource_pool_settings', dci_resource_pool_settings), ('crypto_info', crypto_info), ('nhrp_map_groups', nhrp_map_groups), ])


