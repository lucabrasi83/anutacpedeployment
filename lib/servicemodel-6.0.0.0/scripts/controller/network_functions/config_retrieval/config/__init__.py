
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import running_config
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /network-functions/config-retrieval/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__platform','__disabled','__running_config','__excluded_targets',)

  _yang_name = 'config'
  _module_name = 'networkfunctionssupport'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__disabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="disabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__platform = YANGDynClass(base=unicode, is_leaf=True, yang_name="platform", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__running_config = YANGDynClass(base=running_config.running_config, is_container='container', yang_name="running-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__excluded_targets = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="excluded-targets", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-functions', u'config-retrieval', u'config']

  def _get_platform(self):
    """
    Getter method for platform, mapped from YANG variable /network_functions/config_retrieval/config/platform (string)

    YANG Description: device platform
    """
    return self.__platform
      
  def _set_platform(self, v, load=False):
    """
    Setter method for platform, mapped from YANG variable /network_functions/config_retrieval/config/platform (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_platform is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_platform() directly.

    YANG Description: device platform
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="platform", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """platform must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="platform", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__platform = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_platform(self):
    self.__platform = YANGDynClass(base=unicode, is_leaf=True, yang_name="platform", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_disabled(self):
    """
    Getter method for disabled, mapped from YANG variable /network_functions/config_retrieval/config/disabled (boolean)

    YANG Description: disabled: True/False
    """
    return self.__disabled
      
  def _set_disabled(self, v, load=False):
    """
    Setter method for disabled, mapped from YANG variable /network_functions/config_retrieval/config/disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disabled() directly.

    YANG Description: disabled: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="disabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="disabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disabled(self):
    self.__disabled = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="disabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_running_config(self):
    """
    Getter method for running_config, mapped from YANG variable /network_functions/config_retrieval/config/running_config (container)
    """
    return self.__running_config
      
  def _set_running_config(self, v, load=False):
    """
    Setter method for running_config, mapped from YANG variable /network_functions/config_retrieval/config/running_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_running_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_running_config() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=running_config.running_config, is_container='container', yang_name="running-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """running_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=running_config.running_config, is_container='container', yang_name="running-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__running_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_running_config(self):
    self.__running_config = YANGDynClass(base=running_config.running_config, is_container='container', yang_name="running-config", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_excluded_targets(self):
    """
    Getter method for excluded_targets, mapped from YANG variable /network_functions/config_retrieval/config/excluded_targets (string)

    YANG Description: string
    """
    return self.__excluded_targets
      
  def _set_excluded_targets(self, v, load=False):
    """
    Setter method for excluded_targets, mapped from YANG variable /network_functions/config_retrieval/config/excluded_targets (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_excluded_targets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_excluded_targets() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="excluded-targets", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """excluded_targets must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="excluded-targets", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__excluded_targets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_excluded_targets(self):
    self.__excluded_targets = YANGDynClass(base=TypedListType(allowed_type=unicode), is_leaf=False, yang_name="excluded-targets", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  platform = __builtin__.property(_get_platform, _set_platform)
  disabled = __builtin__.property(_get_disabled, _set_disabled)
  running_config = __builtin__.property(_get_running_config, _set_running_config)
  excluded_targets = __builtin__.property(_get_excluded_targets, _set_excluded_targets)


  _pyangbind_elements = collections.OrderedDict([('platform', platform), ('disabled', disabled), ('running_config', running_config), ('excluded_targets', excluded_targets), ])


