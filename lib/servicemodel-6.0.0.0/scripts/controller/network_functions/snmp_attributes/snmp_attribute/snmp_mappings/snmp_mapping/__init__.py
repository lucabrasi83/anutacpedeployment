
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class snmp_mapping(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /network-functions/snmp-attributes/snmp-attribute/snmp-mappings/snmp-mapping. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__oid','__device_family','__os_type',)

  _yang_name = 'snmp-mapping'
  _module_name = 'networkfunctionssupport'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__device_family = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__os_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="os-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-functions', u'snmp-attributes', u'snmp-attribute', u'snmp-mappings', u'snmp-mapping']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_oid(self):
    """
    Getter method for oid, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/oid (string)

    YANG Description: string
    """
    return self.__oid
      
  def _set_oid(self, v, load=False):
    """
    Setter method for oid, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/oid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oid() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__oid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oid(self):
    self.__oid = YANGDynClass(base=unicode, is_leaf=True, yang_name="oid", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_device_family(self):
    """
    Getter method for device_family, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/device_family (leafref)

    YANG Description: device-family
    """
    return self.__device_family
      
  def _set_device_family(self, v, load=False):
    """
    Setter method for device_family, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/device_family (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_device_family is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_device_family() directly.

    YANG Description: device-family
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="device-family", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """device_family must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__device_family = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_device_family(self):
    self.__device_family = YANGDynClass(base=unicode, is_leaf=True, yang_name="device-family", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_os_type(self):
    """
    Getter method for os_type, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/os_type (leafref)

    YANG Description: os-type
    """
    return self.__os_type
      
  def _set_os_type(self, v, load=False):
    """
    Setter method for os_type, mapped from YANG variable /network_functions/snmp_attributes/snmp_attribute/snmp_mappings/snmp_mapping/os_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_os_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_os_type() directly.

    YANG Description: os-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="os-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """os_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="os-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__os_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_os_type(self):
    self.__os_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="os-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  oid = __builtin__.property(_get_oid, _set_oid)
  device_family = __builtin__.property(_get_device_family, _set_device_family)
  os_type = __builtin__.property(_get_os_type, _set_os_type)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('oid', oid), ('device_family', device_family), ('os_type', os_type), ])


