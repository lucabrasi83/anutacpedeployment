
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import attributes
class event_attribute_map(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /network-functions/syslog-event-specs/syslog-event-spec/event-pattern-maps/event-attribute-map. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__naas_event_spec','__pattern','__update_entity','__entity_path','__attributes','__trigger_extended_inventory','__trigger_basic_inventory','__trigger_config_pull','__trigger_resource_pool_inventory',)

  _yang_name = 'event-attribute-map'
  _module_name = 'networkfunctionssupport'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__entity_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__trigger_extended_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-extended-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__trigger_basic_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-basic-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__trigger_resource_pool_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-resource-pool-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__update_entity = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="update-entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__trigger_config_pull = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-config-pull", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__naas_event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__attributes = YANGDynClass(base=attributes.attributes, is_container='container', yang_name="attributes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-functions', u'syslog-event-specs', u'syslog-event-spec', u'event-pattern-maps', u'event-attribute-map']

  def _get_naas_event_spec(self):
    """
    Getter method for naas_event_spec, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/naas_event_spec (string)

    YANG Description: Mapping the syslog message with the naas-event-name
    """
    return self.__naas_event_spec
      
  def _set_naas_event_spec(self, v, load=False):
    """
    Setter method for naas_event_spec, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/naas_event_spec (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_naas_event_spec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_naas_event_spec() directly.

    YANG Description: Mapping the syslog message with the naas-event-name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """naas_event_spec must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__naas_event_spec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_naas_event_spec(self):
    self.__naas_event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="naas-event-spec", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_pattern(self):
    """
    Getter method for pattern, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/pattern (string)

    YANG Description: Pattern to identify the attributes. Example: Interface-name
    """
    return self.__pattern
      
  def _set_pattern(self, v, load=False):
    """
    Setter method for pattern, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/pattern (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pattern is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pattern() directly.

    YANG Description: Pattern to identify the attributes. Example: Interface-name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pattern must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__pattern = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pattern(self):
    self.__pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_update_entity(self):
    """
    Getter method for update_entity, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/update_entity (boolean)

    YANG Description: Flag to say whether entity update needed or not
    """
    return self.__update_entity
      
  def _set_update_entity(self, v, load=False):
    """
    Setter method for update_entity, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/update_entity (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_entity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_entity() directly.

    YANG Description: Flag to say whether entity update needed or not
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="update-entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_entity must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="update-entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__update_entity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_entity(self):
    self.__update_entity = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="update-entity", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_entity_path(self):
    """
    Getter method for entity_path, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/entity_path (string)

    YANG Description: Entity in which payload gets updated
    """
    return self.__entity_path
      
  def _set_entity_path(self, v, load=False):
    """
    Setter method for entity_path, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/entity_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_entity_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_entity_path() directly.

    YANG Description: Entity in which payload gets updated
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="entity-path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """entity_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__entity_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_entity_path(self):
    self.__entity_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="entity-path", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_attributes(self):
    """
    Getter method for attributes, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/attributes (container)
    """
    return self.__attributes
      
  def _set_attributes(self, v, load=False):
    """
    Setter method for attributes, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attributes() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=attributes.attributes, is_container='container', yang_name="attributes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=attributes.attributes, is_container='container', yang_name="attributes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attributes(self):
    self.__attributes = YANGDynClass(base=attributes.attributes, is_container='container', yang_name="attributes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_trigger_extended_inventory(self):
    """
    Getter method for trigger_extended_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_extended_inventory (boolean)

    YANG Description: Trigger extended inventory once the notification is received
    """
    return self.__trigger_extended_inventory
      
  def _set_trigger_extended_inventory(self, v, load=False):
    """
    Setter method for trigger_extended_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_extended_inventory (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trigger_extended_inventory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trigger_extended_inventory() directly.

    YANG Description: Trigger extended inventory once the notification is received
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="trigger-extended-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trigger_extended_inventory must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-extended-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__trigger_extended_inventory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trigger_extended_inventory(self):
    self.__trigger_extended_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-extended-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_trigger_basic_inventory(self):
    """
    Getter method for trigger_basic_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_basic_inventory (boolean)

    YANG Description: Trigger basic inventory once the notification is received
    """
    return self.__trigger_basic_inventory
      
  def _set_trigger_basic_inventory(self, v, load=False):
    """
    Setter method for trigger_basic_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_basic_inventory (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trigger_basic_inventory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trigger_basic_inventory() directly.

    YANG Description: Trigger basic inventory once the notification is received
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="trigger-basic-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trigger_basic_inventory must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-basic-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__trigger_basic_inventory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trigger_basic_inventory(self):
    self.__trigger_basic_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-basic-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_trigger_config_pull(self):
    """
    Getter method for trigger_config_pull, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_config_pull (boolean)

    YANG Description: Trigger config-pull once the notification is received
    """
    return self.__trigger_config_pull
      
  def _set_trigger_config_pull(self, v, load=False):
    """
    Setter method for trigger_config_pull, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_config_pull (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trigger_config_pull is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trigger_config_pull() directly.

    YANG Description: Trigger config-pull once the notification is received
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="trigger-config-pull", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trigger_config_pull must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-config-pull", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__trigger_config_pull = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trigger_config_pull(self):
    self.__trigger_config_pull = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-config-pull", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_trigger_resource_pool_inventory(self):
    """
    Getter method for trigger_resource_pool_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_resource_pool_inventory (boolean)

    YANG Description: Trigger resource-pool inventory once the notification event is received
    """
    return self.__trigger_resource_pool_inventory
      
  def _set_trigger_resource_pool_inventory(self, v, load=False):
    """
    Setter method for trigger_resource_pool_inventory, mapped from YANG variable /network_functions/syslog_event_specs/syslog_event_spec/event_pattern_maps/event_attribute_map/trigger_resource_pool_inventory (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_trigger_resource_pool_inventory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_trigger_resource_pool_inventory() directly.

    YANG Description: Trigger resource-pool inventory once the notification event is received
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="trigger-resource-pool-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """trigger_resource_pool_inventory must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-resource-pool-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__trigger_resource_pool_inventory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_trigger_resource_pool_inventory(self):
    self.__trigger_resource_pool_inventory = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="trigger-resource-pool-inventory", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  naas_event_spec = __builtin__.property(_get_naas_event_spec, _set_naas_event_spec)
  pattern = __builtin__.property(_get_pattern, _set_pattern)
  update_entity = __builtin__.property(_get_update_entity, _set_update_entity)
  entity_path = __builtin__.property(_get_entity_path, _set_entity_path)
  attributes = __builtin__.property(_get_attributes, _set_attributes)
  trigger_extended_inventory = __builtin__.property(_get_trigger_extended_inventory, _set_trigger_extended_inventory)
  trigger_basic_inventory = __builtin__.property(_get_trigger_basic_inventory, _set_trigger_basic_inventory)
  trigger_config_pull = __builtin__.property(_get_trigger_config_pull, _set_trigger_config_pull)
  trigger_resource_pool_inventory = __builtin__.property(_get_trigger_resource_pool_inventory, _set_trigger_resource_pool_inventory)


  _pyangbind_elements = collections.OrderedDict([('naas_event_spec', naas_event_spec), ('pattern', pattern), ('update_entity', update_entity), ('entity_path', entity_path), ('attributes', attributes), ('trigger_extended_inventory', trigger_extended_inventory), ('trigger_basic_inventory', trigger_basic_inventory), ('trigger_config_pull', trigger_config_pull), ('trigger_resource_pool_inventory', trigger_resource_pool_inventory), ])


