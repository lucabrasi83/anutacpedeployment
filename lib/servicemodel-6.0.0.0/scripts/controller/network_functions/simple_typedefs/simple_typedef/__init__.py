
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class simple_typedef(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /network-functions/simple-typedefs/simple-typedef. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__datatype','__label','__hint','__choices','__range','__regexp','__maxlength','__multi_selection','__editable','__dynamic_choice',)

  _yang_name = 'simple-typedef'
  _module_name = 'networkfunctionssupport'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__hint = YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__datatype = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MACADDRESS': {}, u'IPORCIDRORHOSTNAME': {}, u'STRING': {}, u'IPORCIDRORIPRANGEORHOSTNAME': {}, u'IPORNODENAME': {}, u'FLOAT': {}, u'LONG': {}, u'NETMASK': {}, u'BOOLEAN': {}, u'PORTORPORTRANGE': {}, u'INTEGER': {}, u'CIDR': {}, u'IPADDRESS': {}},), is_leaf=True, yang_name="datatype", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='property-datatype', is_config=True)
    self.__multi_selection = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multi-selection", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__editable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="editable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__choices = YANGDynClass(base=unicode, is_leaf=True, yang_name="choices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__range = YANGDynClass(base=unicode, is_leaf=True, yang_name="range", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__maxlength = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxlength", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__regexp = YANGDynClass(base=unicode, is_leaf=True, yang_name="regexp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__dynamic_choice = YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-choice", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'network-functions', u'simple-typedefs', u'simple-typedef']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_datatype(self):
    """
    Getter method for datatype, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/datatype (property-datatype)

    YANG Description: STRING
INTEGER
BOOLEAN
IPADDRESS
NETMASK
CIDR
IPORCIDRORHOSTNAME
IPORCIDRORIPRANGEORHOSTNAME
IPORNODENAME
PORTORPORTRANGE
MACADDRESS
FLOAT
LONG

    """
    return self.__datatype
      
  def _set_datatype(self, v, load=False):
    """
    Setter method for datatype, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/datatype (property-datatype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_datatype is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_datatype() directly.

    YANG Description: STRING
INTEGER
BOOLEAN
IPADDRESS
NETMASK
CIDR
IPORCIDRORHOSTNAME
IPORCIDRORIPRANGEORHOSTNAME
IPORNODENAME
PORTORPORTRANGE
MACADDRESS
FLOAT
LONG

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MACADDRESS': {}, u'IPORCIDRORHOSTNAME': {}, u'STRING': {}, u'IPORCIDRORIPRANGEORHOSTNAME': {}, u'IPORNODENAME': {}, u'FLOAT': {}, u'LONG': {}, u'NETMASK': {}, u'BOOLEAN': {}, u'PORTORPORTRANGE': {}, u'INTEGER': {}, u'CIDR': {}, u'IPADDRESS': {}},), is_leaf=True, yang_name="datatype", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='property-datatype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """datatype must be of a type compatible with property-datatype""",
          'defined-type': "controller:property-datatype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MACADDRESS': {}, u'IPORCIDRORHOSTNAME': {}, u'STRING': {}, u'IPORCIDRORIPRANGEORHOSTNAME': {}, u'IPORNODENAME': {}, u'FLOAT': {}, u'LONG': {}, u'NETMASK': {}, u'BOOLEAN': {}, u'PORTORPORTRANGE': {}, u'INTEGER': {}, u'CIDR': {}, u'IPADDRESS': {}},), is_leaf=True, yang_name="datatype", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='property-datatype', is_config=True)""",
        })

    self.__datatype = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_datatype(self):
    self.__datatype = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MACADDRESS': {}, u'IPORCIDRORHOSTNAME': {}, u'STRING': {}, u'IPORCIDRORIPRANGEORHOSTNAME': {}, u'IPORNODENAME': {}, u'FLOAT': {}, u'LONG': {}, u'NETMASK': {}, u'BOOLEAN': {}, u'PORTORPORTRANGE': {}, u'INTEGER': {}, u'CIDR': {}, u'IPADDRESS': {}},), is_leaf=True, yang_name="datatype", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='property-datatype', is_config=True)


  def _get_label(self):
    """
    Getter method for label, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/label (string)

    YANG Description: string
    """
    return self.__label
      
  def _set_label(self, v, load=False):
    """
    Setter method for label, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/label (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_label() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """label must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_label(self):
    self.__label = YANGDynClass(base=unicode, is_leaf=True, yang_name="label", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_hint(self):
    """
    Getter method for hint, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/hint (string)

    YANG Description: string
    """
    return self.__hint
      
  def _set_hint(self, v, load=False):
    """
    Setter method for hint, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/hint (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hint() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hint must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__hint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hint(self):
    self.__hint = YANGDynClass(base=unicode, is_leaf=True, yang_name="hint", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_choices(self):
    """
    Getter method for choices, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/choices (string)

    YANG Description: string
    """
    return self.__choices
      
  def _set_choices(self, v, load=False):
    """
    Setter method for choices, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/choices (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_choices is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_choices() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="choices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """choices must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="choices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__choices = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_choices(self):
    self.__choices = YANGDynClass(base=unicode, is_leaf=True, yang_name="choices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_range(self):
    """
    Getter method for range, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/range (string)

    YANG Description: string
    """
    return self.__range
      
  def _set_range(self, v, load=False):
    """
    Setter method for range, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/range (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_range() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="range", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """range must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="range", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_range(self):
    self.__range = YANGDynClass(base=unicode, is_leaf=True, yang_name="range", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_regexp(self):
    """
    Getter method for regexp, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/regexp (string)

    YANG Description: string
    """
    return self.__regexp
      
  def _set_regexp(self, v, load=False):
    """
    Setter method for regexp, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/regexp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_regexp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_regexp() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="regexp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """regexp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="regexp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__regexp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_regexp(self):
    self.__regexp = YANGDynClass(base=unicode, is_leaf=True, yang_name="regexp", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_maxlength(self):
    """
    Getter method for maxlength, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/maxlength (uint32)

    YANG Description: 0..4294967295
    """
    return self.__maxlength
      
  def _set_maxlength(self, v, load=False):
    """
    Setter method for maxlength, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/maxlength (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxlength is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxlength() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxlength", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxlength must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxlength", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__maxlength = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxlength(self):
    self.__maxlength = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxlength", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_multi_selection(self):
    """
    Getter method for multi_selection, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/multi_selection (boolean)

    YANG Description: multi-selection: True/False
    """
    return self.__multi_selection
      
  def _set_multi_selection(self, v, load=False):
    """
    Setter method for multi_selection, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/multi_selection (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multi_selection is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multi_selection() directly.

    YANG Description: multi-selection: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="multi-selection", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multi_selection must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multi-selection", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__multi_selection = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multi_selection(self):
    self.__multi_selection = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="multi-selection", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_editable(self):
    """
    Getter method for editable, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/editable (boolean)

    YANG Description: editable: True/False
    """
    return self.__editable
      
  def _set_editable(self, v, load=False):
    """
    Setter method for editable, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/editable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_editable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_editable() directly.

    YANG Description: editable: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="editable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """editable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="editable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__editable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_editable(self):
    self.__editable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="editable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_dynamic_choice(self):
    """
    Getter method for dynamic_choice, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/dynamic_choice (leafref)

    YANG Description: dynamic-choice
    """
    return self.__dynamic_choice
      
  def _set_dynamic_choice(self, v, load=False):
    """
    Setter method for dynamic_choice, mapped from YANG variable /network_functions/simple_typedefs/simple_typedef/dynamic_choice (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_choice is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_choice() directly.

    YANG Description: dynamic-choice
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="dynamic-choice", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_choice must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-choice", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__dynamic_choice = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_choice(self):
    self.__dynamic_choice = YANGDynClass(base=unicode, is_leaf=True, yang_name="dynamic-choice", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  datatype = __builtin__.property(_get_datatype, _set_datatype)
  label = __builtin__.property(_get_label, _set_label)
  hint = __builtin__.property(_get_hint, _set_hint)
  choices = __builtin__.property(_get_choices, _set_choices)
  range = __builtin__.property(_get_range, _set_range)
  regexp = __builtin__.property(_get_regexp, _set_regexp)
  maxlength = __builtin__.property(_get_maxlength, _set_maxlength)
  multi_selection = __builtin__.property(_get_multi_selection, _set_multi_selection)
  editable = __builtin__.property(_get_editable, _set_editable)
  dynamic_choice = __builtin__.property(_get_dynamic_choice, _set_dynamic_choice)


  _pyangbind_elements = collections.OrderedDict([('name', name), ('datatype', datatype), ('label', label), ('hint', hint), ('choices', choices), ('range', range), ('regexp', regexp), ('maxlength', maxlength), ('multi_selection', multi_selection), ('editable', editable), ('dynamic_choice', dynamic_choice), ])


