
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import conditions
import actions
class rule(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /rule-engine/rules/rule. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__name','__rule_type','__enable','__context_path','__change_type','__event_spec','__description','__match_type','__conditions','__actions',)

  _yang_name = 'rule'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__rule_type = YANGDynClass(base=unicode, default=unicode("UNCATEGORIZED"), is_leaf=True, yang_name="rule-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__change_type = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'REPLACE': {}, u'CREATE_UPDATE_REPLACE': {}, u'ANY': {}, u'DELETE': {}},)), is_leaf=False, yang_name="change-type", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9,\\._()\\s-]+$'}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__context_path = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="context-path", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)
    self.__actions = YANGDynClass(base=actions.actions, is_container='container', yang_name="actions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, choice=(u'rule-context', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__match_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MATCH_ALL': {}, u'MATCH_ANY': {}},), default=unicode("MATCH_ALL"), is_leaf=True, yang_name="match-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)
    self.__conditions = YANGDynClass(base=conditions.conditions, is_container='container', yang_name="conditions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rule-engine', u'rules', u'rule']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /rule_engine/rules/rule/name (string)

    YANG Description: Name of the rule. Allows AlphaNumerics, comma, underscore, space, hyphen and parantheses characters only.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /rule_engine/rules/rule/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the rule. Allows AlphaNumerics, comma, underscore, space, hyphen and parantheses characters only.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9,\\._()\\s-]+$'}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9,\\._()\\s-]+$'}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'^[a-zA-Z0-9,\\._()\\s-]+$'}), is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_rule_type(self):
    """
    Getter method for rule_type, mapped from YANG variable /rule_engine/rules/rule/rule_type (leafref)

    YANG Description: rule-type
    """
    return self.__rule_type
      
  def _set_rule_type(self, v, load=False):
    """
    Setter method for rule_type, mapped from YANG variable /rule_engine/rules/rule/rule_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rule_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rule_type() directly.

    YANG Description: rule-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("UNCATEGORIZED"), is_leaf=True, yang_name="rule-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rule_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("UNCATEGORIZED"), is_leaf=True, yang_name="rule-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__rule_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rule_type(self):
    self.__rule_type = YANGDynClass(base=unicode, default=unicode("UNCATEGORIZED"), is_leaf=True, yang_name="rule-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /rule_engine/rules/rule/enable (boolean)

    YANG Description: Flag to indicate that a rule is active. Only the rules with enabled flags are evaluated.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /rule_engine/rules/rule/enable (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: Flag to indicate that a rule is active. Only the rules with enabled flags are evaluated.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="enable", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_context_path(self):
    """
    Getter method for context_path, mapped from YANG variable /rule_engine/rules/rule/context_path (ndt:schemapath)

    YANG Description: Schema path or rcpath of the context. The rule conditions and actions are evaluated under the current context. 
    """
    return self.__context_path
      
  def _set_context_path(self, v, load=False):
    """
    Setter method for context_path, mapped from YANG variable /rule_engine/rules/rule/context_path (ndt:schemapath)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_context_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_context_path() directly.

    YANG Description: Schema path or rcpath of the context. The rule conditions and actions are evaluated under the current context. 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="context-path", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """context_path must be of a type compatible with ndt:schemapath""",
          'defined-type': "ndt:schemapath",
          'generated-type': """YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="context-path", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)""",
        })

    self.__context_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_context_path(self):
    self.__context_path = YANGDynClass(base=unicode, default=unicode("/controller:"), is_leaf=True, yang_name="context-path", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='ndt:schemapath', is_config=True)


  def _get_change_type(self):
    """
    Getter method for change_type, mapped from YANG variable /rule_engine/rules/rule/change_type (enumeration)

    YANG Description: CREATE
UPDATE
DELETE
REPLACE
CREATE_UPDATE_REPLACE
ANY

    """
    return self.__change_type
      
  def _set_change_type(self, v, load=False):
    """
    Setter method for change_type, mapped from YANG variable /rule_engine/rules/rule/change_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_change_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_change_type() directly.

    YANG Description: CREATE
UPDATE
DELETE
REPLACE
CREATE_UPDATE_REPLACE
ANY

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'REPLACE': {}, u'CREATE_UPDATE_REPLACE': {}, u'ANY': {}, u'DELETE': {}},)), is_leaf=False, yang_name="change-type", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """change_type must be of a type compatible with enumeration""",
          'defined-type': "controller:enumeration",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'REPLACE': {}, u'CREATE_UPDATE_REPLACE': {}, u'ANY': {}, u'DELETE': {}},)), is_leaf=False, yang_name="change-type", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)""",
        })

    self.__change_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_change_type(self):
    self.__change_type = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'CREATE': {}, u'UPDATE': {}, u'REPLACE': {}, u'CREATE_UPDATE_REPLACE': {}, u'ANY': {}, u'DELETE': {}},)), is_leaf=False, yang_name="change-type", module_name="controller", parent=self, choice=(u'rule-context', u'DATAMODEL'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)


  def _get_event_spec(self):
    """
    Getter method for event_spec, mapped from YANG variable /rule_engine/rules/rule/event_spec (leafref)

    YANG Description: event-spec
    """
    return self.__event_spec
      
  def _set_event_spec(self, v, load=False):
    """
    Setter method for event_spec, mapped from YANG variable /rule_engine/rules/rule/event_spec (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_spec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_spec() directly.

    YANG Description: event-spec
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, choice=(u'rule-context', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_spec must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, choice=(u'rule-context', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__event_spec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_spec(self):
    self.__event_spec = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-spec", module_name="controller", parent=self, choice=(u'rule-context', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /rule_engine/rules/rule/description (string)

    YANG Description: Optional description of the rule
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /rule_engine/rules/rule/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: Optional description of the rule
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_match_type(self):
    """
    Getter method for match_type, mapped from YANG variable /rule_engine/rules/rule/match_type (enumeration)

    YANG Description: Strategy to evaluate the Rule Conditions.
 In case of multiple rule conditions, an action is executed as follows 
 MATCH_ALL : All the conditions are evaluate to true. 
 MATCH_ANY : Any of the conditions is evaluated to true. 
    """
    return self.__match_type
      
  def _set_match_type(self, v, load=False):
    """
    Setter method for match_type, mapped from YANG variable /rule_engine/rules/rule/match_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_match_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_match_type() directly.

    YANG Description: Strategy to evaluate the Rule Conditions.
 In case of multiple rule conditions, an action is executed as follows 
 MATCH_ALL : All the conditions are evaluate to true. 
 MATCH_ANY : Any of the conditions is evaluated to true. 
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MATCH_ALL': {}, u'MATCH_ANY': {}},), default=unicode("MATCH_ALL"), is_leaf=True, yang_name="match-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """match_type must be of a type compatible with enumeration""",
          'defined-type': "controller:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MATCH_ALL': {}, u'MATCH_ANY': {}},), default=unicode("MATCH_ALL"), is_leaf=True, yang_name="match-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)""",
        })

    self.__match_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_match_type(self):
    self.__match_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'MATCH_ALL': {}, u'MATCH_ANY': {}},), default=unicode("MATCH_ALL"), is_leaf=True, yang_name="match-type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='enumeration', is_config=True)


  def _get_conditions(self):
    """
    Getter method for conditions, mapped from YANG variable /rule_engine/rules/rule/conditions (container)
    """
    return self.__conditions
      
  def _set_conditions(self, v, load=False):
    """
    Setter method for conditions, mapped from YANG variable /rule_engine/rules/rule/conditions (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conditions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conditions() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=conditions.conditions, is_container='container', yang_name="conditions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conditions must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=conditions.conditions, is_container='container', yang_name="conditions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__conditions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conditions(self):
    self.__conditions = YANGDynClass(base=conditions.conditions, is_container='container', yang_name="conditions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)


  def _get_actions(self):
    """
    Getter method for actions, mapped from YANG variable /rule_engine/rules/rule/actions (container)
    """
    return self.__actions
      
  def _set_actions(self, v, load=False):
    """
    Setter method for actions, mapped from YANG variable /rule_engine/rules/rule/actions (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actions() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=actions.actions, is_container='container', yang_name="actions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actions must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=actions.actions, is_container='container', yang_name="actions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)""",
        })

    self.__actions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actions(self):
    self.__actions = YANGDynClass(base=actions.actions, is_container='container', yang_name="actions", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  rule_type = __builtin__.property(_get_rule_type, _set_rule_type)
  enable = __builtin__.property(_get_enable, _set_enable)
  context_path = __builtin__.property(_get_context_path, _set_context_path)
  change_type = __builtin__.property(_get_change_type, _set_change_type)
  event_spec = __builtin__.property(_get_event_spec, _set_event_spec)
  description = __builtin__.property(_get_description, _set_description)
  match_type = __builtin__.property(_get_match_type, _set_match_type)
  conditions = __builtin__.property(_get_conditions, _set_conditions)
  actions = __builtin__.property(_get_actions, _set_actions)

  __choices__ = {u'rule-context': {u'EVENT': [u'event_spec'], u'DATAMODEL': [u'context_path', u'change_type']}}
  _pyangbind_elements = collections.OrderedDict([('name', name), ('rule_type', rule_type), ('enable', enable), ('context_path', context_path), ('change_type', change_type), ('event_spec', event_spec), ('description', description), ('match_type', match_type), ('conditions', conditions), ('actions', actions), ])


