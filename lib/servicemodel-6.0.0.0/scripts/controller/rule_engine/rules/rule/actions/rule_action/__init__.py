
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
import payload_variable
class rule_action(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /rule-engine/rules/rule/actions/rule-action. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__index','__rpc_name','__rpc_payload','__event_name','__synchronous','__payload_variable','__description',)

  _yang_name = 'rule-action'
  _module_name = 'rule-engine'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    self.__synchronous = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="synchronous", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__rpc_payload = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-payload", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__payload_variable = YANGDynClass(base=YANGListType("name",payload_variable.payload_variable, yang_name="payload-variable", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', choice=False), is_container='list', yang_name="payload-variable", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    self.__rpc_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rule-engine', u'rules', u'rule', u'actions', u'rule-action']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/index (uint32)

    YANG Description: Index of the action. Actions are executed in the ascending order of index.
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: Index of the action. Actions are executed in the ascending order of index.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_rpc_name(self):
    """
    Getter method for rpc_name, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/rpc_name (string)

    YANG Description: Name of RPC to execute.
    """
    return self.__rpc_name
      
  def _set_rpc_name(self, v, load=False):
    """
    Setter method for rpc_name, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/rpc_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rpc_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rpc_name() directly.

    YANG Description: Name of RPC to execute.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rpc_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__rpc_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rpc_name(self):
    self.__rpc_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-name", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_rpc_payload(self):
    """
    Getter method for rpc_payload, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/rpc_payload (string)

    YANG Description: Input Payload to RPC in XML format.
    """
    return self.__rpc_payload
      
  def _set_rpc_payload(self, v, load=False):
    """
    Setter method for rpc_payload, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/rpc_payload (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rpc_payload is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rpc_payload() directly.

    YANG Description: Input Payload to RPC in XML format.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rpc-payload", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rpc_payload must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-payload", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__rpc_payload = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rpc_payload(self):
    self.__rpc_payload = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpc-payload", module_name="controller", parent=self, choice=(u'type', u'RPC'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_event_name(self):
    """
    Getter method for event_name, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/event_name (leafref)

    YANG Description: Name of the event to generated.
    """
    return self.__event_name
      
  def _set_event_name(self, v, load=False):
    """
    Setter method for event_name, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/event_name (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_name() directly.

    YANG Description: Name of the event to generated.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="event-name", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_name must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)""",
        })

    self.__event_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_name(self):
    self.__event_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="event-name", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='leafref', is_config=True)


  def _get_synchronous(self):
    """
    Getter method for synchronous, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/synchronous (boolean)

    YANG Description: Generate the event in synchronous mode. The caller thread (NCX server) waits till the listener(s) execute the callback and return the control.
    """
    return self.__synchronous
      
  def _set_synchronous(self, v, load=False):
    """
    Setter method for synchronous, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/synchronous (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_synchronous is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_synchronous() directly.

    YANG Description: Generate the event in synchronous mode. The caller thread (NCX server) waits till the listener(s) execute the callback and return the control.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="synchronous", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """synchronous must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="synchronous", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__synchronous = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_synchronous(self):
    self.__synchronous = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="synchronous", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_payload_variable(self):
    """
    Getter method for payload_variable, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/payload_variable (list)
    """
    return self.__payload_variable
      
  def _set_payload_variable(self, v, load=False):
    """
    Setter method for payload_variable, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/payload_variable (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_payload_variable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_payload_variable() directly.
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGListType("name",payload_variable.payload_variable, yang_name="payload-variable", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', choice=False), is_container='list', yang_name="payload-variable", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """payload_variable must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",payload_variable.payload_variable, yang_name="payload-variable", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', choice=False), is_container='list', yang_name="payload-variable", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)""",
        })

    self.__payload_variable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_payload_variable(self):
    self.__payload_variable = YANGDynClass(base=YANGListType("name",payload_variable.payload_variable, yang_name="payload-variable", module_name="controller", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', choice=False), is_container='list', yang_name="payload-variable", module_name="controller", parent=self, choice=(u'type', u'EVENT'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='list', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/description (string)

    YANG Description: Optional description of the rule
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /rule_engine/rules/rule/actions/rule_action/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: Optional description of the rule
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

  index = __builtin__.property(_get_index, _set_index)
  rpc_name = __builtin__.property(_get_rpc_name, _set_rpc_name)
  rpc_payload = __builtin__.property(_get_rpc_payload, _set_rpc_payload)
  event_name = __builtin__.property(_get_event_name, _set_event_name)
  synchronous = __builtin__.property(_get_synchronous, _set_synchronous)
  payload_variable = __builtin__.property(_get_payload_variable, _set_payload_variable)
  description = __builtin__.property(_get_description, _set_description)

  __choices__ = {u'type': {u'RPC': [u'rpc_name', u'rpc_payload'], u'EVENT': [u'event_name', u'synchronous', u'payload_variable']}}
  _pyangbind_elements = collections.OrderedDict([('index', index), ('rpc_name', rpc_name), ('rpc_payload', rpc_payload), ('event_name', event_name), ('synchronous', synchronous), ('payload_variable', payload_variable), ('description', description), ])


