
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class request_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module migration - based on the path /migration_rpc/upgrade-package/input/request-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__process_events','__approval_required','__ignore_maintenance_mode',)

  _yang_name = 'request-config'
  _module_name = 'migration'
  _namespace = 'http://anutanetworks.com/migration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__ignore_maintenance_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-maintenance-mode", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    self.__approval_required = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approval-required", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    self.__process_events = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="process-events", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'migration_rpc', u'upgrade-package', u'input', u'request-config']

  def _get_process_events(self):
    """
    Getter method for process_events, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/process_events (boolean)

    YANG Description: process-events: True/False
    """
    return self.__process_events
      
  def _set_process_events(self, v, load=False):
    """
    Setter method for process_events, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/process_events (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_process_events is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_process_events() directly.

    YANG Description: process-events: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="process-events", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """process_events must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="process-events", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)""",
        })

    self.__process_events = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_process_events(self):
    self.__process_events = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="process-events", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)


  def _get_approval_required(self):
    """
    Getter method for approval_required, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/approval_required (boolean)

    YANG Description: approval-required: True/False
    """
    return self.__approval_required
      
  def _set_approval_required(self, v, load=False):
    """
    Setter method for approval_required, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/approval_required (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_approval_required is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_approval_required() directly.

    YANG Description: approval-required: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="approval-required", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """approval_required must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approval-required", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)""",
        })

    self.__approval_required = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_approval_required(self):
    self.__approval_required = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approval-required", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)


  def _get_ignore_maintenance_mode(self):
    """
    Getter method for ignore_maintenance_mode, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/ignore_maintenance_mode (boolean)

    YANG Description: ignore-maintenance-mode: True/False
    """
    return self.__ignore_maintenance_mode
      
  def _set_ignore_maintenance_mode(self, v, load=False):
    """
    Setter method for ignore_maintenance_mode, mapped from YANG variable /migration_rpc/upgrade_package/input/request_config/ignore_maintenance_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ignore_maintenance_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ignore_maintenance_mode() directly.

    YANG Description: ignore-maintenance-mode: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ignore-maintenance-mode", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ignore_maintenance_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-maintenance-mode", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)""",
        })

    self.__ignore_maintenance_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ignore_maintenance_mode(self):
    self.__ignore_maintenance_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ignore-maintenance-mode", module_name="migration", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://anutanetworks.com/migration', defining_module='migration', yang_type='boolean', is_config=True)

  process_events = __builtin__.property(_get_process_events, _set_process_events)
  approval_required = __builtin__.property(_get_approval_required, _set_approval_required)
  ignore_maintenance_mode = __builtin__.property(_get_ignore_maintenance_mode, _set_ignore_maintenance_mode)


  _pyangbind_elements = collections.OrderedDict([('process_events', process_events), ('approval_required', approval_required), ('ignore_maintenance_mode', ignore_maintenance_mode), ])


