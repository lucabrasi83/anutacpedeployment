
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class package(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /packages/package. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__version','__name','__plugin_name','__display_name','__description','__driver_name','__type','__system_created','__ncx_version','__md5_check_sum','__active','__deploy_on_server','__deploy_on_agent',)

  _yang_name = 'package'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__md5_check_sum = YANGDynClass(base=unicode, is_leaf=True, yang_name="md5-check-sum", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__ncx_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ncx-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__display_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__deploy_on_server = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="deploy-on-server", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__plugin_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="plugin-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__driver_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="driver-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__active = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__system_created = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-created", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_EXTENSION': {}, u'CONFIG_SCRIPT': {}, u'SYSTEM_SERVICE': {}, u'SERVICE_MODEL': {}, u'DEVICE': {}, u'OPENSTACK': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='package-type', is_config=True)
    self.__deploy_on_agent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deploy-on-agent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'packages', u'package']

  def _get_version(self):
    """
    Getter method for version, mapped from YANG variable /packages/package/version (string)

    YANG Description: string
    """
    return self.__version
      
  def _set_version(self, v, load=False):
    """
    Setter method for version, mapped from YANG variable /packages/package/version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version(self):
    self.__version = YANGDynClass(base=unicode, is_leaf=True, yang_name="version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /packages/package/name (string)

    YANG Description: string
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /packages/package/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_plugin_name(self):
    """
    Getter method for plugin_name, mapped from YANG variable /packages/package/plugin_name (string)

    YANG Description: string
    """
    return self.__plugin_name
      
  def _set_plugin_name(self, v, load=False):
    """
    Setter method for plugin_name, mapped from YANG variable /packages/package/plugin_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_plugin_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_plugin_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="plugin-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """plugin_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="plugin-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__plugin_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_plugin_name(self):
    self.__plugin_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="plugin-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_display_name(self):
    """
    Getter method for display_name, mapped from YANG variable /packages/package/display_name (string)

    YANG Description: string
    """
    return self.__display_name
      
  def _set_display_name(self, v, load=False):
    """
    Setter method for display_name, mapped from YANG variable /packages/package/display_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_display_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_display_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """display_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__display_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_display_name(self):
    self.__display_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="display-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /packages/package/description (string)

    YANG Description: string
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /packages/package/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_driver_name(self):
    """
    Getter method for driver_name, mapped from YANG variable /packages/package/driver_name (string)

    YANG Description: string
    """
    return self.__driver_name
      
  def _set_driver_name(self, v, load=False):
    """
    Setter method for driver_name, mapped from YANG variable /packages/package/driver_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_driver_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_driver_name() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="driver-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """driver_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="driver-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__driver_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_driver_name(self):
    self.__driver_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="driver-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /packages/package/type (package-type)

    YANG Description: DEVICE
SERVICE_MODEL
OPENSTACK
CONFIG_SCRIPT
SYSTEM_SERVICE
SERVICE_EXTENSION

    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /packages/package/type (package-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: DEVICE
SERVICE_MODEL
OPENSTACK
CONFIG_SCRIPT
SYSTEM_SERVICE
SERVICE_EXTENSION

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_EXTENSION': {}, u'CONFIG_SCRIPT': {}, u'SYSTEM_SERVICE': {}, u'SERVICE_MODEL': {}, u'DEVICE': {}, u'OPENSTACK': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='package-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with package-type""",
          'defined-type': "controller:package-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_EXTENSION': {}, u'CONFIG_SCRIPT': {}, u'SYSTEM_SERVICE': {}, u'SERVICE_MODEL': {}, u'DEVICE': {}, u'OPENSTACK': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='package-type', is_config=True)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'SERVICE_EXTENSION': {}, u'CONFIG_SCRIPT': {}, u'SYSTEM_SERVICE': {}, u'SERVICE_MODEL': {}, u'DEVICE': {}, u'OPENSTACK': {}},), is_leaf=True, yang_name="type", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='package-type', is_config=True)


  def _get_system_created(self):
    """
    Getter method for system_created, mapped from YANG variable /packages/package/system_created (boolean)

    YANG Description: system-created: True/False
    """
    return self.__system_created
      
  def _set_system_created(self, v, load=False):
    """
    Setter method for system_created, mapped from YANG variable /packages/package/system_created (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_created is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_created() directly.

    YANG Description: system-created: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="system-created", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_created must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-created", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__system_created = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_created(self):
    self.__system_created = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-created", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_ncx_version(self):
    """
    Getter method for ncx_version, mapped from YANG variable /packages/package/ncx_version (string)

    YANG Description: string
    """
    return self.__ncx_version
      
  def _set_ncx_version(self, v, load=False):
    """
    Setter method for ncx_version, mapped from YANG variable /packages/package/ncx_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ncx_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ncx_version() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ncx-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ncx_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ncx-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__ncx_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ncx_version(self):
    self.__ncx_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="ncx-version", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_md5_check_sum(self):
    """
    Getter method for md5_check_sum, mapped from YANG variable /packages/package/md5_check_sum (string)

    YANG Description: string
    """
    return self.__md5_check_sum
      
  def _set_md5_check_sum(self, v, load=False):
    """
    Setter method for md5_check_sum, mapped from YANG variable /packages/package/md5_check_sum (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_md5_check_sum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_md5_check_sum() directly.

    YANG Description: string
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="md5-check-sum", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """md5_check_sum must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="md5-check-sum", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__md5_check_sum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_md5_check_sum(self):
    self.__md5_check_sum = YANGDynClass(base=unicode, is_leaf=True, yang_name="md5-check-sum", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_active(self):
    """
    Getter method for active, mapped from YANG variable /packages/package/active (boolean)

    YANG Description: active: True/False
    """
    return self.__active
      
  def _set_active(self, v, load=False):
    """
    Setter method for active, mapped from YANG variable /packages/package/active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active() directly.

    YANG Description: active: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active(self):
    self.__active = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="active", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_deploy_on_server(self):
    """
    Getter method for deploy_on_server, mapped from YANG variable /packages/package/deploy_on_server (boolean)

    YANG Description: deploy-on-server: True/False
    """
    return self.__deploy_on_server
      
  def _set_deploy_on_server(self, v, load=False):
    """
    Setter method for deploy_on_server, mapped from YANG variable /packages/package/deploy_on_server (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deploy_on_server is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deploy_on_server() directly.

    YANG Description: deploy-on-server: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="deploy-on-server", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deploy_on_server must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="deploy-on-server", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__deploy_on_server = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deploy_on_server(self):
    self.__deploy_on_server = YANGDynClass(base=YANGBool, default=YANGBool("true"), is_leaf=True, yang_name="deploy-on-server", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_deploy_on_agent(self):
    """
    Getter method for deploy_on_agent, mapped from YANG variable /packages/package/deploy_on_agent (boolean)

    YANG Description: deploy-on-agent: True/False
    """
    return self.__deploy_on_agent
      
  def _set_deploy_on_agent(self, v, load=False):
    """
    Setter method for deploy_on_agent, mapped from YANG variable /packages/package/deploy_on_agent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deploy_on_agent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deploy_on_agent() directly.

    YANG Description: deploy-on-agent: True/False
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="deploy-on-agent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deploy_on_agent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deploy-on-agent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__deploy_on_agent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deploy_on_agent(self):
    self.__deploy_on_agent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="deploy-on-agent", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

  version = __builtin__.property(_get_version, _set_version)
  name = __builtin__.property(_get_name, _set_name)
  plugin_name = __builtin__.property(_get_plugin_name, _set_plugin_name)
  display_name = __builtin__.property(_get_display_name, _set_display_name)
  description = __builtin__.property(_get_description, _set_description)
  driver_name = __builtin__.property(_get_driver_name, _set_driver_name)
  type = __builtin__.property(_get_type, _set_type)
  system_created = __builtin__.property(_get_system_created, _set_system_created)
  ncx_version = __builtin__.property(_get_ncx_version, _set_ncx_version)
  md5_check_sum = __builtin__.property(_get_md5_check_sum, _set_md5_check_sum)
  active = __builtin__.property(_get_active, _set_active)
  deploy_on_server = __builtin__.property(_get_deploy_on_server, _set_deploy_on_server)
  deploy_on_agent = __builtin__.property(_get_deploy_on_agent, _set_deploy_on_agent)


  _pyangbind_elements = collections.OrderedDict([('version', version), ('name', name), ('plugin_name', plugin_name), ('display_name', display_name), ('description', description), ('driver_name', driver_name), ('type', type), ('system_created', system_created), ('ncx_version', ncx_version), ('md5_check_sum', md5_check_sum), ('active', active), ('deploy_on_server', deploy_on_server), ('deploy_on_agent', deploy_on_agent), ])


