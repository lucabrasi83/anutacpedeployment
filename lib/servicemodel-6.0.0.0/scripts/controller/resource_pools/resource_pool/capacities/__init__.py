
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class capacities(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module resourcepool - based on the path /resource-pools/resource-pool/capacities. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__capacity_id','__capacity_type','__capacity_units','__total','__reserved','__used','__available','__alarm_spec_type',)

  _yang_name = 'capacities'
  _module_name = 'capacities'
  _namespace = 'http://anutanetworks.com/capacities'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__available = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="available", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    self.__used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="used", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    self.__reserved = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reserved", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    self.__capacity_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-id", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)
    self.__capacity_units = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'G_BYTES': {}, u'K_BYTES': {}, u'M_BITS': {}, u'M_BYTES': {}, u'G_BITS': {}, u'BYTES': {}, u'K_BITS': {}, u'PACKETS': {}, u'PERCENTAGE': {}, u'BITS': {}, u'ABSOLUTE': {}},), is_leaf=True, yang_name="capacity-units", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:capacity-units', is_config=False)
    self.__total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    self.__capacity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'resource-pools', u'resource-pool', u'capacities']

  def _get_capacity_id(self):
    """
    Getter method for capacity_id, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_id (string)

    YANG Description: string
    """
    return self.__capacity_id
      
  def _set_capacity_id(self, v, load=False):
    """
    Setter method for capacity_id, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capacity_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capacity_id() directly.

    YANG Description: string
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="capacity-id", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capacity_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-id", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)""",
        })

    self.__capacity_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capacity_id(self):
    self.__capacity_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-id", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='string', is_config=True)


  def _get_capacity_type(self):
    """
    Getter method for capacity_type, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_type (leafref)

    YANG Description: capacity-type
    """
    return self.__capacity_type
      
  def _set_capacity_type(self, v, load=False):
    """
    Setter method for capacity_type, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capacity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capacity_type() directly.

    YANG Description: capacity-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capacity_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)""",
        })

    self.__capacity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capacity_type(self):
    self.__capacity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="capacity-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)


  def _get_capacity_units(self):
    """
    Getter method for capacity_units, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_units (ndt:capacity-units)

    YANG Description: ABSOLUTE
PERCENTAGE
BYTES
K_BYTES
M_BYTES
G_BYTES
BITS
K_BITS
M_BITS
G_BITS
PACKETS

    """
    return self.__capacity_units
      
  def _set_capacity_units(self, v, load=False):
    """
    Setter method for capacity_units, mapped from YANG variable /resource_pools/resource_pool/capacities/capacity_units (ndt:capacity-units)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_capacity_units is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_capacity_units() directly.

    YANG Description: ABSOLUTE
PERCENTAGE
BYTES
K_BYTES
M_BYTES
G_BYTES
BITS
K_BITS
M_BITS
G_BITS
PACKETS

    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'G_BYTES': {}, u'K_BYTES': {}, u'M_BITS': {}, u'M_BYTES': {}, u'G_BITS': {}, u'BYTES': {}, u'K_BITS': {}, u'PACKETS': {}, u'PERCENTAGE': {}, u'BITS': {}, u'ABSOLUTE': {}},), is_leaf=True, yang_name="capacity-units", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:capacity-units', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """capacity_units must be of a type compatible with ndt:capacity-units""",
          'defined-type': "ndt:capacity-units",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'G_BYTES': {}, u'K_BYTES': {}, u'M_BITS': {}, u'M_BYTES': {}, u'G_BITS': {}, u'BYTES': {}, u'K_BITS': {}, u'PACKETS': {}, u'PERCENTAGE': {}, u'BITS': {}, u'ABSOLUTE': {}},), is_leaf=True, yang_name="capacity-units", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:capacity-units', is_config=False)""",
        })

    self.__capacity_units = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_capacity_units(self):
    self.__capacity_units = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'G_BYTES': {}, u'K_BYTES': {}, u'M_BITS': {}, u'M_BYTES': {}, u'G_BITS': {}, u'BYTES': {}, u'K_BITS': {}, u'PACKETS': {}, u'PERCENTAGE': {}, u'BITS': {}, u'ABSOLUTE': {}},), is_leaf=True, yang_name="capacity-units", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='ndt:capacity-units', is_config=False)


  def _get_total(self):
    """
    Getter method for total, mapped from YANG variable /resource_pools/resource_pool/capacities/total (uint32)

    YANG Description: 0..4294967295
    """
    return self.__total
      
  def _set_total(self, v, load=False):
    """
    Setter method for total, mapped from YANG variable /resource_pools/resource_pool/capacities/total (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)""",
        })

    self.__total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total(self):
    self.__total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)


  def _get_reserved(self):
    """
    Getter method for reserved, mapped from YANG variable /resource_pools/resource_pool/capacities/reserved (uint32)

    YANG Description: 0..4294967295
    """
    return self.__reserved
      
  def _set_reserved(self, v, load=False):
    """
    Setter method for reserved, mapped from YANG variable /resource_pools/resource_pool/capacities/reserved (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reserved is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reserved() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reserved", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reserved must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reserved", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)""",
        })

    self.__reserved = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reserved(self):
    self.__reserved = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reserved", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)


  def _get_used(self):
    """
    Getter method for used, mapped from YANG variable /resource_pools/resource_pool/capacities/used (uint32)

    YANG Description: 0..4294967295
    """
    return self.__used
      
  def _set_used(self, v, load=False):
    """
    Setter method for used, mapped from YANG variable /resource_pools/resource_pool/capacities/used (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="used", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="used", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)""",
        })

    self.__used = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used(self):
    self.__used = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="used", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)


  def _get_available(self):
    """
    Getter method for available, mapped from YANG variable /resource_pools/resource_pool/capacities/available (uint32)

    YANG Description: 0..4294967295
    """
    return self.__available
      
  def _set_available(self, v, load=False):
    """
    Setter method for available, mapped from YANG variable /resource_pools/resource_pool/capacities/available (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_available() directly.

    YANG Description: 0..4294967295
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="available", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """available must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="available", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)""",
        })

    self.__available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_available(self):
    self.__available = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="available", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='uint32', is_config=False)


  def _get_alarm_spec_type(self):
    """
    Getter method for alarm_spec_type, mapped from YANG variable /resource_pools/resource_pool/capacities/alarm_spec_type (leafref)

    YANG Description: alarm-spec-type
    """
    return self.__alarm_spec_type
      
  def _set_alarm_spec_type(self, v, load=False):
    """
    Setter method for alarm_spec_type, mapped from YANG variable /resource_pools/resource_pool/capacities/alarm_spec_type (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_alarm_spec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_alarm_spec_type() directly.

    YANG Description: alarm-spec-type
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """alarm_spec_type must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)""",
        })

    self.__alarm_spec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_alarm_spec_type(self):
    self.__alarm_spec_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="alarm-spec-type", module_name="capacities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/capacities', defining_module='capacities', yang_type='leafref', is_config=False)

  capacity_id = __builtin__.property(_get_capacity_id, _set_capacity_id)
  capacity_type = __builtin__.property(_get_capacity_type)
  capacity_units = __builtin__.property(_get_capacity_units)
  total = __builtin__.property(_get_total)
  reserved = __builtin__.property(_get_reserved)
  used = __builtin__.property(_get_used)
  available = __builtin__.property(_get_available)
  alarm_spec_type = __builtin__.property(_get_alarm_spec_type)


  _pyangbind_elements = collections.OrderedDict([('capacity_id', capacity_id), ('capacity_type', capacity_type), ('capacity_units', capacity_units), ('total', total), ('reserved', reserved), ('used', used), ('available', available), ('alarm_spec_type', alarm_spec_type), ])


