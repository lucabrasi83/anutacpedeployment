
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class admin_settings(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /admin-settings. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__base_url','__support_url','__user_session_timeout','__configuration_retrieval','__syslog_configuration','__persist_configuration','__dry_run','__auto_retry','__number_of_retries','__retry_wait_time','__service_auto_retry','__service_number_of_retries','__service_retry_wait_time','__auto_delete_stale_inv_data','__delayed_event_buffer_time','__enable_device_audit_trail_mode','__enable_multi_tenancy','__snmp_trap_configuration','__snmp_configuration_contact','__snmp_configuration_location','__snmp_community_string','__smtp_mail_from','__smtp_host','__smtp_port','__smtp_auth_required','__smtp_user_name','__smtp_password','__smtp_encryptionSSL','__smtp_encryptionTLS','__email_notifications','__license_expiry_threshold','__python_remote_debug','__debug_server_port','__approve_remove_dev_from_svc','__enable_developer_mode','__enable_maintenance_mode','__show_module_prefixes','__security_sanitizer_enabled','__sanitizer_execlude_url','__sanitizer_patterns','__password_expiry_days','__password_pattern','__password_min_length','__password_max_length',)

  _yang_name = 'admin-settings'
  _module_name = 'controller'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__show_module_prefixes = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="show-module-prefixes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__debug_server_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="debug-server-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__security_sanitizer_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="security-sanitizer-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__sanitizer_execlude_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-execlude-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__python_remote_debug = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="python-remote-debug", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__service_auto_retry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="service-auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__enable_multi_tenancy = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-multi-tenancy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__smtp_mail_from = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-mail-from", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__service_retry_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..30']}), is_leaf=True, yang_name="service-retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__service_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="service-number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__snmp_configuration_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__retry_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..60']}), is_leaf=True, yang_name="retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__password_min_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-min-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__dry_run = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dry-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__syslog_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="syslog-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__snmp_trap_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="snmp-trap-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__smtp_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__base_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="base-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__persist_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="persist-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__smtp_encryptionTLS = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionTLS", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__password_max_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-max-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__auto_retry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__sanitizer_patterns = YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__smtp_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__smtp_encryptionSSL = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionSSL", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__smtp_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__license_expiry_threshold = YANGDynClass(base=unicode, is_leaf=True, yang_name="license-expiry-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__password_expiry_days = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="password-expiry-days", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__smtp_host = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__delayed_event_buffer_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="delayed-event-buffer-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    self.__user_session_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..60']}), is_leaf=True, yang_name="user-session-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    self.__enable_device_audit_trail_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-device-audit-trail-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__email_notifications = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="email-notifications", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__snmp_community_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-community-string", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__smtp_auth_required = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-auth-required", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__password_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="password-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__configuration_retrieval = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configuration-retrieval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__approve_remove_dev_from_svc = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approve-remove-dev-from-svc", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__support_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="support-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__snmp_configuration_contact = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-contact", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    self.__enable_developer_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-developer-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__auto_delete_stale_inv_data = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-delete-stale-inv-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    self.__enable_maintenance_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-maintenance-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'admin-settings']

  def _get_base_url(self):
    """
    Getter method for base_url, mapped from YANG variable /admin_settings/base_url (string)

    YANG Description: Base URL for REST API links (E.g: https://ip|hostname)
    """
    return self.__base_url
      
  def _set_base_url(self, v, load=False):
    """
    Setter method for base_url, mapped from YANG variable /admin_settings/base_url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_base_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_base_url() directly.

    YANG Description: Base URL for REST API links (E.g: https://ip|hostname)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="base-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """base_url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="base-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__base_url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_base_url(self):
    self.__base_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="base-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_support_url(self):
    """
    Getter method for support_url, mapped from YANG variable /admin_settings/support_url (string)

    YANG Description: Support URL
    """
    return self.__support_url
      
  def _set_support_url(self, v, load=False):
    """
    Setter method for support_url, mapped from YANG variable /admin_settings/support_url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_support_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_support_url() directly.

    YANG Description: Support URL
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="support-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """support_url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="support-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__support_url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_support_url(self):
    self.__support_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="support-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_user_session_timeout(self):
    """
    Getter method for user_session_timeout, mapped from YANG variable /admin_settings/user_session_timeout (uint16)

    YANG Description: User Session Timeout (in Seconds)
    """
    return self.__user_session_timeout
      
  def _set_user_session_timeout(self, v, load=False):
    """
    Setter method for user_session_timeout, mapped from YANG variable /admin_settings/user_session_timeout (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_user_session_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_user_session_timeout() directly.

    YANG Description: User Session Timeout (in Seconds)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..60']}), is_leaf=True, yang_name="user-session-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """user_session_timeout must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..60']}), is_leaf=True, yang_name="user-session-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__user_session_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_user_session_timeout(self):
    self.__user_session_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..60']}), is_leaf=True, yang_name="user-session-timeout", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_configuration_retrieval(self):
    """
    Getter method for configuration_retrieval, mapped from YANG variable /admin_settings/configuration_retrieval (boolean)

    YANG Description: Configuration Retrieval Settings
    """
    return self.__configuration_retrieval
      
  def _set_configuration_retrieval(self, v, load=False):
    """
    Setter method for configuration_retrieval, mapped from YANG variable /admin_settings/configuration_retrieval (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configuration_retrieval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configuration_retrieval() directly.

    YANG Description: Configuration Retrieval Settings
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="configuration-retrieval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configuration_retrieval must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configuration-retrieval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__configuration_retrieval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configuration_retrieval(self):
    self.__configuration_retrieval = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="configuration-retrieval", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_syslog_configuration(self):
    """
    Getter method for syslog_configuration, mapped from YANG variable /admin_settings/syslog_configuration (boolean)

    YANG Description: Configuration Settings on Device for Syslog
    """
    return self.__syslog_configuration
      
  def _set_syslog_configuration(self, v, load=False):
    """
    Setter method for syslog_configuration, mapped from YANG variable /admin_settings/syslog_configuration (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_syslog_configuration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_syslog_configuration() directly.

    YANG Description: Configuration Settings on Device for Syslog
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="syslog-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """syslog_configuration must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="syslog-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__syslog_configuration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_syslog_configuration(self):
    self.__syslog_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="syslog-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_persist_configuration(self):
    """
    Getter method for persist_configuration, mapped from YANG variable /admin_settings/persist_configuration (boolean)

    YANG Description: Persist the configuration
    """
    return self.__persist_configuration
      
  def _set_persist_configuration(self, v, load=False):
    """
    Setter method for persist_configuration, mapped from YANG variable /admin_settings/persist_configuration (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_persist_configuration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_persist_configuration() directly.

    YANG Description: Persist the configuration
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="persist-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """persist_configuration must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="persist-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__persist_configuration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_persist_configuration(self):
    self.__persist_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="persist-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_dry_run(self):
    """
    Getter method for dry_run, mapped from YANG variable /admin_settings/dry_run (boolean)

    YANG Description: DryRun
    """
    return self.__dry_run
      
  def _set_dry_run(self, v, load=False):
    """
    Setter method for dry_run, mapped from YANG variable /admin_settings/dry_run (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dry_run is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dry_run() directly.

    YANG Description: DryRun
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dry-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dry_run must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dry-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__dry_run = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dry_run(self):
    self.__dry_run = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dry-run", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_auto_retry(self):
    """
    Getter method for auto_retry, mapped from YANG variable /admin_settings/auto_retry (boolean)

    YANG Description: Auto Retry
    """
    return self.__auto_retry
      
  def _set_auto_retry(self, v, load=False):
    """
    Setter method for auto_retry, mapped from YANG variable /admin_settings/auto_retry (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_retry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_retry() directly.

    YANG Description: Auto Retry
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_retry must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__auto_retry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_retry(self):
    self.__auto_retry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_number_of_retries(self):
    """
    Getter method for number_of_retries, mapped from YANG variable /admin_settings/number_of_retries (uint16)

    YANG Description: Number Of Retries
    """
    return self.__number_of_retries
      
  def _set_number_of_retries(self, v, load=False):
    """
    Setter method for number_of_retries, mapped from YANG variable /admin_settings/number_of_retries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_retries() directly.

    YANG Description: Number Of Retries
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_retries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__number_of_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_retries(self):
    self.__number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_retry_wait_time(self):
    """
    Getter method for retry_wait_time, mapped from YANG variable /admin_settings/retry_wait_time (uint16)

    YANG Description: Retry Wait Time
    """
    return self.__retry_wait_time
      
  def _set_retry_wait_time(self, v, load=False):
    """
    Setter method for retry_wait_time, mapped from YANG variable /admin_settings/retry_wait_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retry_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retry_wait_time() directly.

    YANG Description: Retry Wait Time
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..60']}), is_leaf=True, yang_name="retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retry_wait_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..60']}), is_leaf=True, yang_name="retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__retry_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retry_wait_time(self):
    self.__retry_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..60']}), is_leaf=True, yang_name="retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_service_auto_retry(self):
    """
    Getter method for service_auto_retry, mapped from YANG variable /admin_settings/service_auto_retry (boolean)

    YANG Description: Service Auto Retry
    """
    return self.__service_auto_retry
      
  def _set_service_auto_retry(self, v, load=False):
    """
    Setter method for service_auto_retry, mapped from YANG variable /admin_settings/service_auto_retry (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_auto_retry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_auto_retry() directly.

    YANG Description: Service Auto Retry
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="service-auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_auto_retry must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="service-auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__service_auto_retry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_auto_retry(self):
    self.__service_auto_retry = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="service-auto-retry", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_service_number_of_retries(self):
    """
    Getter method for service_number_of_retries, mapped from YANG variable /admin_settings/service_number_of_retries (uint16)

    YANG Description: Service Number Of Retries
    """
    return self.__service_number_of_retries
      
  def _set_service_number_of_retries(self, v, load=False):
    """
    Setter method for service_number_of_retries, mapped from YANG variable /admin_settings/service_number_of_retries (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_number_of_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_number_of_retries() directly.

    YANG Description: Service Number Of Retries
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="service-number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_number_of_retries must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="service-number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__service_number_of_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_number_of_retries(self):
    self.__service_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..10']}), is_leaf=True, yang_name="service-number-of-retries", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_service_retry_wait_time(self):
    """
    Getter method for service_retry_wait_time, mapped from YANG variable /admin_settings/service_retry_wait_time (uint16)

    YANG Description: Service Retry Wait Time
    """
    return self.__service_retry_wait_time
      
  def _set_service_retry_wait_time(self, v, load=False):
    """
    Setter method for service_retry_wait_time, mapped from YANG variable /admin_settings/service_retry_wait_time (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_service_retry_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_service_retry_wait_time() directly.

    YANG Description: Service Retry Wait Time
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..30']}), is_leaf=True, yang_name="service-retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """service_retry_wait_time must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..30']}), is_leaf=True, yang_name="service-retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__service_retry_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_service_retry_wait_time(self):
    self.__service_retry_wait_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'0..30']}), is_leaf=True, yang_name="service-retry-wait-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_auto_delete_stale_inv_data(self):
    """
    Getter method for auto_delete_stale_inv_data, mapped from YANG variable /admin_settings/auto_delete_stale_inv_data (boolean)

    YANG Description: Auto-delete unused stale inventory data
    """
    return self.__auto_delete_stale_inv_data
      
  def _set_auto_delete_stale_inv_data(self, v, load=False):
    """
    Setter method for auto_delete_stale_inv_data, mapped from YANG variable /admin_settings/auto_delete_stale_inv_data (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_delete_stale_inv_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_delete_stale_inv_data() directly.

    YANG Description: Auto-delete unused stale inventory data
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="auto-delete-stale-inv-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_delete_stale_inv_data must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-delete-stale-inv-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__auto_delete_stale_inv_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_delete_stale_inv_data(self):
    self.__auto_delete_stale_inv_data = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="auto-delete-stale-inv-data", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_delayed_event_buffer_time(self):
    """
    Getter method for delayed_event_buffer_time, mapped from YANG variable /admin_settings/delayed_event_buffer_time (uint32)

    YANG Description: Delayed Event Buffer Time (in Seconds)
    """
    return self.__delayed_event_buffer_time
      
  def _set_delayed_event_buffer_time(self, v, load=False):
    """
    Setter method for delayed_event_buffer_time, mapped from YANG variable /admin_settings/delayed_event_buffer_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delayed_event_buffer_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delayed_event_buffer_time() directly.

    YANG Description: Delayed Event Buffer Time (in Seconds)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="delayed-event-buffer-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delayed_event_buffer_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="delayed-event-buffer-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__delayed_event_buffer_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delayed_event_buffer_time(self):
    self.__delayed_event_buffer_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="delayed-event-buffer-time", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_enable_device_audit_trail_mode(self):
    """
    Getter method for enable_device_audit_trail_mode, mapped from YANG variable /admin_settings/enable_device_audit_trail_mode (boolean)

    YANG Description: Enable Device Audit Trail
    """
    return self.__enable_device_audit_trail_mode
      
  def _set_enable_device_audit_trail_mode(self, v, load=False):
    """
    Setter method for enable_device_audit_trail_mode, mapped from YANG variable /admin_settings/enable_device_audit_trail_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_device_audit_trail_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_device_audit_trail_mode() directly.

    YANG Description: Enable Device Audit Trail
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-device-audit-trail-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_device_audit_trail_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-device-audit-trail-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_device_audit_trail_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_device_audit_trail_mode(self):
    self.__enable_device_audit_trail_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-device-audit-trail-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_enable_multi_tenancy(self):
    """
    Getter method for enable_multi_tenancy, mapped from YANG variable /admin_settings/enable_multi_tenancy (boolean)

    YANG Description: Enable MultiTenancy
    """
    return self.__enable_multi_tenancy
      
  def _set_enable_multi_tenancy(self, v, load=False):
    """
    Setter method for enable_multi_tenancy, mapped from YANG variable /admin_settings/enable_multi_tenancy (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_multi_tenancy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_multi_tenancy() directly.

    YANG Description: Enable MultiTenancy
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-multi-tenancy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_multi_tenancy must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-multi-tenancy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_multi_tenancy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_multi_tenancy(self):
    self.__enable_multi_tenancy = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-multi-tenancy", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_snmp_trap_configuration(self):
    """
    Getter method for snmp_trap_configuration, mapped from YANG variable /admin_settings/snmp_trap_configuration (boolean)

    YANG Description: Configuration Settings on Device for Snmp Traps
    """
    return self.__snmp_trap_configuration
      
  def _set_snmp_trap_configuration(self, v, load=False):
    """
    Setter method for snmp_trap_configuration, mapped from YANG variable /admin_settings/snmp_trap_configuration (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_trap_configuration is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_trap_configuration() directly.

    YANG Description: Configuration Settings on Device for Snmp Traps
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="snmp-trap-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_trap_configuration must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="snmp-trap-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__snmp_trap_configuration = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_trap_configuration(self):
    self.__snmp_trap_configuration = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="snmp-trap-configuration", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_snmp_configuration_contact(self):
    """
    Getter method for snmp_configuration_contact, mapped from YANG variable /admin_settings/snmp_configuration_contact (string)

    YANG Description: Snmp Configuration Contact
    """
    return self.__snmp_configuration_contact
      
  def _set_snmp_configuration_contact(self, v, load=False):
    """
    Setter method for snmp_configuration_contact, mapped from YANG variable /admin_settings/snmp_configuration_contact (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_configuration_contact is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_configuration_contact() directly.

    YANG Description: Snmp Configuration Contact
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmp-configuration-contact", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_configuration_contact must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-contact", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmp_configuration_contact = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_configuration_contact(self):
    self.__snmp_configuration_contact = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-contact", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_snmp_configuration_location(self):
    """
    Getter method for snmp_configuration_location, mapped from YANG variable /admin_settings/snmp_configuration_location (string)

    YANG Description: Snmp Configuration Location
    """
    return self.__snmp_configuration_location
      
  def _set_snmp_configuration_location(self, v, load=False):
    """
    Setter method for snmp_configuration_location, mapped from YANG variable /admin_settings/snmp_configuration_location (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_configuration_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_configuration_location() directly.

    YANG Description: Snmp Configuration Location
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmp-configuration-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_configuration_location must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmp_configuration_location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_configuration_location(self):
    self.__snmp_configuration_location = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-configuration-location", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_snmp_community_string(self):
    """
    Getter method for snmp_community_string, mapped from YANG variable /admin_settings/snmp_community_string (string)

    YANG Description: Snmp Community String
    """
    return self.__snmp_community_string
      
  def _set_snmp_community_string(self, v, load=False):
    """
    Setter method for snmp_community_string, mapped from YANG variable /admin_settings/snmp_community_string (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snmp_community_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snmp_community_string() directly.

    YANG Description: Snmp Community String
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snmp-community-string", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snmp_community_string must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-community-string", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__snmp_community_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snmp_community_string(self):
    self.__snmp_community_string = YANGDynClass(base=unicode, is_leaf=True, yang_name="snmp-community-string", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_mail_from(self):
    """
    Getter method for smtp_mail_from, mapped from YANG variable /admin_settings/smtp_mail_from (string)

    YANG Description: Smtp Mail
    """
    return self.__smtp_mail_from
      
  def _set_smtp_mail_from(self, v, load=False):
    """
    Setter method for smtp_mail_from, mapped from YANG variable /admin_settings/smtp_mail_from (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_mail_from is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_mail_from() directly.

    YANG Description: Smtp Mail
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="smtp-mail-from", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_mail_from must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-mail-from", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__smtp_mail_from = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_mail_from(self):
    self.__smtp_mail_from = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-mail-from", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_host(self):
    """
    Getter method for smtp_host, mapped from YANG variable /admin_settings/smtp_host (string)

    YANG Description: Smtp Host Name, ex: smtp.anutanetworks.com
    """
    return self.__smtp_host
      
  def _set_smtp_host(self, v, load=False):
    """
    Setter method for smtp_host, mapped from YANG variable /admin_settings/smtp_host (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_host() directly.

    YANG Description: Smtp Host Name, ex: smtp.anutanetworks.com
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="smtp-host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_host must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__smtp_host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_host(self):
    self.__smtp_host = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-host", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_port(self):
    """
    Getter method for smtp_port, mapped from YANG variable /admin_settings/smtp_port (string)

    YANG Description: Smtp port, ex: 25
    """
    return self.__smtp_port
      
  def _set_smtp_port(self, v, load=False):
    """
    Setter method for smtp_port, mapped from YANG variable /admin_settings/smtp_port (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_port() directly.

    YANG Description: Smtp port, ex: 25
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="smtp-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_port must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__smtp_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_port(self):
    self.__smtp_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_auth_required(self):
    """
    Getter method for smtp_auth_required, mapped from YANG variable /admin_settings/smtp_auth_required (boolean)

    YANG Description: Authentication Required
    """
    return self.__smtp_auth_required
      
  def _set_smtp_auth_required(self, v, load=False):
    """
    Setter method for smtp_auth_required, mapped from YANG variable /admin_settings/smtp_auth_required (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_auth_required is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_auth_required() directly.

    YANG Description: Authentication Required
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="smtp-auth-required", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_auth_required must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-auth-required", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__smtp_auth_required = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_auth_required(self):
    self.__smtp_auth_required = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-auth-required", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_smtp_user_name(self):
    """
    Getter method for smtp_user_name, mapped from YANG variable /admin_settings/smtp_user_name (string)

    YANG Description: User Name
    """
    return self.__smtp_user_name
      
  def _set_smtp_user_name(self, v, load=False):
    """
    Setter method for smtp_user_name, mapped from YANG variable /admin_settings/smtp_user_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_user_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_user_name() directly.

    YANG Description: User Name
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="smtp-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_user_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__smtp_user_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_user_name(self):
    self.__smtp_user_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-user-name", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_password(self):
    """
    Getter method for smtp_password, mapped from YANG variable /admin_settings/smtp_password (string)

    YANG Description: Password
    """
    return self.__smtp_password
      
  def _set_smtp_password(self, v, load=False):
    """
    Setter method for smtp_password, mapped from YANG variable /admin_settings/smtp_password (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_password is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_password() directly.

    YANG Description: Password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="smtp-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_password must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__smtp_password = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_password(self):
    self.__smtp_password = YANGDynClass(base=unicode, is_leaf=True, yang_name="smtp-password", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_smtp_encryptionSSL(self):
    """
    Getter method for smtp_encryptionSSL, mapped from YANG variable /admin_settings/smtp_encryptionSSL (boolean)

    YANG Description: Encryption SSL
    """
    return self.__smtp_encryptionSSL
      
  def _set_smtp_encryptionSSL(self, v, load=False):
    """
    Setter method for smtp_encryptionSSL, mapped from YANG variable /admin_settings/smtp_encryptionSSL (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_encryptionSSL is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_encryptionSSL() directly.

    YANG Description: Encryption SSL
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="smtp-encryptionSSL", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_encryptionSSL must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionSSL", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__smtp_encryptionSSL = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_encryptionSSL(self):
    self.__smtp_encryptionSSL = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionSSL", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_smtp_encryptionTLS(self):
    """
    Getter method for smtp_encryptionTLS, mapped from YANG variable /admin_settings/smtp_encryptionTLS (boolean)

    YANG Description: Encryption TLS
    """
    return self.__smtp_encryptionTLS
      
  def _set_smtp_encryptionTLS(self, v, load=False):
    """
    Setter method for smtp_encryptionTLS, mapped from YANG variable /admin_settings/smtp_encryptionTLS (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_smtp_encryptionTLS is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_smtp_encryptionTLS() directly.

    YANG Description: Encryption TLS
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="smtp-encryptionTLS", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """smtp_encryptionTLS must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionTLS", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__smtp_encryptionTLS = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_smtp_encryptionTLS(self):
    self.__smtp_encryptionTLS = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="smtp-encryptionTLS", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_email_notifications(self):
    """
    Getter method for email_notifications, mapped from YANG variable /admin_settings/email_notifications (boolean)

    YANG Description: Enable or Disable Email Notifications
    """
    return self.__email_notifications
      
  def _set_email_notifications(self, v, load=False):
    """
    Setter method for email_notifications, mapped from YANG variable /admin_settings/email_notifications (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_email_notifications is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_email_notifications() directly.

    YANG Description: Enable or Disable Email Notifications
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="email-notifications", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """email_notifications must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="email-notifications", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__email_notifications = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_email_notifications(self):
    self.__email_notifications = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="email-notifications", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_license_expiry_threshold(self):
    """
    Getter method for license_expiry_threshold, mapped from YANG variable /admin_settings/license_expiry_threshold (string)

    YANG Description: License Expiry Threshold (days)
    """
    return self.__license_expiry_threshold
      
  def _set_license_expiry_threshold(self, v, load=False):
    """
    Setter method for license_expiry_threshold, mapped from YANG variable /admin_settings/license_expiry_threshold (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_license_expiry_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_license_expiry_threshold() directly.

    YANG Description: License Expiry Threshold (days)
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="license-expiry-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """license_expiry_threshold must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="license-expiry-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__license_expiry_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_license_expiry_threshold(self):
    self.__license_expiry_threshold = YANGDynClass(base=unicode, is_leaf=True, yang_name="license-expiry-threshold", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_python_remote_debug(self):
    """
    Getter method for python_remote_debug, mapped from YANG variable /admin_settings/python_remote_debug (boolean)

    YANG Description: Remote Debugging for Python
    """
    return self.__python_remote_debug
      
  def _set_python_remote_debug(self, v, load=False):
    """
    Setter method for python_remote_debug, mapped from YANG variable /admin_settings/python_remote_debug (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_python_remote_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_python_remote_debug() directly.

    YANG Description: Remote Debugging for Python
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="python-remote-debug", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """python_remote_debug must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="python-remote-debug", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__python_remote_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_python_remote_debug(self):
    self.__python_remote_debug = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="python-remote-debug", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_debug_server_port(self):
    """
    Getter method for debug_server_port, mapped from YANG variable /admin_settings/debug_server_port (uint32)

    YANG Description: Debug Server Port
    """
    return self.__debug_server_port
      
  def _set_debug_server_port(self, v, load=False):
    """
    Setter method for debug_server_port, mapped from YANG variable /admin_settings/debug_server_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_debug_server_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_debug_server_port() directly.

    YANG Description: Debug Server Port
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="debug-server-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """debug_server_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="debug-server-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)""",
        })

    self.__debug_server_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_debug_server_port(self):
    self.__debug_server_port = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..86400']}), is_leaf=True, yang_name="debug-server-port", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint32', is_config=True)


  def _get_approve_remove_dev_from_svc(self):
    """
    Getter method for approve_remove_dev_from_svc, mapped from YANG variable /admin_settings/approve_remove_dev_from_svc (boolean)

    YANG Description: Service Auto Retry
    """
    return self.__approve_remove_dev_from_svc
      
  def _set_approve_remove_dev_from_svc(self, v, load=False):
    """
    Setter method for approve_remove_dev_from_svc, mapped from YANG variable /admin_settings/approve_remove_dev_from_svc (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_approve_remove_dev_from_svc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_approve_remove_dev_from_svc() directly.

    YANG Description: Service Auto Retry
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="approve-remove-dev-from-svc", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """approve_remove_dev_from_svc must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approve-remove-dev-from-svc", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__approve_remove_dev_from_svc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_approve_remove_dev_from_svc(self):
    self.__approve_remove_dev_from_svc = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="approve-remove-dev-from-svc", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_enable_developer_mode(self):
    """
    Getter method for enable_developer_mode, mapped from YANG variable /admin_settings/enable_developer_mode (boolean)

    YANG Description: Enable Developer Mode
    """
    return self.__enable_developer_mode
      
  def _set_enable_developer_mode(self, v, load=False):
    """
    Setter method for enable_developer_mode, mapped from YANG variable /admin_settings/enable_developer_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_developer_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_developer_mode() directly.

    YANG Description: Enable Developer Mode
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-developer-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_developer_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-developer-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_developer_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_developer_mode(self):
    self.__enable_developer_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-developer-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_enable_maintenance_mode(self):
    """
    Getter method for enable_maintenance_mode, mapped from YANG variable /admin_settings/enable_maintenance_mode (boolean)

    YANG Description: Enable Maintenance Mode
    """
    return self.__enable_maintenance_mode
      
  def _set_enable_maintenance_mode(self, v, load=False):
    """
    Setter method for enable_maintenance_mode, mapped from YANG variable /admin_settings/enable_maintenance_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_maintenance_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_maintenance_mode() directly.

    YANG Description: Enable Maintenance Mode
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-maintenance-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_maintenance_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-maintenance-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__enable_maintenance_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_maintenance_mode(self):
    self.__enable_maintenance_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-maintenance-mode", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_show_module_prefixes(self):
    """
    Getter method for show_module_prefixes, mapped from YANG variable /admin_settings/show_module_prefixes (boolean)

    YANG Description: Show module prefixes for child-entities on Profile and Action items
    """
    return self.__show_module_prefixes
      
  def _set_show_module_prefixes(self, v, load=False):
    """
    Setter method for show_module_prefixes, mapped from YANG variable /admin_settings/show_module_prefixes (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_module_prefixes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_module_prefixes() directly.

    YANG Description: Show module prefixes for child-entities on Profile and Action items
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="show-module-prefixes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_module_prefixes must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="show-module-prefixes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__show_module_prefixes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_module_prefixes(self):
    self.__show_module_prefixes = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="show-module-prefixes", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_security_sanitizer_enabled(self):
    """
    Getter method for security_sanitizer_enabled, mapped from YANG variable /admin_settings/security_sanitizer_enabled (boolean)

    YANG Description: Enable sanatization filter
    """
    return self.__security_sanitizer_enabled
      
  def _set_security_sanitizer_enabled(self, v, load=False):
    """
    Setter method for security_sanitizer_enabled, mapped from YANG variable /admin_settings/security_sanitizer_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_security_sanitizer_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_security_sanitizer_enabled() directly.

    YANG Description: Enable sanatization filter
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="security-sanitizer-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """security_sanitizer_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="security-sanitizer-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)""",
        })

    self.__security_sanitizer_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_security_sanitizer_enabled(self):
    self.__security_sanitizer_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="security-sanitizer-enabled", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='boolean', is_config=True)


  def _get_sanitizer_execlude_url(self):
    """
    Getter method for sanitizer_execlude_url, mapped from YANG variable /admin_settings/sanitizer_execlude_url (string)

    YANG Description: Execulded URL in the sanatization filter
    """
    return self.__sanitizer_execlude_url
      
  def _set_sanitizer_execlude_url(self, v, load=False):
    """
    Setter method for sanitizer_execlude_url, mapped from YANG variable /admin_settings/sanitizer_execlude_url (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sanitizer_execlude_url is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sanitizer_execlude_url() directly.

    YANG Description: Execulded URL in the sanatization filter
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="sanitizer-execlude-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sanitizer_execlude_url must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-execlude-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__sanitizer_execlude_url = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sanitizer_execlude_url(self):
    self.__sanitizer_execlude_url = YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-execlude-url", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_sanitizer_patterns(self):
    """
    Getter method for sanitizer_patterns, mapped from YANG variable /admin_settings/sanitizer_patterns (string)

    YANG Description: Pattern to sanatize the data
    """
    return self.__sanitizer_patterns
      
  def _set_sanitizer_patterns(self, v, load=False):
    """
    Setter method for sanitizer_patterns, mapped from YANG variable /admin_settings/sanitizer_patterns (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sanitizer_patterns is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sanitizer_patterns() directly.

    YANG Description: Pattern to sanatize the data
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="sanitizer-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sanitizer_patterns must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__sanitizer_patterns = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sanitizer_patterns(self):
    self.__sanitizer_patterns = YANGDynClass(base=unicode, is_leaf=True, yang_name="sanitizer-patterns", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_password_expiry_days(self):
    """
    Getter method for password_expiry_days, mapped from YANG variable /admin_settings/password_expiry_days (uint16)

    YANG Description: User password will expire as per days given
    """
    return self.__password_expiry_days
      
  def _set_password_expiry_days(self, v, load=False):
    """
    Setter method for password_expiry_days, mapped from YANG variable /admin_settings/password_expiry_days (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_expiry_days is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_expiry_days() directly.

    YANG Description: User password will expire as per days given
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="password-expiry-days", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_expiry_days must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="password-expiry-days", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__password_expiry_days = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_expiry_days(self):
    self.__password_expiry_days = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..180']}), is_leaf=True, yang_name="password-expiry-days", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_password_pattern(self):
    """
    Getter method for password_pattern, mapped from YANG variable /admin_settings/password_pattern (string)

    YANG Description: Provide pattern  user password
    """
    return self.__password_pattern
      
  def _set_password_pattern(self, v, load=False):
    """
    Setter method for password_pattern, mapped from YANG variable /admin_settings/password_pattern (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_pattern is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_pattern() directly.

    YANG Description: Provide pattern  user password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="password-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_pattern must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="password-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)""",
        })

    self.__password_pattern = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_pattern(self):
    self.__password_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="password-pattern", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='string', is_config=True)


  def _get_password_min_length(self):
    """
    Getter method for password_min_length, mapped from YANG variable /admin_settings/password_min_length (uint16)

    YANG Description: Provide minumum length for user password
    """
    return self.__password_min_length
      
  def _set_password_min_length(self, v, load=False):
    """
    Setter method for password_min_length, mapped from YANG variable /admin_settings/password_min_length (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_min_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_min_length() directly.

    YANG Description: Provide minumum length for user password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-min-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_min_length must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-min-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__password_min_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_min_length(self):
    self.__password_min_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-min-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)


  def _get_password_max_length(self):
    """
    Getter method for password_max_length, mapped from YANG variable /admin_settings/password_max_length (uint16)

    YANG Description: Provide maximum length for user password
    """
    return self.__password_max_length
      
  def _set_password_max_length(self, v, load=False):
    """
    Setter method for password_max_length, mapped from YANG variable /admin_settings/password_max_length (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_password_max_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_password_max_length() directly.

    YANG Description: Provide maximum length for user password
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-max-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """password_max_length must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-max-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)""",
        })

    self.__password_max_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_password_max_length(self):
    self.__password_max_length = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="password-max-length", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='uint16', is_config=True)

  base_url = __builtin__.property(_get_base_url, _set_base_url)
  support_url = __builtin__.property(_get_support_url, _set_support_url)
  user_session_timeout = __builtin__.property(_get_user_session_timeout, _set_user_session_timeout)
  configuration_retrieval = __builtin__.property(_get_configuration_retrieval, _set_configuration_retrieval)
  syslog_configuration = __builtin__.property(_get_syslog_configuration, _set_syslog_configuration)
  persist_configuration = __builtin__.property(_get_persist_configuration, _set_persist_configuration)
  dry_run = __builtin__.property(_get_dry_run, _set_dry_run)
  auto_retry = __builtin__.property(_get_auto_retry, _set_auto_retry)
  number_of_retries = __builtin__.property(_get_number_of_retries, _set_number_of_retries)
  retry_wait_time = __builtin__.property(_get_retry_wait_time, _set_retry_wait_time)
  service_auto_retry = __builtin__.property(_get_service_auto_retry, _set_service_auto_retry)
  service_number_of_retries = __builtin__.property(_get_service_number_of_retries, _set_service_number_of_retries)
  service_retry_wait_time = __builtin__.property(_get_service_retry_wait_time, _set_service_retry_wait_time)
  auto_delete_stale_inv_data = __builtin__.property(_get_auto_delete_stale_inv_data, _set_auto_delete_stale_inv_data)
  delayed_event_buffer_time = __builtin__.property(_get_delayed_event_buffer_time, _set_delayed_event_buffer_time)
  enable_device_audit_trail_mode = __builtin__.property(_get_enable_device_audit_trail_mode, _set_enable_device_audit_trail_mode)
  enable_multi_tenancy = __builtin__.property(_get_enable_multi_tenancy, _set_enable_multi_tenancy)
  snmp_trap_configuration = __builtin__.property(_get_snmp_trap_configuration, _set_snmp_trap_configuration)
  snmp_configuration_contact = __builtin__.property(_get_snmp_configuration_contact, _set_snmp_configuration_contact)
  snmp_configuration_location = __builtin__.property(_get_snmp_configuration_location, _set_snmp_configuration_location)
  snmp_community_string = __builtin__.property(_get_snmp_community_string, _set_snmp_community_string)
  smtp_mail_from = __builtin__.property(_get_smtp_mail_from, _set_smtp_mail_from)
  smtp_host = __builtin__.property(_get_smtp_host, _set_smtp_host)
  smtp_port = __builtin__.property(_get_smtp_port, _set_smtp_port)
  smtp_auth_required = __builtin__.property(_get_smtp_auth_required, _set_smtp_auth_required)
  smtp_user_name = __builtin__.property(_get_smtp_user_name, _set_smtp_user_name)
  smtp_password = __builtin__.property(_get_smtp_password, _set_smtp_password)
  smtp_encryptionSSL = __builtin__.property(_get_smtp_encryptionSSL, _set_smtp_encryptionSSL)
  smtp_encryptionTLS = __builtin__.property(_get_smtp_encryptionTLS, _set_smtp_encryptionTLS)
  email_notifications = __builtin__.property(_get_email_notifications, _set_email_notifications)
  license_expiry_threshold = __builtin__.property(_get_license_expiry_threshold, _set_license_expiry_threshold)
  python_remote_debug = __builtin__.property(_get_python_remote_debug, _set_python_remote_debug)
  debug_server_port = __builtin__.property(_get_debug_server_port, _set_debug_server_port)
  approve_remove_dev_from_svc = __builtin__.property(_get_approve_remove_dev_from_svc, _set_approve_remove_dev_from_svc)
  enable_developer_mode = __builtin__.property(_get_enable_developer_mode, _set_enable_developer_mode)
  enable_maintenance_mode = __builtin__.property(_get_enable_maintenance_mode, _set_enable_maintenance_mode)
  show_module_prefixes = __builtin__.property(_get_show_module_prefixes, _set_show_module_prefixes)
  security_sanitizer_enabled = __builtin__.property(_get_security_sanitizer_enabled, _set_security_sanitizer_enabled)
  sanitizer_execlude_url = __builtin__.property(_get_sanitizer_execlude_url, _set_sanitizer_execlude_url)
  sanitizer_patterns = __builtin__.property(_get_sanitizer_patterns, _set_sanitizer_patterns)
  password_expiry_days = __builtin__.property(_get_password_expiry_days, _set_password_expiry_days)
  password_pattern = __builtin__.property(_get_password_pattern, _set_password_pattern)
  password_min_length = __builtin__.property(_get_password_min_length, _set_password_min_length)
  password_max_length = __builtin__.property(_get_password_max_length, _set_password_max_length)


  _pyangbind_elements = collections.OrderedDict([('base_url', base_url), ('support_url', support_url), ('user_session_timeout', user_session_timeout), ('configuration_retrieval', configuration_retrieval), ('syslog_configuration', syslog_configuration), ('persist_configuration', persist_configuration), ('dry_run', dry_run), ('auto_retry', auto_retry), ('number_of_retries', number_of_retries), ('retry_wait_time', retry_wait_time), ('service_auto_retry', service_auto_retry), ('service_number_of_retries', service_number_of_retries), ('service_retry_wait_time', service_retry_wait_time), ('auto_delete_stale_inv_data', auto_delete_stale_inv_data), ('delayed_event_buffer_time', delayed_event_buffer_time), ('enable_device_audit_trail_mode', enable_device_audit_trail_mode), ('enable_multi_tenancy', enable_multi_tenancy), ('snmp_trap_configuration', snmp_trap_configuration), ('snmp_configuration_contact', snmp_configuration_contact), ('snmp_configuration_location', snmp_configuration_location), ('snmp_community_string', snmp_community_string), ('smtp_mail_from', smtp_mail_from), ('smtp_host', smtp_host), ('smtp_port', smtp_port), ('smtp_auth_required', smtp_auth_required), ('smtp_user_name', smtp_user_name), ('smtp_password', smtp_password), ('smtp_encryptionSSL', smtp_encryptionSSL), ('smtp_encryptionTLS', smtp_encryptionTLS), ('email_notifications', email_notifications), ('license_expiry_threshold', license_expiry_threshold), ('python_remote_debug', python_remote_debug), ('debug_server_port', debug_server_port), ('approve_remove_dev_from_svc', approve_remove_dev_from_svc), ('enable_developer_mode', enable_developer_mode), ('enable_maintenance_mode', enable_maintenance_mode), ('show_module_prefixes', show_module_prefixes), ('security_sanitizer_enabled', security_sanitizer_enabled), ('sanitizer_execlude_url', sanitizer_execlude_url), ('sanitizer_patterns', sanitizer_patterns), ('password_expiry_days', password_expiry_days), ('password_pattern', password_pattern), ('password_min_length', password_min_length), ('password_max_length', password_max_length), ])


