
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import collections
def isEmpty(val):
    """ Check weather val is empty 
    
    Args:
    Val : Value need to check
    Returns:
    True: if the value is empty
    False: if the value is not empty
    """
    if(val == None):
        return True
    if isinstance(val, list):
        return len(val) == 0
    if isinstance(val, str):
        return val.strip() == ''
    if isinstance(val, unicode):
        return str(val).strip() == ''
       
    return False
class tenant_capacity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module controller - based on the path /tenants/tenant/tenant-capacity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_netconf_operation_type', '_path_helper', '_yang_name', '_extmethods', '_module_name', '_namespace','__max_no_of_loadbalancers','__used_no_of_loadbalancers','__max_no_of_firewalls','__used_no_of_firewalls','__max_no_of_switches','__used_no_of_switches','__max_no_of_routers','__used_no_of_routers','__max_no_of_devices','__used_no_of_devices',)

  _yang_name = 'tenant-capacity'
  _module_name = 'tenants'
  _namespace = 'http://anutanetworks.com/controller'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__used_no_of_devices = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    self.__used_no_of_routers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    self.__used_no_of_loadbalancers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    self.__max_no_of_routers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__max_no_of_devices = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__used_no_of_firewalls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    self.__max_no_of_firewalls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__used_no_of_switches = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    self.__max_no_of_switches = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    self.__max_no_of_loadbalancers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tenants', u'tenant', u'tenant-capacity']

  def _get_max_no_of_loadbalancers(self):
    """
    Getter method for max_no_of_loadbalancers, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_loadbalancers (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__max_no_of_loadbalancers
      
  def _set_max_no_of_loadbalancers(self, v, load=False):
    """
    Setter method for max_no_of_loadbalancers, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_loadbalancers (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_no_of_loadbalancers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_no_of_loadbalancers() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_no_of_loadbalancers must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__max_no_of_loadbalancers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_no_of_loadbalancers(self):
    self.__max_no_of_loadbalancers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_used_no_of_loadbalancers(self):
    """
    Getter method for used_no_of_loadbalancers, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_loadbalancers (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__used_no_of_loadbalancers
      
  def _set_used_no_of_loadbalancers(self, v, load=False):
    """
    Setter method for used_no_of_loadbalancers, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_loadbalancers (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used_no_of_loadbalancers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used_no_of_loadbalancers() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used_no_of_loadbalancers must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)""",
        })

    self.__used_no_of_loadbalancers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used_no_of_loadbalancers(self):
    self.__used_no_of_loadbalancers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-loadbalancers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)


  def _get_max_no_of_firewalls(self):
    """
    Getter method for max_no_of_firewalls, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_firewalls (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__max_no_of_firewalls
      
  def _set_max_no_of_firewalls(self, v, load=False):
    """
    Setter method for max_no_of_firewalls, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_firewalls (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_no_of_firewalls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_no_of_firewalls() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_no_of_firewalls must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__max_no_of_firewalls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_no_of_firewalls(self):
    self.__max_no_of_firewalls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_used_no_of_firewalls(self):
    """
    Getter method for used_no_of_firewalls, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_firewalls (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__used_no_of_firewalls
      
  def _set_used_no_of_firewalls(self, v, load=False):
    """
    Setter method for used_no_of_firewalls, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_firewalls (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used_no_of_firewalls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used_no_of_firewalls() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used_no_of_firewalls must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)""",
        })

    self.__used_no_of_firewalls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used_no_of_firewalls(self):
    self.__used_no_of_firewalls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-firewalls", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)


  def _get_max_no_of_switches(self):
    """
    Getter method for max_no_of_switches, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_switches (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__max_no_of_switches
      
  def _set_max_no_of_switches(self, v, load=False):
    """
    Setter method for max_no_of_switches, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_switches (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_no_of_switches is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_no_of_switches() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_no_of_switches must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__max_no_of_switches = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_no_of_switches(self):
    self.__max_no_of_switches = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_used_no_of_switches(self):
    """
    Getter method for used_no_of_switches, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_switches (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__used_no_of_switches
      
  def _set_used_no_of_switches(self, v, load=False):
    """
    Setter method for used_no_of_switches, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_switches (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used_no_of_switches is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used_no_of_switches() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used_no_of_switches must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)""",
        })

    self.__used_no_of_switches = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used_no_of_switches(self):
    self.__used_no_of_switches = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-switches", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)


  def _get_max_no_of_routers(self):
    """
    Getter method for max_no_of_routers, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_routers (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__max_no_of_routers
      
  def _set_max_no_of_routers(self, v, load=False):
    """
    Setter method for max_no_of_routers, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_routers (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_no_of_routers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_no_of_routers() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_no_of_routers must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__max_no_of_routers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_no_of_routers(self):
    self.__max_no_of_routers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_used_no_of_routers(self):
    """
    Getter method for used_no_of_routers, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_routers (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__used_no_of_routers
      
  def _set_used_no_of_routers(self, v, load=False):
    """
    Setter method for used_no_of_routers, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_routers (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used_no_of_routers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used_no_of_routers() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used_no_of_routers must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)""",
        })

    self.__used_no_of_routers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used_no_of_routers(self):
    self.__used_no_of_routers = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-routers", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)


  def _get_max_no_of_devices(self):
    """
    Getter method for max_no_of_devices, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_devices (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__max_no_of_devices
      
  def _set_max_no_of_devices(self, v, load=False):
    """
    Setter method for max_no_of_devices, mapped from YANG variable /tenants/tenant/tenant_capacity/max_no_of_devices (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_no_of_devices is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_no_of_devices() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_no_of_devices must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)""",
        })

    self.__max_no_of_devices = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_no_of_devices(self):
    self.__max_no_of_devices = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="max-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=True)


  def _get_used_no_of_devices(self):
    """
    Getter method for used_no_of_devices, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_devices (int32)

    YANG Description: -2147483648..2147483647
    """
    return self.__used_no_of_devices
      
  def _set_used_no_of_devices(self, v, load=False):
    """
    Setter method for used_no_of_devices, mapped from YANG variable /tenants/tenant/tenant_capacity/used_no_of_devices (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_used_no_of_devices is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_used_no_of_devices() directly.

    YANG Description: -2147483648..2147483647
    """
    try:
      if isEmpty(v):
        return
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """used_no_of_devices must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)""",
        })

    self.__used_no_of_devices = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_used_no_of_devices(self):
    self.__used_no_of_devices = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="used-no-of-devices", module_name="controller", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://anutanetworks.com/controller', defining_module='controller', yang_type='int32', is_config=False)

  max_no_of_loadbalancers = __builtin__.property(_get_max_no_of_loadbalancers, _set_max_no_of_loadbalancers)
  used_no_of_loadbalancers = __builtin__.property(_get_used_no_of_loadbalancers)
  max_no_of_firewalls = __builtin__.property(_get_max_no_of_firewalls, _set_max_no_of_firewalls)
  used_no_of_firewalls = __builtin__.property(_get_used_no_of_firewalls)
  max_no_of_switches = __builtin__.property(_get_max_no_of_switches, _set_max_no_of_switches)
  used_no_of_switches = __builtin__.property(_get_used_no_of_switches)
  max_no_of_routers = __builtin__.property(_get_max_no_of_routers, _set_max_no_of_routers)
  used_no_of_routers = __builtin__.property(_get_used_no_of_routers)
  max_no_of_devices = __builtin__.property(_get_max_no_of_devices, _set_max_no_of_devices)
  used_no_of_devices = __builtin__.property(_get_used_no_of_devices)


  _pyangbind_elements = collections.OrderedDict([('max_no_of_loadbalancers', max_no_of_loadbalancers), ('used_no_of_loadbalancers', used_no_of_loadbalancers), ('max_no_of_firewalls', max_no_of_firewalls), ('used_no_of_firewalls', used_no_of_firewalls), ('max_no_of_switches', max_no_of_switches), ('used_no_of_switches', used_no_of_switches), ('max_no_of_routers', max_no_of_routers), ('used_no_of_routers', used_no_of_routers), ('max_no_of_devices', max_no_of_devices), ('used_no_of_devices', used_no_of_devices), ])


