#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class access_lists(object):
  #XPATH devices/device/access-lists/access-list
  class access_list(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "acl:access-lists"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      access_list_object_list = self.validate_inputs_form_payload(mapping_dict)

      for access_list_object in access_list_object_list:
        #fetch payload
        access_list_payload = access_list_object.getxml(filter=True)
        util.log_debug('access_list_payload %s'%access_list_payload)
        payload_list.append(access_list_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "acl:access-lists"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      access_list_object_list = self.validate_inputs_form_payload(mapping_dict)

      for access_list_object in access_list_object_list:
        #fetch payload
        access_list_payload = access_list_object.getxml(filter=True)

        util.log_debug('access_list_payload %s'%access_list_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=access_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:access-lists"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      access_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/access-list=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, access_list_object in enumerate(access_list_object_list):
        #fetch payload
        access_list_payload = access_list_object.getxml(filter=True)

        util.log_debug('update access_list_payload %s'%access_list_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=access_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:access-lists"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/access-list=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      access_list_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import access_lists
        access_list_object = access_lists.access_list.access_list()
        access_list_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
            access_list_object.mode = mapping_dict.get('mode', None)
          else:
            access_list_object.mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('start_remark', None)) != ''):
            access_list_object.start_remark = mapping_dict.get('start_remark', None)
          else:
            access_list_object.start_remark._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('end_remark', None)) != ''):
            access_list_object.end_remark = mapping_dict.get('end_remark', None)
          else:
            access_list_object.end_remark._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('acl_type', None)) != ''):
            access_list_object.acl_type = mapping_dict.get('acl_type', None)
          else:
            access_list_object.acl_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_zone', None)) != ''):
            access_list_object.source_zone = mapping_dict.get('source_zone', None)
          else:
            access_list_object.source_zone._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dest_zone', None)) != ''):
            access_list_object.dest_zone = mapping_dict.get('dest_zone', None)
          else:
            access_list_object.dest_zone._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
            access_list_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
          else:
            access_list_object.virtual_device_name._empty_tag = True
        except TypeError:
          pass
        access_list_object_list.append(access_list_object)

      return access_list_object_list

    class acl_rules(object):
      #XPATH devices/device/access-lists/access-list/acl-rules/acl-rule
      class acl_rule(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, access_list_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( access_list_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(access_list_name, list):
            access_list_name_list = [access_list_name]
          else:
            access_list_name_list = access_list_name

          for access_list_name in access_list_name_list:
            ##prepare rcpath
            rcpath = "acl:access-lists/access-list=%s/acl-rules"%(util.make_interfacename(access_list_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

          for acl_rule_object in acl_rule_object_list:
            #fetch payload
            acl_rule_payload = acl_rule_object.getxml(filter=True)
            util.log_debug('acl_rule_payload %s'%acl_rule_payload)
            payload_list.append(acl_rule_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, access_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( access_list_name)

          #convert parent keys to list
          if not isinstance(access_list_name, list):
            access_list_name_list = [access_list_name]
          else:
            access_list_name_list = access_list_name

          for access_list_name in access_list_name_list:
            ##prepare rcpath
            rcpath = "acl:access-lists/access-list=%s/acl-rules"%(util.make_interfacename(access_list_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

          for acl_rule_object in acl_rule_object_list:
            #fetch payload
            acl_rule_payload = acl_rule_object.getxml(filter=True)

            util.log_debug('acl_rule_payload %s'%acl_rule_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=acl_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, access_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( access_list_name)


          ##prepare rcpath
          rcpath = "acl:access-lists/access-list=%s/acl-rules"%(util.make_interfacename(access_list_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/acl-rule=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, acl_rule_object in enumerate(acl_rule_object_list):
            #fetch payload
            acl_rule_payload = acl_rule_object.getxml(filter=True)

            util.log_debug('update acl_rule_payload %s'%acl_rule_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=acl_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, access_list_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( access_list_name)


          if not isinstance(access_list_name, list):
            access_list_name_list = [access_list_name]
          else:
            access_list_name_list = access_list_name

          for access_list_name in access_list_name_list:
            ##prepare rcpath
            rcpath = "acl:access-lists/access-list=%s/acl-rules"%(util.make_interfacename(access_list_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/acl-rule=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, access_list_name):
          #Parent Key Validations
          if util.isEmpty(access_list_name):
            raise Exception("'access_list_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")
          if util.isEmpty(mapping_dict.get('action')):
            raise Exception("'action' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          acl_rule_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.access_lists.access_list import acl_rules
            acl_rule_object = acl_rules.acl_rule.acl_rule()
            acl_rule_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('extra_options', None)) != ''):
                acl_rule_object.extra_options = mapping_dict.get('extra_options', None)
              else:
                acl_rule_object.extra_options._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                acl_rule_object.description = mapping_dict.get('description', None)
              else:
                acl_rule_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                acl_rule_object.family = mapping_dict.get('family', None)
              else:
                acl_rule_object.family._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('payload_protocol', None)) != ''):
                acl_rule_object.payload_protocol = mapping_dict.get('payload_protocol', None)
              else:
                acl_rule_object.payload_protocol._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('linenumber', None)) != ''):
                acl_rule_object.linenumber = mapping_dict.get('linenumber', None)
              else:
                acl_rule_object.linenumber._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
                acl_rule_object.action = mapping_dict.get('action', None)
              else:
                acl_rule_object.action._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('layer4protocol', None)) != ''):
                acl_rule_object.layer4protocol = mapping_dict.get('layer4protocol', None)
              else:
                acl_rule_object.layer4protocol._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('application', None)) != ''):
                acl_rule_object.application = mapping_dict.get('application', None)
              else:
                acl_rule_object.application._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_condition_type', None)) != ''):
                acl_rule_object.source_condition_type = mapping_dict.get('source_condition_type', None)
              else:
                acl_rule_object.source_condition_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                acl_rule_object.source_ip = mapping_dict.get('source_ip', None)
              else:
                acl_rule_object.source_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_mask', None)) != ''):
                acl_rule_object.source_mask = mapping_dict.get('source_mask', None)
              else:
                acl_rule_object.source_mask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_obj_name', None)) != ''):
                acl_rule_object.source_obj_name = mapping_dict.get('source_obj_name', None)
              else:
                acl_rule_object.source_obj_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('service_obj_name', None)) != ''):
                acl_rule_object.service_obj_name = mapping_dict.get('service_obj_name', None)
              else:
                acl_rule_object.service_obj_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_port_operator', None)) != ''):
                acl_rule_object.source_port_operator = mapping_dict.get('source_port_operator', None)
              else:
                acl_rule_object.source_port_operator._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('port_name', None)) != ''):
                acl_rule_object.port_name = mapping_dict.get('port_name', None)
              else:
                acl_rule_object.port_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('policer_name', None)) != ''):
                acl_rule_object.policer_name = mapping_dict.get('policer_name', None)
              else:
                acl_rule_object.policer_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_port', None)) != ''):
                acl_rule_object.source_port = mapping_dict.get('source_port', None)
              else:
                acl_rule_object.source_port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_condition_type', None)) != ''):
                acl_rule_object.dest_condition_type = mapping_dict.get('dest_condition_type', None)
              else:
                acl_rule_object.dest_condition_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_ip', None)) != ''):
                acl_rule_object.dest_ip = mapping_dict.get('dest_ip', None)
              else:
                acl_rule_object.dest_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_mask', None)) != ''):
                acl_rule_object.dest_mask = mapping_dict.get('dest_mask', None)
              else:
                acl_rule_object.dest_mask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_obj_name', None)) != ''):
                acl_rule_object.dest_obj_name = mapping_dict.get('dest_obj_name', None)
              else:
                acl_rule_object.dest_obj_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_port_operator', None)) != ''):
                acl_rule_object.dest_port_operator = mapping_dict.get('dest_port_operator', None)
              else:
                acl_rule_object.dest_port_operator._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_port', None)) != ''):
                acl_rule_object.dest_port = mapping_dict.get('dest_port', None)
              else:
                acl_rule_object.dest_port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('match_packets', None)) != ''):
                acl_rule_object.match_packets = mapping_dict.get('match_packets', None)
              else:
                acl_rule_object.match_packets._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('precedence', None)) != ''):
                acl_rule_object.precedence = mapping_dict.get('precedence', None)
              else:
                acl_rule_object.precedence._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('next_acl_rule_name', None)) != ''):
                acl_rule_object.next_acl_rule_name = mapping_dict.get('next_acl_rule_name', None)
              else:
                acl_rule_object.next_acl_rule_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prev_acl_rule_name', None)) != ''):
                acl_rule_object.prev_acl_rule_name = mapping_dict.get('prev_acl_rule_name', None)
              else:
                acl_rule_object.prev_acl_rule_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('next_acl_rule_linenumber', None)) != ''):
                acl_rule_object.next_acl_rule_linenumber = mapping_dict.get('next_acl_rule_linenumber', None)
              else:
                acl_rule_object.next_acl_rule_linenumber._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prev_acl_rule_linenumber', None)) != ''):
                acl_rule_object.prev_acl_rule_linenumber = mapping_dict.get('prev_acl_rule_linenumber', None)
              else:
                acl_rule_object.prev_acl_rule_linenumber._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('log_action', None)) != ''):
                acl_rule_object.log_action = mapping_dict.get('log_action', None)
              else:
                acl_rule_object.log_action._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('log_traffic', None)) != ''):
                acl_rule_object.log_traffic = mapping_dict.get('log_traffic', None)
              else:
                acl_rule_object.log_traffic._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('rule_nat', None)) != ''):
                acl_rule_object.rule_nat = mapping_dict.get('rule_nat', None)
              else:
                acl_rule_object.rule_nat._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('schedule', None)) != ''):
                acl_rule_object.schedule = mapping_dict.get('schedule', None)
              else:
                acl_rule_object.schedule._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('rule_status', None)) != ''):
                acl_rule_object.rule_status = mapping_dict.get('rule_status', None)
              else:
                acl_rule_object.rule_status._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_sensor', None)) != ''):
                acl_rule_object.ips_sensor = mapping_dict.get('ips_sensor', None)
              else:
                acl_rule_object.ips_sensor._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ssl_profile', None)) != ''):
                acl_rule_object.ssl_profile = mapping_dict.get('ssl_profile', None)
              else:
                acl_rule_object.ssl_profile._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
                acl_rule_object.tag = mapping_dict.get('tag', None)
              else:
                acl_rule_object.tag._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('service', None)) != ''):
                acl_rule_object.service = mapping_dict.get('service', None)
              else:
                acl_rule_object.service._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('sample', None)) != ''):
                acl_rule_object.sample = mapping_dict.get('sample', None)
              else:
                acl_rule_object.sample._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('counter', None)) != ''):
                acl_rule_object.counter = mapping_dict.get('counter', None)
              else:
                acl_rule_object.counter._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_prefix_list', None)) != ''):
                acl_rule_object.dest_prefix_list = mapping_dict.get('dest_prefix_list', None)
              else:
                acl_rule_object.dest_prefix_list._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('packet_length', None)) != ''):
                acl_rule_object.packet_length = mapping_dict.get('packet_length', None)
              else:
                acl_rule_object.packet_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('src_prefix_list', None)) != ''):
                acl_rule_object.src_prefix_list = mapping_dict.get('src_prefix_list', None)
              else:
                acl_rule_object.src_prefix_list._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('routing_instance', None)) != ''):
                acl_rule_object.routing_instance = mapping_dict.get('routing_instance', None)
              else:
                acl_rule_object.routing_instance._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_zone', None)) != ''):
                acl_rule_object.source_zone = mapping_dict.get('source_zone', None)
              else:
                acl_rule_object.source_zone._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_zone', None)) != ''):
                acl_rule_object.dest_zone = mapping_dict.get('dest_zone', None)
              else:
                acl_rule_object.dest_zone._empty_tag = True
            except TypeError:
              pass
            acl_rule_object_list.append(acl_rule_object)

          return acl_rule_object_list

