#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/linecard
class linecard(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    linecard_object_list = self.validate_inputs_form_payload(mapping_dict)

    for linecard_object in linecard_object_list:
      #fetch payload
      linecard_payload = linecard_object.getxml(filter=True)
      util.log_debug('linecard_payload %s'%linecard_payload)
      payload_list.append(linecard_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    linecard_object_list = self.validate_inputs_form_payload(mapping_dict)

    for linecard_object in linecard_object_list:
      #fetch payload
      linecard_payload = linecard_object.getxml(filter=True)

      util.log_debug('linecard_payload %s'%linecard_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=linecard_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    linecard_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list
    slot_number = mapping_dict.get('slot_number')
    if not isinstance(slot_number, list):
      slot_number = [slot_number]
    switch_number = mapping_dict.get('switch_number')
    if not isinstance(switch_number, list):
      switch_number = [switch_number]

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    for slot_number_iterator in slot_number:
      for switch_number_iterator in switch_number:
        rcpath_tmp =  rcpath+"/linecard=%s,%s"%(util.make_interfacename(slot_number_iterator),util.make_interfacename(switch_number_iterator))
        rcpath_list.append(rcpath_tmp)
    for rc_counter, linecard_object in enumerate(linecard_object_list):
      #fetch payload
      linecard_payload = linecard_object.getxml(filter=True)

      util.log_debug('update linecard_payload %s'%linecard_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=linecard_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs
    if util.isEmpty(mapping_dict.get('slot_number')):
      raise Exception("'slot_number' cannot be empty")
    if util.isEmpty(mapping_dict.get('switch_number')):
      raise Exception("'switch_number' cannot be empty")

    #convert keys to list
    slot_number = mapping_dict.get('slot_number')
    if not isinstance(slot_number, list):
      slot_number = [slot_number]
    switch_number = mapping_dict.get('switch_number')
    if not isinstance(switch_number, list):
      switch_number = [switch_number]

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    for slot_number_iterator in slot_number:
      for switch_number_iterator in switch_number:
        rcpath_tmp =  rcpath+"/linecard=%s,%s"%(util.make_interfacename(slot_number_iterator),util.make_interfacename(switch_number_iterator))
        rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs
    if util.isEmpty(mapping_dict.get('slot_number')):
      raise Exception("'slot_number' cannot be empty")
    if util.isEmpty(mapping_dict.get('switch_number')):
      raise Exception("'switch_number' cannot be empty")
    if util.isEmpty(mapping_dict.get('card_type')):
      raise Exception("'card_type' cannot be empty")

    #convert keys to list
    slot_number = mapping_dict.get('slot_number')
    if not isinstance(slot_number, list):
      slot_number = [slot_number]
    switch_number = mapping_dict.get('switch_number')
    if not isinstance(switch_number, list):
      switch_number = [switch_number]

    #prepare payload
    linecard_object_list = []
    for slot_number_iterator in slot_number:
      for switch_number_iterator in switch_number:
        from servicemodel.controller.devices import device
        linecard_object = device.linecard.linecard()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('card_index', None)) != ''):
            linecard_object.card_index = mapping_dict.get('card_index', None)
          else:
            linecard_object.card_index._empty_tag = True
        except TypeError:
          pass
        linecard_object.slot_number = slot_number_iterator
        linecard_object.switch_number = switch_number_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('card_type', None)) != ''):
            linecard_object.card_type = mapping_dict.get('card_type', None)
          else:
            linecard_object.card_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('card_oper_status', None)) != ''):
            linecard_object.card_oper_status = mapping_dict.get('card_oper_status', None)
          else:
            linecard_object.card_oper_status._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('line_card_category', None)) != ''):
            linecard_object.line_card_category = mapping_dict.get('line_card_category', None)
          else:
            linecard_object.line_card_category._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('card_desc', None)) != ''):
            linecard_object.card_desc = mapping_dict.get('card_desc', None)
          else:
            linecard_object.card_desc._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hw_version', None)) != ''):
            linecard_object.hw_version = mapping_dict.get('hw_version', None)
          else:
            linecard_object.hw_version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('sw_version', None)) != ''):
            linecard_object.sw_version = mapping_dict.get('sw_version', None)
          else:
            linecard_object.sw_version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('serial_number', None)) != ''):
            linecard_object.serial_number = mapping_dict.get('serial_number', None)
          else:
            linecard_object.serial_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
            linecard_object.interface_name = mapping_dict.get('interface_name', None)
          else:
            linecard_object.interface_name._empty_tag = True
        except TypeError:
          pass
        linecard_object_list.append(linecard_object)

    return linecard_object_list

