#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class virtual_devices(object):
  #XPATH devices/device/virtual-devices/virtual-device
  class virtual_device(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:virtual-devices"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_device_object_list = self.validate_inputs_form_payload(mapping_dict)

      for virtual_device_object in virtual_device_object_list:
        #fetch payload
        virtual_device_payload = virtual_device_object.getxml(filter=True)
        util.log_debug('virtual_device_payload %s'%virtual_device_payload)
        payload_list.append(virtual_device_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:virtual-devices"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_device_object_list = self.validate_inputs_form_payload(mapping_dict)

      for virtual_device_object in virtual_device_object_list:
        #fetch payload
        virtual_device_payload = virtual_device_object.getxml(filter=True)

        util.log_debug('virtual_device_payload %s'%virtual_device_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=virtual_device_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:virtual-devices"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_device_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/virtual-device=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, virtual_device_object in enumerate(virtual_device_object_list):
        #fetch payload
        virtual_device_payload = virtual_device_object.getxml(filter=True)

        util.log_debug('update virtual_device_payload %s'%virtual_device_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=virtual_device_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:virtual-devices"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/virtual-device=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      virtual_device_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import virtual_devices
        virtual_device_object = virtual_devices.virtual_device.virtual_device()
        virtual_device_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('transit_vlanId', None)) != ''):
            virtual_device_object.transit_vlanId = mapping_dict.get('transit_vlanId', None)
          else:
            virtual_device_object.transit_vlanId._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('file_store', None)) != ''):
            virtual_device_object.file_store = mapping_dict.get('file_store', None)
          else:
            virtual_device_object.file_store._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('visible_interface', None)) != ''):
            virtual_device_object.visible_interface = mapping_dict.get('visible_interface', None)
          else:
            virtual_device_object.visible_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('permit_internal_network_traffic', None)) != ''):
            virtual_device_object.permit_internal_network_traffic = mapping_dict.get('permit_internal_network_traffic', None)
          else:
            virtual_device_object.permit_internal_network_traffic._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('failovergroup', None)) != ''):
            virtual_device_object.failovergroup = mapping_dict.get('failovergroup', None)
          else:
            virtual_device_object.failovergroup._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nat_control', None)) != ''):
            virtual_device_object.nat_control = mapping_dict.get('nat_control', None)
          else:
            virtual_device_object.nat_control._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('is_commit', None)) != ''):
            virtual_device_object.is_commit = mapping_dict.get('is_commit', None)
          else:
            virtual_device_object.is_commit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hostname', None)) != ''):
            virtual_device_object.hostname = mapping_dict.get('hostname', None)
          else:
            virtual_device_object.hostname._empty_tag = True
        except TypeError:
          pass
        virtual_device_object_list.append(virtual_device_object)

      return virtual_device_object_list

    #XPATH devices/device/virtual-devices/virtual-device/interface
    class interface(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)
          util.log_debug('interface_payload %s'%interface_payload)
          payload_list.append(interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('interface_payload %s'%interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_name_iterator in interface_name:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, interface_object in enumerate(interface_object_list):
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('update interface_payload %s'%interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_name')):
          raise Exception("'interface_name' cannot be empty")

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_name_iterator in interface_name:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_name')):
          raise Exception("'interface_name' cannot be empty")

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare payload
        interface_object_list = []
        for interface_name_iterator in interface_name:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          interface_object = virtual_device.interface.interface()
          interface_object.interface_name = interface_name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('inside_name', None)) != ''):
              interface_object.inside_name = mapping_dict.get('inside_name', None)
            else:
              interface_object.inside_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              interface_object.description = mapping_dict.get('description', None)
            else:
              interface_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('transit_vlanId', None)) != ''):
              interface_object.transit_vlanId = mapping_dict.get('transit_vlanId', None)
            else:
              interface_object.transit_vlanId._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('shutdown', None)) != ''):
              interface_object.shutdown = mapping_dict.get('shutdown', None)
            else:
              interface_object.shutdown._empty_tag = True
          except TypeError:
            pass
          interface_object_list.append(interface_object)

        return interface_object_list

    #XPATH devices/device/virtual-devices/virtual-device/user
    class user(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        user_object_list = self.validate_inputs_form_payload(mapping_dict)

        for user_object in user_object_list:
          #fetch payload
          user_payload = user_object.getxml(filter=True)
          util.log_debug('user_payload %s'%user_payload)
          payload_list.append(user_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        user_object_list = self.validate_inputs_form_payload(mapping_dict)

        for user_object in user_object_list:
          #fetch payload
          user_payload = user_object.getxml(filter=True)

          util.log_debug('user_payload %s'%user_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        user_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/user"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, user_object in enumerate(user_object_list):
          #fetch payload
          user_payload = user_object.getxml(filter=True)

          util.log_debug('update user_payload %s'%user_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/user"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        user_object_list = []
        from servicemodel.controller.devices.device.virtual_devices import virtual_device
        user_object = virtual_device.user.user()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('username', None)) != ''):
            user_object.username = mapping_dict.get('username', None)
          else:
            user_object.username._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
            user_object.password = mapping_dict.get('password', None)
          else:
            user_object.password._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('privilege', None)) != ''):
            user_object.privilege = mapping_dict.get('privilege', None)
          else:
            user_object.privilege._empty_tag = True
        except TypeError:
          pass
        user_object_list.append(user_object)

        return user_object_list

    #XPATH devices/device/virtual-devices/virtual-device/resourceclass-member
    class resourceclass_member(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        resourceclass_member_object_list = self.validate_inputs_form_payload(mapping_dict)

        for resourceclass_member_object in resourceclass_member_object_list:
          #fetch payload
          resourceclass_member_payload = resourceclass_member_object.getxml(filter=True)
          util.log_debug('resourceclass_member_payload %s'%resourceclass_member_payload)
          payload_list.append(resourceclass_member_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        resourceclass_member_object_list = self.validate_inputs_form_payload(mapping_dict)

        for resourceclass_member_object in resourceclass_member_object_list:
          #fetch payload
          resourceclass_member_payload = resourceclass_member_object.getxml(filter=True)

          util.log_debug('resourceclass_member_payload %s'%resourceclass_member_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=resourceclass_member_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        resourceclass_member_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        resourceclass_member = mapping_dict.get('resourceclass_member')
        if not isinstance(resourceclass_member, list):
          resourceclass_member = [resourceclass_member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for resourceclass_member_iterator in resourceclass_member:
          rcpath_tmp =  rcpath+"/resourceclass-member=%s"%(util.make_interfacename(resourceclass_member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, resourceclass_member_object in enumerate(resourceclass_member_object_list):
          #fetch payload
          resourceclass_member_payload = resourceclass_member_object.getxml(filter=True)

          util.log_debug('update resourceclass_member_payload %s'%resourceclass_member_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=resourceclass_member_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('resourceclass_member')):
          raise Exception("'resourceclass_member' cannot be empty")

        #convert keys to list
        resourceclass_member = mapping_dict.get('resourceclass_member')
        if not isinstance(resourceclass_member, list):
          resourceclass_member = [resourceclass_member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for resourceclass_member_iterator in resourceclass_member:
          rcpath_tmp =  rcpath+"/resourceclass-member=%s"%(util.make_interfacename(resourceclass_member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('resourceclass_member')):
          raise Exception("'resourceclass_member' cannot be empty")

        #convert keys to list
        resourceclass_member = mapping_dict.get('resourceclass_member')
        if not isinstance(resourceclass_member, list):
          resourceclass_member = [resourceclass_member]

        #prepare payload
        resourceclass_member_object_list = []
        for resourceclass_member_iterator in resourceclass_member:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          resourceclass_member_object = virtual_device.resourceclass_member.resourceclass_member()
          resourceclass_member_object.resourceclass_member = resourceclass_member_iterator
          resourceclass_member_object_list.append(resourceclass_member_object)

        return resourceclass_member_object_list

    #XPATH devices/device/virtual-devices/virtual-device/monitor-interface
    class monitor_interface(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        monitor_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for monitor_interface_object in monitor_interface_object_list:
          #fetch payload
          monitor_interface_payload = monitor_interface_object.getxml(filter=True)
          util.log_debug('monitor_interface_payload %s'%monitor_interface_payload)
          payload_list.append(monitor_interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        monitor_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for monitor_interface_object in monitor_interface_object_list:
          #fetch payload
          monitor_interface_payload = monitor_interface_object.getxml(filter=True)

          util.log_debug('monitor_interface_payload %s'%monitor_interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=monitor_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        monitor_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        monitor_interface = mapping_dict.get('monitor_interface')
        if not isinstance(monitor_interface, list):
          monitor_interface = [monitor_interface]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for monitor_interface_iterator in monitor_interface:
          rcpath_tmp =  rcpath+"/monitor-interface=%s"%(util.make_interfacename(monitor_interface_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, monitor_interface_object in enumerate(monitor_interface_object_list):
          #fetch payload
          monitor_interface_payload = monitor_interface_object.getxml(filter=True)

          util.log_debug('update monitor_interface_payload %s'%monitor_interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=monitor_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('monitor_interface')):
          raise Exception("'monitor_interface' cannot be empty")

        #convert keys to list
        monitor_interface = mapping_dict.get('monitor_interface')
        if not isinstance(monitor_interface, list):
          monitor_interface = [monitor_interface]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for monitor_interface_iterator in monitor_interface:
          rcpath_tmp =  rcpath+"/monitor-interface=%s"%(util.make_interfacename(monitor_interface_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('monitor_interface')):
          raise Exception("'monitor_interface' cannot be empty")

        #convert keys to list
        monitor_interface = mapping_dict.get('monitor_interface')
        if not isinstance(monitor_interface, list):
          monitor_interface = [monitor_interface]

        #prepare payload
        monitor_interface_object_list = []
        for monitor_interface_iterator in monitor_interface:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          monitor_interface_object = virtual_device.monitor_interface.monitor_interface()
          monitor_interface_object.monitor_interface = monitor_interface_iterator
          monitor_interface_object_list.append(monitor_interface_object)

        return monitor_interface_object_list

    #XPATH devices/device/virtual-devices/virtual-device/managementaccess-interface
    class managementaccess_interface(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        managementaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for managementaccess_interface_object in managementaccess_interface_object_list:
          #fetch payload
          managementaccess_interface_payload = managementaccess_interface_object.getxml(filter=True)
          util.log_debug('managementaccess_interface_payload %s'%managementaccess_interface_payload)
          payload_list.append(managementaccess_interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        managementaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for managementaccess_interface_object in managementaccess_interface_object_list:
          #fetch payload
          managementaccess_interface_payload = managementaccess_interface_object.getxml(filter=True)

          util.log_debug('managementaccess_interface_payload %s'%managementaccess_interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=managementaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        managementaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]
        echo_type = mapping_dict.get('echo_type')
        if not isinstance(echo_type, list):
          echo_type = [echo_type]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          for ip_address_iterator in ip_address:
            for echo_type_iterator in echo_type:
              rcpath_tmp =  rcpath+"/managementaccess-interface=%s,%s,%s"%(util.make_interfacename(interface_nameif_iterator),util.make_interfacename(ip_address_iterator),util.make_interfacename(echo_type_iterator))
              rcpath_list.append(rcpath_tmp)
        for rc_counter, managementaccess_interface_object in enumerate(managementaccess_interface_object_list):
          #fetch payload
          managementaccess_interface_payload = managementaccess_interface_object.getxml(filter=True)

          util.log_debug('update managementaccess_interface_payload %s'%managementaccess_interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=managementaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")
        if util.isEmpty(mapping_dict.get('echo_type')):
          raise Exception("'echo_type' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]
        echo_type = mapping_dict.get('echo_type')
        if not isinstance(echo_type, list):
          echo_type = [echo_type]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          for ip_address_iterator in ip_address:
            for echo_type_iterator in echo_type:
              rcpath_tmp =  rcpath+"/managementaccess-interface=%s,%s,%s"%(util.make_interfacename(interface_nameif_iterator),util.make_interfacename(ip_address_iterator),util.make_interfacename(echo_type_iterator))
              rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")
        if util.isEmpty(mapping_dict.get('echo_type')):
          raise Exception("'echo_type' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]
        echo_type = mapping_dict.get('echo_type')
        if not isinstance(echo_type, list):
          echo_type = [echo_type]

        #prepare payload
        managementaccess_interface_object_list = []
        for interface_nameif_iterator in interface_nameif:
          for ip_address_iterator in ip_address:
            for echo_type_iterator in echo_type:
              from servicemodel.controller.devices.device.virtual_devices import virtual_device
              managementaccess_interface_object = virtual_device.managementaccess_interface.managementaccess_interface()
              managementaccess_interface_object.interface_nameif = interface_nameif_iterator
              managementaccess_interface_object.ip_address = ip_address_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                  managementaccess_interface_object.netmask = mapping_dict.get('netmask', None)
                else:
                  managementaccess_interface_object.netmask._empty_tag = True
              except TypeError:
                pass
              managementaccess_interface_object.echo_type = echo_type_iterator
              managementaccess_interface_object_list.append(managementaccess_interface_object)

        return managementaccess_interface_object_list

    #XPATH devices/device/virtual-devices/virtual-device/sshaccess-interface
    class sshaccess_interface(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sshaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sshaccess_interface_object in sshaccess_interface_object_list:
          #fetch payload
          sshaccess_interface_payload = sshaccess_interface_object.getxml(filter=True)
          util.log_debug('sshaccess_interface_payload %s'%sshaccess_interface_payload)
          payload_list.append(sshaccess_interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sshaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sshaccess_interface_object in sshaccess_interface_object_list:
          #fetch payload
          sshaccess_interface_payload = sshaccess_interface_object.getxml(filter=True)

          util.log_debug('sshaccess_interface_payload %s'%sshaccess_interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sshaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sshaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          rcpath_tmp =  rcpath+"/sshaccess-interface=%s"%(util.make_interfacename(interface_nameif_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, sshaccess_interface_object in enumerate(sshaccess_interface_object_list):
          #fetch payload
          sshaccess_interface_payload = sshaccess_interface_object.getxml(filter=True)

          util.log_debug('update sshaccess_interface_payload %s'%sshaccess_interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sshaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          rcpath_tmp =  rcpath+"/sshaccess-interface=%s"%(util.make_interfacename(interface_nameif_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare payload
        sshaccess_interface_object_list = []
        for interface_nameif_iterator in interface_nameif:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          sshaccess_interface_object = virtual_device.sshaccess_interface.sshaccess_interface()
          sshaccess_interface_object.interface_nameif = interface_nameif_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
              sshaccess_interface_object.ip_address = mapping_dict.get('ip_address', None)
            else:
              sshaccess_interface_object.ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              sshaccess_interface_object.netmask = mapping_dict.get('netmask', None)
            else:
              sshaccess_interface_object.netmask._empty_tag = True
          except TypeError:
            pass
          sshaccess_interface_object_list.append(sshaccess_interface_object)

        return sshaccess_interface_object_list

    #XPATH devices/device/virtual-devices/virtual-device/telnetaccess-interface
    class telnetaccess_interface(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        telnetaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for telnetaccess_interface_object in telnetaccess_interface_object_list:
          #fetch payload
          telnetaccess_interface_payload = telnetaccess_interface_object.getxml(filter=True)
          util.log_debug('telnetaccess_interface_payload %s'%telnetaccess_interface_payload)
          payload_list.append(telnetaccess_interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        telnetaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for telnetaccess_interface_object in telnetaccess_interface_object_list:
          #fetch payload
          telnetaccess_interface_payload = telnetaccess_interface_object.getxml(filter=True)

          util.log_debug('telnetaccess_interface_payload %s'%telnetaccess_interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=telnetaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        telnetaccess_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          rcpath_tmp =  rcpath+"/telnetaccess-interface=%s"%(util.make_interfacename(interface_nameif_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, telnetaccess_interface_object in enumerate(telnetaccess_interface_object_list):
          #fetch payload
          telnetaccess_interface_payload = telnetaccess_interface_object.getxml(filter=True)

          util.log_debug('update telnetaccess_interface_payload %s'%telnetaccess_interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=telnetaccess_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_nameif_iterator in interface_nameif:
          rcpath_tmp =  rcpath+"/telnetaccess-interface=%s"%(util.make_interfacename(interface_nameif_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_nameif')):
          raise Exception("'interface_nameif' cannot be empty")

        #convert keys to list
        interface_nameif = mapping_dict.get('interface_nameif')
        if not isinstance(interface_nameif, list):
          interface_nameif = [interface_nameif]

        #prepare payload
        telnetaccess_interface_object_list = []
        for interface_nameif_iterator in interface_nameif:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          telnetaccess_interface_object = virtual_device.telnetaccess_interface.telnetaccess_interface()
          telnetaccess_interface_object.interface_nameif = interface_nameif_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
              telnetaccess_interface_object.ip_address = mapping_dict.get('ip_address', None)
            else:
              telnetaccess_interface_object.ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              telnetaccess_interface_object.netmask = mapping_dict.get('netmask', None)
            else:
              telnetaccess_interface_object.netmask._empty_tag = True
          except TypeError:
            pass
          telnetaccess_interface_object_list.append(telnetaccess_interface_object)

        return telnetaccess_interface_object_list

    class interfaces(object):
      #XPATH devices/device/virtual-devices/virtual-device/interfaces/interface
      class interface(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for interface_object in interface_object_list:
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)
            util.log_debug('interface_payload %s'%interface_payload)
            payload_list.append(interface_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for interface_object in interface_object_list:
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)

            util.log_debug('interface_payload %s'%interface_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, interface_object in enumerate(interface_object_list):
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)

            util.log_debug('update interface_payload %s'%interface_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('long_name')):
            raise Exception("'long_name' cannot be empty")
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          interface_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import interfaces
            interface_object = interfaces.interface.interface()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('long_name', None)) != ''):
                interface_object.long_name = mapping_dict.get('long_name', None)
              else:
                interface_object.long_name._empty_tag = True
            except TypeError:
              pass
            interface_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('if_index', None)) != ''):
                interface_object.if_index = mapping_dict.get('if_index', None)
              else:
                interface_object.if_index._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                interface_object.description = mapping_dict.get('description', None)
              else:
                interface_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
                interface_object.mode = mapping_dict.get('mode', None)
              else:
                interface_object.mode._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                interface_object.mtu = mapping_dict.get('mtu', None)
              else:
                interface_object.mtu._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('hold_time_up', None)) != ''):
                interface_object.hold_time_up = mapping_dict.get('hold_time_up', None)
              else:
                interface_object.hold_time_up._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('hold_time_down', None)) != ''):
                interface_object.hold_time_down = mapping_dict.get('hold_time_down', None)
              else:
                interface_object.hold_time_down._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('physical_address', None)) != ''):
                interface_object.physical_address = mapping_dict.get('physical_address', None)
              else:
                interface_object.physical_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('rnc_name', None)) != ''):
                interface_object.rnc_name = mapping_dict.get('rnc_name', None)
              else:
                interface_object.rnc_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
                interface_object.port = mapping_dict.get('port', None)
              else:
                interface_object.port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dhcp', None)) != ''):
                interface_object.dhcp = mapping_dict.get('dhcp', None)
              else:
                interface_object.dhcp._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('inpath_optimisation', None)) != ''):
                interface_object.inpath_optimisation = mapping_dict.get('inpath_optimisation', None)
              else:
                interface_object.inpath_optimisation._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
                interface_object.ip_address = mapping_dict.get('ip_address', None)
              else:
                interface_object.ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                interface_object.netmask = mapping_dict.get('netmask', None)
              else:
                interface_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ipv4_prefix_length', None)) != ''):
                interface_object.ipv4_prefix_length = mapping_dict.get('ipv4_prefix_length', None)
              else:
                interface_object.ipv4_prefix_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ipv6_address', None)) != ''):
                interface_object.ipv6_address = mapping_dict.get('ipv6_address', None)
              else:
                interface_object.ipv6_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ipv6_prefix_length', None)) != ''):
                interface_object.ipv6_prefix_length = mapping_dict.get('ipv6_prefix_length', None)
              else:
                interface_object.ipv6_prefix_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('alias_address', None)) != ''):
                interface_object.alias_address = mapping_dict.get('alias_address', None)
              else:
                interface_object.alias_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('gateway', None)) != ''):
                interface_object.gateway = mapping_dict.get('gateway', None)
              else:
                interface_object.gateway._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('inpath_gateway', None)) != ''):
                interface_object.inpath_gateway = mapping_dict.get('inpath_gateway', None)
              else:
                interface_object.inpath_gateway._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('primaryip', None)) != ''):
                interface_object.primaryip = mapping_dict.get('primaryip', None)
              else:
                interface_object.primaryip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('secondaryip', None)) != ''):
                interface_object.secondaryip = mapping_dict.get('secondaryip', None)
              else:
                interface_object.secondaryip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('admin_state', None)) != ''):
                interface_object.admin_state = mapping_dict.get('admin_state', None)
              else:
                interface_object.admin_state._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('operation_state', None)) != ''):
                interface_object._set_operation_state(mapping_dict.get('operation_state', None))
              else:
                interface_object._unset_operation_state()
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('out_bandwidth', None)) != ''):
                interface_object.out_bandwidth = mapping_dict.get('out_bandwidth', None)
              else:
                interface_object.out_bandwidth._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('in_bandwidth', None)) != ''):
                interface_object.in_bandwidth = mapping_dict.get('in_bandwidth', None)
              else:
                interface_object.in_bandwidth._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('speed', None)) != ''):
                interface_object.speed = mapping_dict.get('speed', None)
              else:
                interface_object.speed._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('native_vlan', None)) != ''):
                interface_object.native_vlan = mapping_dict.get('native_vlan', None)
              else:
                interface_object.native_vlan._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('portfast', None)) != ''):
                interface_object.portfast = mapping_dict.get('portfast', None)
              else:
                interface_object.portfast._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('service', None)) != ''):
                interface_object.service = mapping_dict.get('service', None)
              else:
                interface_object.service._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('cdp', None)) != ''):
                interface_object.cdp = mapping_dict.get('cdp', None)
              else:
                interface_object.cdp._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('bpduguard', None)) != ''):
                interface_object.bpduguard = mapping_dict.get('bpduguard', None)
              else:
                interface_object.bpduguard._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('broadcast', None)) != ''):
                interface_object.broadcast = mapping_dict.get('broadcast', None)
              else:
                interface_object.broadcast._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nonegotiate', None)) != ''):
                interface_object.nonegotiate = mapping_dict.get('nonegotiate', None)
              else:
                interface_object.nonegotiate._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('power_inline', None)) != ''):
                interface_object.power_inline = mapping_dict.get('power_inline', None)
              else:
                interface_object.power_inline._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('value', None)) != ''):
                interface_object.value = mapping_dict.get('value', None)
              else:
                interface_object.value._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('priority_queue', None)) != ''):
                interface_object.priority_queue = mapping_dict.get('priority_queue', None)
              else:
                interface_object.priority_queue._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('voice_vlan', None)) != ''):
                interface_object.voice_vlan = mapping_dict.get('voice_vlan', None)
              else:
                interface_object.voice_vlan._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('level', None)) != ''):
                interface_object.level = mapping_dict.get('level', None)
              else:
                interface_object.level._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('speed_unit', None)) != ''):
                interface_object.speed_unit = mapping_dict.get('speed_unit', None)
              else:
                interface_object.speed_unit._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('policer_name', None)) != ''):
                interface_object.policer_name = mapping_dict.get('policer_name', None)
              else:
                interface_object.policer_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
                interface_object.vlan = mapping_dict.get('vlan', None)
              else:
                interface_object.vlan._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('visible_interface', None)) != ''):
                interface_object.visible_interface = mapping_dict.get('visible_interface', None)
              else:
                interface_object.visible_interface._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('inside_name', None)) != ''):
                interface_object.inside_name = mapping_dict.get('inside_name', None)
              else:
                interface_object.inside_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('security_level_inside', None)) != ''):
                interface_object.security_level_inside = mapping_dict.get('security_level_inside', None)
              else:
                interface_object.security_level_inside._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                interface_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
              else:
                interface_object.acl_inbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                interface_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
              else:
                interface_object.acl_outbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('peer_unit', None)) != ''):
                interface_object.peer_unit = mapping_dict.get('peer_unit', None)
              else:
                interface_object.peer_unit._empty_tag = True
            except TypeError:
              pass
            interface_object_list.append(interface_object)

          return interface_object_list

        class additional_ipv4_address(object):
          #XPATH devices/device/virtual-devices/virtual-device/interfaces/interface/additional-ipv4-address/address
          class address(AbstractDeviceMgr):
            key_hints = [['name'],['name']]
            def getRcpathPayload(self, sdata, dev, virtual_device_name, interface_name, mapping_dict):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)

              #convert parent keys to list
              rcpath_list = []
              payload_list = []
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  rcpath_list.append(rcpath)
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict)

              for address_object in address_object_list:
                #fetch payload
                address_payload = address_object.getxml(filter=True)
                util.log_debug('address_payload %s'%address_payload)
                payload_list.append(address_payload)

              return rcpath_list, payload_list

            def create(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)

              #convert parent keys to list
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def create_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict)

              for address_object in address_object_list:
                #fetch payload
                address_payload = address_object.getxml(filter=True)

                util.log_debug('address_payload %s'%address_payload)

                #call the base abstract class for createData
                super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def update(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)


              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
              self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def update_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for ip_iterator in ip:
                rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
                rcpath_list.append(rcpath_tmp)
              for rc_counter, address_object in enumerate(address_object_list):
                #fetch payload
                address_payload = address_object.getxml(filter=True)

                util.log_debug('update address_payload %s'%address_payload)

                rcpath = rcpath_list[rc_counter]
                #call the base abstract class for createData
                super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def delete(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, fail_silently=False, remove_reference=False):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)


              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

            def delete_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs
              if util.isEmpty(mapping_dict.get('ip')):
                raise Exception("'ip' cannot be empty")

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for ip_iterator in ip:
                rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
                rcpath_list.append(rcpath_tmp)
              payload = ''

              for rcpath in rcpath_list:
                #call the base abstract class for deleteData
                super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

            def validate_parent_keys(self, virtual_device_name, interface_name):
              #Parent Key Validations
              if util.isEmpty(virtual_device_name):
                raise Exception("'virtual_device_name' cannot be empty")
              if util.isEmpty(interface_name):
                raise Exception("'interface_name' cannot be empty")

            def validate_inputs_form_payload(self, mapping_dict, update=False):
              #validating inputs
              if util.isEmpty(mapping_dict.get('ip')):
                raise Exception("'ip' cannot be empty")
              if util.isEmpty(mapping_dict.get('netmask')):
                raise Exception("'netmask' cannot be empty")

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare payload
              address_object_list = []
              for ip_iterator in ip:
                from servicemodel.controller.devices.device.virtual_devices.virtual_device.interfaces.interface import additional_ipv4_address
                address_object = additional_ipv4_address.address.address()
                address_object.ip = ip_iterator
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                    address_object.netmask = mapping_dict.get('netmask', None)
                  else:
                    address_object.netmask._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                    address_object.family = mapping_dict.get('family', None)
                  else:
                    address_object.family._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                    address_object.mtu = mapping_dict.get('mtu', None)
                  else:
                    address_object.mtu._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                    address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
                  else:
                    address_object.acl_inbound_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                    address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
                  else:
                    address_object.acl_outbound_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                    address_object.source_ip = mapping_dict.get('source_ip', None)
                  else:
                    address_object.source_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                    address_object.destination_ip = mapping_dict.get('destination_ip', None)
                  else:
                    address_object.destination_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                    address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
                  else:
                    address_object.destination_vrf._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                    address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
                  else:
                    address_object.allow_fragmentation._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('comment', None)) != ''):
                    address_object.comment = mapping_dict.get('comment', None)
                  else:
                    address_object.comment._empty_tag = True
                except TypeError:
                  pass
                address_object_list.append(address_object)

              return address_object_list

        #XPATH devices/device/virtual-devices/virtual-device/interfaces/interface/mls-qos
        class mls_qos(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, interface_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict)

            for mls_qos_object in mls_qos_object_list:
              #fetch payload
              mls_qos_payload = mls_qos_object.getxml(filter=True)
              util.log_debug('mls_qos_payload %s'%mls_qos_payload)
              payload_list.append(mls_qos_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict)

            for mls_qos_object in mls_qos_object_list:
              #fetch payload
              mls_qos_payload = mls_qos_object.getxml(filter=True)

              util.log_debug('mls_qos_payload %s'%mls_qos_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=mls_qos_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/mls-qos"
            rcpath_list.append(rcpath_tmp)
            for rc_counter, mls_qos_object in enumerate(mls_qos_object_list):
              #fetch payload
              mls_qos_payload = mls_qos_object.getxml(filter=True)

              util.log_debug('update mls_qos_payload %s'%mls_qos_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=mls_qos_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/mls-qos"
            rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, interface_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(interface_name):
              raise Exception("'interface_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs

            #convert keys to list

            #prepare payload
            mls_qos_object_list = []
            from servicemodel.controller.devices.device.virtual_devices.virtual_device.interfaces import interface
            mls_qos_object = interface.mls_qos.mls_qos()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
                mls_qos_object.type = mapping_dict.get('type', None)
              else:
                mls_qos_object.type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('cos', None)) != ''):
                mls_qos_object.cos = mapping_dict.get('cos', None)
              else:
                mls_qos_object.cos._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('trust', None)) != ''):
                mls_qos_object.trust = mapping_dict.get('trust', None)
              else:
                mls_qos_object.trust._empty_tag = True
            except TypeError:
              pass
            mls_qos_object_list.append(mls_qos_object)

            return mls_qos_object_list

        #XPATH devices/device/virtual-devices/virtual-device/interfaces/interface/srr-queue
        class srr_queue(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, interface_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict)

            for srr_queue_object in srr_queue_object_list:
              #fetch payload
              srr_queue_payload = srr_queue_object.getxml(filter=True)
              util.log_debug('srr_queue_payload %s'%srr_queue_payload)
              payload_list.append(srr_queue_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict)

            for srr_queue_object in srr_queue_object_list:
              #fetch payload
              srr_queue_payload = srr_queue_object.getxml(filter=True)

              util.log_debug('srr_queue_payload %s'%srr_queue_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=srr_queue_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/srr-queue"
            rcpath_list.append(rcpath_tmp)
            for rc_counter, srr_queue_object in enumerate(srr_queue_object_list):
              #fetch payload
              srr_queue_payload = srr_queue_object.getxml(filter=True)

              util.log_debug('update srr_queue_payload %s'%srr_queue_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=srr_queue_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, interface_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(interface_name, list):
              interface_name_list = [interface_name]
            else:
              interface_name_list = interface_name

            for virtual_device_name in virtual_device_name_list:
              for interface_name in interface_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/srr-queue"
            rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, interface_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(interface_name):
              raise Exception("'interface_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs

            #convert keys to list

            #prepare payload
            srr_queue_object_list = []
            from servicemodel.controller.devices.device.virtual_devices.virtual_device.interfaces import interface
            srr_queue_object = interface.srr_queue.srr_queue()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('weight1', None)) != ''):
                srr_queue_object.weight1 = mapping_dict.get('weight1', None)
              else:
                srr_queue_object.weight1._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('weight2', None)) != ''):
                srr_queue_object.weight2 = mapping_dict.get('weight2', None)
              else:
                srr_queue_object.weight2._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('weight3', None)) != ''):
                srr_queue_object.weight3 = mapping_dict.get('weight3', None)
              else:
                srr_queue_object.weight3._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('weight4', None)) != ''):
                srr_queue_object.weight4 = mapping_dict.get('weight4', None)
              else:
                srr_queue_object.weight4._empty_tag = True
            except TypeError:
              pass
            srr_queue_object_list.append(srr_queue_object)

            return srr_queue_object_list

        class additional_ipv6_address(object):
          #XPATH devices/device/virtual-devices/virtual-device/interfaces/interface/additional-ipv6-address/address
          class address(AbstractDeviceMgr):
            key_hints = [['name'],['name']]
            def getRcpathPayload(self, sdata, dev, virtual_device_name, interface_name, mapping_dict):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)

              #convert parent keys to list
              rcpath_list = []
              payload_list = []
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  rcpath_list.append(rcpath)
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict)

              for address_object in address_object_list:
                #fetch payload
                address_payload = address_object.getxml(filter=True)
                util.log_debug('address_payload %s'%address_payload)
                payload_list.append(address_payload)

              return rcpath_list, payload_list

            def create(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)

              #convert parent keys to list
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def create_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict)

              for address_object in address_object_list:
                #fetch payload
                address_payload = address_object.getxml(filter=True)

                util.log_debug('address_payload %s'%address_payload)

                #call the base abstract class for createData
                super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def update(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)


              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
              self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def update_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for ip_iterator in ip:
                rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
                rcpath_list.append(rcpath_tmp)
              for rc_counter, address_object in enumerate(address_object_list):
                #fetch payload
                address_payload = address_object.getxml(filter=True)

                util.log_debug('update address_payload %s'%address_payload)

                rcpath = rcpath_list[rc_counter]
                #call the base abstract class for createData
                super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def delete(self, sdata, dev, virtual_device_name, interface_name, mapping_dict, fail_silently=False, remove_reference=False):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, interface_name)


              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(interface_name, list):
                interface_name_list = [interface_name]
              else:
                interface_name_list = interface_name

              for virtual_device_name in virtual_device_name_list:
                for interface_name in interface_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(virtual_device_name),util.make_interfacename(interface_name))
                  self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

            def delete_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs
              if util.isEmpty(mapping_dict.get('ip')):
                raise Exception("'ip' cannot be empty")

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for ip_iterator in ip:
                rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
                rcpath_list.append(rcpath_tmp)
              payload = ''

              for rcpath in rcpath_list:
                #call the base abstract class for deleteData
                super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

            def validate_parent_keys(self, virtual_device_name, interface_name):
              #Parent Key Validations
              if util.isEmpty(virtual_device_name):
                raise Exception("'virtual_device_name' cannot be empty")
              if util.isEmpty(interface_name):
                raise Exception("'interface_name' cannot be empty")

            def validate_inputs_form_payload(self, mapping_dict, update=False):
              #validating inputs
              if util.isEmpty(mapping_dict.get('ip')):
                raise Exception("'ip' cannot be empty")

              #convert keys to list
              ip = mapping_dict.get('ip')
              if not isinstance(ip, list):
                ip = [ip]

              #prepare payload
              address_object_list = []
              for ip_iterator in ip:
                from servicemodel.controller.devices.device.virtual_devices.virtual_device.interfaces.interface import additional_ipv6_address
                address_object = additional_ipv6_address.address.address()
                address_object.ip = ip_iterator
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('prefix_length', None)) != ''):
                    address_object.prefix_length = mapping_dict.get('prefix_length', None)
                  else:
                    address_object.prefix_length._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                    address_object.family = mapping_dict.get('family', None)
                  else:
                    address_object.family._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                    address_object.mtu = mapping_dict.get('mtu', None)
                  else:
                    address_object.mtu._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                    address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
                  else:
                    address_object.acl_inbound_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                    address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
                  else:
                    address_object.acl_outbound_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                    address_object.source_ip = mapping_dict.get('source_ip', None)
                  else:
                    address_object.source_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                    address_object.destination_ip = mapping_dict.get('destination_ip', None)
                  else:
                    address_object.destination_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                    address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
                  else:
                    address_object.destination_vrf._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                    address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
                  else:
                    address_object.allow_fragmentation._empty_tag = True
                except TypeError:
                  pass
                address_object_list.append(address_object)

              return address_object_list

    class static_routes(object):
      #XPATH devices/device/virtual-devices/virtual-device/static-routes/static-route
      class static_route(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/static-routes"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          static_route_object_list = self.validate_inputs_form_payload(mapping_dict)

          for static_route_object in static_route_object_list:
            #fetch payload
            static_route_payload = static_route_object.getxml(filter=True)
            util.log_debug('static_route_payload %s'%static_route_payload)
            payload_list.append(static_route_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/static-routes"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          static_route_object_list = self.validate_inputs_form_payload(mapping_dict)

          for static_route_object in static_route_object_list:
            #fetch payload
            static_route_payload = static_route_object.getxml(filter=True)

            util.log_debug('static_route_payload %s'%static_route_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=static_route_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/static-routes"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          static_route_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          dest_ip_address = mapping_dict.get('dest_ip_address')
          if not isinstance(dest_ip_address, list):
            dest_ip_address = [dest_ip_address]
          dest_mask = mapping_dict.get('dest_mask')
          if not isinstance(dest_mask, list):
            dest_mask = [dest_mask]
          next_hop_ip = mapping_dict.get('next_hop_ip')
          if not isinstance(next_hop_ip, list):
            next_hop_ip = [next_hop_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for dest_ip_address_iterator in dest_ip_address:
            for dest_mask_iterator in dest_mask:
              for next_hop_ip_iterator in next_hop_ip:
                rcpath_tmp =  rcpath+"/static-route=%s,%s,%s"%(util.make_interfacename(dest_ip_address_iterator),util.make_interfacename(dest_mask_iterator),util.make_interfacename(next_hop_ip_iterator))
                rcpath_list.append(rcpath_tmp)
          for rc_counter, static_route_object in enumerate(static_route_object_list):
            #fetch payload
            static_route_payload = static_route_object.getxml(filter=True)

            util.log_debug('update static_route_payload %s'%static_route_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=static_route_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/static-routes"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('dest_ip_address')):
            raise Exception("'dest_ip_address' cannot be empty")
          if util.isEmpty(mapping_dict.get('dest_mask')):
            raise Exception("'dest_mask' cannot be empty")
          if util.isEmpty(mapping_dict.get('next_hop_ip')):
            raise Exception("'next_hop_ip' cannot be empty")

          #convert keys to list
          dest_ip_address = mapping_dict.get('dest_ip_address')
          if not isinstance(dest_ip_address, list):
            dest_ip_address = [dest_ip_address]
          dest_mask = mapping_dict.get('dest_mask')
          if not isinstance(dest_mask, list):
            dest_mask = [dest_mask]
          next_hop_ip = mapping_dict.get('next_hop_ip')
          if not isinstance(next_hop_ip, list):
            next_hop_ip = [next_hop_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for dest_ip_address_iterator in dest_ip_address:
            for dest_mask_iterator in dest_mask:
              for next_hop_ip_iterator in next_hop_ip:
                rcpath_tmp =  rcpath+"/static-route=%s,%s,%s"%(util.make_interfacename(dest_ip_address_iterator),util.make_interfacename(dest_mask_iterator),util.make_interfacename(next_hop_ip_iterator))
                rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('dest_ip_address')):
            raise Exception("'dest_ip_address' cannot be empty")
          if util.isEmpty(mapping_dict.get('dest_mask')):
            raise Exception("'dest_mask' cannot be empty")
          if util.isEmpty(mapping_dict.get('next_hop_ip')):
            raise Exception("'next_hop_ip' cannot be empty")

          #convert keys to list
          dest_ip_address = mapping_dict.get('dest_ip_address')
          if not isinstance(dest_ip_address, list):
            dest_ip_address = [dest_ip_address]
          dest_mask = mapping_dict.get('dest_mask')
          if not isinstance(dest_mask, list):
            dest_mask = [dest_mask]
          next_hop_ip = mapping_dict.get('next_hop_ip')
          if not isinstance(next_hop_ip, list):
            next_hop_ip = [next_hop_ip]

          #prepare payload
          static_route_object_list = []
          for dest_ip_address_iterator in dest_ip_address:
            for dest_mask_iterator in dest_mask:
              for next_hop_ip_iterator in next_hop_ip:
                from servicemodel.controller.devices.device.virtual_devices.virtual_device import static_routes
                static_route_object = static_routes.static_route.static_route()
                static_route_object.dest_ip_address = dest_ip_address_iterator
                static_route_object.dest_mask = dest_mask_iterator
                static_route_object.next_hop_ip = next_hop_ip_iterator
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                    static_route_object.description = mapping_dict.get('description', None)
                  else:
                    static_route_object.description._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('metric', None)) != ''):
                    static_route_object.metric = mapping_dict.get('metric', None)
                  else:
                    static_route_object.metric._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
                    static_route_object.interface_name = mapping_dict.get('interface_name', None)
                  else:
                    static_route_object.interface_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('next_routing_table', None)) != ''):
                    static_route_object.next_routing_table = mapping_dict.get('next_routing_table', None)
                  else:
                    static_route_object.next_routing_table._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('seq_num', None)) != ''):
                    static_route_object.seq_num = mapping_dict.get('seq_num', None)
                  else:
                    static_route_object.seq_num._empty_tag = True
                except TypeError:
                  pass
                static_route_object_list.append(static_route_object)

          return static_route_object_list

    #XPATH devices/device/virtual-devices/virtual-device/router-ospf
    class router_ospf(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        router_ospf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for router_ospf_object in router_ospf_object_list:
          #fetch payload
          router_ospf_payload = router_ospf_object.getxml(filter=True)
          util.log_debug('router_ospf_payload %s'%router_ospf_payload)
          payload_list.append(router_ospf_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        router_ospf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for router_ospf_object in router_ospf_object_list:
          #fetch payload
          router_ospf_payload = router_ospf_object.getxml(filter=True)

          util.log_debug('router_ospf_payload %s'%router_ospf_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=router_ospf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        router_ospf_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/router-ospf"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, router_ospf_object in enumerate(router_ospf_object_list):
          #fetch payload
          router_ospf_payload = router_ospf_object.getxml(filter=True)

          util.log_debug('update router_ospf_payload %s'%router_ospf_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=router_ospf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/router-ospf"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        router_ospf_object_list = []
        from servicemodel.controller.devices.device.virtual_devices import virtual_device
        router_ospf_object = virtual_device.router_ospf.router_ospf()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('process_id', None)) != ''):
            router_ospf_object.process_id = mapping_dict.get('process_id', None)
          else:
            router_ospf_object.process_id._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('router_id', None)) != ''):
            router_ospf_object.router_id = mapping_dict.get('router_id', None)
          else:
            router_ospf_object.router_id._empty_tag = True
        except TypeError:
          pass
        router_ospf_object_list.append(router_ospf_object)

        return router_ospf_object_list

      #XPATH devices/device/virtual-devices/virtual-device/router-ospf/neighbor
      class neighbor(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          neighbor_object_list = self.validate_inputs_form_payload(mapping_dict)

          for neighbor_object in neighbor_object_list:
            #fetch payload
            neighbor_payload = neighbor_object.getxml(filter=True)
            util.log_debug('neighbor_payload %s'%neighbor_payload)
            payload_list.append(neighbor_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          neighbor_object_list = self.validate_inputs_form_payload(mapping_dict)

          for neighbor_object in neighbor_object_list:
            #fetch payload
            neighbor_payload = neighbor_object.getxml(filter=True)

            util.log_debug('neighbor_payload %s'%neighbor_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=neighbor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          neighbor_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/neighbor=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, neighbor_object in enumerate(neighbor_object_list):
            #fetch payload
            neighbor_payload = neighbor_object.getxml(filter=True)

            util.log_debug('update neighbor_payload %s'%neighbor_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=neighbor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/neighbor=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          neighbor_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import router_ospf
            neighbor_object = router_ospf.neighbor.neighbor()
            neighbor_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                neighbor_object.netmask = mapping_dict.get('netmask', None)
              else:
                neighbor_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('local_interface', None)) != ''):
                neighbor_object.local_interface = mapping_dict.get('local_interface', None)
              else:
                neighbor_object.local_interface._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('area', None)) != ''):
                neighbor_object.area = mapping_dict.get('area', None)
              else:
                neighbor_object.area._empty_tag = True
            except TypeError:
              pass
            neighbor_object_list.append(neighbor_object)

          return neighbor_object_list

      #XPATH devices/device/virtual-devices/virtual-device/router-ospf/interface
      class interface(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for interface_object in interface_object_list:
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)
            util.log_debug('interface_payload %s'%interface_payload)
            payload_list.append(interface_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for interface_object in interface_object_list:
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)

            util.log_debug('interface_payload %s'%interface_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          interface_name = mapping_dict.get('interface_name')
          if not isinstance(interface_name, list):
            interface_name = [interface_name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for interface_name_iterator in interface_name:
            rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, interface_object in enumerate(interface_object_list):
            #fetch payload
            interface_payload = interface_object.getxml(filter=True)

            util.log_debug('update interface_payload %s'%interface_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('interface_name')):
            raise Exception("'interface_name' cannot be empty")

          #convert keys to list
          interface_name = mapping_dict.get('interface_name')
          if not isinstance(interface_name, list):
            interface_name = [interface_name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for interface_name_iterator in interface_name:
            rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('interface_name')):
            raise Exception("'interface_name' cannot be empty")

          #convert keys to list
          interface_name = mapping_dict.get('interface_name')
          if not isinstance(interface_name, list):
            interface_name = [interface_name]

          #prepare payload
          interface_object_list = []
          for interface_name_iterator in interface_name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import router_ospf
            interface_object = router_ospf.interface.interface()
            interface_object.interface_name = interface_name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('zone_name', None)) != ''):
                interface_object.zone_name = mapping_dict.get('zone_name', None)
              else:
                interface_object.zone_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('area', None)) != ''):
                interface_object.area = mapping_dict.get('area', None)
              else:
                interface_object.area._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('cost', None)) != ''):
                interface_object.cost = mapping_dict.get('cost', None)
              else:
                interface_object.cost._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                interface_object.mtu = mapping_dict.get('mtu', None)
              else:
                interface_object.mtu._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
                interface_object.priority = mapping_dict.get('priority', None)
              else:
                interface_object.priority._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('network_type', None)) != ''):
                interface_object.network_type = mapping_dict.get('network_type', None)
              else:
                interface_object.network_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('auth_type', None)) != ''):
                interface_object.auth_type = mapping_dict.get('auth_type', None)
              else:
                interface_object.auth_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('md5_key', None)) != ''):
                interface_object.md5_key = mapping_dict.get('md5_key', None)
              else:
                interface_object.md5_key._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('key_id', None)) != ''):
                interface_object.key_id = mapping_dict.get('key_id', None)
              else:
                interface_object.key_id._empty_tag = True
            except TypeError:
              pass
            interface_object_list.append(interface_object)

          return interface_object_list

      #XPATH devices/device/virtual-devices/virtual-device/router-ospf/network
      class network(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)
            util.log_debug('network_payload %s'%network_payload)
            payload_list.append(network_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('network_payload %s'%network_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, network_object in enumerate(network_object_list):
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('update network_payload %s'%network_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          network_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import router_ospf
            network_object = router_ospf.network.network()
            network_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                network_object.netmask = mapping_dict.get('netmask', None)
              else:
                network_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('route_map', None)) != ''):
                network_object.route_map = mapping_dict.get('route_map', None)
              else:
                network_object.route_map._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('wild_card', None)) != ''):
                network_object.wild_card = mapping_dict.get('wild_card', None)
              else:
                network_object.wild_card._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('area', None)) != ''):
                network_object.area = mapping_dict.get('area', None)
              else:
                network_object.area._empty_tag = True
            except TypeError:
              pass
            network_object_list.append(network_object)

          return network_object_list

      #XPATH devices/device/virtual-devices/virtual-device/router-ospf/redistribute
      class redistribute(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict)

          for redistribute_object in redistribute_object_list:
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)
            util.log_debug('redistribute_payload %s'%redistribute_payload)
            payload_list.append(redistribute_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict)

          for redistribute_object in redistribute_object_list:
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)

            util.log_debug('redistribute_payload %s'%redistribute_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=redistribute_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/redistribute"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, redistribute_object in enumerate(redistribute_object_list):
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)

            util.log_debug('update redistribute_payload %s'%redistribute_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=redistribute_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/router-ospf"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/redistribute"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          redistribute_object_list = []
          from servicemodel.controller.devices.device.virtual_devices.virtual_device import router_ospf
          redistribute_object = router_ospf.redistribute.redistribute()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('protocol', None)) != ''):
              redistribute_object.protocol = mapping_dict.get('protocol', None)
            else:
              redistribute_object.protocol._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bgp_as_number', None)) != ''):
              redistribute_object.bgp_as_number = mapping_dict.get('bgp_as_number', None)
            else:
              redistribute_object.bgp_as_number._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('metric', None)) != ''):
              redistribute_object.metric = mapping_dict.get('metric', None)
            else:
              redistribute_object.metric._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('routemap_name', None)) != ''):
              redistribute_object.routemap_name = mapping_dict.get('routemap_name', None)
            else:
              redistribute_object.routemap_name._empty_tag = True
          except TypeError:
            pass
          redistribute_object_list.append(redistribute_object)

          return redistribute_object_list

    #XPATH devices/device/virtual-devices/virtual-device/snmp
    class snmp(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snmp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for snmp_object in snmp_object_list:
          #fetch payload
          snmp_payload = snmp_object.getxml(filter=True)
          util.log_debug('snmp_payload %s'%snmp_payload)
          payload_list.append(snmp_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snmp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for snmp_object in snmp_object_list:
          #fetch payload
          snmp_payload = snmp_object.getxml(filter=True)

          util.log_debug('snmp_payload %s'%snmp_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snmp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        community = mapping_dict.get('community')
        if not isinstance(community, list):
          community = [community]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for community_iterator in community:
          rcpath_tmp =  rcpath+"/snmp=%s"%(util.make_interfacename(community_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, snmp_object in enumerate(snmp_object_list):
          #fetch payload
          snmp_payload = snmp_object.getxml(filter=True)

          util.log_debug('update snmp_payload %s'%snmp_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('community')):
          raise Exception("'community' cannot be empty")

        #convert keys to list
        community = mapping_dict.get('community')
        if not isinstance(community, list):
          community = [community]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for community_iterator in community:
          rcpath_tmp =  rcpath+"/snmp=%s"%(util.make_interfacename(community_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('community')):
          raise Exception("'community' cannot be empty")
        if util.isEmpty(mapping_dict.get('comm_auth_type')):
          raise Exception("'comm_auth_type' cannot be empty")

        #convert keys to list
        community = mapping_dict.get('community')
        if not isinstance(community, list):
          community = [community]

        #prepare payload
        snmp_object_list = []
        for community_iterator in community:
          from servicemodel.controller.devices.device.virtual_devices import virtual_device
          snmp_object = virtual_device.snmp.snmp()
          snmp_object.community = community_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('rw_community', None)) != ''):
              snmp_object.rw_community = mapping_dict.get('rw_community', None)
            else:
              snmp_object.rw_community._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('system_shutdown', None)) != ''):
              snmp_object.system_shutdown = mapping_dict.get('system_shutdown', None)
            else:
              snmp_object.system_shutdown._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('comm_auth_type', None)) != ''):
              snmp_object.comm_auth_type = mapping_dict.get('comm_auth_type', None)
            else:
              snmp_object.comm_auth_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('snmp_version', None)) != ''):
              snmp_object.snmp_version = mapping_dict.get('snmp_version', None)
            else:
              snmp_object.snmp_version._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('contact', None)) != ''):
              snmp_object.contact = mapping_dict.get('contact', None)
            else:
              snmp_object.contact._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('location', None)) != ''):
              snmp_object.location = mapping_dict.get('location', None)
            else:
              snmp_object.location._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('all_traps', None)) != ''):
              snmp_object.all_traps = mapping_dict.get('all_traps', None)
            else:
              snmp_object.all_traps._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
              snmp_object.vrf = mapping_dict.get('vrf', None)
            else:
              snmp_object.vrf._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('routing_instance', None)) != ''):
              snmp_object.routing_instance = mapping_dict.get('routing_instance', None)
            else:
              snmp_object.routing_instance._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('view_name', None)) != ''):
              snmp_object.view_name = mapping_dict.get('view_name', None)
            else:
              snmp_object.view_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('view_type', None)) != ''):
              snmp_object.view_type = mapping_dict.get('view_type', None)
            else:
              snmp_object.view_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('oid', None)) != ''):
              snmp_object.oid = mapping_dict.get('oid', None)
            else:
              snmp_object.oid._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('trap_source', None)) != ''):
              snmp_object.trap_source = mapping_dict.get('trap_source', None)
            else:
              snmp_object.trap_source._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('trap_group', None)) != ''):
              snmp_object.trap_group = mapping_dict.get('trap_group', None)
            else:
              snmp_object.trap_group._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('trap_type', None)) != ''):
              snmp_object.trap_type = mapping_dict.get('trap_type', None)
            else:
              snmp_object.trap_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('trap_recipient_address', None)) != ''):
              snmp_object.trap_recipient_address = mapping_dict.get('trap_recipient_address', None)
            else:
              snmp_object.trap_recipient_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('group_name', None)) != ''):
              snmp_object.group_name = mapping_dict.get('group_name', None)
            else:
              snmp_object.group_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('user', None)) != ''):
              snmp_object.user = mapping_dict.get('user', None)
            else:
              snmp_object.user._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('group_priviledge', None)) != ''):
              snmp_object.group_priviledge = mapping_dict.get('group_priviledge', None)
            else:
              snmp_object.group_priviledge._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('group_auth_type', None)) != ''):
              snmp_object.group_auth_type = mapping_dict.get('group_auth_type', None)
            else:
              snmp_object.group_auth_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('acl_name', None)) != ''):
              snmp_object.acl_name = mapping_dict.get('acl_name', None)
            else:
              snmp_object.acl_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('packet_size', None)) != ''):
              snmp_object.packet_size = mapping_dict.get('packet_size', None)
            else:
              snmp_object.packet_size._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
              snmp_object.interface_name = mapping_dict.get('interface_name', None)
            else:
              snmp_object.interface_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('snmp_ifmib_ifindex_persist', None)) != ''):
              snmp_object.snmp_ifmib_ifindex_persist = mapping_dict.get('snmp_ifmib_ifindex_persist', None)
            else:
              snmp_object.snmp_ifmib_ifindex_persist._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('v3_auth_type', None)) != ''):
              snmp_object.v3_auth_type = mapping_dict.get('v3_auth_type', None)
            else:
              snmp_object.v3_auth_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('v3_auth_paswd', None)) != ''):
              snmp_object.v3_auth_paswd = mapping_dict.get('v3_auth_paswd', None)
            else:
              snmp_object.v3_auth_paswd._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('encrpt_type', None)) != ''):
              snmp_object.encrpt_type = mapping_dict.get('encrpt_type', None)
            else:
              snmp_object.encrpt_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('encrpt_length', None)) != ''):
              snmp_object.encrpt_length = mapping_dict.get('encrpt_length', None)
            else:
              snmp_object.encrpt_length._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('encrpt_paswd', None)) != ''):
              snmp_object.encrpt_paswd = mapping_dict.get('encrpt_paswd', None)
            else:
              snmp_object.encrpt_paswd._empty_tag = True
          except TypeError:
            pass
          snmp_object_list.append(snmp_object)

        return snmp_object_list

      #XPATH devices/device/virtual-devices/virtual-device/snmp/snmp-server
      class snmp_server(AbstractDeviceMgr):
        key_hints = [['name'],['community']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_server_object in snmp_server_object_list:
            #fetch payload
            snmp_server_payload = snmp_server_object.getxml(filter=True)
            util.log_debug('snmp_server_payload %s'%snmp_server_payload)
            payload_list.append(snmp_server_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_server_object in snmp_server_object_list:
            #fetch payload
            snmp_server_payload = snmp_server_object.getxml(filter=True)

            util.log_debug('snmp_server_payload %s'%snmp_server_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          snmp_server_ip = mapping_dict.get('snmp_server_ip')
          if not isinstance(snmp_server_ip, list):
            snmp_server_ip = [snmp_server_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_server_ip_iterator in snmp_server_ip:
            rcpath_tmp =  rcpath+"/snmp-server=%s"%(util.make_interfacename(snmp_server_ip_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, snmp_server_object in enumerate(snmp_server_object_list):
            #fetch payload
            snmp_server_payload = snmp_server_object.getxml(filter=True)

            util.log_debug('update snmp_server_payload %s'%snmp_server_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_server_ip')):
            raise Exception("'snmp_server_ip' cannot be empty")

          #convert keys to list
          snmp_server_ip = mapping_dict.get('snmp_server_ip')
          if not isinstance(snmp_server_ip, list):
            snmp_server_ip = [snmp_server_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_server_ip_iterator in snmp_server_ip:
            rcpath_tmp =  rcpath+"/snmp-server=%s"%(util.make_interfacename(snmp_server_ip_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name, snmp_community):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")
          if util.isEmpty(snmp_community):
            raise Exception("'snmp_community' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_server_ip')):
            raise Exception("'snmp_server_ip' cannot be empty")

          #convert keys to list
          snmp_server_ip = mapping_dict.get('snmp_server_ip')
          if not isinstance(snmp_server_ip, list):
            snmp_server_ip = [snmp_server_ip]

          #prepare payload
          snmp_server_object_list = []
          for snmp_server_ip_iterator in snmp_server_ip:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import snmp
            snmp_server_object = snmp.snmp_server.snmp_server()
            snmp_server_object.snmp_server_ip = snmp_server_ip_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
                snmp_server_object.context_name = mapping_dict.get('context_name', None)
              else:
                snmp_server_object.context_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('snmp_version', None)) != ''):
                snmp_server_object.snmp_version = mapping_dict.get('snmp_version', None)
              else:
                snmp_server_object.snmp_version._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('community', None)) != ''):
                snmp_server_object.community = mapping_dict.get('community', None)
              else:
                snmp_server_object.community._empty_tag = True
            except TypeError:
              pass
            snmp_server_object_list.append(snmp_server_object)

          return snmp_server_object_list

      #XPATH devices/device/virtual-devices/virtual-device/snmp/snmp-traps
      class snmp_traps(AbstractDeviceMgr):
        key_hints = [['name'],['community']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_traps_object in snmp_traps_object_list:
            #fetch payload
            snmp_traps_payload = snmp_traps_object.getxml(filter=True)
            util.log_debug('snmp_traps_payload %s'%snmp_traps_payload)
            payload_list.append(snmp_traps_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_traps_object in snmp_traps_object_list:
            #fetch payload
            snmp_traps_payload = snmp_traps_object.getxml(filter=True)

            util.log_debug('snmp_traps_payload %s'%snmp_traps_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_traps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          snmp_trap = mapping_dict.get('snmp_trap')
          if not isinstance(snmp_trap, list):
            snmp_trap = [snmp_trap]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_trap_iterator in snmp_trap:
            rcpath_tmp =  rcpath+"/snmp-traps=%s"%(util.make_interfacename(snmp_trap_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, snmp_traps_object in enumerate(snmp_traps_object_list):
            #fetch payload
            snmp_traps_payload = snmp_traps_object.getxml(filter=True)

            util.log_debug('update snmp_traps_payload %s'%snmp_traps_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_traps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_trap')):
            raise Exception("'snmp_trap' cannot be empty")

          #convert keys to list
          snmp_trap = mapping_dict.get('snmp_trap')
          if not isinstance(snmp_trap, list):
            snmp_trap = [snmp_trap]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_trap_iterator in snmp_trap:
            rcpath_tmp =  rcpath+"/snmp-traps=%s"%(util.make_interfacename(snmp_trap_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name, snmp_community):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")
          if util.isEmpty(snmp_community):
            raise Exception("'snmp_community' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_trap')):
            raise Exception("'snmp_trap' cannot be empty")

          #convert keys to list
          snmp_trap = mapping_dict.get('snmp_trap')
          if not isinstance(snmp_trap, list):
            snmp_trap = [snmp_trap]

          #prepare payload
          snmp_traps_object_list = []
          for snmp_trap_iterator in snmp_trap:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import snmp
            snmp_traps_object = snmp.snmp_traps.snmp_traps()
            snmp_traps_object.snmp_trap = snmp_trap_iterator
            snmp_traps_object_list.append(snmp_traps_object)

          return snmp_traps_object_list

      #XPATH devices/device/virtual-devices/virtual-device/snmp/snmp-community-list
      class snmp_community_list(AbstractDeviceMgr):
        key_hints = [['name'],['community']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_community_list_object in snmp_community_list_object_list:
            #fetch payload
            snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)
            util.log_debug('snmp_community_list_payload %s'%snmp_community_list_payload)
            payload_list.append(snmp_community_list_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_community_list_object in snmp_community_list_object_list:
            #fetch payload
            snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)

            util.log_debug('snmp_community_list_payload %s'%snmp_community_list_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_community_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          snmp_string = mapping_dict.get('snmp_string')
          if not isinstance(snmp_string, list):
            snmp_string = [snmp_string]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_string_iterator in snmp_string:
            rcpath_tmp =  rcpath+"/snmp-community-list=%s"%(util.make_interfacename(snmp_string_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, snmp_community_list_object in enumerate(snmp_community_list_object_list):
            #fetch payload
            snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)

            util.log_debug('update snmp_community_list_payload %s'%snmp_community_list_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_community_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_string')):
            raise Exception("'snmp_string' cannot be empty")

          #convert keys to list
          snmp_string = mapping_dict.get('snmp_string')
          if not isinstance(snmp_string, list):
            snmp_string = [snmp_string]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for snmp_string_iterator in snmp_string:
            rcpath_tmp =  rcpath+"/snmp-community-list=%s"%(util.make_interfacename(snmp_string_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name, snmp_community):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")
          if util.isEmpty(snmp_community):
            raise Exception("'snmp_community' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('snmp_string')):
            raise Exception("'snmp_string' cannot be empty")

          #convert keys to list
          snmp_string = mapping_dict.get('snmp_string')
          if not isinstance(snmp_string, list):
            snmp_string = [snmp_string]

          #prepare payload
          snmp_community_list_object_list = []
          for snmp_string_iterator in snmp_string:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import snmp
            snmp_community_list_object = snmp.snmp_community_list.snmp_community_list()
            snmp_community_list_object.snmp_string = snmp_string_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('permission_type', None)) != ''):
                snmp_community_list_object.permission_type = mapping_dict.get('permission_type', None)
              else:
                snmp_community_list_object.permission_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl', None)) != ''):
                snmp_community_list_object.acl = mapping_dict.get('acl', None)
              else:
                snmp_community_list_object.acl._empty_tag = True
            except TypeError:
              pass
            snmp_community_list_object_list.append(snmp_community_list_object)

          return snmp_community_list_object_list

      #XPATH devices/device/virtual-devices/virtual-device/snmp/snmp-mib
      class snmp_mib(AbstractDeviceMgr):
        key_hints = [['name'],['community']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_mib_object in snmp_mib_object_list:
            #fetch payload
            snmp_mib_payload = snmp_mib_object.getxml(filter=True)
            util.log_debug('snmp_mib_payload %s'%snmp_mib_payload)
            payload_list.append(snmp_mib_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict)

          for snmp_mib_object in snmp_mib_object_list:
            #fetch payload
            snmp_mib_payload = snmp_mib_object.getxml(filter=True)

            util.log_debug('snmp_mib_payload %s'%snmp_mib_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_mib_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          mib_persistence = mapping_dict.get('mib_persistence')
          if not isinstance(mib_persistence, list):
            mib_persistence = [mib_persistence]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for mib_persistence_iterator in mib_persistence:
            rcpath_tmp =  rcpath+"/snmp-mib=%s"%(util.make_interfacename(mib_persistence_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, snmp_mib_object in enumerate(snmp_mib_object_list):
            #fetch payload
            snmp_mib_payload = snmp_mib_object.getxml(filter=True)

            util.log_debug('update snmp_mib_payload %s'%snmp_mib_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_mib_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, snmp_community, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name, snmp_community)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name
          if not isinstance(snmp_community, list):
            snmp_community_list = [snmp_community]
          else:
            snmp_community_list = snmp_community

          for virtual_device_name in virtual_device_name_list:
            for snmp_community in snmp_community_list:
              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/snmp=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(snmp_community))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('mib_persistence')):
            raise Exception("'mib_persistence' cannot be empty")

          #convert keys to list
          mib_persistence = mapping_dict.get('mib_persistence')
          if not isinstance(mib_persistence, list):
            mib_persistence = [mib_persistence]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for mib_persistence_iterator in mib_persistence:
            rcpath_tmp =  rcpath+"/snmp-mib=%s"%(util.make_interfacename(mib_persistence_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name, snmp_community):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")
          if util.isEmpty(snmp_community):
            raise Exception("'snmp_community' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('mib_persistence')):
            raise Exception("'mib_persistence' cannot be empty")

          #convert keys to list
          mib_persistence = mapping_dict.get('mib_persistence')
          if not isinstance(mib_persistence, list):
            mib_persistence = [mib_persistence]

          #prepare payload
          snmp_mib_object_list = []
          for mib_persistence_iterator in mib_persistence:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import snmp
            snmp_mib_object = snmp.snmp_mib.snmp_mib()
            snmp_mib_object.mib_persistence = mib_persistence_iterator
            snmp_mib_object_list.append(snmp_mib_object)

          return snmp_mib_object_list

    #XPATH devices/device/virtual-devices/virtual-device/ssh
    class ssh(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssh_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ssh_object in ssh_object_list:
          #fetch payload
          ssh_payload = ssh_object.getxml(filter=True)
          util.log_debug('ssh_payload %s'%ssh_payload)
          payload_list.append(ssh_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssh_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ssh_object in ssh_object_list:
          #fetch payload
          ssh_payload = ssh_object.getxml(filter=True)

          util.log_debug('ssh_payload %s'%ssh_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ssh_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssh_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ssh"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, ssh_object in enumerate(ssh_object_list):
          #fetch payload
          ssh_payload = ssh_object.getxml(filter=True)

          util.log_debug('update ssh_payload %s'%ssh_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ssh_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ssh"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        ssh_object_list = []
        from servicemodel.controller.devices.device.virtual_devices import virtual_device
        ssh_object = virtual_device.ssh.ssh()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
            ssh_object.name = mapping_dict.get('name', None)
          else:
            ssh_object.name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timeout', None)) != ''):
            ssh_object.timeout = mapping_dict.get('timeout', None)
          else:
            ssh_object.timeout._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('version', None)) != ''):
            ssh_object.version = mapping_dict.get('version', None)
          else:
            ssh_object.version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
            ssh_object.interface_name = mapping_dict.get('interface_name', None)
          else:
            ssh_object.interface_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('label', None)) != ''):
            ssh_object.label = mapping_dict.get('label', None)
          else:
            ssh_object.label._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('key_modulus', None)) != ''):
            ssh_object.key_modulus = mapping_dict.get('key_modulus', None)
          else:
            ssh_object.key_modulus._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rsa_keypair_name', None)) != ''):
            ssh_object.rsa_keypair_name = mapping_dict.get('rsa_keypair_name', None)
          else:
            ssh_object.rsa_keypair_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_retries_count', None)) != ''):
            ssh_object.auth_retries_count = mapping_dict.get('auth_retries_count', None)
          else:
            ssh_object.auth_retries_count._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_interface', None)) != ''):
            ssh_object.source_interface = mapping_dict.get('source_interface', None)
          else:
            ssh_object.source_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('acl_rule_number', None)) != ''):
            ssh_object.acl_rule_number = mapping_dict.get('acl_rule_number', None)
          else:
            ssh_object.acl_rule_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('scp_enable', None)) != ''):
            ssh_object.scp_enable = mapping_dict.get('scp_enable', None)
          else:
            ssh_object.scp_enable._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('authentication_mode', None)) != ''):
            ssh_object.authentication_mode = mapping_dict.get('authentication_mode', None)
          else:
            ssh_object.authentication_mode._empty_tag = True
        except TypeError:
          pass
        ssh_object_list.append(ssh_object)

        return ssh_object_list

      #XPATH devices/device/virtual-devices/virtual-device/ssh/network
      class network(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ssh"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)
            util.log_debug('network_payload %s'%network_payload)
            payload_list.append(network_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ssh"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('network_payload %s'%network_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/ssh"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]
          netmask = mapping_dict.get('netmask')
          if not isinstance(netmask, list):
            netmask = [netmask]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            for netmask_iterator in netmask:
              rcpath_tmp =  rcpath+"/network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, network_object in enumerate(network_object_list):
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('update network_payload %s'%network_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ssh"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")
          if util.isEmpty(mapping_dict.get('netmask')):
            raise Exception("'netmask' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]
          netmask = mapping_dict.get('netmask')
          if not isinstance(netmask, list):
            netmask = [netmask]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            for netmask_iterator in netmask:
              rcpath_tmp =  rcpath+"/network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")
          if util.isEmpty(mapping_dict.get('netmask')):
            raise Exception("'netmask' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]
          netmask = mapping_dict.get('netmask')
          if not isinstance(netmask, list):
            netmask = [netmask]

          #prepare payload
          network_object_list = []
          for ip_address_iterator in ip_address:
            for netmask_iterator in netmask:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device import ssh
              network_object = ssh.network.network()
              network_object.ip_address = ip_address_iterator
              network_object.netmask = netmask_iterator
              network_object_list.append(network_object)

          return network_object_list

    #XPATH devices/device/virtual-devices/virtual-device/logging
    class logging(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        logging_object_list = self.validate_inputs_form_payload(mapping_dict)

        for logging_object in logging_object_list:
          #fetch payload
          logging_payload = logging_object.getxml(filter=True)
          util.log_debug('logging_payload %s'%logging_payload)
          payload_list.append(logging_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        logging_object_list = self.validate_inputs_form_payload(mapping_dict)

        for logging_object in logging_object_list:
          #fetch payload
          logging_payload = logging_object.getxml(filter=True)

          util.log_debug('logging_payload %s'%logging_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=logging_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        logging_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/logging"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, logging_object in enumerate(logging_object_list):
          #fetch payload
          logging_payload = logging_object.getxml(filter=True)

          util.log_debug('update logging_payload %s'%logging_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=logging_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/logging"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        logging_object_list = []
        from servicemodel.controller.devices.device.virtual_devices import virtual_device
        logging_object = virtual_device.logging.logging()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
            logging_object.interface_name = mapping_dict.get('interface_name', None)
          else:
            logging_object.interface_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
            logging_object.ip_address = mapping_dict.get('ip_address', None)
          else:
            logging_object.ip_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('facility_number', None)) != ''):
            logging_object.facility_number = mapping_dict.get('facility_number', None)
          else:
            logging_object.facility_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('facility_name', None)) != ''):
            logging_object.facility_name = mapping_dict.get('facility_name', None)
          else:
            logging_object.facility_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('no_logging_console', None)) != ''):
            logging_object.no_logging_console = mapping_dict.get('no_logging_console', None)
          else:
            logging_object.no_logging_console._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('logging_trap', None)) != ''):
            logging_object.logging_trap = mapping_dict.get('logging_trap', None)
          else:
            logging_object.logging_trap._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('buffer_size', None)) != ''):
            logging_object.buffer_size = mapping_dict.get('buffer_size', None)
          else:
            logging_object.buffer_size._empty_tag = True
        except TypeError:
          pass
        logging_object_list.append(logging_object)

        return logging_object_list

      #XPATH devices/device/virtual-devices/virtual-device/logging/logging-hosts
      class logging_hosts(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/logging"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          logging_hosts_object_list = self.validate_inputs_form_payload(mapping_dict)

          for logging_hosts_object in logging_hosts_object_list:
            #fetch payload
            logging_hosts_payload = logging_hosts_object.getxml(filter=True)
            util.log_debug('logging_hosts_payload %s'%logging_hosts_payload)
            payload_list.append(logging_hosts_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/logging"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          logging_hosts_object_list = self.validate_inputs_form_payload(mapping_dict)

          for logging_hosts_object in logging_hosts_object_list:
            #fetch payload
            logging_hosts_payload = logging_hosts_object.getxml(filter=True)

            util.log_debug('logging_hosts_payload %s'%logging_hosts_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=logging_hosts_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/logging"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          logging_hosts_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/logging-hosts=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, logging_hosts_object in enumerate(logging_hosts_object_list):
            #fetch payload
            logging_hosts_payload = logging_hosts_object.getxml(filter=True)

            util.log_debug('update logging_hosts_payload %s'%logging_hosts_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=logging_hosts_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/logging"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/logging-hosts=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          logging_hosts_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import logging
            logging_hosts_object = logging.logging_hosts.logging_hosts()
            logging_hosts_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('severity_level', None)) != ''):
                logging_hosts_object.severity_level = mapping_dict.get('severity_level', None)
              else:
                logging_hosts_object.severity_level._empty_tag = True
            except TypeError:
              pass
            logging_hosts_object_list.append(logging_hosts_object)

          return logging_hosts_object_list

    #XPATH devices/device/virtual-devices/virtual-device/tacacs-conf
    class tacacs_conf(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        tacacs_conf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for tacacs_conf_object in tacacs_conf_object_list:
          #fetch payload
          tacacs_conf_payload = tacacs_conf_object.getxml(filter=True)
          util.log_debug('tacacs_conf_payload %s'%tacacs_conf_payload)
          payload_list.append(tacacs_conf_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)

        #convert parent keys to list
        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        tacacs_conf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for tacacs_conf_object in tacacs_conf_object_list:
          #fetch payload
          tacacs_conf_payload = tacacs_conf_object.getxml(filter=True)

          util.log_debug('tacacs_conf_payload %s'%tacacs_conf_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=tacacs_conf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        ##prepare rcpath
        rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        tacacs_conf_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/tacacs-conf"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, tacacs_conf_object in enumerate(tacacs_conf_object_list):
          #fetch payload
          tacacs_conf_payload = tacacs_conf_object.getxml(filter=True)

          util.log_debug('update tacacs_conf_payload %s'%tacacs_conf_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=tacacs_conf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_device_name)


        if not isinstance(virtual_device_name, list):
          virtual_device_name_list = [virtual_device_name]
        else:
          virtual_device_name_list = virtual_device_name

        for virtual_device_name in virtual_device_name_list:
          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s"%(util.make_interfacename(virtual_device_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/tacacs-conf"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_device_name):
        #Parent Key Validations
        if util.isEmpty(virtual_device_name):
          raise Exception("'virtual_device_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        tacacs_conf_object_list = []
        from servicemodel.controller.devices.device.virtual_devices import virtual_device
        tacacs_conf_object = virtual_device.tacacs_conf.tacacs_conf()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tacacs_src_interface', None)) != ''):
            tacacs_conf_object.tacacs_src_interface = mapping_dict.get('tacacs_src_interface', None)
          else:
            tacacs_conf_object.tacacs_src_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tacacs_host_ip', None)) != ''):
            tacacs_conf_object.tacacs_host_ip = mapping_dict.get('tacacs_host_ip', None)
          else:
            tacacs_conf_object.tacacs_host_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timeout', None)) != ''):
            tacacs_conf_object.timeout = mapping_dict.get('timeout', None)
          else:
            tacacs_conf_object.timeout._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tacacs_key', None)) != ''):
            tacacs_conf_object.tacacs_key = mapping_dict.get('tacacs_key', None)
          else:
            tacacs_conf_object.tacacs_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_password', None)) != ''):
            tacacs_conf_object.enable_password = mapping_dict.get('enable_password', None)
          else:
            tacacs_conf_object.enable_password._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('secret_level', None)) != ''):
            tacacs_conf_object.secret_level = mapping_dict.get('secret_level', None)
          else:
            tacacs_conf_object.secret_level._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tacacs_server_group', None)) != ''):
            tacacs_conf_object.tacacs_server_group = mapping_dict.get('tacacs_server_group', None)
          else:
            tacacs_conf_object.tacacs_server_group._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tacacs_server_name', None)) != ''):
            tacacs_conf_object.tacacs_server_name = mapping_dict.get('tacacs_server_name', None)
          else:
            tacacs_conf_object.tacacs_server_name._empty_tag = True
        except TypeError:
          pass
        tacacs_conf_object_list.append(tacacs_conf_object)

        return tacacs_conf_object_list

      #XPATH devices/device/virtual-devices/virtual-device/tacacs-conf/tacacs-servers
      class tacacs_servers(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/tacacs-conf"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          tacacs_servers_object_list = self.validate_inputs_form_payload(mapping_dict)

          for tacacs_servers_object in tacacs_servers_object_list:
            #fetch payload
            tacacs_servers_payload = tacacs_servers_object.getxml(filter=True)
            util.log_debug('tacacs_servers_payload %s'%tacacs_servers_payload)
            payload_list.append(tacacs_servers_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/tacacs-conf"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          tacacs_servers_object_list = self.validate_inputs_form_payload(mapping_dict)

          for tacacs_servers_object in tacacs_servers_object_list:
            #fetch payload
            tacacs_servers_payload = tacacs_servers_object.getxml(filter=True)

            util.log_debug('tacacs_servers_payload %s'%tacacs_servers_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=tacacs_servers_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/tacacs-conf"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          tacacs_servers_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          tacacs_server = mapping_dict.get('tacacs_server')
          if not isinstance(tacacs_server, list):
            tacacs_server = [tacacs_server]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for tacacs_server_iterator in tacacs_server:
            rcpath_tmp =  rcpath+"/tacacs-servers=%s"%(util.make_interfacename(tacacs_server_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, tacacs_servers_object in enumerate(tacacs_servers_object_list):
            #fetch payload
            tacacs_servers_payload = tacacs_servers_object.getxml(filter=True)

            util.log_debug('update tacacs_servers_payload %s'%tacacs_servers_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=tacacs_servers_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/tacacs-conf"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('tacacs_server')):
            raise Exception("'tacacs_server' cannot be empty")

          #convert keys to list
          tacacs_server = mapping_dict.get('tacacs_server')
          if not isinstance(tacacs_server, list):
            tacacs_server = [tacacs_server]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for tacacs_server_iterator in tacacs_server:
            rcpath_tmp =  rcpath+"/tacacs-servers=%s"%(util.make_interfacename(tacacs_server_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('tacacs_server')):
            raise Exception("'tacacs_server' cannot be empty")

          #convert keys to list
          tacacs_server = mapping_dict.get('tacacs_server')
          if not isinstance(tacacs_server, list):
            tacacs_server = [tacacs_server]

          #prepare payload
          tacacs_servers_object_list = []
          for tacacs_server_iterator in tacacs_server:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import tacacs_conf
            tacacs_servers_object = tacacs_conf.tacacs_servers.tacacs_servers()
            tacacs_servers_object.tacacs_server = tacacs_server_iterator
            tacacs_servers_object_list.append(tacacs_servers_object)

          return tacacs_servers_object_list

    class network_objects(object):
      #XPATH devices/device/virtual-devices/virtual-device/network-objects/network-object
      class network_object(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/network-objects"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object_object in network_object_object_list:
            #fetch payload
            network_object_payload = network_object_object.getxml(filter=True)
            util.log_debug('network_object_payload %s'%network_object_payload)
            payload_list.append(network_object_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/network-objects"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object_object in network_object_object_list:
            #fetch payload
            network_object_payload = network_object_object.getxml(filter=True)

            util.log_debug('network_object_payload %s'%network_object_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/network-objects"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, network_object_object in enumerate(network_object_object_list):
            #fetch payload
            network_object_payload = network_object_object.getxml(filter=True)

            util.log_debug('update network_object_payload %s'%network_object_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/network-objects"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          network_object_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import network_objects
            network_object_object = network_objects.network_object.network_object()
            network_object_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                network_object_object.description = mapping_dict.get('description', None)
              else:
                network_object_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
                network_object_object.vrf_name = mapping_dict.get('vrf_name', None)
              else:
                network_object_object.vrf_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('object_group_name', None)) != ''):
                network_object_object.object_group_name = mapping_dict.get('object_group_name', None)
              else:
                network_object_object.object_group_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
                network_object_object.type = mapping_dict.get('type', None)
              else:
                network_object_object.type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
                network_object_object.ip_address = mapping_dict.get('ip_address', None)
              else:
                network_object_object.ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                network_object_object.netmask = mapping_dict.get('netmask', None)
              else:
                network_object_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
                network_object_object.tag = mapping_dict.get('tag', None)
              else:
                network_object_object.tag._empty_tag = True
            except TypeError:
              pass
            network_object_object_list.append(network_object_object)

          return network_object_object_list

    class object_groups(object):
      #XPATH devices/device/virtual-devices/virtual-device/object-groups/object-group
      class object_group(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

          for object_group_object in object_group_object_list:
            #fetch payload
            object_group_payload = object_group_object.getxml(filter=True)
            util.log_debug('object_group_payload %s'%object_group_payload)
            payload_list.append(object_group_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

          for object_group_object in object_group_object_list:
            #fetch payload
            object_group_payload = object_group_object.getxml(filter=True)

            util.log_debug('object_group_payload %s'%object_group_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/object-group=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, object_group_object in enumerate(object_group_object_list):
            #fetch payload
            object_group_payload = object_group_object.getxml(filter=True)

            util.log_debug('update object_group_payload %s'%object_group_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/object-group=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          object_group_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import object_groups
            object_group_object = object_groups.object_group.object_group()
            object_group_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                object_group_object.description = mapping_dict.get('description', None)
              else:
                object_group_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
                object_group_object.type = mapping_dict.get('type', None)
              else:
                object_group_object.type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('service_type', None)) != ''):
                object_group_object.service_type = mapping_dict.get('service_type', None)
              else:
                object_group_object.service_type._empty_tag = True
            except TypeError:
              pass
            object_group_object_list.append(object_group_object)

          return object_group_object_list

        #XPATH devices/device/virtual-devices/virtual-device/object-groups/object-group/network-object
        class network_object(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

            for network_object_object in network_object_object_list:
              #fetch payload
              network_object_payload = network_object_object.getxml(filter=True)
              util.log_debug('network_object_payload %s'%network_object_payload)
              payload_list.append(network_object_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

            for network_object_object in network_object_object_list:
              #fetch payload
              network_object_payload = network_object_object.getxml(filter=True)

              util.log_debug('network_object_payload %s'%network_object_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            network_object_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            network_object_name = mapping_dict.get('network_object_name')
            if not isinstance(network_object_name, list):
              network_object_name = [network_object_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for network_object_name_iterator in network_object_name:
              rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(network_object_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, network_object_object in enumerate(network_object_object_list):
              #fetch payload
              network_object_payload = network_object_object.getxml(filter=True)

              util.log_debug('update network_object_payload %s'%network_object_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('network_object_name')):
              raise Exception("'network_object_name' cannot be empty")

            #convert keys to list
            network_object_name = mapping_dict.get('network_object_name')
            if not isinstance(network_object_name, list):
              network_object_name = [network_object_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for network_object_name_iterator in network_object_name:
              rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(network_object_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, object_group_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(object_group_name):
              raise Exception("'object_group_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('network_object_name')):
              raise Exception("'network_object_name' cannot be empty")

            #convert keys to list
            network_object_name = mapping_dict.get('network_object_name')
            if not isinstance(network_object_name, list):
              network_object_name = [network_object_name]

            #prepare payload
            network_object_object_list = []
            for network_object_name_iterator in network_object_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.object_groups import object_group
              network_object_object = object_group.network_object.network_object()
              network_object_object.network_object_name = network_object_name_iterator
              network_object_object_list.append(network_object_object)

            return network_object_object_list

        #XPATH devices/device/virtual-devices/virtual-device/object-groups/object-group/sub-object-group
        class sub_object_group(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_object_group_object in sub_object_group_object_list:
              #fetch payload
              sub_object_group_payload = sub_object_group_object.getxml(filter=True)
              util.log_debug('sub_object_group_payload %s'%sub_object_group_payload)
              payload_list.append(sub_object_group_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_object_group_object in sub_object_group_object_list:
              #fetch payload
              sub_object_group_payload = sub_object_group_object.getxml(filter=True)

              util.log_debug('sub_object_group_payload %s'%sub_object_group_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sub_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            object_group_name = mapping_dict.get('object_group_name')
            if not isinstance(object_group_name, list):
              object_group_name = [object_group_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for object_group_name_iterator in object_group_name:
              rcpath_tmp =  rcpath+"/sub-object-group=%s"%(util.make_interfacename(object_group_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, sub_object_group_object in enumerate(sub_object_group_object_list):
              #fetch payload
              sub_object_group_payload = sub_object_group_object.getxml(filter=True)

              util.log_debug('update sub_object_group_payload %s'%sub_object_group_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sub_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('object_group_name')):
              raise Exception("'object_group_name' cannot be empty")

            #convert keys to list
            object_group_name = mapping_dict.get('object_group_name')
            if not isinstance(object_group_name, list):
              object_group_name = [object_group_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for object_group_name_iterator in object_group_name:
              rcpath_tmp =  rcpath+"/sub-object-group=%s"%(util.make_interfacename(object_group_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, object_group_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(object_group_name):
              raise Exception("'object_group_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('object_group_name')):
              raise Exception("'object_group_name' cannot be empty")

            #convert keys to list
            object_group_name = mapping_dict.get('object_group_name')
            if not isinstance(object_group_name, list):
              object_group_name = [object_group_name]

            #prepare payload
            sub_object_group_object_list = []
            for object_group_name_iterator in object_group_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.object_groups import object_group
              sub_object_group_object = object_group.sub_object_group.sub_object_group()
              sub_object_group_object.object_group_name = object_group_name_iterator
              sub_object_group_object_list.append(sub_object_group_object)

            return sub_object_group_object_list

        #XPATH devices/device/virtual-devices/virtual-device/object-groups/object-group/service-object
        class service_object(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_object_list = self.validate_inputs_form_payload(mapping_dict)

            for service_object_object in service_object_object_list:
              #fetch payload
              service_object_payload = service_object_object.getxml(filter=True)
              util.log_debug('service_object_payload %s'%service_object_payload)
              payload_list.append(service_object_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_object_list = self.validate_inputs_form_payload(mapping_dict)

            for service_object_object in service_object_object_list:
              #fetch payload
              service_object_payload = service_object_object.getxml(filter=True)

              util.log_debug('service_object_payload %s'%service_object_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            service_object_value = mapping_dict.get('service_object_value')
            if not isinstance(service_object_value, list):
              service_object_value = [service_object_value]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for service_object_value_iterator in service_object_value:
              rcpath_tmp =  rcpath+"/service-object=%s"%(util.make_interfacename(service_object_value_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, service_object_object in enumerate(service_object_object_list):
              #fetch payload
              service_object_payload = service_object_object.getxml(filter=True)

              util.log_debug('update service_object_payload %s'%service_object_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, object_group_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(object_group_name, list):
              object_group_name_list = [object_group_name]
            else:
              object_group_name_list = object_group_name

            for virtual_device_name in virtual_device_name_list:
              for object_group_name in object_group_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/object-groups/object-group=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(object_group_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('service_object_value')):
              raise Exception("'service_object_value' cannot be empty")

            #convert keys to list
            service_object_value = mapping_dict.get('service_object_value')
            if not isinstance(service_object_value, list):
              service_object_value = [service_object_value]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for service_object_value_iterator in service_object_value:
              rcpath_tmp =  rcpath+"/service-object=%s"%(util.make_interfacename(service_object_value_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, object_group_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(object_group_name):
              raise Exception("'object_group_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('service_object_value')):
              raise Exception("'service_object_value' cannot be empty")

            #convert keys to list
            service_object_value = mapping_dict.get('service_object_value')
            if not isinstance(service_object_value, list):
              service_object_value = [service_object_value]

            #prepare payload
            service_object_object_list = []
            for service_object_value_iterator in service_object_value:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.object_groups import object_group
              service_object_object = object_group.service_object.service_object()
              service_object_object.service_object_value = service_object_value_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('service_object_type', None)) != ''):
                  service_object_object.service_object_type = mapping_dict.get('service_object_type', None)
                else:
                  service_object_object.service_object_type._empty_tag = True
              except TypeError:
                pass
              service_object_object_list.append(service_object_object)

            return service_object_object_list

    class nat_object_groups(object):
      #XPATH devices/device/virtual-devices/virtual-device/nat-object-groups/nat-object-group
      class nat_object_group(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/nat-object-groups"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          nat_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

          for nat_object_group_object in nat_object_group_object_list:
            #fetch payload
            nat_object_group_payload = nat_object_group_object.getxml(filter=True)
            util.log_debug('nat_object_group_payload %s'%nat_object_group_payload)
            payload_list.append(nat_object_group_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/nat-object-groups"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          nat_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

          for nat_object_group_object in nat_object_group_object_list:
            #fetch payload
            nat_object_group_payload = nat_object_group_object.getxml(filter=True)

            util.log_debug('nat_object_group_payload %s'%nat_object_group_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=nat_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/nat-object-groups"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          nat_object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/nat-object-group=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, nat_object_group_object in enumerate(nat_object_group_object_list):
            #fetch payload
            nat_object_group_payload = nat_object_group_object.getxml(filter=True)

            util.log_debug('update nat_object_group_payload %s'%nat_object_group_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=nat_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/nat-object-groups"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/nat-object-group=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")
          if util.isEmpty(mapping_dict.get('nat_outside_ip')):
            raise Exception("'nat_outside_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('host_ip')):
            raise Exception("'host_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('nat_outside_interface')):
            raise Exception("'nat_outside_interface' cannot be empty")
          if util.isEmpty(mapping_dict.get('nat_inside_interface')):
            raise Exception("'nat_inside_interface' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          nat_object_group_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import nat_object_groups
            nat_object_group_object = nat_object_groups.nat_object_group.nat_object_group()
            nat_object_group_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nat_outside_ip', None)) != ''):
                nat_object_group_object.nat_outside_ip = mapping_dict.get('nat_outside_ip', None)
              else:
                nat_object_group_object.nat_outside_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('host_ip', None)) != ''):
                nat_object_group_object.host_ip = mapping_dict.get('host_ip', None)
              else:
                nat_object_group_object.host_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nat_outside_interface', None)) != ''):
                nat_object_group_object.nat_outside_interface = mapping_dict.get('nat_outside_interface', None)
              else:
                nat_object_group_object.nat_outside_interface._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nat_inside_interface', None)) != ''):
                nat_object_group_object.nat_inside_interface = mapping_dict.get('nat_inside_interface', None)
              else:
                nat_object_group_object.nat_inside_interface._empty_tag = True
            except TypeError:
              pass
            nat_object_group_object_list.append(nat_object_group_object)

          return nat_object_group_object_list

    class ti_class_maps(object):
      #XPATH devices/device/virtual-devices/virtual-device/ti-class-maps/class-map
      class class_map(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          class_map_object_list = self.validate_inputs_form_payload(mapping_dict)

          for class_map_object in class_map_object_list:
            #fetch payload
            class_map_payload = class_map_object.getxml(filter=True)
            util.log_debug('class_map_payload %s'%class_map_payload)
            payload_list.append(class_map_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          class_map_object_list = self.validate_inputs_form_payload(mapping_dict)

          for class_map_object in class_map_object_list:
            #fetch payload
            class_map_payload = class_map_object.getxml(filter=True)

            util.log_debug('class_map_payload %s'%class_map_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=class_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          class_map_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/class-map=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, class_map_object in enumerate(class_map_object_list):
            #fetch payload
            class_map_payload = class_map_object.getxml(filter=True)

            util.log_debug('update class_map_payload %s'%class_map_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=class_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/class-map=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          class_map_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import ti_class_maps
            class_map_object = ti_class_maps.class_map.class_map()
            class_map_object.name = name_iterator
            class_map_object_list.append(class_map_object)

          return class_map_object_list

        #XPATH devices/device/virtual-devices/virtual-device/ti-class-maps/class-map/match-condition
        class match_condition(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, class_map_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, class_map_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(class_map_name, list):
              class_map_name_list = [class_map_name]
            else:
              class_map_name_list = class_map_name

            for virtual_device_name in virtual_device_name_list:
              for class_map_name in class_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps/class-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(class_map_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

            for match_condition_object in match_condition_object_list:
              #fetch payload
              match_condition_payload = match_condition_object.getxml(filter=True)
              util.log_debug('match_condition_payload %s'%match_condition_payload)
              payload_list.append(match_condition_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, class_map_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, class_map_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(class_map_name, list):
              class_map_name_list = [class_map_name]
            else:
              class_map_name_list = class_map_name

            for virtual_device_name in virtual_device_name_list:
              for class_map_name in class_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps/class-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(class_map_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

            for match_condition_object in match_condition_object_list:
              #fetch payload
              match_condition_payload = match_condition_object.getxml(filter=True)

              util.log_debug('match_condition_payload %s'%match_condition_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, class_map_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, class_map_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps/class-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(class_map_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            match_condition_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            match_value = mapping_dict.get('match_value')
            if not isinstance(match_value, list):
              match_value = [match_value]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for match_value_iterator in match_value:
              rcpath_tmp =  rcpath+"/match-condition=%s"%(util.make_interfacename(match_value_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, match_condition_object in enumerate(match_condition_object_list):
              #fetch payload
              match_condition_payload = match_condition_object.getxml(filter=True)

              util.log_debug('update match_condition_payload %s'%match_condition_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, class_map_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, class_map_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(class_map_name, list):
              class_map_name_list = [class_map_name]
            else:
              class_map_name_list = class_map_name

            for virtual_device_name in virtual_device_name_list:
              for class_map_name in class_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-class-maps/class-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(class_map_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('match_value')):
              raise Exception("'match_value' cannot be empty")

            #convert keys to list
            match_value = mapping_dict.get('match_value')
            if not isinstance(match_value, list):
              match_value = [match_value]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for match_value_iterator in match_value:
              rcpath_tmp =  rcpath+"/match-condition=%s"%(util.make_interfacename(match_value_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, class_map_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(class_map_name):
              raise Exception("'class_map_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('match_value')):
              raise Exception("'match_value' cannot be empty")

            #convert keys to list
            match_value = mapping_dict.get('match_value')
            if not isinstance(match_value, list):
              match_value = [match_value]

            #prepare payload
            match_condition_object_list = []
            for match_value_iterator in match_value:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.ti_class_maps import class_map
              match_condition_object = class_map.match_condition.match_condition()
              match_condition_object.match_value = match_value_iterator
              match_condition_object_list.append(match_condition_object)

            return match_condition_object_list

    class ti_policy_maps(object):
      #XPATH devices/device/virtual-devices/virtual-device/ti-policy-maps/policy-map
      class policy_map(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          policy_map_object_list = self.validate_inputs_form_payload(mapping_dict)

          for policy_map_object in policy_map_object_list:
            #fetch payload
            policy_map_payload = policy_map_object.getxml(filter=True)
            util.log_debug('policy_map_payload %s'%policy_map_payload)
            payload_list.append(policy_map_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          policy_map_object_list = self.validate_inputs_form_payload(mapping_dict)

          for policy_map_object in policy_map_object_list:
            #fetch payload
            policy_map_payload = policy_map_object.getxml(filter=True)

            util.log_debug('policy_map_payload %s'%policy_map_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=policy_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          policy_map_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/policy-map=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, policy_map_object in enumerate(policy_map_object_list):
            #fetch payload
            policy_map_payload = policy_map_object.getxml(filter=True)

            util.log_debug('update policy_map_payload %s'%policy_map_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=policy_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/policy-map=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          policy_map_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import ti_policy_maps
            policy_map_object = ti_policy_maps.policy_map.policy_map()
            policy_map_object.name = name_iterator
            policy_map_object_list.append(policy_map_object)

          return policy_map_object_list

        #XPATH devices/device/virtual-devices/virtual-device/ti-policy-maps/policy-map/class
        class class_(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, policy_map_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, policy_map_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(policy_map_name, list):
              policy_map_name_list = [policy_map_name]
            else:
              policy_map_name_list = policy_map_name

            for virtual_device_name in virtual_device_name_list:
              for policy_map_name in policy_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            class__object_list = self.validate_inputs_form_payload(mapping_dict)

            for class__object in class__object_list:
              #fetch payload
              class__payload = class__object.getxml(filter=True)
              util.log_debug('class__payload %s'%class__payload)
              payload_list.append(class__payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, policy_map_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, policy_map_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(policy_map_name, list):
              policy_map_name_list = [policy_map_name]
            else:
              policy_map_name_list = policy_map_name

            for virtual_device_name in virtual_device_name_list:
              for policy_map_name in policy_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            class__object_list = self.validate_inputs_form_payload(mapping_dict)

            for class__object in class__object_list:
              #fetch payload
              class__payload = class__object.getxml(filter=True)

              util.log_debug('class__payload %s'%class__payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=class__payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, policy_map_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, policy_map_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            class__object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            class_map_name = mapping_dict.get('class_map_name')
            if not isinstance(class_map_name, list):
              class_map_name = [class_map_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for class_map_name_iterator in class_map_name:
              rcpath_tmp =  rcpath+"/class=%s"%(util.make_interfacename(class_map_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, class__object in enumerate(class__object_list):
              #fetch payload
              class__payload = class__object.getxml(filter=True)

              util.log_debug('update class__payload %s'%class__payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=class__payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, policy_map_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, policy_map_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(policy_map_name, list):
              policy_map_name_list = [policy_map_name]
            else:
              policy_map_name_list = policy_map_name

            for virtual_device_name in virtual_device_name_list:
              for policy_map_name in policy_map_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('class_map_name')):
              raise Exception("'class_map_name' cannot be empty")

            #convert keys to list
            class_map_name = mapping_dict.get('class_map_name')
            if not isinstance(class_map_name, list):
              class_map_name = [class_map_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for class_map_name_iterator in class_map_name:
              rcpath_tmp =  rcpath+"/class=%s"%(util.make_interfacename(class_map_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, policy_map_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(policy_map_name):
              raise Exception("'policy_map_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('class_map_name')):
              raise Exception("'class_map_name' cannot be empty")

            #convert keys to list
            class_map_name = mapping_dict.get('class_map_name')
            if not isinstance(class_map_name, list):
              class_map_name = [class_map_name]

            #prepare payload
            class__object_list = []
            for class_map_name_iterator in class_map_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.ti_policy_maps import policy_map
              class__object = policy_map.class_.class_()
              class__object.class_map_name = class_map_name_iterator
              class__object_list.append(class__object)

            return class__object_list

          #XPATH devices/device/virtual-devices/virtual-device/ti-policy-maps/policy-map/class/inspect-type
          class inspect_type(AbstractDeviceMgr):
            key_hints = [['name'],['name'],['class_map_name']]
            def getRcpathPayload(self, sdata, dev, virtual_device_name, policy_map_name, class__class_map_name, mapping_dict):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, policy_map_name, class__class_map_name)

              #convert parent keys to list
              rcpath_list = []
              payload_list = []
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(policy_map_name, list):
                policy_map_name_list = [policy_map_name]
              else:
                policy_map_name_list = policy_map_name
              if not isinstance(class__class_map_name, list):
                class__class_map_name_list = [class__class_map_name]
              else:
                class__class_map_name_list = class__class_map_name

              for virtual_device_name in virtual_device_name_list:
                for policy_map_name in policy_map_name_list:
                  for class__class_map_name in class__class_map_name_list:
                    ##prepare rcpath
                    rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s/class=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name),util.make_interfacename(class__class_map_name))
                    rcpath_list.append(rcpath)
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              inspect_type_object_list = self.validate_inputs_form_payload(mapping_dict)

              for inspect_type_object in inspect_type_object_list:
                #fetch payload
                inspect_type_payload = inspect_type_object.getxml(filter=True)
                util.log_debug('inspect_type_payload %s'%inspect_type_payload)
                payload_list.append(inspect_type_payload)

              return rcpath_list, payload_list

            def create(self, sdata, dev, virtual_device_name, policy_map_name, class__class_map_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, policy_map_name, class__class_map_name)

              #convert parent keys to list
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(policy_map_name, list):
                policy_map_name_list = [policy_map_name]
              else:
                policy_map_name_list = policy_map_name
              if not isinstance(class__class_map_name, list):
                class__class_map_name_list = [class__class_map_name]
              else:
                class__class_map_name_list = class__class_map_name

              for virtual_device_name in virtual_device_name_list:
                for policy_map_name in policy_map_name_list:
                  for class__class_map_name in class__class_map_name_list:
                    ##prepare rcpath
                    rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s/class=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name),util.make_interfacename(class__class_map_name))
                    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def create_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              inspect_type_object_list = self.validate_inputs_form_payload(mapping_dict)

              for inspect_type_object in inspect_type_object_list:
                #fetch payload
                inspect_type_payload = inspect_type_object.getxml(filter=True)

                util.log_debug('inspect_type_payload %s'%inspect_type_payload)

                #call the base abstract class for createData
                super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=inspect_type_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def update(self, sdata, dev, virtual_device_name, policy_map_name, class__class_map_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, policy_map_name, class__class_map_name)


              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s/class=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name),util.make_interfacename(class__class_map_name))
              self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def update_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              inspect_type_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

              #convert keys to list
              inspect_value = mapping_dict.get('inspect_value')
              if not isinstance(inspect_value, list):
                inspect_value = [inspect_value]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for inspect_value_iterator in inspect_value:
                rcpath_tmp =  rcpath+"/inspect-type=%s"%(util.make_interfacename(inspect_value_iterator))
                rcpath_list.append(rcpath_tmp)
              for rc_counter, inspect_type_object in enumerate(inspect_type_object_list):
                #fetch payload
                inspect_type_payload = inspect_type_object.getxml(filter=True)

                util.log_debug('update inspect_type_payload %s'%inspect_type_payload)

                rcpath = rcpath_list[rc_counter]
                #call the base abstract class for createData
                super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=inspect_type_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def delete(self, sdata, dev, virtual_device_name, policy_map_name, class__class_map_name, mapping_dict, fail_silently=False, remove_reference=False):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, policy_map_name, class__class_map_name)


              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(policy_map_name, list):
                policy_map_name_list = [policy_map_name]
              else:
                policy_map_name_list = policy_map_name
              if not isinstance(class__class_map_name, list):
                class__class_map_name_list = [class__class_map_name]
              else:
                class__class_map_name_list = class__class_map_name

              for virtual_device_name in virtual_device_name_list:
                for policy_map_name in policy_map_name_list:
                  for class__class_map_name in class__class_map_name_list:
                    ##prepare rcpath
                    rcpath = "firewall:virtual-devices/virtual-device=%s/ti-policy-maps/policy-map=%s/class=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(policy_map_name),util.make_interfacename(class__class_map_name))
                    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

            def delete_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs
              if util.isEmpty(mapping_dict.get('inspect_value')):
                raise Exception("'inspect_value' cannot be empty")

              #convert keys to list
              inspect_value = mapping_dict.get('inspect_value')
              if not isinstance(inspect_value, list):
                inspect_value = [inspect_value]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for inspect_value_iterator in inspect_value:
                rcpath_tmp =  rcpath+"/inspect-type=%s"%(util.make_interfacename(inspect_value_iterator))
                rcpath_list.append(rcpath_tmp)
              payload = ''

              for rcpath in rcpath_list:
                #call the base abstract class for deleteData
                super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

            def validate_parent_keys(self, virtual_device_name, policy_map_name, class__class_map_name):
              #Parent Key Validations
              if util.isEmpty(virtual_device_name):
                raise Exception("'virtual_device_name' cannot be empty")
              if util.isEmpty(policy_map_name):
                raise Exception("'policy_map_name' cannot be empty")
              if util.isEmpty(class__class_map_name):
                raise Exception("'class__class_map_name' cannot be empty")

            def validate_inputs_form_payload(self, mapping_dict, update=False):
              #validating inputs
              if util.isEmpty(mapping_dict.get('inspect_value')):
                raise Exception("'inspect_value' cannot be empty")

              #convert keys to list
              inspect_value = mapping_dict.get('inspect_value')
              if not isinstance(inspect_value, list):
                inspect_value = [inspect_value]

              #prepare payload
              inspect_type_object_list = []
              for inspect_value_iterator in inspect_value:
                from servicemodel.controller.devices.device.virtual_devices.virtual_device.ti_policy_maps.policy_map import class_
                inspect_type_object = class_.inspect_type.inspect_type()
                inspect_type_object.inspect_value = inspect_value_iterator
                inspect_type_object_list.append(inspect_type_object)

              return inspect_type_object_list

    class access_lists(object):
      #XPATH devices/device/virtual-devices/virtual-device/access-lists/access-list
      class access_list(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          access_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for access_list_object in access_list_object_list:
            #fetch payload
            access_list_payload = access_list_object.getxml(filter=True)
            util.log_debug('access_list_payload %s'%access_list_payload)
            payload_list.append(access_list_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          access_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for access_list_object in access_list_object_list:
            #fetch payload
            access_list_payload = access_list_object.getxml(filter=True)

            util.log_debug('access_list_payload %s'%access_list_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=access_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          access_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/access-list=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, access_list_object in enumerate(access_list_object_list):
            #fetch payload
            access_list_payload = access_list_object.getxml(filter=True)

            util.log_debug('update access_list_payload %s'%access_list_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=access_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/access-list=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          access_list_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import access_lists
            access_list_object = access_lists.access_list.access_list()
            access_list_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
                access_list_object.mode = mapping_dict.get('mode', None)
              else:
                access_list_object.mode._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('start_remark', None)) != ''):
                access_list_object.start_remark = mapping_dict.get('start_remark', None)
              else:
                access_list_object.start_remark._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('end_remark', None)) != ''):
                access_list_object.end_remark = mapping_dict.get('end_remark', None)
              else:
                access_list_object.end_remark._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_type', None)) != ''):
                access_list_object.acl_type = mapping_dict.get('acl_type', None)
              else:
                access_list_object.acl_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_zone', None)) != ''):
                access_list_object.source_zone = mapping_dict.get('source_zone', None)
              else:
                access_list_object.source_zone._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_zone', None)) != ''):
                access_list_object.dest_zone = mapping_dict.get('dest_zone', None)
              else:
                access_list_object.dest_zone._empty_tag = True
            except TypeError:
              pass
            access_list_object_list.append(access_list_object)

          return access_list_object_list

        class acl_rules(object):
          #XPATH devices/device/virtual-devices/virtual-device/access-lists/access-list/acl-rules/acl-rule
          class acl_rule(AbstractDeviceMgr):
            key_hints = [['name'],['name']]
            def getRcpathPayload(self, sdata, dev, virtual_device_name, access_list_name, mapping_dict):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, access_list_name)

              #convert parent keys to list
              rcpath_list = []
              payload_list = []
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(access_list_name, list):
                access_list_name_list = [access_list_name]
              else:
                access_list_name_list = access_list_name

              for virtual_device_name in virtual_device_name_list:
                for access_list_name in access_list_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists/access-list=%s/acl-rules"%(util.make_interfacename(virtual_device_name),util.make_interfacename(access_list_name))
                  rcpath_list.append(rcpath)
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

              for acl_rule_object in acl_rule_object_list:
                #fetch payload
                acl_rule_payload = acl_rule_object.getxml(filter=True)
                util.log_debug('acl_rule_payload %s'%acl_rule_payload)
                payload_list.append(acl_rule_payload)

              return rcpath_list, payload_list

            def create(self, sdata, dev, virtual_device_name, access_list_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, access_list_name)

              #convert parent keys to list
              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(access_list_name, list):
                access_list_name_list = [access_list_name]
              else:
                access_list_name_list = access_list_name

              for virtual_device_name in virtual_device_name_list:
                for access_list_name in access_list_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists/access-list=%s/acl-rules"%(util.make_interfacename(virtual_device_name),util.make_interfacename(access_list_name))
                  self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def create_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

              for acl_rule_object in acl_rule_object_list:
                #fetch payload
                acl_rule_payload = acl_rule_object.getxml(filter=True)

                util.log_debug('acl_rule_payload %s'%acl_rule_payload)

                #call the base abstract class for createData
                super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=acl_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def update(self, sdata, dev, virtual_device_name, access_list_name, mapping_dict, addref=True, autocommit=True):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, access_list_name)


              ##prepare rcpath
              rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists/access-list=%s/acl-rules"%(util.make_interfacename(virtual_device_name),util.make_interfacename(access_list_name))
              self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

            def update_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs and get payload object
              acl_rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

              #convert keys to list
              name = mapping_dict.get('name')
              if not isinstance(name, list):
                name = [name]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for name_iterator in name:
                rcpath_tmp =  rcpath+"/acl-rule=%s"%(util.make_interfacename(name_iterator))
                rcpath_list.append(rcpath_tmp)
              for rc_counter, acl_rule_object in enumerate(acl_rule_object_list):
                #fetch payload
                acl_rule_payload = acl_rule_object.getxml(filter=True)

                util.log_debug('update acl_rule_payload %s'%acl_rule_payload)

                rcpath = rcpath_list[rc_counter]
                #call the base abstract class for createData
                super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=acl_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

            def delete(self, sdata, dev, virtual_device_name, access_list_name, mapping_dict, fail_silently=False, remove_reference=False):
              dev = get_valid_devices(dev)
              if len(dev) == 0:
                return
              #Input Key Validations
              self.validate_parent_keys( virtual_device_name, access_list_name)


              if not isinstance(virtual_device_name, list):
                virtual_device_name_list = [virtual_device_name]
              else:
                virtual_device_name_list = virtual_device_name
              if not isinstance(access_list_name, list):
                access_list_name_list = [access_list_name]
              else:
                access_list_name_list = access_list_name

              for virtual_device_name in virtual_device_name_list:
                for access_list_name in access_list_name_list:
                  ##prepare rcpath
                  rcpath = "firewall:virtual-devices/virtual-device=%s/access-lists/access-list=%s/acl-rules"%(util.make_interfacename(virtual_device_name),util.make_interfacename(access_list_name))
                  self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

            def delete_(self, sdata, dev, **kwargs):
              mapping_dict = kwargs.get('mapping_dict')

              #validating inputs
              if util.isEmpty(mapping_dict.get('name')):
                raise Exception("'name' cannot be empty")

              #convert keys to list
              name = mapping_dict.get('name')
              if not isinstance(name, list):
                name = [name]

              #prepare rcpath
              rcpath = kwargs.get('rcpath')
              rcpath_list = []
              for name_iterator in name:
                rcpath_tmp =  rcpath+"/acl-rule=%s"%(util.make_interfacename(name_iterator))
                rcpath_list.append(rcpath_tmp)
              payload = ''

              for rcpath in rcpath_list:
                #call the base abstract class for deleteData
                super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

            def validate_parent_keys(self, virtual_device_name, access_list_name):
              #Parent Key Validations
              if util.isEmpty(virtual_device_name):
                raise Exception("'virtual_device_name' cannot be empty")
              if util.isEmpty(access_list_name):
                raise Exception("'access_list_name' cannot be empty")

            def validate_inputs_form_payload(self, mapping_dict, update=False):
              #validating inputs
              if util.isEmpty(mapping_dict.get('name')):
                raise Exception("'name' cannot be empty")
              if util.isEmpty(mapping_dict.get('action')):
                raise Exception("'action' cannot be empty")

              #convert keys to list
              name = mapping_dict.get('name')
              if not isinstance(name, list):
                name = [name]

              #prepare payload
              acl_rule_object_list = []
              for name_iterator in name:
                from servicemodel.controller.devices.device.virtual_devices.virtual_device.access_lists.access_list import acl_rules
                acl_rule_object = acl_rules.acl_rule.acl_rule()
                acl_rule_object.name = name_iterator
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('extra_options', None)) != ''):
                    acl_rule_object.extra_options = mapping_dict.get('extra_options', None)
                  else:
                    acl_rule_object.extra_options._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                    acl_rule_object.description = mapping_dict.get('description', None)
                  else:
                    acl_rule_object.description._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                    acl_rule_object.family = mapping_dict.get('family', None)
                  else:
                    acl_rule_object.family._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('payload_protocol', None)) != ''):
                    acl_rule_object.payload_protocol = mapping_dict.get('payload_protocol', None)
                  else:
                    acl_rule_object.payload_protocol._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('linenumber', None)) != ''):
                    acl_rule_object.linenumber = mapping_dict.get('linenumber', None)
                  else:
                    acl_rule_object.linenumber._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
                    acl_rule_object.action = mapping_dict.get('action', None)
                  else:
                    acl_rule_object.action._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('layer4protocol', None)) != ''):
                    acl_rule_object.layer4protocol = mapping_dict.get('layer4protocol', None)
                  else:
                    acl_rule_object.layer4protocol._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('application', None)) != ''):
                    acl_rule_object.application = mapping_dict.get('application', None)
                  else:
                    acl_rule_object.application._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_condition_type', None)) != ''):
                    acl_rule_object.source_condition_type = mapping_dict.get('source_condition_type', None)
                  else:
                    acl_rule_object.source_condition_type._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                    acl_rule_object.source_ip = mapping_dict.get('source_ip', None)
                  else:
                    acl_rule_object.source_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_mask', None)) != ''):
                    acl_rule_object.source_mask = mapping_dict.get('source_mask', None)
                  else:
                    acl_rule_object.source_mask._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_obj_name', None)) != ''):
                    acl_rule_object.source_obj_name = mapping_dict.get('source_obj_name', None)
                  else:
                    acl_rule_object.source_obj_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('service_obj_name', None)) != ''):
                    acl_rule_object.service_obj_name = mapping_dict.get('service_obj_name', None)
                  else:
                    acl_rule_object.service_obj_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_port_operator', None)) != ''):
                    acl_rule_object.source_port_operator = mapping_dict.get('source_port_operator', None)
                  else:
                    acl_rule_object.source_port_operator._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('port_name', None)) != ''):
                    acl_rule_object.port_name = mapping_dict.get('port_name', None)
                  else:
                    acl_rule_object.port_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('policer_name', None)) != ''):
                    acl_rule_object.policer_name = mapping_dict.get('policer_name', None)
                  else:
                    acl_rule_object.policer_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('source_port', None)) != ''):
                    acl_rule_object.source_port = mapping_dict.get('source_port', None)
                  else:
                    acl_rule_object.source_port._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_condition_type', None)) != ''):
                    acl_rule_object.dest_condition_type = mapping_dict.get('dest_condition_type', None)
                  else:
                    acl_rule_object.dest_condition_type._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_ip', None)) != ''):
                    acl_rule_object.dest_ip = mapping_dict.get('dest_ip', None)
                  else:
                    acl_rule_object.dest_ip._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_mask', None)) != ''):
                    acl_rule_object.dest_mask = mapping_dict.get('dest_mask', None)
                  else:
                    acl_rule_object.dest_mask._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_obj_name', None)) != ''):
                    acl_rule_object.dest_obj_name = mapping_dict.get('dest_obj_name', None)
                  else:
                    acl_rule_object.dest_obj_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_port_operator', None)) != ''):
                    acl_rule_object.dest_port_operator = mapping_dict.get('dest_port_operator', None)
                  else:
                    acl_rule_object.dest_port_operator._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_port', None)) != ''):
                    acl_rule_object.dest_port = mapping_dict.get('dest_port', None)
                  else:
                    acl_rule_object.dest_port._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('match_packets', None)) != ''):
                    acl_rule_object.match_packets = mapping_dict.get('match_packets', None)
                  else:
                    acl_rule_object.match_packets._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('precedence', None)) != ''):
                    acl_rule_object.precedence = mapping_dict.get('precedence', None)
                  else:
                    acl_rule_object.precedence._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('next_acl_rule_name', None)) != ''):
                    acl_rule_object.next_acl_rule_name = mapping_dict.get('next_acl_rule_name', None)
                  else:
                    acl_rule_object.next_acl_rule_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('prev_acl_rule_name', None)) != ''):
                    acl_rule_object.prev_acl_rule_name = mapping_dict.get('prev_acl_rule_name', None)
                  else:
                    acl_rule_object.prev_acl_rule_name._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('next_acl_rule_linenumber', None)) != ''):
                    acl_rule_object.next_acl_rule_linenumber = mapping_dict.get('next_acl_rule_linenumber', None)
                  else:
                    acl_rule_object.next_acl_rule_linenumber._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('prev_acl_rule_linenumber', None)) != ''):
                    acl_rule_object.prev_acl_rule_linenumber = mapping_dict.get('prev_acl_rule_linenumber', None)
                  else:
                    acl_rule_object.prev_acl_rule_linenumber._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('log_action', None)) != ''):
                    acl_rule_object.log_action = mapping_dict.get('log_action', None)
                  else:
                    acl_rule_object.log_action._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('log_traffic', None)) != ''):
                    acl_rule_object.log_traffic = mapping_dict.get('log_traffic', None)
                  else:
                    acl_rule_object.log_traffic._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('rule_nat', None)) != ''):
                    acl_rule_object.rule_nat = mapping_dict.get('rule_nat', None)
                  else:
                    acl_rule_object.rule_nat._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('schedule', None)) != ''):
                    acl_rule_object.schedule = mapping_dict.get('schedule', None)
                  else:
                    acl_rule_object.schedule._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('rule_status', None)) != ''):
                    acl_rule_object.rule_status = mapping_dict.get('rule_status', None)
                  else:
                    acl_rule_object.rule_status._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('ips_sensor', None)) != ''):
                    acl_rule_object.ips_sensor = mapping_dict.get('ips_sensor', None)
                  else:
                    acl_rule_object.ips_sensor._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('ssl_profile', None)) != ''):
                    acl_rule_object.ssl_profile = mapping_dict.get('ssl_profile', None)
                  else:
                    acl_rule_object.ssl_profile._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
                    acl_rule_object.tag = mapping_dict.get('tag', None)
                  else:
                    acl_rule_object.tag._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('service', None)) != ''):
                    acl_rule_object.service = mapping_dict.get('service', None)
                  else:
                    acl_rule_object.service._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('sample', None)) != ''):
                    acl_rule_object.sample = mapping_dict.get('sample', None)
                  else:
                    acl_rule_object.sample._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('counter', None)) != ''):
                    acl_rule_object.counter = mapping_dict.get('counter', None)
                  else:
                    acl_rule_object.counter._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('dest_prefix_list', None)) != ''):
                    acl_rule_object.dest_prefix_list = mapping_dict.get('dest_prefix_list', None)
                  else:
                    acl_rule_object.dest_prefix_list._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('packet_length', None)) != ''):
                    acl_rule_object.packet_length = mapping_dict.get('packet_length', None)
                  else:
                    acl_rule_object.packet_length._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('src_prefix_list', None)) != ''):
                    acl_rule_object.src_prefix_list = mapping_dict.get('src_prefix_list', None)
                  else:
                    acl_rule_object.src_prefix_list._empty_tag = True
                except TypeError:
                  pass
                try:
                  if (update == False) or (update == True and str(mapping_dict.get('routing_instance', None)) != ''):
                    acl_rule_object.routing_instance = mapping_dict.get('routing_instance', None)
                  else:
                    acl_rule_object.routing_instance._empty_tag = True
                except TypeError:
                  pass
                acl_rule_object_list.append(acl_rule_object)

              return acl_rule_object_list

    class security_rules(object):
      #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule
      class rule(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rule_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rule_object in rule_object_list:
            #fetch payload
            rule_payload = rule_object.getxml(filter=True)
            util.log_debug('rule_payload %s'%rule_payload)
            payload_list.append(rule_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rule_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rule_object in rule_object_list:
            #fetch payload
            rule_payload = rule_object.getxml(filter=True)

            util.log_debug('rule_payload %s'%rule_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/rule=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, rule_object in enumerate(rule_object_list):
            #fetch payload
            rule_payload = rule_object.getxml(filter=True)

            util.log_debug('update rule_payload %s'%rule_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/rule=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          rule_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import security_rules
            rule_object = security_rules.rule.rule()
            rule_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                rule_object.description = mapping_dict.get('description', None)
              else:
                rule_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
                rule_object.action = mapping_dict.get('action', None)
              else:
                rule_object.action._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('log_start', None)) != ''):
                rule_object.log_start = mapping_dict.get('log_start', None)
              else:
                rule_object.log_start._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('log_end', None)) != ''):
                rule_object.log_end = mapping_dict.get('log_end', None)
              else:
                rule_object.log_end._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('negate_source', None)) != ''):
                rule_object.negate_source = mapping_dict.get('negate_source', None)
              else:
                rule_object.negate_source._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('negate_destination', None)) != ''):
                rule_object.negate_destination = mapping_dict.get('negate_destination', None)
              else:
                rule_object.negate_destination._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('device_group', None)) != ''):
                rule_object.device_group = mapping_dict.get('device_group', None)
              else:
                rule_object.device_group._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('fromzone', None)) != ''):
                rule_object.fromzone = mapping_dict.get('fromzone', None)
              else:
                rule_object.fromzone._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('tozone', None)) != ''):
                rule_object.tozone = mapping_dict.get('tozone', None)
              else:
                rule_object.tozone._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_address', None)) != ''):
                rule_object.source_address = mapping_dict.get('source_address', None)
              else:
                rule_object.source_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('destination_address', None)) != ''):
                rule_object.destination_address = mapping_dict.get('destination_address', None)
              else:
                rule_object.destination_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('app_member', None)) != ''):
                rule_object.app_member = mapping_dict.get('app_member', None)
              else:
                rule_object.app_member._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('rulebase_type', None)) != ''):
                rule_object.rulebase_type = mapping_dict.get('rulebase_type', None)
              else:
                rule_object.rulebase_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('enable_option', None)) != ''):
                rule_object.enable_option = mapping_dict.get('enable_option', None)
              else:
                rule_object.enable_option._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nat_option', None)) != ''):
                rule_object.nat_option = mapping_dict.get('nat_option', None)
              else:
                rule_object.nat_option._empty_tag = True
            except TypeError:
              pass
            rule_object_list.append(rule_object)

          return rule_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/to-zone
        class to_zone(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            to_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

            for to_zone_object in to_zone_object_list:
              #fetch payload
              to_zone_payload = to_zone_object.getxml(filter=True)
              util.log_debug('to_zone_payload %s'%to_zone_payload)
              payload_list.append(to_zone_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            to_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

            for to_zone_object in to_zone_object_list:
              #fetch payload
              to_zone_payload = to_zone_object.getxml(filter=True)

              util.log_debug('to_zone_payload %s'%to_zone_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=to_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            to_zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for zone_iterator in zone:
              rcpath_tmp =  rcpath+"/to-zone=%s"%(util.make_interfacename(zone_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, to_zone_object in enumerate(to_zone_object_list):
              #fetch payload
              to_zone_payload = to_zone_object.getxml(filter=True)

              util.log_debug('update to_zone_payload %s'%to_zone_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=to_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('zone')):
              raise Exception("'zone' cannot be empty")

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for zone_iterator in zone:
              rcpath_tmp =  rcpath+"/to-zone=%s"%(util.make_interfacename(zone_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('zone')):
              raise Exception("'zone' cannot be empty")

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare payload
            to_zone_object_list = []
            for zone_iterator in zone:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              to_zone_object = rule.to_zone.to_zone()
              to_zone_object.zone = zone_iterator
              to_zone_object_list.append(to_zone_object)

            return to_zone_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/from-zone
        class from_zone(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

            for from_zone_object in from_zone_object_list:
              #fetch payload
              from_zone_payload = from_zone_object.getxml(filter=True)
              util.log_debug('from_zone_payload %s'%from_zone_payload)
              payload_list.append(from_zone_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

            for from_zone_object in from_zone_object_list:
              #fetch payload
              from_zone_payload = from_zone_object.getxml(filter=True)

              util.log_debug('from_zone_payload %s'%from_zone_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=from_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from_zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for zone_iterator in zone:
              rcpath_tmp =  rcpath+"/from-zone=%s"%(util.make_interfacename(zone_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, from_zone_object in enumerate(from_zone_object_list):
              #fetch payload
              from_zone_payload = from_zone_object.getxml(filter=True)

              util.log_debug('update from_zone_payload %s'%from_zone_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=from_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('zone')):
              raise Exception("'zone' cannot be empty")

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for zone_iterator in zone:
              rcpath_tmp =  rcpath+"/from-zone=%s"%(util.make_interfacename(zone_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('zone')):
              raise Exception("'zone' cannot be empty")

            #convert keys to list
            zone = mapping_dict.get('zone')
            if not isinstance(zone, list):
              zone = [zone]

            #prepare payload
            from_zone_object_list = []
            for zone_iterator in zone:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              from_zone_object = rule.from_zone.from_zone()
              from_zone_object.zone = zone_iterator
              from_zone_object_list.append(from_zone_object)

            return from_zone_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/source
        class source(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_object_list = self.validate_inputs_form_payload(mapping_dict)

            for source_object in source_object_list:
              #fetch payload
              source_payload = source_object.getxml(filter=True)
              util.log_debug('source_payload %s'%source_payload)
              payload_list.append(source_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_object_list = self.validate_inputs_form_payload(mapping_dict)

            for source_object in source_object_list:
              #fetch payload
              source_payload = source_object.getxml(filter=True)

              util.log_debug('source_payload %s'%source_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=source_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            source_address = mapping_dict.get('source_address')
            if not isinstance(source_address, list):
              source_address = [source_address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for source_address_iterator in source_address:
              rcpath_tmp =  rcpath+"/source=%s"%(util.make_interfacename(source_address_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, source_object in enumerate(source_object_list):
              #fetch payload
              source_payload = source_object.getxml(filter=True)

              util.log_debug('update source_payload %s'%source_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=source_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('source_address')):
              raise Exception("'source_address' cannot be empty")

            #convert keys to list
            source_address = mapping_dict.get('source_address')
            if not isinstance(source_address, list):
              source_address = [source_address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for source_address_iterator in source_address:
              rcpath_tmp =  rcpath+"/source=%s"%(util.make_interfacename(source_address_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('source_address')):
              raise Exception("'source_address' cannot be empty")

            #convert keys to list
            source_address = mapping_dict.get('source_address')
            if not isinstance(source_address, list):
              source_address = [source_address]

            #prepare payload
            source_object_list = []
            for source_address_iterator in source_address:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              source_object = rule.source.source()
              source_object.source_address = source_address_iterator
              source_object_list.append(source_object)

            return source_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/destination
        class destination(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            destination_object_list = self.validate_inputs_form_payload(mapping_dict)

            for destination_object in destination_object_list:
              #fetch payload
              destination_payload = destination_object.getxml(filter=True)
              util.log_debug('destination_payload %s'%destination_payload)
              payload_list.append(destination_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            destination_object_list = self.validate_inputs_form_payload(mapping_dict)

            for destination_object in destination_object_list:
              #fetch payload
              destination_payload = destination_object.getxml(filter=True)

              util.log_debug('destination_payload %s'%destination_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=destination_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            destination_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            destination_address = mapping_dict.get('destination_address')
            if not isinstance(destination_address, list):
              destination_address = [destination_address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for destination_address_iterator in destination_address:
              rcpath_tmp =  rcpath+"/destination=%s"%(util.make_interfacename(destination_address_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, destination_object in enumerate(destination_object_list):
              #fetch payload
              destination_payload = destination_object.getxml(filter=True)

              util.log_debug('update destination_payload %s'%destination_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=destination_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('destination_address')):
              raise Exception("'destination_address' cannot be empty")

            #convert keys to list
            destination_address = mapping_dict.get('destination_address')
            if not isinstance(destination_address, list):
              destination_address = [destination_address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for destination_address_iterator in destination_address:
              rcpath_tmp =  rcpath+"/destination=%s"%(util.make_interfacename(destination_address_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('destination_address')):
              raise Exception("'destination_address' cannot be empty")

            #convert keys to list
            destination_address = mapping_dict.get('destination_address')
            if not isinstance(destination_address, list):
              destination_address = [destination_address]

            #prepare payload
            destination_object_list = []
            for destination_address_iterator in destination_address:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              destination_object = rule.destination.destination()
              destination_object.destination_address = destination_address_iterator
              destination_object_list.append(destination_object)

            return destination_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/log-option
        class log_option(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            log_option_object_list = self.validate_inputs_form_payload(mapping_dict)

            for log_option_object in log_option_object_list:
              #fetch payload
              log_option_payload = log_option_object.getxml(filter=True)
              util.log_debug('log_option_payload %s'%log_option_payload)
              payload_list.append(log_option_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            log_option_object_list = self.validate_inputs_form_payload(mapping_dict)

            for log_option_object in log_option_object_list:
              #fetch payload
              log_option_payload = log_option_object.getxml(filter=True)

              util.log_debug('log_option_payload %s'%log_option_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=log_option_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            log_option_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            option = mapping_dict.get('option')
            if not isinstance(option, list):
              option = [option]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for option_iterator in option:
              rcpath_tmp =  rcpath+"/log-option=%s"%(util.make_interfacename(option_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, log_option_object in enumerate(log_option_object_list):
              #fetch payload
              log_option_payload = log_option_object.getxml(filter=True)

              util.log_debug('update log_option_payload %s'%log_option_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=log_option_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('option')):
              raise Exception("'option' cannot be empty")

            #convert keys to list
            option = mapping_dict.get('option')
            if not isinstance(option, list):
              option = [option]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for option_iterator in option:
              rcpath_tmp =  rcpath+"/log-option=%s"%(util.make_interfacename(option_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('option')):
              raise Exception("'option' cannot be empty")

            #convert keys to list
            option = mapping_dict.get('option')
            if not isinstance(option, list):
              option = [option]

            #prepare payload
            log_option_object_list = []
            for option_iterator in option:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              log_option_object = rule.log_option.log_option()
              log_option_object.option = option_iterator
              log_option_object_list.append(log_option_object)

            return log_option_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/source-user
        class source_user(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_user_object_list = self.validate_inputs_form_payload(mapping_dict)

            for source_user_object in source_user_object_list:
              #fetch payload
              source_user_payload = source_user_object.getxml(filter=True)
              util.log_debug('source_user_payload %s'%source_user_payload)
              payload_list.append(source_user_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_user_object_list = self.validate_inputs_form_payload(mapping_dict)

            for source_user_object in source_user_object_list:
              #fetch payload
              source_user_payload = source_user_object.getxml(filter=True)

              util.log_debug('source_user_payload %s'%source_user_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=source_user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            source_user_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/source-user=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, source_user_object in enumerate(source_user_object_list):
              #fetch payload
              source_user_payload = source_user_object.getxml(filter=True)

              util.log_debug('update source_user_payload %s'%source_user_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=source_user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/source-user=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare payload
            source_user_object_list = []
            for member_iterator in member:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              source_user_object = rule.source_user.source_user()
              source_user_object.member = member_iterator
              source_user_object_list.append(source_user_object)

            return source_user_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/category
        class category(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            category_object_list = self.validate_inputs_form_payload(mapping_dict)

            for category_object in category_object_list:
              #fetch payload
              category_payload = category_object.getxml(filter=True)
              util.log_debug('category_payload %s'%category_payload)
              payload_list.append(category_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            category_object_list = self.validate_inputs_form_payload(mapping_dict)

            for category_object in category_object_list:
              #fetch payload
              category_payload = category_object.getxml(filter=True)

              util.log_debug('category_payload %s'%category_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=category_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            category_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/category=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, category_object in enumerate(category_object_list):
              #fetch payload
              category_payload = category_object.getxml(filter=True)

              util.log_debug('update category_payload %s'%category_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=category_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/category=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare payload
            category_object_list = []
            for member_iterator in member:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              category_object = rule.category.category()
              category_object.member = member_iterator
              category_object_list.append(category_object)

            return category_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/application
        class application(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            application_object_list = self.validate_inputs_form_payload(mapping_dict)

            for application_object in application_object_list:
              #fetch payload
              application_payload = application_object.getxml(filter=True)
              util.log_debug('application_payload %s'%application_payload)
              payload_list.append(application_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            application_object_list = self.validate_inputs_form_payload(mapping_dict)

            for application_object in application_object_list:
              #fetch payload
              application_payload = application_object.getxml(filter=True)

              util.log_debug('application_payload %s'%application_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            application_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, application_object in enumerate(application_object_list):
              #fetch payload
              application_payload = application_object.getxml(filter=True)

              util.log_debug('update application_payload %s'%application_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare payload
            application_object_list = []
            for member_iterator in member:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              application_object = rule.application.application()
              application_object.member = member_iterator
              application_object_list.append(application_object)

            return application_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/service
        class service(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_list = self.validate_inputs_form_payload(mapping_dict)

            for service_object in service_object_list:
              #fetch payload
              service_payload = service_object.getxml(filter=True)
              util.log_debug('service_payload %s'%service_payload)
              payload_list.append(service_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_list = self.validate_inputs_form_payload(mapping_dict)

            for service_object in service_object_list:
              #fetch payload
              service_payload = service_object.getxml(filter=True)

              util.log_debug('service_payload %s'%service_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            service_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, service_object in enumerate(service_object_list):
              #fetch payload
              service_payload = service_object.getxml(filter=True)

              util.log_debug('update service_payload %s'%service_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare payload
            service_object_list = []
            for member_iterator in member:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              service_object = rule.service.service()
              service_object.member = member_iterator
              service_object_list.append(service_object)

            return service_object_list

        #XPATH devices/device/virtual-devices/virtual-device/security-rules/rule/hip-profiles
        class hip_profiles(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, rule_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict)

            for hip_profiles_object in hip_profiles_object_list:
              #fetch payload
              hip_profiles_payload = hip_profiles_object.getxml(filter=True)
              util.log_debug('hip_profiles_payload %s'%hip_profiles_payload)
              payload_list.append(hip_profiles_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict)

            for hip_profiles_object in hip_profiles_object_list:
              #fetch payload
              hip_profiles_payload = hip_profiles_object.getxml(filter=True)

              util.log_debug('hip_profiles_payload %s'%hip_profiles_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=hip_profiles_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/hip-profiles=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, hip_profiles_object in enumerate(hip_profiles_object_list):
              #fetch payload
              hip_profiles_payload = hip_profiles_object.getxml(filter=True)

              util.log_debug('update hip_profiles_payload %s'%hip_profiles_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=hip_profiles_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, rule_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(rule_name, list):
              rule_name_list = [rule_name]
            else:
              rule_name_list = rule_name

            for virtual_device_name in virtual_device_name_list:
              for rule_name in rule_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/security-rules/rule=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(rule_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for member_iterator in member:
              rcpath_tmp =  rcpath+"/hip-profiles=%s"%(util.make_interfacename(member_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, rule_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(rule_name):
              raise Exception("'rule_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('member')):
              raise Exception("'member' cannot be empty")

            #convert keys to list
            member = mapping_dict.get('member')
            if not isinstance(member, list):
              member = [member]

            #prepare payload
            hip_profiles_object_list = []
            for member_iterator in member:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.security_rules import rule
              hip_profiles_object = rule.hip_profiles.hip_profiles()
              hip_profiles_object.member = member_iterator
              hip_profiles_object_list.append(hip_profiles_object)

            return hip_profiles_object_list

    class vrfs(object):
      #XPATH devices/device/virtual-devices/virtual-device/vrfs/vrf
      class vrf(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vrf_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vrf_object in vrf_object_list:
            #fetch payload
            vrf_payload = vrf_object.getxml(filter=True)
            util.log_debug('vrf_payload %s'%vrf_payload)
            payload_list.append(vrf_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vrf_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vrf_object in vrf_object_list:
            #fetch payload
            vrf_payload = vrf_object.getxml(filter=True)

            util.log_debug('vrf_payload %s'%vrf_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vrf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vrf_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/vrf=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, vrf_object in enumerate(vrf_object_list):
            #fetch payload
            vrf_payload = vrf_object.getxml(filter=True)

            util.log_debug('update vrf_payload %s'%vrf_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vrf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/vrf=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          vrf_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import vrfs
            vrf_object = vrfs.vrf.vrf()
            vrf_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                vrf_object.description = mapping_dict.get('description', None)
              else:
                vrf_object.description._empty_tag = True
            except TypeError:
              pass
            vrf_object_list.append(vrf_object)

          return vrf_object_list

        #XPATH devices/device/virtual-devices/virtual-device/vrfs/vrf/interface
        class interface(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, vrf_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, vrf_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(vrf_name, list):
              vrf_name_list = [vrf_name]
            else:
              vrf_name_list = vrf_name

            for virtual_device_name in virtual_device_name_list:
              for vrf_name in vrf_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs/vrf=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(vrf_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)
              util.log_debug('interface_payload %s'%interface_payload)
              payload_list.append(interface_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, vrf_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, vrf_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(vrf_name, list):
              vrf_name_list = [vrf_name]
            else:
              vrf_name_list = vrf_name

            for virtual_device_name in virtual_device_name_list:
              for vrf_name in vrf_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs/vrf=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(vrf_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('interface_payload %s'%interface_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, vrf_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, vrf_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs/vrf=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(vrf_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_name_iterator in interface_name:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, interface_object in enumerate(interface_object_list):
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('update interface_payload %s'%interface_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, vrf_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, vrf_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(vrf_name, list):
              vrf_name_list = [vrf_name]
            else:
              vrf_name_list = vrf_name

            for virtual_device_name in virtual_device_name_list:
              for vrf_name in vrf_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/vrfs/vrf=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(vrf_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('interface_name')):
              raise Exception("'interface_name' cannot be empty")

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_name_iterator in interface_name:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, vrf_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(vrf_name):
              raise Exception("'vrf_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('interface_name')):
              raise Exception("'interface_name' cannot be empty")

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare payload
            interface_object_list = []
            for interface_name_iterator in interface_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.vrfs import vrf
              interface_object = vrf.interface.interface()
              interface_object.interface_name = interface_name_iterator
              interface_object_list.append(interface_object)

            return interface_object_list

    class zones(object):
      #XPATH devices/device/virtual-devices/virtual-device/zones/zone
      class zone(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          zone_object_list = self.validate_inputs_form_payload(mapping_dict)

          for zone_object in zone_object_list:
            #fetch payload
            zone_payload = zone_object.getxml(filter=True)
            util.log_debug('zone_payload %s'%zone_payload)
            payload_list.append(zone_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          zone_object_list = self.validate_inputs_form_payload(mapping_dict)

          for zone_object in zone_object_list:
            #fetch payload
            zone_payload = zone_object.getxml(filter=True)

            util.log_debug('zone_payload %s'%zone_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/zones"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/zone=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, zone_object in enumerate(zone_object_list):
            #fetch payload
            zone_payload = zone_object.getxml(filter=True)

            util.log_debug('update zone_payload %s'%zone_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/zone=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          zone_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import zones
            zone_object = zones.zone.zone()
            zone_object.name = name_iterator
            zone_object_list.append(zone_object)

          return zone_object_list

        #XPATH devices/device/virtual-devices/virtual-device/zones/zone/host-inbound-protocol
        class host_inbound_protocol(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, zone_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_protocol_object_list = self.validate_inputs_form_payload(mapping_dict)

            for host_inbound_protocol_object in host_inbound_protocol_object_list:
              #fetch payload
              host_inbound_protocol_payload = host_inbound_protocol_object.getxml(filter=True)
              util.log_debug('host_inbound_protocol_payload %s'%host_inbound_protocol_payload)
              payload_list.append(host_inbound_protocol_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_protocol_object_list = self.validate_inputs_form_payload(mapping_dict)

            for host_inbound_protocol_object in host_inbound_protocol_object_list:
              #fetch payload
              host_inbound_protocol_payload = host_inbound_protocol_object.getxml(filter=True)

              util.log_debug('host_inbound_protocol_payload %s'%host_inbound_protocol_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=host_inbound_protocol_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_protocol_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            host_inbound_protocol = mapping_dict.get('host_inbound_protocol')
            if not isinstance(host_inbound_protocol, list):
              host_inbound_protocol = [host_inbound_protocol]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for host_inbound_protocol_iterator in host_inbound_protocol:
              rcpath_tmp =  rcpath+"/host-inbound-protocol=%s"%(util.make_interfacename(host_inbound_protocol_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, host_inbound_protocol_object in enumerate(host_inbound_protocol_object_list):
              #fetch payload
              host_inbound_protocol_payload = host_inbound_protocol_object.getxml(filter=True)

              util.log_debug('update host_inbound_protocol_payload %s'%host_inbound_protocol_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=host_inbound_protocol_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('host_inbound_protocol')):
              raise Exception("'host_inbound_protocol' cannot be empty")

            #convert keys to list
            host_inbound_protocol = mapping_dict.get('host_inbound_protocol')
            if not isinstance(host_inbound_protocol, list):
              host_inbound_protocol = [host_inbound_protocol]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for host_inbound_protocol_iterator in host_inbound_protocol:
              rcpath_tmp =  rcpath+"/host-inbound-protocol=%s"%(util.make_interfacename(host_inbound_protocol_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, zone_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(zone_name):
              raise Exception("'zone_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('host_inbound_protocol')):
              raise Exception("'host_inbound_protocol' cannot be empty")

            #convert keys to list
            host_inbound_protocol = mapping_dict.get('host_inbound_protocol')
            if not isinstance(host_inbound_protocol, list):
              host_inbound_protocol = [host_inbound_protocol]

            #prepare payload
            host_inbound_protocol_object_list = []
            for host_inbound_protocol_iterator in host_inbound_protocol:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.zones import zone
              host_inbound_protocol_object = zone.host_inbound_protocol.host_inbound_protocol()
              host_inbound_protocol_object.host_inbound_protocol = host_inbound_protocol_iterator
              host_inbound_protocol_object_list.append(host_inbound_protocol_object)

            return host_inbound_protocol_object_list

        #XPATH devices/device/virtual-devices/virtual-device/zones/zone/host-inbound-service
        class host_inbound_service(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, zone_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_service_object_list = self.validate_inputs_form_payload(mapping_dict)

            for host_inbound_service_object in host_inbound_service_object_list:
              #fetch payload
              host_inbound_service_payload = host_inbound_service_object.getxml(filter=True)
              util.log_debug('host_inbound_service_payload %s'%host_inbound_service_payload)
              payload_list.append(host_inbound_service_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_service_object_list = self.validate_inputs_form_payload(mapping_dict)

            for host_inbound_service_object in host_inbound_service_object_list:
              #fetch payload
              host_inbound_service_payload = host_inbound_service_object.getxml(filter=True)

              util.log_debug('host_inbound_service_payload %s'%host_inbound_service_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=host_inbound_service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            host_inbound_service_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            host_inbound_service = mapping_dict.get('host_inbound_service')
            if not isinstance(host_inbound_service, list):
              host_inbound_service = [host_inbound_service]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for host_inbound_service_iterator in host_inbound_service:
              rcpath_tmp =  rcpath+"/host-inbound-service=%s"%(util.make_interfacename(host_inbound_service_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, host_inbound_service_object in enumerate(host_inbound_service_object_list):
              #fetch payload
              host_inbound_service_payload = host_inbound_service_object.getxml(filter=True)

              util.log_debug('update host_inbound_service_payload %s'%host_inbound_service_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=host_inbound_service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('host_inbound_service')):
              raise Exception("'host_inbound_service' cannot be empty")

            #convert keys to list
            host_inbound_service = mapping_dict.get('host_inbound_service')
            if not isinstance(host_inbound_service, list):
              host_inbound_service = [host_inbound_service]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for host_inbound_service_iterator in host_inbound_service:
              rcpath_tmp =  rcpath+"/host-inbound-service=%s"%(util.make_interfacename(host_inbound_service_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, zone_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(zone_name):
              raise Exception("'zone_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('host_inbound_service')):
              raise Exception("'host_inbound_service' cannot be empty")

            #convert keys to list
            host_inbound_service = mapping_dict.get('host_inbound_service')
            if not isinstance(host_inbound_service, list):
              host_inbound_service = [host_inbound_service]

            #prepare payload
            host_inbound_service_object_list = []
            for host_inbound_service_iterator in host_inbound_service:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.zones import zone
              host_inbound_service_object = zone.host_inbound_service.host_inbound_service()
              host_inbound_service_object.host_inbound_service = host_inbound_service_iterator
              host_inbound_service_object_list.append(host_inbound_service_object)

            return host_inbound_service_object_list

        #XPATH devices/device/virtual-devices/virtual-device/zones/zone/interface
        class interface(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, zone_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)
              util.log_debug('interface_payload %s'%interface_payload)
              payload_list.append(interface_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('interface_payload %s'%interface_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_name_iterator in interface_name:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, interface_object in enumerate(interface_object_list):
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('update interface_payload %s'%interface_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, zone_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, zone_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(zone_name, list):
              zone_name_list = [zone_name]
            else:
              zone_name_list = zone_name

            for virtual_device_name in virtual_device_name_list:
              for zone_name in zone_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/zones/zone=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(zone_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('interface_name')):
              raise Exception("'interface_name' cannot be empty")

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_name_iterator in interface_name:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, zone_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(zone_name):
              raise Exception("'zone_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('interface_name')):
              raise Exception("'interface_name' cannot be empty")

            #convert keys to list
            interface_name = mapping_dict.get('interface_name')
            if not isinstance(interface_name, list):
              interface_name = [interface_name]

            #prepare payload
            interface_object_list = []
            for interface_name_iterator in interface_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.zones import zone
              interface_object = zone.interface.interface()
              interface_object.interface_name = interface_name_iterator
              interface_object_list.append(interface_object)

            return interface_object_list

    class applications(object):
      #XPATH devices/device/virtual-devices/virtual-device/applications/application
      class application(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/applications"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          application_object_list = self.validate_inputs_form_payload(mapping_dict)

          for application_object in application_object_list:
            #fetch payload
            application_payload = application_object.getxml(filter=True)
            util.log_debug('application_payload %s'%application_payload)
            payload_list.append(application_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/applications"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          application_object_list = self.validate_inputs_form_payload(mapping_dict)

          for application_object in application_object_list:
            #fetch payload
            application_payload = application_object.getxml(filter=True)

            util.log_debug('application_payload %s'%application_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/applications"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          application_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, application_object in enumerate(application_object_list):
            #fetch payload
            application_payload = application_object.getxml(filter=True)

            util.log_debug('update application_payload %s'%application_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/applications"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          application_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import applications
            application_object = applications.application.application()
            application_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                application_object.description = mapping_dict.get('description', None)
              else:
                application_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('category', None)) != ''):
                application_object.category = mapping_dict.get('category', None)
              else:
                application_object.category._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('app_protocol_name', None)) != ''):
                application_object.app_protocol_name = mapping_dict.get('app_protocol_name', None)
              else:
                application_object.app_protocol_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('protocol_name', None)) != ''):
                application_object.protocol_name = mapping_dict.get('protocol_name', None)
              else:
                application_object.protocol_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('protocol_number', None)) != ''):
                application_object.protocol_number = mapping_dict.get('protocol_number', None)
              else:
                application_object.protocol_number._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_port', None)) != ''):
                application_object.source_port = mapping_dict.get('source_port', None)
              else:
                application_object.source_port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dest_port', None)) != ''):
                application_object.dest_port = mapping_dict.get('dest_port', None)
              else:
                application_object.dest_port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('icmp_type', None)) != ''):
                application_object.icmp_type = mapping_dict.get('icmp_type', None)
              else:
                application_object.icmp_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('icmp_code', None)) != ''):
                application_object.icmp_code = mapping_dict.get('icmp_code', None)
              else:
                application_object.icmp_code._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('icmp6_type', None)) != ''):
                application_object.icmp6_type = mapping_dict.get('icmp6_type', None)
              else:
                application_object.icmp6_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('icmp6_code', None)) != ''):
                application_object.icmp6_code = mapping_dict.get('icmp6_code', None)
              else:
                application_object.icmp6_code._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('device_group', None)) != ''):
                application_object.device_group = mapping_dict.get('device_group', None)
              else:
                application_object.device_group._empty_tag = True
            except TypeError:
              pass
            application_object_list.append(application_object)

          return application_object_list

    class addresses(object):
      #XPATH devices/device/virtual-devices/virtual-device/addresses/address
      class address(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/addresses"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)
            util.log_debug('address_payload %s'%address_payload)
            payload_list.append(address_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/addresses"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('address_payload %s'%address_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/addresses"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, address_object in enumerate(address_object_list):
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('update address_payload %s'%address_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/addresses"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          address_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import addresses
            address_object = addresses.address.address()
            address_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                address_object.description = mapping_dict.get('description', None)
              else:
                address_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('address_type', None)) != ''):
                address_object.address_type = mapping_dict.get('address_type', None)
              else:
                address_object.address_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
                address_object.ip_address = mapping_dict.get('ip_address', None)
              else:
                address_object.ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                address_object.netmask = mapping_dict.get('netmask', None)
              else:
                address_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dns_name', None)) != ''):
                address_object.dns_name = mapping_dict.get('dns_name', None)
              else:
                address_object.dns_name._empty_tag = True
            except TypeError:
              pass
            address_object_list.append(address_object)

          return address_object_list

    class address_sets(object):
      #XPATH devices/device/virtual-devices/virtual-device/address-sets/address-set
      class address_set(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, virtual_device_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets"%(util.make_interfacename(virtual_device_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_set_object in address_set_object_list:
            #fetch payload
            address_set_payload = address_set_object.getxml(filter=True)
            util.log_debug('address_set_payload %s'%address_set_payload)
            payload_list.append(address_set_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)

          #convert parent keys to list
          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets"%(util.make_interfacename(virtual_device_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_set_object in address_set_object_list:
            #fetch payload
            address_set_payload = address_set_object.getxml(filter=True)

            util.log_debug('address_set_payload %s'%address_set_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, virtual_device_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          ##prepare rcpath
          rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets"%(util.make_interfacename(virtual_device_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/address-set=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, address_set_object in enumerate(address_set_object_list):
            #fetch payload
            address_set_payload = address_set_object.getxml(filter=True)

            util.log_debug('update address_set_payload %s'%address_set_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, virtual_device_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( virtual_device_name)


          if not isinstance(virtual_device_name, list):
            virtual_device_name_list = [virtual_device_name]
          else:
            virtual_device_name_list = virtual_device_name

          for virtual_device_name in virtual_device_name_list:
            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets"%(util.make_interfacename(virtual_device_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/address-set=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, virtual_device_name):
          #Parent Key Validations
          if util.isEmpty(virtual_device_name):
            raise Exception("'virtual_device_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          address_set_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.virtual_devices.virtual_device import address_sets
            address_set_object = address_sets.address_set.address_set()
            address_set_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                address_set_object.description = mapping_dict.get('description', None)
              else:
                address_set_object.description._empty_tag = True
            except TypeError:
              pass
            address_set_object_list.append(address_set_object)

          return address_set_object_list

        #XPATH devices/device/virtual-devices/virtual-device/address-sets/address-set/address
        class address(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_name_iterator in address_name:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address_name')):
              raise Exception("'address_name' cannot be empty")

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_name_iterator in address_name:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, address_set_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(address_set_name):
              raise Exception("'address_set_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address_name')):
              raise Exception("'address_name' cannot be empty")

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare payload
            address_object_list = []
            for address_name_iterator in address_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.address_sets import address_set
              address_object = address_set.address.address()
              address_object.address_name = address_name_iterator
              address_object_list.append(address_object)

            return address_object_list

        #XPATH devices/device/virtual-devices/virtual-device/address-sets/address-set/sub-address-set
        class sub_address_set(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_address_set_object in sub_address_set_object_list:
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)
              util.log_debug('sub_address_set_payload %s'%sub_address_set_payload)
              payload_list.append(sub_address_set_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)

            #convert parent keys to list
            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_address_set_object in sub_address_set_object_list:
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)

              util.log_debug('sub_address_set_payload %s'%sub_address_set_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sub_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)


            ##prepare rcpath
            rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_set_name_iterator in address_set_name:
              rcpath_tmp =  rcpath+"/sub-address-set=%s"%(util.make_interfacename(address_set_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, sub_address_set_object in enumerate(sub_address_set_object_list):
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)

              util.log_debug('update sub_address_set_payload %s'%sub_address_set_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sub_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, virtual_device_name, address_set_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( virtual_device_name, address_set_name)


            if not isinstance(virtual_device_name, list):
              virtual_device_name_list = [virtual_device_name]
            else:
              virtual_device_name_list = virtual_device_name
            if not isinstance(address_set_name, list):
              address_set_name_list = [address_set_name]
            else:
              address_set_name_list = address_set_name

            for virtual_device_name in virtual_device_name_list:
              for address_set_name in address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:virtual-devices/virtual-device=%s/address-sets/address-set=%s"%(util.make_interfacename(virtual_device_name),util.make_interfacename(address_set_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address_set_name')):
              raise Exception("'address_set_name' cannot be empty")

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_set_name_iterator in address_set_name:
              rcpath_tmp =  rcpath+"/sub-address-set=%s"%(util.make_interfacename(address_set_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, virtual_device_name, address_set_name):
            #Parent Key Validations
            if util.isEmpty(virtual_device_name):
              raise Exception("'virtual_device_name' cannot be empty")
            if util.isEmpty(address_set_name):
              raise Exception("'address_set_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address_set_name')):
              raise Exception("'address_set_name' cannot be empty")

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare payload
            sub_address_set_object_list = []
            for address_set_name_iterator in address_set_name:
              from servicemodel.controller.devices.device.virtual_devices.virtual_device.address_sets import address_set
              sub_address_set_object = address_set.sub_address_set.sub_address_set()
              sub_address_set_object.address_set_name = address_set_name_iterator
              sub_address_set_object_list.append(sub_address_set_object)

            return sub_address_set_object_list

