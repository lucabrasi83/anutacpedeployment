#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/snmp
class snmp(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    snmp_object_list = self.validate_inputs_form_payload(mapping_dict)

    for snmp_object in snmp_object_list:
      #fetch payload
      snmp_payload = snmp_object.getxml(filter=True)
      util.log_debug('snmp_payload %s'%snmp_payload)
      payload_list.append(snmp_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    snmp_object_list = self.validate_inputs_form_payload(mapping_dict)

    for snmp_object in snmp_object_list:
      #fetch payload
      snmp_payload = snmp_object.getxml(filter=True)

      util.log_debug('snmp_payload %s'%snmp_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    snmp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/snmp"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, snmp_object in enumerate(snmp_object_list):
      #fetch payload
      snmp_payload = snmp_object.getxml(filter=True)

      util.log_debug('update snmp_payload %s'%snmp_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/snmp"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs
    if util.isEmpty(mapping_dict.get('community')):
      raise Exception("'community' cannot be empty")
    if util.isEmpty(mapping_dict.get('comm_auth_type')):
      raise Exception("'comm_auth_type' cannot be empty")

    #convert keys to list

    #prepare payload
    snmp_object_list = []
    from servicemodel.controller.devices import device
    snmp_object = device.snmp.snmp()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('community', None)) != ''):
        snmp_object.community = mapping_dict.get('community', None)
      else:
        snmp_object.community._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('rw_community', None)) != ''):
        snmp_object.rw_community = mapping_dict.get('rw_community', None)
      else:
        snmp_object.rw_community._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('system_shutdown', None)) != ''):
        snmp_object.system_shutdown = mapping_dict.get('system_shutdown', None)
      else:
        snmp_object.system_shutdown._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('comm_auth_type', None)) != ''):
        snmp_object.comm_auth_type = mapping_dict.get('comm_auth_type', None)
      else:
        snmp_object.comm_auth_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('snmp_version', None)) != ''):
        snmp_object.snmp_version = mapping_dict.get('snmp_version', None)
      else:
        snmp_object.snmp_version._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('contact', None)) != ''):
        snmp_object.contact = mapping_dict.get('contact', None)
      else:
        snmp_object.contact._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('location', None)) != ''):
        snmp_object.location = mapping_dict.get('location', None)
      else:
        snmp_object.location._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('all_traps', None)) != ''):
        snmp_object.all_traps = mapping_dict.get('all_traps', None)
      else:
        snmp_object.all_traps._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
        snmp_object.vrf = mapping_dict.get('vrf', None)
      else:
        snmp_object.vrf._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('routing_instance', None)) != ''):
        snmp_object.routing_instance = mapping_dict.get('routing_instance', None)
      else:
        snmp_object.routing_instance._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('view_name', None)) != ''):
        snmp_object.view_name = mapping_dict.get('view_name', None)
      else:
        snmp_object.view_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('view_type', None)) != ''):
        snmp_object.view_type = mapping_dict.get('view_type', None)
      else:
        snmp_object.view_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('oid', None)) != ''):
        snmp_object.oid = mapping_dict.get('oid', None)
      else:
        snmp_object.oid._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('trap_source', None)) != ''):
        snmp_object.trap_source = mapping_dict.get('trap_source', None)
      else:
        snmp_object.trap_source._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('trap_group', None)) != ''):
        snmp_object.trap_group = mapping_dict.get('trap_group', None)
      else:
        snmp_object.trap_group._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('trap_type', None)) != ''):
        snmp_object.trap_type = mapping_dict.get('trap_type', None)
      else:
        snmp_object.trap_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('trap_recipient_address', None)) != ''):
        snmp_object.trap_recipient_address = mapping_dict.get('trap_recipient_address', None)
      else:
        snmp_object.trap_recipient_address._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('group_name', None)) != ''):
        snmp_object.group_name = mapping_dict.get('group_name', None)
      else:
        snmp_object.group_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('user', None)) != ''):
        snmp_object.user = mapping_dict.get('user', None)
      else:
        snmp_object.user._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('group_priviledge', None)) != ''):
        snmp_object.group_priviledge = mapping_dict.get('group_priviledge', None)
      else:
        snmp_object.group_priviledge._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('group_auth_type', None)) != ''):
        snmp_object.group_auth_type = mapping_dict.get('group_auth_type', None)
      else:
        snmp_object.group_auth_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('acl_name', None)) != ''):
        snmp_object.acl_name = mapping_dict.get('acl_name', None)
      else:
        snmp_object.acl_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('packet_size', None)) != ''):
        snmp_object.packet_size = mapping_dict.get('packet_size', None)
      else:
        snmp_object.packet_size._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
        snmp_object.interface_name = mapping_dict.get('interface_name', None)
      else:
        snmp_object.interface_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('snmp_ifmib_ifindex_persist', None)) != ''):
        snmp_object.snmp_ifmib_ifindex_persist = mapping_dict.get('snmp_ifmib_ifindex_persist', None)
      else:
        snmp_object.snmp_ifmib_ifindex_persist._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('v3_auth_type', None)) != ''):
        snmp_object.v3_auth_type = mapping_dict.get('v3_auth_type', None)
      else:
        snmp_object.v3_auth_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('v3_auth_paswd', None)) != ''):
        snmp_object.v3_auth_paswd = mapping_dict.get('v3_auth_paswd', None)
      else:
        snmp_object.v3_auth_paswd._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('encrpt_type', None)) != ''):
        snmp_object.encrpt_type = mapping_dict.get('encrpt_type', None)
      else:
        snmp_object.encrpt_type._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('encrpt_length', None)) != ''):
        snmp_object.encrpt_length = mapping_dict.get('encrpt_length', None)
      else:
        snmp_object.encrpt_length._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('encrpt_paswd', None)) != ''):
        snmp_object.encrpt_paswd = mapping_dict.get('encrpt_paswd', None)
      else:
        snmp_object.encrpt_paswd._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
        snmp_object.context_name = mapping_dict.get('context_name', None)
      else:
        snmp_object.context_name._empty_tag = True
    except TypeError:
      pass
    snmp_object_list.append(snmp_object)

    return snmp_object_list

  #XPATH devices/device/snmp/snmp-server
  class snmp_server(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_server_object in snmp_server_object_list:
        #fetch payload
        snmp_server_payload = snmp_server_object.getxml(filter=True)
        util.log_debug('snmp_server_payload %s'%snmp_server_payload)
        payload_list.append(snmp_server_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_server_object in snmp_server_object_list:
        #fetch payload
        snmp_server_payload = snmp_server_object.getxml(filter=True)

        util.log_debug('snmp_server_payload %s'%snmp_server_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_server_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      snmp_server_ip = mapping_dict.get('snmp_server_ip')
      if not isinstance(snmp_server_ip, list):
        snmp_server_ip = [snmp_server_ip]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_server_ip_iterator in snmp_server_ip:
        rcpath_tmp =  rcpath+"/snmp-server=%s"%(util.make_interfacename(snmp_server_ip_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, snmp_server_object in enumerate(snmp_server_object_list):
        #fetch payload
        snmp_server_payload = snmp_server_object.getxml(filter=True)

        util.log_debug('update snmp_server_payload %s'%snmp_server_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_server_ip')):
        raise Exception("'snmp_server_ip' cannot be empty")

      #convert keys to list
      snmp_server_ip = mapping_dict.get('snmp_server_ip')
      if not isinstance(snmp_server_ip, list):
        snmp_server_ip = [snmp_server_ip]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_server_ip_iterator in snmp_server_ip:
        rcpath_tmp =  rcpath+"/snmp-server=%s"%(util.make_interfacename(snmp_server_ip_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_server_ip')):
        raise Exception("'snmp_server_ip' cannot be empty")

      #convert keys to list
      snmp_server_ip = mapping_dict.get('snmp_server_ip')
      if not isinstance(snmp_server_ip, list):
        snmp_server_ip = [snmp_server_ip]

      #prepare payload
      snmp_server_object_list = []
      for snmp_server_ip_iterator in snmp_server_ip:
        from servicemodel.controller.devices.device import snmp
        snmp_server_object = snmp.snmp_server.snmp_server()
        snmp_server_object.snmp_server_ip = snmp_server_ip_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
            snmp_server_object.context_name = mapping_dict.get('context_name', None)
          else:
            snmp_server_object.context_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('snmp_version', None)) != ''):
            snmp_server_object.snmp_version = mapping_dict.get('snmp_version', None)
          else:
            snmp_server_object.snmp_version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('community', None)) != ''):
            snmp_server_object.community = mapping_dict.get('community', None)
          else:
            snmp_server_object.community._empty_tag = True
        except TypeError:
          pass
        snmp_server_object_list.append(snmp_server_object)

      return snmp_server_object_list

  #XPATH devices/device/snmp/snmp-traps
  class snmp_traps(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_traps_object in snmp_traps_object_list:
        #fetch payload
        snmp_traps_payload = snmp_traps_object.getxml(filter=True)
        util.log_debug('snmp_traps_payload %s'%snmp_traps_payload)
        payload_list.append(snmp_traps_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_traps_object in snmp_traps_object_list:
        #fetch payload
        snmp_traps_payload = snmp_traps_object.getxml(filter=True)

        util.log_debug('snmp_traps_payload %s'%snmp_traps_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_traps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_traps_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      snmp_trap = mapping_dict.get('snmp_trap')
      if not isinstance(snmp_trap, list):
        snmp_trap = [snmp_trap]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_trap_iterator in snmp_trap:
        rcpath_tmp =  rcpath+"/snmp-traps=%s"%(util.make_interfacename(snmp_trap_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, snmp_traps_object in enumerate(snmp_traps_object_list):
        #fetch payload
        snmp_traps_payload = snmp_traps_object.getxml(filter=True)

        util.log_debug('update snmp_traps_payload %s'%snmp_traps_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_traps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_trap')):
        raise Exception("'snmp_trap' cannot be empty")

      #convert keys to list
      snmp_trap = mapping_dict.get('snmp_trap')
      if not isinstance(snmp_trap, list):
        snmp_trap = [snmp_trap]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_trap_iterator in snmp_trap:
        rcpath_tmp =  rcpath+"/snmp-traps=%s"%(util.make_interfacename(snmp_trap_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_trap')):
        raise Exception("'snmp_trap' cannot be empty")

      #convert keys to list
      snmp_trap = mapping_dict.get('snmp_trap')
      if not isinstance(snmp_trap, list):
        snmp_trap = [snmp_trap]

      #prepare payload
      snmp_traps_object_list = []
      for snmp_trap_iterator in snmp_trap:
        from servicemodel.controller.devices.device import snmp
        snmp_traps_object = snmp.snmp_traps.snmp_traps()
        snmp_traps_object.snmp_trap = snmp_trap_iterator
        snmp_traps_object_list.append(snmp_traps_object)

      return snmp_traps_object_list

  #XPATH devices/device/snmp/snmp-community-list
  class snmp_community_list(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_community_list_object in snmp_community_list_object_list:
        #fetch payload
        snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)
        util.log_debug('snmp_community_list_payload %s'%snmp_community_list_payload)
        payload_list.append(snmp_community_list_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_community_list_object in snmp_community_list_object_list:
        #fetch payload
        snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)

        util.log_debug('snmp_community_list_payload %s'%snmp_community_list_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_community_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_community_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      snmp_string = mapping_dict.get('snmp_string')
      if not isinstance(snmp_string, list):
        snmp_string = [snmp_string]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_string_iterator in snmp_string:
        rcpath_tmp =  rcpath+"/snmp-community-list=%s"%(util.make_interfacename(snmp_string_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, snmp_community_list_object in enumerate(snmp_community_list_object_list):
        #fetch payload
        snmp_community_list_payload = snmp_community_list_object.getxml(filter=True)

        util.log_debug('update snmp_community_list_payload %s'%snmp_community_list_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_community_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_string')):
        raise Exception("'snmp_string' cannot be empty")

      #convert keys to list
      snmp_string = mapping_dict.get('snmp_string')
      if not isinstance(snmp_string, list):
        snmp_string = [snmp_string]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for snmp_string_iterator in snmp_string:
        rcpath_tmp =  rcpath+"/snmp-community-list=%s"%(util.make_interfacename(snmp_string_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('snmp_string')):
        raise Exception("'snmp_string' cannot be empty")

      #convert keys to list
      snmp_string = mapping_dict.get('snmp_string')
      if not isinstance(snmp_string, list):
        snmp_string = [snmp_string]

      #prepare payload
      snmp_community_list_object_list = []
      for snmp_string_iterator in snmp_string:
        from servicemodel.controller.devices.device import snmp
        snmp_community_list_object = snmp.snmp_community_list.snmp_community_list()
        snmp_community_list_object.snmp_string = snmp_string_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('permission_type', None)) != ''):
            snmp_community_list_object.permission_type = mapping_dict.get('permission_type', None)
          else:
            snmp_community_list_object.permission_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('acl', None)) != ''):
            snmp_community_list_object.acl = mapping_dict.get('acl', None)
          else:
            snmp_community_list_object.acl._empty_tag = True
        except TypeError:
          pass
        snmp_community_list_object_list.append(snmp_community_list_object)

      return snmp_community_list_object_list

  #XPATH devices/device/snmp/snmp-mib
  class snmp_mib(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_mib_object in snmp_mib_object_list:
        #fetch payload
        snmp_mib_payload = snmp_mib_object.getxml(filter=True)
        util.log_debug('snmp_mib_payload %s'%snmp_mib_payload)
        payload_list.append(snmp_mib_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict)

      for snmp_mib_object in snmp_mib_object_list:
        #fetch payload
        snmp_mib_payload = snmp_mib_object.getxml(filter=True)

        util.log_debug('snmp_mib_payload %s'%snmp_mib_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snmp_mib_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      snmp_mib_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      mib_persistence = mapping_dict.get('mib_persistence')
      if not isinstance(mib_persistence, list):
        mib_persistence = [mib_persistence]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for mib_persistence_iterator in mib_persistence:
        rcpath_tmp =  rcpath+"/snmp-mib=%s"%(util.make_interfacename(mib_persistence_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, snmp_mib_object in enumerate(snmp_mib_object_list):
        #fetch payload
        snmp_mib_payload = snmp_mib_object.getxml(filter=True)

        util.log_debug('update snmp_mib_payload %s'%snmp_mib_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snmp_mib_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:snmp"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('mib_persistence')):
        raise Exception("'mib_persistence' cannot be empty")

      #convert keys to list
      mib_persistence = mapping_dict.get('mib_persistence')
      if not isinstance(mib_persistence, list):
        mib_persistence = [mib_persistence]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for mib_persistence_iterator in mib_persistence:
        rcpath_tmp =  rcpath+"/snmp-mib=%s"%(util.make_interfacename(mib_persistence_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('mib_persistence')):
        raise Exception("'mib_persistence' cannot be empty")

      #convert keys to list
      mib_persistence = mapping_dict.get('mib_persistence')
      if not isinstance(mib_persistence, list):
        mib_persistence = [mib_persistence]

      #prepare payload
      snmp_mib_object_list = []
      for mib_persistence_iterator in mib_persistence:
        from servicemodel.controller.devices.device import snmp
        snmp_mib_object = snmp.snmp_mib.snmp_mib()
        snmp_mib_object.mib_persistence = mib_persistence_iterator
        snmp_mib_object_list.append(snmp_mib_object)

      return snmp_mib_object_list

