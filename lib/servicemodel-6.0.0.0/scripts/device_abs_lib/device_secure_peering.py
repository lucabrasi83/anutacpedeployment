#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class secure_peering(object):
  #XPATH devices/device/secure-peering/black-lst-peer
  class black_lst_peer(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      black_lst_peer_object_list = self.validate_inputs_form_payload(mapping_dict)

      for black_lst_peer_object in black_lst_peer_object_list:
        #fetch payload
        black_lst_peer_payload = black_lst_peer_object.getxml(filter=True)
        util.log_debug('black_lst_peer_payload %s'%black_lst_peer_payload)
        payload_list.append(black_lst_peer_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      black_lst_peer_object_list = self.validate_inputs_form_payload(mapping_dict)

      for black_lst_peer_object in black_lst_peer_object_list:
        #fetch payload
        black_lst_peer_payload = black_lst_peer_object.getxml(filter=True)

        util.log_debug('black_lst_peer_payload %s'%black_lst_peer_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=black_lst_peer_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      black_lst_peer_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/black-lst-peer"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, black_lst_peer_object in enumerate(black_lst_peer_object_list):
        #fetch payload
        black_lst_peer_payload = black_lst_peer_object.getxml(filter=True)

        util.log_debug('update black_lst_peer_payload %s'%black_lst_peer_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=black_lst_peer_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/black-lst-peer"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      black_lst_peer_object_list = []
      from servicemodel.controller.devices.device import secure_peering
      black_lst_peer_object = secure_peering.black_lst_peer.black_lst_peer()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
          black_lst_peer_object.ip_address = mapping_dict.get('ip_address', None)
        else:
          black_lst_peer_object.ip_address._empty_tag = True
      except TypeError:
        pass
      black_lst_peer_object_list.append(black_lst_peer_object)

      return black_lst_peer_object_list

  #XPATH devices/device/secure-peering/cipher-string
  class cipher_string(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cipher_string_object_list = self.validate_inputs_form_payload(mapping_dict)

      for cipher_string_object in cipher_string_object_list:
        #fetch payload
        cipher_string_payload = cipher_string_object.getxml(filter=True)
        util.log_debug('cipher_string_payload %s'%cipher_string_payload)
        payload_list.append(cipher_string_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cipher_string_object_list = self.validate_inputs_form_payload(mapping_dict)

      for cipher_string_object in cipher_string_object_list:
        #fetch payload
        cipher_string_payload = cipher_string_object.getxml(filter=True)

        util.log_debug('cipher_string_payload %s'%cipher_string_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=cipher_string_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cipher_string_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      cipher_number = mapping_dict.get('cipher_number')
      if not isinstance(cipher_number, list):
        cipher_number = [cipher_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for cipher_number_iterator in cipher_number:
        rcpath_tmp =  rcpath+"/cipher-string=%s"%(util.make_interfacename(cipher_number_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, cipher_string_object in enumerate(cipher_string_object_list):
        #fetch payload
        cipher_string_payload = cipher_string_object.getxml(filter=True)

        util.log_debug('update cipher_string_payload %s'%cipher_string_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=cipher_string_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('cipher_number')):
        raise Exception("'cipher_number' cannot be empty")

      #convert keys to list
      cipher_number = mapping_dict.get('cipher_number')
      if not isinstance(cipher_number, list):
        cipher_number = [cipher_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for cipher_number_iterator in cipher_number:
        rcpath_tmp =  rcpath+"/cipher-string=%s"%(util.make_interfacename(cipher_number_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('cipher_number')):
        raise Exception("'cipher_number' cannot be empty")

      #convert keys to list
      cipher_number = mapping_dict.get('cipher_number')
      if not isinstance(cipher_number, list):
        cipher_number = [cipher_number]

      #prepare payload
      cipher_string_object_list = []
      for cipher_number_iterator in cipher_number:
        from servicemodel.controller.devices.device import secure_peering
        cipher_string_object = secure_peering.cipher_string.cipher_string()
        cipher_string_object.cipher_number = cipher_number_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cipher_string_option', None)) != ''):
            cipher_string_object.cipher_string_option = mapping_dict.get('cipher_string_option', None)
          else:
            cipher_string_object.cipher_string_option._empty_tag = True
        except TypeError:
          pass
        cipher_string_object_list.append(cipher_string_object)

      return cipher_string_object_list

  #XPATH devices/device/secure-peering/crl
  class crl(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crl_object_list = self.validate_inputs_form_payload(mapping_dict)

      for crl_object in crl_object_list:
        #fetch payload
        crl_payload = crl_object.getxml(filter=True)
        util.log_debug('crl_payload %s'%crl_payload)
        payload_list.append(crl_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crl_object_list = self.validate_inputs_form_payload(mapping_dict)

      for crl_object in crl_object_list:
        #fetch payload
        crl_payload = crl_object.getxml(filter=True)

        util.log_debug('crl_payload %s'%crl_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=crl_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crl_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/crl"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, crl_object in enumerate(crl_object_list):
        #fetch payload
        crl_payload = crl_object.getxml(filter=True)

        util.log_debug('update crl_payload %s'%crl_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=crl_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/crl"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      crl_object_list = []
      from servicemodel.controller.devices.device import secure_peering
      crl_object = secure_peering.crl.crl()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('crl', None)) != ''):
          crl_object.crl = mapping_dict.get('crl', None)
        else:
          crl_object.crl._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ca', None)) != ''):
          crl_object.ca = mapping_dict.get('ca', None)
        else:
          crl_object.ca._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('cdp', None)) != ''):
          crl_object.cdp = mapping_dict.get('cdp', None)
        else:
          crl_object.cdp._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ldap_sever', None)) != ''):
          crl_object.ldap_sever = mapping_dict.get('ldap_sever', None)
        else:
          crl_object.ldap_sever._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('crl_attr_name', None)) != ''):
          crl_object.crl_attr_name = mapping_dict.get('crl_attr_name', None)
        else:
          crl_object.crl_attr_name._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
          crl_object.port = mapping_dict.get('port', None)
        else:
          crl_object.port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('uri', None)) != ''):
          crl_object.uri = mapping_dict.get('uri', None)
        else:
          crl_object.uri._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('cas', None)) != ''):
          crl_object.cas = mapping_dict.get('cas', None)
        else:
          crl_object.cas._empty_tag = True
      except TypeError:
        pass
      crl_object_list.append(crl_object)

      return crl_object_list

  #XPATH devices/device/secure-peering/fallback-no-enc
  class fallback_no_enc(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      fallback_no_enc_object_list = self.validate_inputs_form_payload(mapping_dict)

      for fallback_no_enc_object in fallback_no_enc_object_list:
        #fetch payload
        fallback_no_enc_payload = fallback_no_enc_object.getxml(filter=True)
        util.log_debug('fallback_no_enc_payload %s'%fallback_no_enc_payload)
        payload_list.append(fallback_no_enc_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      fallback_no_enc_object_list = self.validate_inputs_form_payload(mapping_dict)

      for fallback_no_enc_object in fallback_no_enc_object_list:
        #fetch payload
        fallback_no_enc_payload = fallback_no_enc_object.getxml(filter=True)

        util.log_debug('fallback_no_enc_payload %s'%fallback_no_enc_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=fallback_no_enc_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      fallback_no_enc_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/fallback-no-enc"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, fallback_no_enc_object in enumerate(fallback_no_enc_object_list):
        #fetch payload
        fallback_no_enc_payload = fallback_no_enc_object.getxml(filter=True)

        util.log_debug('update fallback_no_enc_payload %s'%fallback_no_enc_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=fallback_no_enc_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:secure-peering"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/fallback-no-enc"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      fallback_no_enc_object_list = []
      from servicemodel.controller.devices.device import secure_peering
      fallback_no_enc_object = secure_peering.fallback_no_enc.fallback_no_enc()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('fallback_no_enc', None)) != ''):
          fallback_no_enc_object.fallback_no_enc = mapping_dict.get('fallback_no_enc', None)
        else:
          fallback_no_enc_object.fallback_no_enc._empty_tag = True
      except TypeError:
        pass
      fallback_no_enc_object_list.append(fallback_no_enc_object)

      return fallback_no_enc_object_list

