#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class label_configuration(object):
  #XPATH devices/device/label-configuration/host-label
  class host_label(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      host_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for host_label_object in host_label_object_list:
        #fetch payload
        host_label_payload = host_label_object.getxml(filter=True)
        util.log_debug('host_label_payload %s'%host_label_payload)
        payload_list.append(host_label_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      host_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for host_label_object in host_label_object_list:
        #fetch payload
        host_label_payload = host_label_object.getxml(filter=True)

        util.log_debug('host_label_payload %s'%host_label_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=host_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      host_label_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      host_label_name = mapping_dict.get('host_label_name')
      if not isinstance(host_label_name, list):
        host_label_name = [host_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for host_label_name_iterator in host_label_name:
        rcpath_tmp =  rcpath+"/host-label=%s"%(util.make_interfacename(host_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, host_label_object in enumerate(host_label_object_list):
        #fetch payload
        host_label_payload = host_label_object.getxml(filter=True)

        util.log_debug('update host_label_payload %s'%host_label_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=host_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('host_label_name')):
        raise Exception("'host_label_name' cannot be empty")

      #convert keys to list
      host_label_name = mapping_dict.get('host_label_name')
      if not isinstance(host_label_name, list):
        host_label_name = [host_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for host_label_name_iterator in host_label_name:
        rcpath_tmp =  rcpath+"/host-label=%s"%(util.make_interfacename(host_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('host_label_name')):
        raise Exception("'host_label_name' cannot be empty")

      #convert keys to list
      host_label_name = mapping_dict.get('host_label_name')
      if not isinstance(host_label_name, list):
        host_label_name = [host_label_name]

      #prepare payload
      host_label_object_list = []
      for host_label_name_iterator in host_label_name:
        from servicemodel.controller.devices.device import label_configuration
        host_label_object = label_configuration.host_label.host_label()
        host_label_object.host_label_name = host_label_name_iterator
        host_label_object_list.append(host_label_object)

      return host_label_object_list

    #XPATH devices/device/label-configuration/host-label/hostname
    class hostname(AbstractDeviceMgr):
      key_hints = [['host_label_name']]
      def getRcpathPayload(self, sdata, dev, host_label_host_label_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hostname_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hostname_object in hostname_object_list:
          #fetch payload
          hostname_payload = hostname_object.getxml(filter=True)
          util.log_debug('hostname_payload %s'%hostname_payload)
          payload_list.append(hostname_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, host_label_host_label_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)

        #convert parent keys to list
        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hostname_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hostname_object in hostname_object_list:
          #fetch payload
          hostname_payload = hostname_object.getxml(filter=True)

          util.log_debug('hostname_payload %s'%hostname_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=hostname_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, host_label_host_label_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)


        ##prepare rcpath
        rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hostname_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/hostname"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, hostname_object in enumerate(hostname_object_list):
          #fetch payload
          hostname_payload = hostname_object.getxml(filter=True)

          util.log_debug('update hostname_payload %s'%hostname_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=hostname_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, host_label_host_label_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)


        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/hostname"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, host_label_host_label_name):
        #Parent Key Validations
        if util.isEmpty(host_label_host_label_name):
          raise Exception("'host_label_host_label_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        hostname_object_list = []
        from servicemodel.controller.devices.device.label_configuration import host_label
        hostname_object = host_label.hostname.hostname()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hostname', None)) != ''):
            hostname_object.hostname = mapping_dict.get('hostname', None)
          else:
            hostname_object.hostname._empty_tag = True
        except TypeError:
          pass
        hostname_object_list.append(hostname_object)

        return hostname_object_list

    #XPATH devices/device/label-configuration/host-label/subnet
    class subnet(AbstractDeviceMgr):
      key_hints = [['host_label_name']]
      def getRcpathPayload(self, sdata, dev, host_label_host_label_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        subnet_object_list = self.validate_inputs_form_payload(mapping_dict)

        for subnet_object in subnet_object_list:
          #fetch payload
          subnet_payload = subnet_object.getxml(filter=True)
          util.log_debug('subnet_payload %s'%subnet_payload)
          payload_list.append(subnet_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, host_label_host_label_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)

        #convert parent keys to list
        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        subnet_object_list = self.validate_inputs_form_payload(mapping_dict)

        for subnet_object in subnet_object_list:
          #fetch payload
          subnet_payload = subnet_object.getxml(filter=True)

          util.log_debug('subnet_payload %s'%subnet_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=subnet_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, host_label_host_label_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)


        ##prepare rcpath
        rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        subnet_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/subnet"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, subnet_object in enumerate(subnet_object_list):
          #fetch payload
          subnet_payload = subnet_object.getxml(filter=True)

          util.log_debug('update subnet_payload %s'%subnet_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=subnet_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, host_label_host_label_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( host_label_host_label_name)


        if not isinstance(host_label_host_label_name, list):
          host_label_host_label_name_list = [host_label_host_label_name]
        else:
          host_label_host_label_name_list = host_label_host_label_name

        for host_label_host_label_name in host_label_host_label_name_list:
          ##prepare rcpath
          rcpath = "wanoptimizer:label-configuration/host-label=%s"%(util.make_interfacename(host_label_host_label_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/subnet"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, host_label_host_label_name):
        #Parent Key Validations
        if util.isEmpty(host_label_host_label_name):
          raise Exception("'host_label_host_label_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        subnet_object_list = []
        from servicemodel.controller.devices.device.label_configuration import host_label
        subnet_object = host_label.subnet.subnet()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('subnet', None)) != ''):
            subnet_object.subnet = mapping_dict.get('subnet', None)
          else:
            subnet_object.subnet._empty_tag = True
        except TypeError:
          pass
        subnet_object_list.append(subnet_object)

        return subnet_object_list

  #XPATH devices/device/label-configuration/domain-label
  class domain_label(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      domain_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for domain_label_object in domain_label_object_list:
        #fetch payload
        domain_label_payload = domain_label_object.getxml(filter=True)
        util.log_debug('domain_label_payload %s'%domain_label_payload)
        payload_list.append(domain_label_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      domain_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for domain_label_object in domain_label_object_list:
        #fetch payload
        domain_label_payload = domain_label_object.getxml(filter=True)

        util.log_debug('domain_label_payload %s'%domain_label_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=domain_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      domain_label_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      domain_label_name = mapping_dict.get('domain_label_name')
      if not isinstance(domain_label_name, list):
        domain_label_name = [domain_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for domain_label_name_iterator in domain_label_name:
        rcpath_tmp =  rcpath+"/domain-label=%s"%(util.make_interfacename(domain_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, domain_label_object in enumerate(domain_label_object_list):
        #fetch payload
        domain_label_payload = domain_label_object.getxml(filter=True)

        util.log_debug('update domain_label_payload %s'%domain_label_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=domain_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('domain_label_name')):
        raise Exception("'domain_label_name' cannot be empty")

      #convert keys to list
      domain_label_name = mapping_dict.get('domain_label_name')
      if not isinstance(domain_label_name, list):
        domain_label_name = [domain_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for domain_label_name_iterator in domain_label_name:
        rcpath_tmp =  rcpath+"/domain-label=%s"%(util.make_interfacename(domain_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('domain_label_name')):
        raise Exception("'domain_label_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain')):
        raise Exception("'domain' cannot be empty")

      #convert keys to list
      domain_label_name = mapping_dict.get('domain_label_name')
      if not isinstance(domain_label_name, list):
        domain_label_name = [domain_label_name]

      #prepare payload
      domain_label_object_list = []
      for domain_label_name_iterator in domain_label_name:
        from servicemodel.controller.devices.device import label_configuration
        domain_label_object = label_configuration.domain_label.domain_label()
        domain_label_object.domain_label_name = domain_label_name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain', None)) != ''):
            domain_label_object.domain = mapping_dict.get('domain', None)
          else:
            domain_label_object.domain._empty_tag = True
        except TypeError:
          pass
        domain_label_object_list.append(domain_label_object)

      return domain_label_object_list

  #XPATH devices/device/label-configuration/port-label
  class port_label(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      port_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for port_label_object in port_label_object_list:
        #fetch payload
        port_label_payload = port_label_object.getxml(filter=True)
        util.log_debug('port_label_payload %s'%port_label_payload)
        payload_list.append(port_label_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      port_label_object_list = self.validate_inputs_form_payload(mapping_dict)

      for port_label_object in port_label_object_list:
        #fetch payload
        port_label_payload = port_label_object.getxml(filter=True)

        util.log_debug('port_label_payload %s'%port_label_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=port_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      port_label_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      port_label_name = mapping_dict.get('port_label_name')
      if not isinstance(port_label_name, list):
        port_label_name = [port_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for port_label_name_iterator in port_label_name:
        rcpath_tmp =  rcpath+"/port-label=%s"%(util.make_interfacename(port_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, port_label_object in enumerate(port_label_object_list):
        #fetch payload
        port_label_payload = port_label_object.getxml(filter=True)

        util.log_debug('update port_label_payload %s'%port_label_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=port_label_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:label-configuration"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('port_label_name')):
        raise Exception("'port_label_name' cannot be empty")

      #convert keys to list
      port_label_name = mapping_dict.get('port_label_name')
      if not isinstance(port_label_name, list):
        port_label_name = [port_label_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for port_label_name_iterator in port_label_name:
        rcpath_tmp =  rcpath+"/port-label=%s"%(util.make_interfacename(port_label_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('port_label_name')):
        raise Exception("'port_label_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('port')):
        raise Exception("'port' cannot be empty")

      #convert keys to list
      port_label_name = mapping_dict.get('port_label_name')
      if not isinstance(port_label_name, list):
        port_label_name = [port_label_name]

      #prepare payload
      port_label_object_list = []
      for port_label_name_iterator in port_label_name:
        from servicemodel.controller.devices.device import label_configuration
        port_label_object = label_configuration.port_label.port_label()
        port_label_object.port_label_name = port_label_name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
            port_label_object.port = mapping_dict.get('port', None)
          else:
            port_label_object.port._empty_tag = True
        except TypeError:
          pass
        port_label_object_list.append(port_label_object)

      return port_label_object_list

