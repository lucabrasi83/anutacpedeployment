#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class policy_maps(object):
  #XPATH devices/device/policy-maps/policy-map
  class policy_map(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "qos:policy-maps"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      policy_map_object_list = self.validate_inputs_form_payload(mapping_dict)

      for policy_map_object in policy_map_object_list:
        #fetch payload
        policy_map_payload = policy_map_object.getxml(filter=True)
        util.log_debug('policy_map_payload %s'%policy_map_payload)
        payload_list.append(policy_map_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "qos:policy-maps"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      policy_map_object_list = self.validate_inputs_form_payload(mapping_dict)

      for policy_map_object in policy_map_object_list:
        #fetch payload
        policy_map_payload = policy_map_object.getxml(filter=True)

        util.log_debug('policy_map_payload %s'%policy_map_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=policy_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "qos:policy-maps"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      policy_map_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/policy-map=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, policy_map_object in enumerate(policy_map_object_list):
        #fetch payload
        policy_map_payload = policy_map_object.getxml(filter=True)

        util.log_debug('update policy_map_payload %s'%policy_map_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=policy_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "qos:policy-maps"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/policy-map=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      policy_map_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import policy_maps
        policy_map_object = policy_maps.policy_map.policy_map()
        policy_map_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            policy_map_object.description = mapping_dict.get('description', None)
          else:
            policy_map_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            policy_map_object.type = mapping_dict.get('type', None)
          else:
            policy_map_object.type._empty_tag = True
        except TypeError:
          pass
        policy_map_object_list.append(policy_map_object)

      return policy_map_object_list

    #XPATH devices/device/policy-maps/policy-map/class-entry
    class class_entry(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, policy_map_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( policy_map_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(policy_map_name, list):
          policy_map_name_list = [policy_map_name]
        else:
          policy_map_name_list = policy_map_name

        for policy_map_name in policy_map_name_list:
          ##prepare rcpath
          rcpath = "qos:policy-maps/policy-map=%s"%(util.make_interfacename(policy_map_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_entry_object_list = self.validate_inputs_form_payload(mapping_dict)

        for class_entry_object in class_entry_object_list:
          #fetch payload
          class_entry_payload = class_entry_object.getxml(filter=True)
          util.log_debug('class_entry_payload %s'%class_entry_payload)
          payload_list.append(class_entry_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, policy_map_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( policy_map_name)

        #convert parent keys to list
        if not isinstance(policy_map_name, list):
          policy_map_name_list = [policy_map_name]
        else:
          policy_map_name_list = policy_map_name

        for policy_map_name in policy_map_name_list:
          ##prepare rcpath
          rcpath = "qos:policy-maps/policy-map=%s"%(util.make_interfacename(policy_map_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_entry_object_list = self.validate_inputs_form_payload(mapping_dict)

        for class_entry_object in class_entry_object_list:
          #fetch payload
          class_entry_payload = class_entry_object.getxml(filter=True)

          util.log_debug('class_entry_payload %s'%class_entry_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=class_entry_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, policy_map_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( policy_map_name)


        ##prepare rcpath
        rcpath = "qos:policy-maps/policy-map=%s"%(util.make_interfacename(policy_map_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_entry_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        class_name = mapping_dict.get('class_name')
        if not isinstance(class_name, list):
          class_name = [class_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for class_name_iterator in class_name:
          rcpath_tmp =  rcpath+"/class-entry=%s"%(util.make_interfacename(class_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, class_entry_object in enumerate(class_entry_object_list):
          #fetch payload
          class_entry_payload = class_entry_object.getxml(filter=True)

          util.log_debug('update class_entry_payload %s'%class_entry_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=class_entry_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, policy_map_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( policy_map_name)


        if not isinstance(policy_map_name, list):
          policy_map_name_list = [policy_map_name]
        else:
          policy_map_name_list = policy_map_name

        for policy_map_name in policy_map_name_list:
          ##prepare rcpath
          rcpath = "qos:policy-maps/policy-map=%s"%(util.make_interfacename(policy_map_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('class_name')):
          raise Exception("'class_name' cannot be empty")

        #convert keys to list
        class_name = mapping_dict.get('class_name')
        if not isinstance(class_name, list):
          class_name = [class_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for class_name_iterator in class_name:
          rcpath_tmp =  rcpath+"/class-entry=%s"%(util.make_interfacename(class_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, policy_map_name):
        #Parent Key Validations
        if util.isEmpty(policy_map_name):
          raise Exception("'policy_map_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('class_name')):
          raise Exception("'class_name' cannot be empty")

        #convert keys to list
        class_name = mapping_dict.get('class_name')
        if not isinstance(class_name, list):
          class_name = [class_name]

        #prepare payload
        class_entry_object_list = []
        for class_name_iterator in class_name:
          from servicemodel.controller.devices.device.policy_maps import policy_map
          class_entry_object = policy_map.class_entry.class_entry()
          class_entry_object.class_name = class_name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
              class_entry_object.type = mapping_dict.get('type', None)
            else:
              class_entry_object.type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
              class_entry_object.mtu = mapping_dict.get('mtu', None)
            else:
              class_entry_object.mtu._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('qos_group', None)) != ''):
              class_entry_object.qos_group = mapping_dict.get('qos_group', None)
            else:
              class_entry_object.qos_group._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('shape_average', None)) != ''):
              class_entry_object.shape_average = mapping_dict.get('shape_average', None)
            else:
              class_entry_object.shape_average._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bandwidth_percentage', None)) != ''):
              class_entry_object.bandwidth_percentage = mapping_dict.get('bandwidth_percentage', None)
            else:
              class_entry_object.bandwidth_percentage._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bandwidth_remaining_percentage', None)) != ''):
              class_entry_object.bandwidth_remaining_percentage = mapping_dict.get('bandwidth_remaining_percentage', None)
            else:
              class_entry_object.bandwidth_remaining_percentage._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bandwidth_remaining_ratio', None)) != ''):
              class_entry_object.bandwidth_remaining_ratio = mapping_dict.get('bandwidth_remaining_ratio', None)
            else:
              class_entry_object.bandwidth_remaining_ratio._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('priority_value', None)) != ''):
              class_entry_object.priority_value = mapping_dict.get('priority_value', None)
            else:
              class_entry_object.priority_value._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('priority_percentage', None)) != ''):
              class_entry_object.priority_percentage = mapping_dict.get('priority_percentage', None)
            else:
              class_entry_object.priority_percentage._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('priority_level', None)) != ''):
              class_entry_object.priority_level = mapping_dict.get('priority_level', None)
            else:
              class_entry_object.priority_level._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('fair_queue', None)) != ''):
              class_entry_object.fair_queue = mapping_dict.get('fair_queue', None)
            else:
              class_entry_object.fair_queue._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('is_dscp_tunnel', None)) != ''):
              class_entry_object.is_dscp_tunnel = mapping_dict.get('is_dscp_tunnel', None)
            else:
              class_entry_object.is_dscp_tunnel._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('dscp_value', None)) != ''):
              class_entry_object.dscp_value = mapping_dict.get('dscp_value', None)
            else:
              class_entry_object.dscp_value._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('random_detect', None)) != ''):
              class_entry_object.random_detect = mapping_dict.get('random_detect', None)
            else:
              class_entry_object.random_detect._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('service_policy', None)) != ''):
              class_entry_object.service_policy = mapping_dict.get('service_policy', None)
            else:
              class_entry_object.service_policy._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('police_cir_percentage', None)) != ''):
              class_entry_object.police_cir_percentage = mapping_dict.get('police_cir_percentage', None)
            else:
              class_entry_object.police_cir_percentage._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bit_rate', None)) != ''):
              class_entry_object.bit_rate = mapping_dict.get('bit_rate', None)
            else:
              class_entry_object.bit_rate._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('police_cir_conform_action', None)) != ''):
              class_entry_object.police_cir_conform_action = mapping_dict.get('police_cir_conform_action', None)
            else:
              class_entry_object.police_cir_conform_action._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('police_cir_exceed_action', None)) != ''):
              class_entry_object.police_cir_exceed_action = mapping_dict.get('police_cir_exceed_action', None)
            else:
              class_entry_object.police_cir_exceed_action._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('precedence', None)) != ''):
              class_entry_object.precedence = mapping_dict.get('precedence', None)
            else:
              class_entry_object.precedence._empty_tag = True
          except TypeError:
            pass
          class_entry_object_list.append(class_entry_object)

        return class_entry_object_list

      #XPATH devices/device/policy-maps/policy-map/class-entry/queue-limit
      class queue_limit(AbstractDeviceMgr):
        key_hints = [['name'],['class_name']]
        def getRcpathPayload(self, sdata, dev, policy_map_name, class_entry_class_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_map_name, class_entry_class_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(policy_map_name, list):
            policy_map_name_list = [policy_map_name]
          else:
            policy_map_name_list = policy_map_name
          if not isinstance(class_entry_class_name, list):
            class_entry_class_name_list = [class_entry_class_name]
          else:
            class_entry_class_name_list = class_entry_class_name

          for policy_map_name in policy_map_name_list:
            for class_entry_class_name in class_entry_class_name_list:
              ##prepare rcpath
              rcpath = "qos:policy-maps/policy-map=%s/class-entry=%s"%(util.make_interfacename(policy_map_name),util.make_interfacename(class_entry_class_name))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          queue_limit_object_list = self.validate_inputs_form_payload(mapping_dict)

          for queue_limit_object in queue_limit_object_list:
            #fetch payload
            queue_limit_payload = queue_limit_object.getxml(filter=True)
            util.log_debug('queue_limit_payload %s'%queue_limit_payload)
            payload_list.append(queue_limit_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, policy_map_name, class_entry_class_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_map_name, class_entry_class_name)

          #convert parent keys to list
          if not isinstance(policy_map_name, list):
            policy_map_name_list = [policy_map_name]
          else:
            policy_map_name_list = policy_map_name
          if not isinstance(class_entry_class_name, list):
            class_entry_class_name_list = [class_entry_class_name]
          else:
            class_entry_class_name_list = class_entry_class_name

          for policy_map_name in policy_map_name_list:
            for class_entry_class_name in class_entry_class_name_list:
              ##prepare rcpath
              rcpath = "qos:policy-maps/policy-map=%s/class-entry=%s"%(util.make_interfacename(policy_map_name),util.make_interfacename(class_entry_class_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          queue_limit_object_list = self.validate_inputs_form_payload(mapping_dict)

          for queue_limit_object in queue_limit_object_list:
            #fetch payload
            queue_limit_payload = queue_limit_object.getxml(filter=True)

            util.log_debug('queue_limit_payload %s'%queue_limit_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=queue_limit_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, policy_map_name, class_entry_class_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_map_name, class_entry_class_name)


          ##prepare rcpath
          rcpath = "qos:policy-maps/policy-map=%s/class-entry=%s"%(util.make_interfacename(policy_map_name),util.make_interfacename(class_entry_class_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          queue_limit_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/queue-limit"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, queue_limit_object in enumerate(queue_limit_object_list):
            #fetch payload
            queue_limit_payload = queue_limit_object.getxml(filter=True)

            util.log_debug('update queue_limit_payload %s'%queue_limit_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=queue_limit_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, policy_map_name, class_entry_class_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_map_name, class_entry_class_name)


          if not isinstance(policy_map_name, list):
            policy_map_name_list = [policy_map_name]
          else:
            policy_map_name_list = policy_map_name
          if not isinstance(class_entry_class_name, list):
            class_entry_class_name_list = [class_entry_class_name]
          else:
            class_entry_class_name_list = class_entry_class_name

          for policy_map_name in policy_map_name_list:
            for class_entry_class_name in class_entry_class_name_list:
              ##prepare rcpath
              rcpath = "qos:policy-maps/policy-map=%s/class-entry=%s"%(util.make_interfacename(policy_map_name),util.make_interfacename(class_entry_class_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/queue-limit"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, policy_map_name, class_entry_class_name):
          #Parent Key Validations
          if util.isEmpty(policy_map_name):
            raise Exception("'policy_map_name' cannot be empty")
          if util.isEmpty(class_entry_class_name):
            raise Exception("'class_entry_class_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          queue_limit_object_list = []
          from servicemodel.controller.devices.device.policy_maps.policy_map import class_entry
          queue_limit_object = class_entry.queue_limit.queue_limit()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('queue_limit', None)) != ''):
              queue_limit_object.queue_limit = mapping_dict.get('queue_limit', None)
            else:
              queue_limit_object.queue_limit._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('packet', None)) != ''):
              queue_limit_object.packet = mapping_dict.get('packet', None)
            else:
              queue_limit_object.packet._empty_tag = True
          except TypeError:
            pass
          queue_limit_object_list.append(queue_limit_object)

          return queue_limit_object_list

