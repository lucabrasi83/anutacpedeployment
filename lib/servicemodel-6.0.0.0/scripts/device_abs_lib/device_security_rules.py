#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class security_rules(object):
  #XPATH devices/device/security-rules/rule
  class rule(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "acl:security-rules"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      rule_object_list = self.validate_inputs_form_payload(mapping_dict)

      for rule_object in rule_object_list:
        #fetch payload
        rule_payload = rule_object.getxml(filter=True)
        util.log_debug('rule_payload %s'%rule_payload)
        payload_list.append(rule_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "acl:security-rules"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      rule_object_list = self.validate_inputs_form_payload(mapping_dict)

      for rule_object in rule_object_list:
        #fetch payload
        rule_payload = rule_object.getxml(filter=True)

        util.log_debug('rule_payload %s'%rule_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:security-rules"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/rule=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, rule_object in enumerate(rule_object_list):
        #fetch payload
        rule_payload = rule_object.getxml(filter=True)

        util.log_debug('update rule_payload %s'%rule_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:security-rules"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/rule=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      rule_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import security_rules
        rule_object = security_rules.rule.rule()
        rule_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            rule_object.description = mapping_dict.get('description', None)
          else:
            rule_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
            rule_object.action = mapping_dict.get('action', None)
          else:
            rule_object.action._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('log_start', None)) != ''):
            rule_object.log_start = mapping_dict.get('log_start', None)
          else:
            rule_object.log_start._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('log_end', None)) != ''):
            rule_object.log_end = mapping_dict.get('log_end', None)
          else:
            rule_object.log_end._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('negate_source', None)) != ''):
            rule_object.negate_source = mapping_dict.get('negate_source', None)
          else:
            rule_object.negate_source._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('negate_destination', None)) != ''):
            rule_object.negate_destination = mapping_dict.get('negate_destination', None)
          else:
            rule_object.negate_destination._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('device_group', None)) != ''):
            rule_object.device_group = mapping_dict.get('device_group', None)
          else:
            rule_object.device_group._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('fromzone', None)) != ''):
            rule_object.fromzone = mapping_dict.get('fromzone', None)
          else:
            rule_object.fromzone._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tozone', None)) != ''):
            rule_object.tozone = mapping_dict.get('tozone', None)
          else:
            rule_object.tozone._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_address', None)) != ''):
            rule_object.source_address = mapping_dict.get('source_address', None)
          else:
            rule_object.source_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('destination_address', None)) != ''):
            rule_object.destination_address = mapping_dict.get('destination_address', None)
          else:
            rule_object.destination_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('app_member', None)) != ''):
            rule_object.app_member = mapping_dict.get('app_member', None)
          else:
            rule_object.app_member._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rulebase_type', None)) != ''):
            rule_object.rulebase_type = mapping_dict.get('rulebase_type', None)
          else:
            rule_object.rulebase_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_option', None)) != ''):
            rule_object.enable_option = mapping_dict.get('enable_option', None)
          else:
            rule_object.enable_option._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nat_option', None)) != ''):
            rule_object.nat_option = mapping_dict.get('nat_option', None)
          else:
            rule_object.nat_option._empty_tag = True
        except TypeError:
          pass
        rule_object_list.append(rule_object)

      return rule_object_list

    #XPATH devices/device/security-rules/rule/to-zone
    class to_zone(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        to_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

        for to_zone_object in to_zone_object_list:
          #fetch payload
          to_zone_payload = to_zone_object.getxml(filter=True)
          util.log_debug('to_zone_payload %s'%to_zone_payload)
          payload_list.append(to_zone_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        to_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

        for to_zone_object in to_zone_object_list:
          #fetch payload
          to_zone_payload = to_zone_object.getxml(filter=True)

          util.log_debug('to_zone_payload %s'%to_zone_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=to_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        to_zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for zone_iterator in zone:
          rcpath_tmp =  rcpath+"/to-zone=%s"%(util.make_interfacename(zone_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, to_zone_object in enumerate(to_zone_object_list):
          #fetch payload
          to_zone_payload = to_zone_object.getxml(filter=True)

          util.log_debug('update to_zone_payload %s'%to_zone_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=to_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('zone')):
          raise Exception("'zone' cannot be empty")

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for zone_iterator in zone:
          rcpath_tmp =  rcpath+"/to-zone=%s"%(util.make_interfacename(zone_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('zone')):
          raise Exception("'zone' cannot be empty")

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare payload
        to_zone_object_list = []
        for zone_iterator in zone:
          from servicemodel.controller.devices.device.security_rules import rule
          to_zone_object = rule.to_zone.to_zone()
          to_zone_object.zone = zone_iterator
          to_zone_object_list.append(to_zone_object)

        return to_zone_object_list

    #XPATH devices/device/security-rules/rule/from-zone
    class from_zone(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        from_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

        for from_zone_object in from_zone_object_list:
          #fetch payload
          from_zone_payload = from_zone_object.getxml(filter=True)
          util.log_debug('from_zone_payload %s'%from_zone_payload)
          payload_list.append(from_zone_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        from_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

        for from_zone_object in from_zone_object_list:
          #fetch payload
          from_zone_payload = from_zone_object.getxml(filter=True)

          util.log_debug('from_zone_payload %s'%from_zone_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=from_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        from_zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for zone_iterator in zone:
          rcpath_tmp =  rcpath+"/from-zone=%s"%(util.make_interfacename(zone_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, from_zone_object in enumerate(from_zone_object_list):
          #fetch payload
          from_zone_payload = from_zone_object.getxml(filter=True)

          util.log_debug('update from_zone_payload %s'%from_zone_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=from_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('zone')):
          raise Exception("'zone' cannot be empty")

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for zone_iterator in zone:
          rcpath_tmp =  rcpath+"/from-zone=%s"%(util.make_interfacename(zone_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('zone')):
          raise Exception("'zone' cannot be empty")

        #convert keys to list
        zone = mapping_dict.get('zone')
        if not isinstance(zone, list):
          zone = [zone]

        #prepare payload
        from_zone_object_list = []
        for zone_iterator in zone:
          from servicemodel.controller.devices.device.security_rules import rule
          from_zone_object = rule.from_zone.from_zone()
          from_zone_object.zone = zone_iterator
          from_zone_object_list.append(from_zone_object)

        return from_zone_object_list

    #XPATH devices/device/security-rules/rule/source
    class source(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_object_list = self.validate_inputs_form_payload(mapping_dict)

        for source_object in source_object_list:
          #fetch payload
          source_payload = source_object.getxml(filter=True)
          util.log_debug('source_payload %s'%source_payload)
          payload_list.append(source_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_object_list = self.validate_inputs_form_payload(mapping_dict)

        for source_object in source_object_list:
          #fetch payload
          source_payload = source_object.getxml(filter=True)

          util.log_debug('source_payload %s'%source_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=source_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        source_address = mapping_dict.get('source_address')
        if not isinstance(source_address, list):
          source_address = [source_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for source_address_iterator in source_address:
          rcpath_tmp =  rcpath+"/source=%s"%(util.make_interfacename(source_address_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, source_object in enumerate(source_object_list):
          #fetch payload
          source_payload = source_object.getxml(filter=True)

          util.log_debug('update source_payload %s'%source_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=source_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('source_address')):
          raise Exception("'source_address' cannot be empty")

        #convert keys to list
        source_address = mapping_dict.get('source_address')
        if not isinstance(source_address, list):
          source_address = [source_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for source_address_iterator in source_address:
          rcpath_tmp =  rcpath+"/source=%s"%(util.make_interfacename(source_address_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('source_address')):
          raise Exception("'source_address' cannot be empty")

        #convert keys to list
        source_address = mapping_dict.get('source_address')
        if not isinstance(source_address, list):
          source_address = [source_address]

        #prepare payload
        source_object_list = []
        for source_address_iterator in source_address:
          from servicemodel.controller.devices.device.security_rules import rule
          source_object = rule.source.source()
          source_object.source_address = source_address_iterator
          source_object_list.append(source_object)

        return source_object_list

    #XPATH devices/device/security-rules/rule/destination
    class destination(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        destination_object_list = self.validate_inputs_form_payload(mapping_dict)

        for destination_object in destination_object_list:
          #fetch payload
          destination_payload = destination_object.getxml(filter=True)
          util.log_debug('destination_payload %s'%destination_payload)
          payload_list.append(destination_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        destination_object_list = self.validate_inputs_form_payload(mapping_dict)

        for destination_object in destination_object_list:
          #fetch payload
          destination_payload = destination_object.getxml(filter=True)

          util.log_debug('destination_payload %s'%destination_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=destination_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        destination_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        destination_address = mapping_dict.get('destination_address')
        if not isinstance(destination_address, list):
          destination_address = [destination_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for destination_address_iterator in destination_address:
          rcpath_tmp =  rcpath+"/destination=%s"%(util.make_interfacename(destination_address_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, destination_object in enumerate(destination_object_list):
          #fetch payload
          destination_payload = destination_object.getxml(filter=True)

          util.log_debug('update destination_payload %s'%destination_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=destination_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('destination_address')):
          raise Exception("'destination_address' cannot be empty")

        #convert keys to list
        destination_address = mapping_dict.get('destination_address')
        if not isinstance(destination_address, list):
          destination_address = [destination_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for destination_address_iterator in destination_address:
          rcpath_tmp =  rcpath+"/destination=%s"%(util.make_interfacename(destination_address_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('destination_address')):
          raise Exception("'destination_address' cannot be empty")

        #convert keys to list
        destination_address = mapping_dict.get('destination_address')
        if not isinstance(destination_address, list):
          destination_address = [destination_address]

        #prepare payload
        destination_object_list = []
        for destination_address_iterator in destination_address:
          from servicemodel.controller.devices.device.security_rules import rule
          destination_object = rule.destination.destination()
          destination_object.destination_address = destination_address_iterator
          destination_object_list.append(destination_object)

        return destination_object_list

    #XPATH devices/device/security-rules/rule/log-option
    class log_option(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        log_option_object_list = self.validate_inputs_form_payload(mapping_dict)

        for log_option_object in log_option_object_list:
          #fetch payload
          log_option_payload = log_option_object.getxml(filter=True)
          util.log_debug('log_option_payload %s'%log_option_payload)
          payload_list.append(log_option_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        log_option_object_list = self.validate_inputs_form_payload(mapping_dict)

        for log_option_object in log_option_object_list:
          #fetch payload
          log_option_payload = log_option_object.getxml(filter=True)

          util.log_debug('log_option_payload %s'%log_option_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=log_option_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        log_option_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        option = mapping_dict.get('option')
        if not isinstance(option, list):
          option = [option]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for option_iterator in option:
          rcpath_tmp =  rcpath+"/log-option=%s"%(util.make_interfacename(option_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, log_option_object in enumerate(log_option_object_list):
          #fetch payload
          log_option_payload = log_option_object.getxml(filter=True)

          util.log_debug('update log_option_payload %s'%log_option_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=log_option_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('option')):
          raise Exception("'option' cannot be empty")

        #convert keys to list
        option = mapping_dict.get('option')
        if not isinstance(option, list):
          option = [option]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for option_iterator in option:
          rcpath_tmp =  rcpath+"/log-option=%s"%(util.make_interfacename(option_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('option')):
          raise Exception("'option' cannot be empty")

        #convert keys to list
        option = mapping_dict.get('option')
        if not isinstance(option, list):
          option = [option]

        #prepare payload
        log_option_object_list = []
        for option_iterator in option:
          from servicemodel.controller.devices.device.security_rules import rule
          log_option_object = rule.log_option.log_option()
          log_option_object.option = option_iterator
          log_option_object_list.append(log_option_object)

        return log_option_object_list

    #XPATH devices/device/security-rules/rule/source-user
    class source_user(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_user_object_list = self.validate_inputs_form_payload(mapping_dict)

        for source_user_object in source_user_object_list:
          #fetch payload
          source_user_payload = source_user_object.getxml(filter=True)
          util.log_debug('source_user_payload %s'%source_user_payload)
          payload_list.append(source_user_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_user_object_list = self.validate_inputs_form_payload(mapping_dict)

        for source_user_object in source_user_object_list:
          #fetch payload
          source_user_payload = source_user_object.getxml(filter=True)

          util.log_debug('source_user_payload %s'%source_user_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=source_user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        source_user_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/source-user=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, source_user_object in enumerate(source_user_object_list):
          #fetch payload
          source_user_payload = source_user_object.getxml(filter=True)

          util.log_debug('update source_user_payload %s'%source_user_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=source_user_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/source-user=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare payload
        source_user_object_list = []
        for member_iterator in member:
          from servicemodel.controller.devices.device.security_rules import rule
          source_user_object = rule.source_user.source_user()
          source_user_object.member = member_iterator
          source_user_object_list.append(source_user_object)

        return source_user_object_list

    #XPATH devices/device/security-rules/rule/category
    class category(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        category_object_list = self.validate_inputs_form_payload(mapping_dict)

        for category_object in category_object_list:
          #fetch payload
          category_payload = category_object.getxml(filter=True)
          util.log_debug('category_payload %s'%category_payload)
          payload_list.append(category_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        category_object_list = self.validate_inputs_form_payload(mapping_dict)

        for category_object in category_object_list:
          #fetch payload
          category_payload = category_object.getxml(filter=True)

          util.log_debug('category_payload %s'%category_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=category_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        category_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/category=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, category_object in enumerate(category_object_list):
          #fetch payload
          category_payload = category_object.getxml(filter=True)

          util.log_debug('update category_payload %s'%category_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=category_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/category=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare payload
        category_object_list = []
        for member_iterator in member:
          from servicemodel.controller.devices.device.security_rules import rule
          category_object = rule.category.category()
          category_object.member = member_iterator
          category_object_list.append(category_object)

        return category_object_list

    #XPATH devices/device/security-rules/rule/application
    class application(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict)

        for application_object in application_object_list:
          #fetch payload
          application_payload = application_object.getxml(filter=True)
          util.log_debug('application_payload %s'%application_payload)
          payload_list.append(application_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict)

        for application_object in application_object_list:
          #fetch payload
          application_payload = application_object.getxml(filter=True)

          util.log_debug('application_payload %s'%application_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, application_object in enumerate(application_object_list):
          #fetch payload
          application_payload = application_object.getxml(filter=True)

          util.log_debug('update application_payload %s'%application_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare payload
        application_object_list = []
        for member_iterator in member:
          from servicemodel.controller.devices.device.security_rules import rule
          application_object = rule.application.application()
          application_object.member = member_iterator
          application_object_list.append(application_object)

        return application_object_list

    #XPATH devices/device/security-rules/rule/service
    class service(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_object in service_object_list:
          #fetch payload
          service_payload = service_object.getxml(filter=True)
          util.log_debug('service_payload %s'%service_payload)
          payload_list.append(service_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_object in service_object_list:
          #fetch payload
          service_payload = service_object.getxml(filter=True)

          util.log_debug('service_payload %s'%service_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, service_object in enumerate(service_object_list):
          #fetch payload
          service_payload = service_object.getxml(filter=True)

          util.log_debug('update service_payload %s'%service_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare payload
        service_object_list = []
        for member_iterator in member:
          from servicemodel.controller.devices.device.security_rules import rule
          service_object = rule.service.service()
          service_object.member = member_iterator
          service_object_list.append(service_object)

        return service_object_list

    #XPATH devices/device/security-rules/rule/hip-profiles
    class hip_profiles(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, rule_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hip_profiles_object in hip_profiles_object_list:
          #fetch payload
          hip_profiles_payload = hip_profiles_object.getxml(filter=True)
          util.log_debug('hip_profiles_payload %s'%hip_profiles_payload)
          payload_list.append(hip_profiles_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)

        #convert parent keys to list
        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hip_profiles_object in hip_profiles_object_list:
          #fetch payload
          hip_profiles_payload = hip_profiles_object.getxml(filter=True)

          util.log_debug('hip_profiles_payload %s'%hip_profiles_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=hip_profiles_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, rule_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        ##prepare rcpath
        rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hip_profiles_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/hip-profiles=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, hip_profiles_object in enumerate(hip_profiles_object_list):
          #fetch payload
          hip_profiles_payload = hip_profiles_object.getxml(filter=True)

          util.log_debug('update hip_profiles_payload %s'%hip_profiles_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=hip_profiles_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, rule_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( rule_name)


        if not isinstance(rule_name, list):
          rule_name_list = [rule_name]
        else:
          rule_name_list = rule_name

        for rule_name in rule_name_list:
          ##prepare rcpath
          rcpath = "acl:security-rules/rule=%s"%(util.make_interfacename(rule_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for member_iterator in member:
          rcpath_tmp =  rcpath+"/hip-profiles=%s"%(util.make_interfacename(member_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, rule_name):
        #Parent Key Validations
        if util.isEmpty(rule_name):
          raise Exception("'rule_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('member')):
          raise Exception("'member' cannot be empty")

        #convert keys to list
        member = mapping_dict.get('member')
        if not isinstance(member, list):
          member = [member]

        #prepare payload
        hip_profiles_object_list = []
        for member_iterator in member:
          from servicemodel.controller.devices.device.security_rules import rule
          hip_profiles_object = rule.hip_profiles.hip_profiles()
          hip_profiles_object.member = member_iterator
          hip_profiles_object_list.append(hip_profiles_object)

        return hip_profiles_object_list

