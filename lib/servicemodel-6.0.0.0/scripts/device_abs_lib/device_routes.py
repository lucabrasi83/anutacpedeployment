#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class routes(object):
  #XPATH devices/device/routes/route
  class route(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:routes"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_object_list = self.validate_inputs_form_payload(mapping_dict)

      for route_object in route_object_list:
        #fetch payload
        route_payload = route_object.getxml(filter=True)
        util.log_debug('route_payload %s'%route_payload)
        payload_list.append(route_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:routes"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_object_list = self.validate_inputs_form_payload(mapping_dict)

      for route_object in route_object_list:
        #fetch payload
        route_payload = route_object.getxml(filter=True)

        util.log_debug('route_payload %s'%route_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=route_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:routes"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      dest_ip_address = mapping_dict.get('dest_ip_address')
      if not isinstance(dest_ip_address, list):
        dest_ip_address = [dest_ip_address]
      dest_mask = mapping_dict.get('dest_mask')
      if not isinstance(dest_mask, list):
        dest_mask = [dest_mask]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for dest_ip_address_iterator in dest_ip_address:
        for dest_mask_iterator in dest_mask:
          rcpath_tmp =  rcpath+"/route=%s,%s"%(util.make_interfacename(dest_ip_address_iterator),util.make_interfacename(dest_mask_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, route_object in enumerate(route_object_list):
        #fetch payload
        route_payload = route_object.getxml(filter=True)

        util.log_debug('update route_payload %s'%route_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=route_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:routes"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('dest_ip_address')):
        raise Exception("'dest_ip_address' cannot be empty")
      if util.isEmpty(mapping_dict.get('dest_mask')):
        raise Exception("'dest_mask' cannot be empty")

      #convert keys to list
      dest_ip_address = mapping_dict.get('dest_ip_address')
      if not isinstance(dest_ip_address, list):
        dest_ip_address = [dest_ip_address]
      dest_mask = mapping_dict.get('dest_mask')
      if not isinstance(dest_mask, list):
        dest_mask = [dest_mask]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for dest_ip_address_iterator in dest_ip_address:
        for dest_mask_iterator in dest_mask:
          rcpath_tmp =  rcpath+"/route=%s,%s"%(util.make_interfacename(dest_ip_address_iterator),util.make_interfacename(dest_mask_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('dest_ip_address')):
        raise Exception("'dest_ip_address' cannot be empty")
      if util.isEmpty(mapping_dict.get('dest_mask')):
        raise Exception("'dest_mask' cannot be empty")

      #convert keys to list
      dest_ip_address = mapping_dict.get('dest_ip_address')
      if not isinstance(dest_ip_address, list):
        dest_ip_address = [dest_ip_address]
      dest_mask = mapping_dict.get('dest_mask')
      if not isinstance(dest_mask, list):
        dest_mask = [dest_mask]

      #prepare payload
      route_object_list = []
      for dest_ip_address_iterator in dest_ip_address:
        for dest_mask_iterator in dest_mask:
          from servicemodel.controller.devices.device import routes
          route_object = routes.route.route()
          route_object.dest_ip_address = dest_ip_address_iterator
          route_object.dest_mask = dest_mask_iterator
          route_object_list.append(route_object)

      return route_object_list

    #XPATH devices/device/routes/route/options
    class options(AbstractDeviceMgr):
      key_hints = [['dest_ip_address','dest_mask']]
      def getRcpathPayload(self, sdata, dev, route_dest_ip_address, route_dest_mask, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_dest_ip_address, route_dest_mask)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(route_dest_ip_address, list):
          route_dest_ip_address_list = [route_dest_ip_address]
        else:
          route_dest_ip_address_list = route_dest_ip_address
        if not isinstance(route_dest_mask, list):
          route_dest_mask_list = [route_dest_mask]
        else:
          route_dest_mask_list = route_dest_mask

        for route_dest_ip_address in route_dest_ip_address_list:
          for route_dest_mask in route_dest_mask_list:
            ##prepare rcpath
            rcpath = "l3features:routes/route=%s,%s"%(util.make_interfacename(route_dest_ip_address),util.make_interfacename(route_dest_mask))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        options_object_list = self.validate_inputs_form_payload(mapping_dict)

        for options_object in options_object_list:
          #fetch payload
          options_payload = options_object.getxml(filter=True)
          util.log_debug('options_payload %s'%options_payload)
          payload_list.append(options_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, route_dest_ip_address, route_dest_mask, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_dest_ip_address, route_dest_mask)

        #convert parent keys to list
        if not isinstance(route_dest_ip_address, list):
          route_dest_ip_address_list = [route_dest_ip_address]
        else:
          route_dest_ip_address_list = route_dest_ip_address
        if not isinstance(route_dest_mask, list):
          route_dest_mask_list = [route_dest_mask]
        else:
          route_dest_mask_list = route_dest_mask

        for route_dest_ip_address in route_dest_ip_address_list:
          for route_dest_mask in route_dest_mask_list:
            ##prepare rcpath
            rcpath = "l3features:routes/route=%s,%s"%(util.make_interfacename(route_dest_ip_address),util.make_interfacename(route_dest_mask))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        options_object_list = self.validate_inputs_form_payload(mapping_dict)

        for options_object in options_object_list:
          #fetch payload
          options_payload = options_object.getxml(filter=True)

          util.log_debug('options_payload %s'%options_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, route_dest_ip_address, route_dest_mask, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_dest_ip_address, route_dest_mask)


        ##prepare rcpath
        rcpath = "l3features:routes/route=%s,%s"%(util.make_interfacename(route_dest_ip_address),util.make_interfacename(route_dest_mask))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        options_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for id_iterator in id:
          rcpath_tmp =  rcpath+"/options=%s"%(util.make_interfacename(id_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, options_object in enumerate(options_object_list):
          #fetch payload
          options_payload = options_object.getxml(filter=True)

          util.log_debug('update options_payload %s'%options_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, route_dest_ip_address, route_dest_mask, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_dest_ip_address, route_dest_mask)


        if not isinstance(route_dest_ip_address, list):
          route_dest_ip_address_list = [route_dest_ip_address]
        else:
          route_dest_ip_address_list = route_dest_ip_address
        if not isinstance(route_dest_mask, list):
          route_dest_mask_list = [route_dest_mask]
        else:
          route_dest_mask_list = route_dest_mask

        for route_dest_ip_address in route_dest_ip_address_list:
          for route_dest_mask in route_dest_mask_list:
            ##prepare rcpath
            rcpath = "l3features:routes/route=%s,%s"%(util.make_interfacename(route_dest_ip_address),util.make_interfacename(route_dest_mask))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('id')):
          raise Exception("'id' cannot be empty")

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for id_iterator in id:
          rcpath_tmp =  rcpath+"/options=%s"%(util.make_interfacename(id_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, route_dest_ip_address, route_dest_mask):
        #Parent Key Validations
        if util.isEmpty(route_dest_ip_address):
          raise Exception("'route_dest_ip_address' cannot be empty")
        if util.isEmpty(route_dest_mask):
          raise Exception("'route_dest_mask' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('id')):
          raise Exception("'id' cannot be empty")

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare payload
        options_object_list = []
        for id_iterator in id:
          from servicemodel.controller.devices.device.routes import route
          options_object = route.options.options()
          options_object.id = id_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              options_object.description = mapping_dict.get('description', None)
            else:
              options_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
              options_object.vrf_name = mapping_dict.get('vrf_name', None)
            else:
              options_object.vrf_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('metric', None)) != ''):
              options_object.metric = mapping_dict.get('metric', None)
            else:
              options_object.metric._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('next_hop_ip', None)) != ''):
              options_object.next_hop_ip = mapping_dict.get('next_hop_ip', None)
            else:
              options_object.next_hop_ip._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
              options_object.name = mapping_dict.get('name', None)
            else:
              options_object.name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('user_id_grp_name', None)) != ''):
              options_object.user_id_grp_name = mapping_dict.get('user_id_grp_name', None)
            else:
              options_object.user_id_grp_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('inpath_route', None)) != ''):
              options_object.inpath_route = mapping_dict.get('inpath_route', None)
            else:
              options_object.inpath_route._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
              options_object.interface_name = mapping_dict.get('interface_name', None)
            else:
              options_object.interface_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('next_routing_table', None)) != ''):
              options_object.next_routing_table = mapping_dict.get('next_routing_table', None)
            else:
              options_object.next_routing_table._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vlan_number', None)) != ''):
              options_object.vlan_number = mapping_dict.get('vlan_number', None)
            else:
              options_object.vlan_number._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
              options_object.tag = mapping_dict.get('tag', None)
            else:
              options_object.tag._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('track', None)) != ''):
              options_object.track = mapping_dict.get('track', None)
            else:
              options_object.track._empty_tag = True
          except TypeError:
            pass
          options_object_list.append(options_object)

        return options_object_list

