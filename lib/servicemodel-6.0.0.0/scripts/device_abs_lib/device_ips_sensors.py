#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class ips_sensors(object):
  #XPATH devices/device/ips-sensors/ips-sensor
  class ips_sensor(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:ips-sensors"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ips_sensor_object_list = self.validate_inputs_form_payload(mapping_dict)

      for ips_sensor_object in ips_sensor_object_list:
        #fetch payload
        ips_sensor_payload = ips_sensor_object.getxml(filter=True)
        util.log_debug('ips_sensor_payload %s'%ips_sensor_payload)
        payload_list.append(ips_sensor_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:ips-sensors"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ips_sensor_object_list = self.validate_inputs_form_payload(mapping_dict)

      for ips_sensor_object in ips_sensor_object_list:
        #fetch payload
        ips_sensor_payload = ips_sensor_object.getxml(filter=True)

        util.log_debug('ips_sensor_payload %s'%ips_sensor_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ips_sensor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:ips-sensors"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ips_sensor_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/ips-sensor=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, ips_sensor_object in enumerate(ips_sensor_object_list):
        #fetch payload
        ips_sensor_payload = ips_sensor_object.getxml(filter=True)

        util.log_debug('update ips_sensor_payload %s'%ips_sensor_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ips_sensor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:ips-sensors"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/ips-sensor=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      ips_sensor_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import ips_sensors
        ips_sensor_object = ips_sensors.ips_sensor.ips_sensor()
        ips_sensor_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('desc', None)) != ''):
            ips_sensor_object.desc = mapping_dict.get('desc', None)
          else:
            ips_sensor_object.desc._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
            ips_sensor_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
          else:
            ips_sensor_object.virtual_device_name._empty_tag = True
        except TypeError:
          pass
        ips_sensor_object_list.append(ips_sensor_object)

      return ips_sensor_object_list

    class ips_filters(object):
      #XPATH devices/device/ips-sensors/ips-sensor/ips-filters/ips-filter
      class ips_filter(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, ips_sensor_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( ips_sensor_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(ips_sensor_name, list):
            ips_sensor_name_list = [ips_sensor_name]
          else:
            ips_sensor_name_list = ips_sensor_name

          for ips_sensor_name in ips_sensor_name_list:
            ##prepare rcpath
            rcpath = "firewall:ips-sensors/ips-sensor=%s/ips-filters"%(util.make_interfacename(ips_sensor_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ips_filter_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ips_filter_object in ips_filter_object_list:
            #fetch payload
            ips_filter_payload = ips_filter_object.getxml(filter=True)
            util.log_debug('ips_filter_payload %s'%ips_filter_payload)
            payload_list.append(ips_filter_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, ips_sensor_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( ips_sensor_name)

          #convert parent keys to list
          if not isinstance(ips_sensor_name, list):
            ips_sensor_name_list = [ips_sensor_name]
          else:
            ips_sensor_name_list = ips_sensor_name

          for ips_sensor_name in ips_sensor_name_list:
            ##prepare rcpath
            rcpath = "firewall:ips-sensors/ips-sensor=%s/ips-filters"%(util.make_interfacename(ips_sensor_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ips_filter_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ips_filter_object in ips_filter_object_list:
            #fetch payload
            ips_filter_payload = ips_filter_object.getxml(filter=True)

            util.log_debug('ips_filter_payload %s'%ips_filter_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ips_filter_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, ips_sensor_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( ips_sensor_name)


          ##prepare rcpath
          rcpath = "firewall:ips-sensors/ips-sensor=%s/ips-filters"%(util.make_interfacename(ips_sensor_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ips_filter_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          filter_number = mapping_dict.get('filter_number')
          if not isinstance(filter_number, list):
            filter_number = [filter_number]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filter_number_iterator in filter_number:
            rcpath_tmp =  rcpath+"/ips-filter=%s"%(util.make_interfacename(filter_number_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ips_filter_object in enumerate(ips_filter_object_list):
            #fetch payload
            ips_filter_payload = ips_filter_object.getxml(filter=True)

            util.log_debug('update ips_filter_payload %s'%ips_filter_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ips_filter_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, ips_sensor_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( ips_sensor_name)


          if not isinstance(ips_sensor_name, list):
            ips_sensor_name_list = [ips_sensor_name]
          else:
            ips_sensor_name_list = ips_sensor_name

          for ips_sensor_name in ips_sensor_name_list:
            ##prepare rcpath
            rcpath = "firewall:ips-sensors/ips-sensor=%s/ips-filters"%(util.make_interfacename(ips_sensor_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('filter_number')):
            raise Exception("'filter_number' cannot be empty")

          #convert keys to list
          filter_number = mapping_dict.get('filter_number')
          if not isinstance(filter_number, list):
            filter_number = [filter_number]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filter_number_iterator in filter_number:
            rcpath_tmp =  rcpath+"/ips-filter=%s"%(util.make_interfacename(filter_number_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, ips_sensor_name):
          #Parent Key Validations
          if util.isEmpty(ips_sensor_name):
            raise Exception("'ips_sensor_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('filter_number')):
            raise Exception("'filter_number' cannot be empty")
          if util.isEmpty(mapping_dict.get('ips_log_packet')):
            raise Exception("'ips_log_packet' cannot be empty")
          if util.isEmpty(mapping_dict.get('ips_log')):
            raise Exception("'ips_log' cannot be empty")

          #convert keys to list
          filter_number = mapping_dict.get('filter_number')
          if not isinstance(filter_number, list):
            filter_number = [filter_number]

          #prepare payload
          ips_filter_object_list = []
          for filter_number_iterator in filter_number:
            from servicemodel.controller.devices.device.ips_sensors.ips_sensor import ips_filters
            ips_filter_object = ips_filters.ips_filter.ips_filter()
            ips_filter_object.filter_number = filter_number_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_location', None)) != ''):
                ips_filter_object.ips_location = mapping_dict.get('ips_location', None)
              else:
                ips_filter_object.ips_location._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_severity', None)) != ''):
                ips_filter_object.ips_severity = mapping_dict.get('ips_severity', None)
              else:
                ips_filter_object.ips_severity._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('os_list', None)) != ''):
                ips_filter_object.os_list = mapping_dict.get('os_list', None)
              else:
                ips_filter_object.os_list._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('protocol_list', None)) != ''):
                ips_filter_object.protocol_list = mapping_dict.get('protocol_list', None)
              else:
                ips_filter_object.protocol_list._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('application_list', None)) != ''):
                ips_filter_object.application_list = mapping_dict.get('application_list', None)
              else:
                ips_filter_object.application_list._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_status', None)) != ''):
                ips_filter_object.ips_status = mapping_dict.get('ips_status', None)
              else:
                ips_filter_object.ips_status._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_action', None)) != ''):
                ips_filter_object.ips_action = mapping_dict.get('ips_action', None)
              else:
                ips_filter_object.ips_action._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_quarantine', None)) != ''):
                ips_filter_object.ips_quarantine = mapping_dict.get('ips_quarantine', None)
              else:
                ips_filter_object.ips_quarantine._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_expiry', None)) != ''):
                ips_filter_object.ips_expiry = mapping_dict.get('ips_expiry', None)
              else:
                ips_filter_object.ips_expiry._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_quarantine_log', None)) != ''):
                ips_filter_object.ips_quarantine_log = mapping_dict.get('ips_quarantine_log', None)
              else:
                ips_filter_object.ips_quarantine_log._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_log_packet', None)) != ''):
                ips_filter_object.ips_log_packet = mapping_dict.get('ips_log_packet', None)
              else:
                ips_filter_object.ips_log_packet._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ips_log', None)) != ''):
                ips_filter_object.ips_log = mapping_dict.get('ips_log', None)
              else:
                ips_filter_object.ips_log._empty_tag = True
            except TypeError:
              pass
            ips_filter_object_list.append(ips_filter_object)

          return ips_filter_object_list

