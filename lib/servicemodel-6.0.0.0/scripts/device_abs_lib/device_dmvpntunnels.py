#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class dmvpntunnels(object):
  #XPATH devices/device/dmvpntunnels/dmvpntunnel
  class dmvpntunnel(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "dmvpn:dmvpntunnels"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dmvpntunnel_object_list = self.validate_inputs_form_payload(mapping_dict)

      for dmvpntunnel_object in dmvpntunnel_object_list:
        #fetch payload
        dmvpntunnel_payload = dmvpntunnel_object.getxml(filter=True)
        util.log_debug('dmvpntunnel_payload %s'%dmvpntunnel_payload)
        payload_list.append(dmvpntunnel_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "dmvpn:dmvpntunnels"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dmvpntunnel_object_list = self.validate_inputs_form_payload(mapping_dict)

      for dmvpntunnel_object in dmvpntunnel_object_list:
        #fetch payload
        dmvpntunnel_payload = dmvpntunnel_object.getxml(filter=True)

        util.log_debug('dmvpntunnel_payload %s'%dmvpntunnel_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=dmvpntunnel_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:dmvpntunnels"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dmvpntunnel_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/dmvpntunnel=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, dmvpntunnel_object in enumerate(dmvpntunnel_object_list):
        #fetch payload
        dmvpntunnel_payload = dmvpntunnel_object.getxml(filter=True)

        util.log_debug('update dmvpntunnel_payload %s'%dmvpntunnel_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=dmvpntunnel_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:dmvpntunnels"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/dmvpntunnel=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      dmvpntunnel_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import dmvpntunnels
        dmvpntunnel_object = dmvpntunnels.dmvpntunnel.dmvpntunnel()
        dmvpntunnel_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            dmvpntunnel_object.type = mapping_dict.get('type', None)
          else:
            dmvpntunnel_object.type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipaddress', None)) != ''):
            dmvpntunnel_object.ipaddress = mapping_dict.get('ipaddress', None)
          else:
            dmvpntunnel_object.ipaddress._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            dmvpntunnel_object.netmask = mapping_dict.get('netmask', None)
          else:
            dmvpntunnel_object.netmask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_source', None)) != ''):
            dmvpntunnel_object.tunnel_source = mapping_dict.get('tunnel_source', None)
          else:
            dmvpntunnel_object.tunnel_source._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_destination', None)) != ''):
            dmvpntunnel_object.tunnel_destination = mapping_dict.get('tunnel_destination', None)
          else:
            dmvpntunnel_object.tunnel_destination._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_mode', None)) != ''):
            dmvpntunnel_object.tunnel_mode = mapping_dict.get('tunnel_mode', None)
          else:
            dmvpntunnel_object.tunnel_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_key', None)) != ''):
            dmvpntunnel_object.tunnel_key = mapping_dict.get('tunnel_key', None)
          else:
            dmvpntunnel_object.tunnel_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_network_id', None)) != ''):
            dmvpntunnel_object.nhrp_network_id = mapping_dict.get('nhrp_network_id', None)
          else:
            dmvpntunnel_object.nhrp_network_id._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_auth_key', None)) != ''):
            dmvpntunnel_object.nhrp_auth_key = mapping_dict.get('nhrp_auth_key', None)
          else:
            dmvpntunnel_object.nhrp_auth_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bandwidth', None)) != ''):
            dmvpntunnel_object.bandwidth = mapping_dict.get('bandwidth', None)
          else:
            dmvpntunnel_object.bandwidth._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('shared', None)) != ''):
            dmvpntunnel_object.shared = mapping_dict.get('shared', None)
          else:
            dmvpntunnel_object.shared._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('no_nhrp_route_watch', None)) != ''):
            dmvpntunnel_object.no_nhrp_route_watch = mapping_dict.get('no_nhrp_route_watch', None)
          else:
            dmvpntunnel_object.no_nhrp_route_watch._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_reg_no_uniq', None)) != ''):
            dmvpntunnel_object.nhrp_reg_no_uniq = mapping_dict.get('nhrp_reg_no_uniq', None)
          else:
            dmvpntunnel_object.nhrp_reg_no_uniq._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_reg_timeout', None)) != ''):
            dmvpntunnel_object.nhrp_reg_timeout = mapping_dict.get('nhrp_reg_timeout', None)
          else:
            dmvpntunnel_object.nhrp_reg_timeout._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_holdtime', None)) != ''):
            dmvpntunnel_object.nhrp_holdtime = mapping_dict.get('nhrp_holdtime', None)
          else:
            dmvpntunnel_object.nhrp_holdtime._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_redirect', None)) != ''):
            dmvpntunnel_object.nhrp_redirect = mapping_dict.get('nhrp_redirect', None)
          else:
            dmvpntunnel_object.nhrp_redirect._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nhrp_shortcut', None)) != ''):
            dmvpntunnel_object.nhrp_shortcut = mapping_dict.get('nhrp_shortcut', None)
          else:
            dmvpntunnel_object.nhrp_shortcut._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_keepalive_period', None)) != ''):
            dmvpntunnel_object.tunnel_keepalive_period = mapping_dict.get('tunnel_keepalive_period', None)
          else:
            dmvpntunnel_object.tunnel_keepalive_period._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tunnel_keepalive_retries', None)) != ''):
            dmvpntunnel_object.tunnel_keepalive_retries = mapping_dict.get('tunnel_keepalive_retries', None)
          else:
            dmvpntunnel_object.tunnel_keepalive_retries._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('if_state_nhrp', None)) != ''):
            dmvpntunnel_object.if_state_nhrp = mapping_dict.get('if_state_nhrp', None)
          else:
            dmvpntunnel_object.if_state_nhrp._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('delay', None)) != ''):
            dmvpntunnel_object.delay = mapping_dict.get('delay', None)
          else:
            dmvpntunnel_object.delay._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
            dmvpntunnel_object.mtu = mapping_dict.get('mtu', None)
          else:
            dmvpntunnel_object.mtu._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tcp_adjust_mss', None)) != ''):
            dmvpntunnel_object.tcp_adjust_mss = mapping_dict.get('tcp_adjust_mss', None)
          else:
            dmvpntunnel_object.tcp_adjust_mss._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('authentication_type', None)) != ''):
            dmvpntunnel_object.authentication_type = mapping_dict.get('authentication_type', None)
          else:
            dmvpntunnel_object.authentication_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('eigrpProcessNumber', None)) != ''):
            dmvpntunnel_object.eigrpProcessNumber = mapping_dict.get('eigrpProcessNumber', None)
          else:
            dmvpntunnel_object.eigrpProcessNumber._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('key_chain', None)) != ''):
            dmvpntunnel_object.key_chain = mapping_dict.get('key_chain', None)
          else:
            dmvpntunnel_object.key_chain._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_definition_mode', None)) != ''):
            dmvpntunnel_object.vrf_definition_mode = mapping_dict.get('vrf_definition_mode', None)
          else:
            dmvpntunnel_object.vrf_definition_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
            dmvpntunnel_object.vrf_name = mapping_dict.get('vrf_name', None)
          else:
            dmvpntunnel_object.vrf_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('front_vrf_name', None)) != ''):
            dmvpntunnel_object.front_vrf_name = mapping_dict.get('front_vrf_name', None)
          else:
            dmvpntunnel_object.front_vrf_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('in_queue_length', None)) != ''):
            dmvpntunnel_object.in_queue_length = mapping_dict.get('in_queue_length', None)
          else:
            dmvpntunnel_object.in_queue_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('out_queue_length', None)) != ''):
            dmvpntunnel_object.out_queue_length = mapping_dict.get('out_queue_length', None)
          else:
            dmvpntunnel_object.out_queue_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('map_multicast', None)) != ''):
            dmvpntunnel_object.map_multicast = mapping_dict.get('map_multicast', None)
          else:
            dmvpntunnel_object.map_multicast._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipsec_profile_name', None)) != ''):
            dmvpntunnel_object.ipsec_profile_name = mapping_dict.get('ipsec_profile_name', None)
          else:
            dmvpntunnel_object.ipsec_profile_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('routing_protocol', None)) != ''):
            dmvpntunnel_object.routing_protocol = mapping_dict.get('routing_protocol', None)
          else:
            dmvpntunnel_object.routing_protocol._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            dmvpntunnel_object.description = mapping_dict.get('description', None)
          else:
            dmvpntunnel_object.description._empty_tag = True
        except TypeError:
          pass
        dmvpntunnel_object_list.append(dmvpntunnel_object)

      return dmvpntunnel_object_list

    #XPATH devices/device/dmvpntunnels/dmvpntunnel/hub-list
    class hub_list(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dmvpntunnel_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hub_list_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hub_list_object in hub_list_object_list:
          #fetch payload
          hub_list_payload = hub_list_object.getxml(filter=True)
          util.log_debug('hub_list_payload %s'%hub_list_payload)
          payload_list.append(hub_list_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hub_list_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hub_list_object in hub_list_object_list:
          #fetch payload
          hub_list_payload = hub_list_object.getxml(filter=True)

          util.log_debug('hub_list_payload %s'%hub_list_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=hub_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        ##prepare rcpath
        rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hub_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ip_address_iterator in ip_address:
          rcpath_tmp =  rcpath+"/hub-list=%s"%(util.make_interfacename(ip_address_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, hub_list_object in enumerate(hub_list_object_list):
          #fetch payload
          hub_list_payload = hub_list_object.getxml(filter=True)

          util.log_debug('update hub_list_payload %s'%hub_list_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=hub_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dmvpntunnel_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ip_address_iterator in ip_address:
          rcpath_tmp =  rcpath+"/hub-list=%s"%(util.make_interfacename(ip_address_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dmvpntunnel_name):
        #Parent Key Validations
        if util.isEmpty(dmvpntunnel_name):
          raise Exception("'dmvpntunnel_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare payload
        hub_list_object_list = []
        for ip_address_iterator in ip_address:
          from servicemodel.controller.devices.device.dmvpntunnels import dmvpntunnel
          hub_list_object = dmvpntunnel.hub_list.hub_list()
          hub_list_object.ip_address = ip_address_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              hub_list_object.netmask = mapping_dict.get('netmask', None)
            else:
              hub_list_object.netmask._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('route_map', None)) != ''):
              hub_list_object.route_map = mapping_dict.get('route_map', None)
            else:
              hub_list_object.route_map._empty_tag = True
          except TypeError:
            pass
          hub_list_object_list.append(hub_list_object)

        return hub_list_object_list

    #XPATH devices/device/dmvpntunnels/dmvpntunnel/nhrp-maps
    class nhrp_maps(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dmvpntunnel_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_maps_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nhrp_maps_object in nhrp_maps_object_list:
          #fetch payload
          nhrp_maps_payload = nhrp_maps_object.getxml(filter=True)
          util.log_debug('nhrp_maps_payload %s'%nhrp_maps_payload)
          payload_list.append(nhrp_maps_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_maps_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nhrp_maps_object in nhrp_maps_object_list:
          #fetch payload
          nhrp_maps_payload = nhrp_maps_object.getxml(filter=True)

          util.log_debug('nhrp_maps_payload %s'%nhrp_maps_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=nhrp_maps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        ##prepare rcpath
        rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_maps_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        sourceip = mapping_dict.get('sourceip')
        if not isinstance(sourceip, list):
          sourceip = [sourceip]
        destip = mapping_dict.get('destip')
        if not isinstance(destip, list):
          destip = [destip]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for sourceip_iterator in sourceip:
          for destip_iterator in destip:
            rcpath_tmp =  rcpath+"/nhrp-maps=%s,%s"%(util.make_interfacename(sourceip_iterator),util.make_interfacename(destip_iterator))
            rcpath_list.append(rcpath_tmp)
        for rc_counter, nhrp_maps_object in enumerate(nhrp_maps_object_list):
          #fetch payload
          nhrp_maps_payload = nhrp_maps_object.getxml(filter=True)

          util.log_debug('update nhrp_maps_payload %s'%nhrp_maps_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=nhrp_maps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dmvpntunnel_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('sourceip')):
          raise Exception("'sourceip' cannot be empty")
        if util.isEmpty(mapping_dict.get('destip')):
          raise Exception("'destip' cannot be empty")

        #convert keys to list
        sourceip = mapping_dict.get('sourceip')
        if not isinstance(sourceip, list):
          sourceip = [sourceip]
        destip = mapping_dict.get('destip')
        if not isinstance(destip, list):
          destip = [destip]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for sourceip_iterator in sourceip:
          for destip_iterator in destip:
            rcpath_tmp =  rcpath+"/nhrp-maps=%s,%s"%(util.make_interfacename(sourceip_iterator),util.make_interfacename(destip_iterator))
            rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dmvpntunnel_name):
        #Parent Key Validations
        if util.isEmpty(dmvpntunnel_name):
          raise Exception("'dmvpntunnel_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('sourceip')):
          raise Exception("'sourceip' cannot be empty")
        if util.isEmpty(mapping_dict.get('destip')):
          raise Exception("'destip' cannot be empty")

        #convert keys to list
        sourceip = mapping_dict.get('sourceip')
        if not isinstance(sourceip, list):
          sourceip = [sourceip]
        destip = mapping_dict.get('destip')
        if not isinstance(destip, list):
          destip = [destip]

        #prepare payload
        nhrp_maps_object_list = []
        for sourceip_iterator in sourceip:
          for destip_iterator in destip:
            from servicemodel.controller.devices.device.dmvpntunnels import dmvpntunnel
            nhrp_maps_object = dmvpntunnel.nhrp_maps.nhrp_maps()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('nhrp_type', None)) != ''):
                nhrp_maps_object.nhrp_type = mapping_dict.get('nhrp_type', None)
              else:
                nhrp_maps_object.nhrp_type._empty_tag = True
            except TypeError:
              pass
            nhrp_maps_object.sourceip = sourceip_iterator
            nhrp_maps_object.destip = destip_iterator
            nhrp_maps_object_list.append(nhrp_maps_object)

        return nhrp_maps_object_list

    #XPATH devices/device/dmvpntunnels/dmvpntunnel/nhrp-qos-maps
    class nhrp_qos_maps(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dmvpntunnel_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_qos_maps_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nhrp_qos_maps_object in nhrp_qos_maps_object_list:
          #fetch payload
          nhrp_qos_maps_payload = nhrp_qos_maps_object.getxml(filter=True)
          util.log_debug('nhrp_qos_maps_payload %s'%nhrp_qos_maps_payload)
          payload_list.append(nhrp_qos_maps_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_qos_maps_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nhrp_qos_maps_object in nhrp_qos_maps_object_list:
          #fetch payload
          nhrp_qos_maps_payload = nhrp_qos_maps_object.getxml(filter=True)

          util.log_debug('nhrp_qos_maps_payload %s'%nhrp_qos_maps_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=nhrp_qos_maps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        ##prepare rcpath
        rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nhrp_qos_maps_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/nhrp-qos-maps=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, nhrp_qos_maps_object in enumerate(nhrp_qos_maps_object_list):
          #fetch payload
          nhrp_qos_maps_payload = nhrp_qos_maps_object.getxml(filter=True)

          util.log_debug('update nhrp_qos_maps_payload %s'%nhrp_qos_maps_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=nhrp_qos_maps_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dmvpntunnel_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/nhrp-qos-maps=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dmvpntunnel_name):
        #Parent Key Validations
        if util.isEmpty(dmvpntunnel_name):
          raise Exception("'dmvpntunnel_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        nhrp_qos_maps_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.dmvpntunnels import dmvpntunnel
          nhrp_qos_maps_object = dmvpntunnel.nhrp_qos_maps.nhrp_qos_maps()
          nhrp_qos_maps_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('policy_map', None)) != ''):
              nhrp_qos_maps_object.policy_map = mapping_dict.get('policy_map', None)
            else:
              nhrp_qos_maps_object.policy_map._empty_tag = True
          except TypeError:
            pass
          nhrp_qos_maps_object_list.append(nhrp_qos_maps_object)

        return nhrp_qos_maps_object_list

    #XPATH devices/device/dmvpntunnels/dmvpntunnel/domain-path
    class domain_path(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dmvpntunnel_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_path_object_list = self.validate_inputs_form_payload(mapping_dict)

        for domain_path_object in domain_path_object_list:
          #fetch payload
          domain_path_payload = domain_path_object.getxml(filter=True)
          util.log_debug('domain_path_payload %s'%domain_path_payload)
          payload_list.append(domain_path_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)

        #convert parent keys to list
        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_path_object_list = self.validate_inputs_form_payload(mapping_dict)

        for domain_path_object in domain_path_object_list:
          #fetch payload
          domain_path_payload = domain_path_object.getxml(filter=True)

          util.log_debug('domain_path_payload %s'%domain_path_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=domain_path_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dmvpntunnel_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        ##prepare rcpath
        rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_path_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/domain-path"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, domain_path_object in enumerate(domain_path_object_list):
          #fetch payload
          domain_path_payload = domain_path_object.getxml(filter=True)

          util.log_debug('update domain_path_payload %s'%domain_path_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=domain_path_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dmvpntunnel_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dmvpntunnel_name)


        if not isinstance(dmvpntunnel_name, list):
          dmvpntunnel_name_list = [dmvpntunnel_name]
        else:
          dmvpntunnel_name_list = dmvpntunnel_name

        for dmvpntunnel_name in dmvpntunnel_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:dmvpntunnels/dmvpntunnel=%s"%(util.make_interfacename(dmvpntunnel_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/domain-path"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dmvpntunnel_name):
        #Parent Key Validations
        if util.isEmpty(dmvpntunnel_name):
          raise Exception("'dmvpntunnel_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        domain_path_object_list = []
        from servicemodel.controller.devices.device.dmvpntunnels import dmvpntunnel
        domain_path_object = dmvpntunnel.domain_path.domain_path()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
            domain_path_object.domain_name = mapping_dict.get('domain_name', None)
          else:
            domain_path_object.domain_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('path_id', None)) != ''):
            domain_path_object.path_id = mapping_dict.get('path_id', None)
          else:
            domain_path_object.path_id._empty_tag = True
        except TypeError:
          pass
        domain_path_object_list.append(domain_path_object)

        return domain_path_object_list

