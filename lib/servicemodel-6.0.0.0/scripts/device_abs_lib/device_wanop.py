#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/wanop
class wanop(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    wanop_object_list = self.validate_inputs_form_payload(mapping_dict)

    for wanop_object in wanop_object_list:
      #fetch payload
      wanop_payload = wanop_object.getxml(filter=True)
      util.log_debug('wanop_payload %s'%wanop_payload)
      payload_list.append(wanop_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    wanop_object_list = self.validate_inputs_form_payload(mapping_dict)

    for wanop_object in wanop_object_list:
      #fetch payload
      wanop_payload = wanop_object.getxml(filter=True)

      util.log_debug('wanop_payload %s'%wanop_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=wanop_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    wanop_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/wanop"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, wanop_object in enumerate(wanop_object_list):
      #fetch payload
      wanop_payload = wanop_object.getxml(filter=True)

      util.log_debug('update wanop_payload %s'%wanop_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=wanop_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/wanop"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs

    #convert keys to list

    #prepare payload
    wanop_object_list = []
    from servicemodel.controller.devices import device
    wanop_object = device.wanop.wanop()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('interception_method', None)) != ''):
        wanop_object.interception_method = mapping_dict.get('interception_method', None)
      else:
        wanop_object.interception_method._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('vendor', None)) != ''):
        wanop_object.vendor = mapping_dict.get('vendor', None)
      else:
        wanop_object.vendor._empty_tag = True
    except TypeError:
      pass
    wanop_object_list.append(wanop_object)

    return wanop_object_list

  #XPATH devices/device/wanop/application-optimization
  class application_optimization(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_optimization_object_list = self.validate_inputs_form_payload(mapping_dict)

      for application_optimization_object in application_optimization_object_list:
        #fetch payload
        application_optimization_payload = application_optimization_object.getxml(filter=True)
        util.log_debug('application_optimization_payload %s'%application_optimization_payload)
        payload_list.append(application_optimization_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_optimization_object_list = self.validate_inputs_form_payload(mapping_dict)

      for application_optimization_object in application_optimization_object_list:
        #fetch payload
        application_optimization_payload = application_optimization_object.getxml(filter=True)

        util.log_debug('application_optimization_payload %s'%application_optimization_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_optimization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_optimization_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      application_optimization = mapping_dict.get('application_optimization')
      if not isinstance(application_optimization, list):
        application_optimization = [application_optimization]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for application_optimization_iterator in application_optimization:
        rcpath_tmp =  rcpath+"/application-optimization=%s"%(util.make_interfacename(application_optimization_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, application_optimization_object in enumerate(application_optimization_object_list):
        #fetch payload
        application_optimization_payload = application_optimization_object.getxml(filter=True)

        util.log_debug('update application_optimization_payload %s'%application_optimization_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_optimization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('application_optimization')):
        raise Exception("'application_optimization' cannot be empty")

      #convert keys to list
      application_optimization = mapping_dict.get('application_optimization')
      if not isinstance(application_optimization, list):
        application_optimization = [application_optimization]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for application_optimization_iterator in application_optimization:
        rcpath_tmp =  rcpath+"/application-optimization=%s"%(util.make_interfacename(application_optimization_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('application_optimization')):
        raise Exception("'application_optimization' cannot be empty")

      #convert keys to list
      application_optimization = mapping_dict.get('application_optimization')
      if not isinstance(application_optimization, list):
        application_optimization = [application_optimization]

      #prepare payload
      application_optimization_object_list = []
      for application_optimization_iterator in application_optimization:
        from servicemodel.controller.devices.device import wanop
        application_optimization_object = wanop.application_optimization.application_optimization()
        application_optimization_object.application_optimization = application_optimization_iterator
        application_optimization_object_list.append(application_optimization_object)

      return application_optimization_object_list

  #XPATH devices/device/wanop/central-manager-config
  class central_manager_config(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      central_manager_config_object_list = self.validate_inputs_form_payload(mapping_dict)

      for central_manager_config_object in central_manager_config_object_list:
        #fetch payload
        central_manager_config_payload = central_manager_config_object.getxml(filter=True)
        util.log_debug('central_manager_config_payload %s'%central_manager_config_payload)
        payload_list.append(central_manager_config_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      central_manager_config_object_list = self.validate_inputs_form_payload(mapping_dict)

      for central_manager_config_object in central_manager_config_object_list:
        #fetch payload
        central_manager_config_payload = central_manager_config_object.getxml(filter=True)

        util.log_debug('central_manager_config_payload %s'%central_manager_config_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=central_manager_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      central_manager_config_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/central-manager-config"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, central_manager_config_object in enumerate(central_manager_config_object_list):
        #fetch payload
        central_manager_config_payload = central_manager_config_object.getxml(filter=True)

        util.log_debug('update central_manager_config_payload %s'%central_manager_config_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=central_manager_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:wanop"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/central-manager-config"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      central_manager_config_object_list = []
      from servicemodel.controller.devices.device import wanop
      central_manager_config_object = wanop.central_manager_config.central_manager_config()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
          central_manager_config_object.ip_address = mapping_dict.get('ip_address', None)
        else:
          central_manager_config_object.ip_address._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('primary_interface_name', None)) != ''):
          central_manager_config_object.primary_interface_name = mapping_dict.get('primary_interface_name', None)
        else:
          central_manager_config_object.primary_interface_name._empty_tag = True
      except TypeError:
        pass
      central_manager_config_object_list.append(central_manager_config_object)

      return central_manager_config_object_list

  class interception(object):
    #XPATH devices/device/wanop/interception/wccp
    class wccp(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        wccp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for wccp_object in wccp_object_list:
          #fetch payload
          wccp_payload = wccp_object.getxml(filter=True)
          util.log_debug('wccp_payload %s'%wccp_payload)
          payload_list.append(wccp_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        wccp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for wccp_object in wccp_object_list:
          #fetch payload
          wccp_payload = wccp_object.getxml(filter=True)

          util.log_debug('wccp_payload %s'%wccp_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=wccp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        wccp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/wccp"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, wccp_object in enumerate(wccp_object_list):
          #fetch payload
          wccp_payload = wccp_object.getxml(filter=True)

          util.log_debug('update wccp_payload %s'%wccp_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=wccp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/wccp"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        wccp_object_list = []
        from servicemodel.controller.devices.device.wanop import interception
        wccp_object = interception.wccp.wccp()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('service_group_1', None)) != ''):
            wccp_object.service_group_1 = mapping_dict.get('service_group_1', None)
          else:
            wccp_object.service_group_1._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('service_group_2', None)) != ''):
            wccp_object.service_group_2 = mapping_dict.get('service_group_2', None)
          else:
            wccp_object.service_group_2._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('lan_access_list', None)) != ''):
            wccp_object.lan_access_list = mapping_dict.get('lan_access_list', None)
          else:
            wccp_object.lan_access_list._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('wan_access_list', None)) != ''):
            wccp_object.wan_access_list = mapping_dict.get('wan_access_list', None)
          else:
            wccp_object.wan_access_list._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('assignment_method', None)) != ''):
            wccp_object.assignment_method = mapping_dict.get('assignment_method', None)
          else:
            wccp_object.assignment_method._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('egress_method', None)) != ''):
            wccp_object.egress_method = mapping_dict.get('egress_method', None)
          else:
            wccp_object.egress_method._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cache_farm_members', None)) != ''):
            wccp_object.cache_farm_members = mapping_dict.get('cache_farm_members', None)
          else:
            wccp_object.cache_farm_members._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
            wccp_object.source_ip = mapping_dict.get('source_ip', None)
          else:
            wccp_object.source_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_mask', None)) != ''):
            wccp_object.source_mask = mapping_dict.get('source_mask', None)
          else:
            wccp_object.source_mask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dest_ip', None)) != ''):
            wccp_object.dest_ip = mapping_dict.get('dest_ip', None)
          else:
            wccp_object.dest_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dest_mask', None)) != ''):
            wccp_object.dest_mask = mapping_dict.get('dest_mask', None)
          else:
            wccp_object.dest_mask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('router_1', None)) != ''):
            wccp_object.router_1 = mapping_dict.get('router_1', None)
          else:
            wccp_object.router_1._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('router_2', None)) != ''):
            wccp_object.router_2 = mapping_dict.get('router_2', None)
          else:
            wccp_object.router_2._empty_tag = True
        except TypeError:
          pass
        wccp_object_list.append(wccp_object)

        return wccp_object_list

      class redirect_conditions(object):
        #XPATH devices/device/wanop/interception/wccp/redirect-conditions/redirect-condition
        class redirect_condition(AbstractDeviceMgr):
          key_hints = [[]]
          def getRcpathPayload(self, sdata, dev, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/redirect-conditions"
            rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            redirect_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

            for redirect_condition_object in redirect_condition_object_list:
              #fetch payload
              redirect_condition_payload = redirect_condition_object.getxml(filter=True)
              util.log_debug('redirect_condition_payload %s'%redirect_condition_payload)
              payload_list.append(redirect_condition_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #convert parent keys to list
            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/redirect-conditions"
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            redirect_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

            for redirect_condition_object in redirect_condition_object_list:
              #fetch payload
              redirect_condition_payload = redirect_condition_object.getxml(filter=True)

              util.log_debug('redirect_condition_payload %s'%redirect_condition_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=redirect_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return

            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/redirect-conditions"
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            redirect_condition_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            index = mapping_dict.get('index')
            if not isinstance(index, list):
              index = [index]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for index_iterator in index:
              rcpath_tmp =  rcpath+"/redirect-condition=%s"%(util.make_interfacename(index_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, redirect_condition_object in enumerate(redirect_condition_object_list):
              #fetch payload
              redirect_condition_payload = redirect_condition_object.getxml(filter=True)

              util.log_debug('update redirect_condition_payload %s'%redirect_condition_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=redirect_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return

            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/redirect-conditions"
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('index')):
              raise Exception("'index' cannot be empty")

            #convert keys to list
            index = mapping_dict.get('index')
            if not isinstance(index, list):
              index = [index]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for index_iterator in index:
              rcpath_tmp =  rcpath+"/redirect-condition=%s"%(util.make_interfacename(index_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('index')):
              raise Exception("'index' cannot be empty")

            #convert keys to list
            index = mapping_dict.get('index')
            if not isinstance(index, list):
              index = [index]

            #prepare payload
            redirect_condition_object_list = []
            for index_iterator in index:
              from servicemodel.controller.devices.device.wanop.interception.wccp import redirect_conditions
              redirect_condition_object = redirect_conditions.redirect_condition.redirect_condition()
              redirect_condition_object.index = index_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('match_action', None)) != ''):
                  redirect_condition_object.match_action = mapping_dict.get('match_action', None)
                else:
                  redirect_condition_object.match_action._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('source_wild_card', None)) != ''):
                  redirect_condition_object.source_wild_card = mapping_dict.get('source_wild_card', None)
                else:
                  redirect_condition_object.source_wild_card._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dest_wild_card', None)) != ''):
                  redirect_condition_object.dest_wild_card = mapping_dict.get('dest_wild_card', None)
                else:
                  redirect_condition_object.dest_wild_card._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('source_cidr', None)) != ''):
                  redirect_condition_object.source_cidr = mapping_dict.get('source_cidr', None)
                else:
                  redirect_condition_object.source_cidr._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dest_cidr', None)) != ''):
                  redirect_condition_object.dest_cidr = mapping_dict.get('dest_cidr', None)
                else:
                  redirect_condition_object.dest_cidr._empty_tag = True
              except TypeError:
                pass
              redirect_condition_object_list.append(redirect_condition_object)

            return redirect_condition_object_list

      #XPATH devices/device/wanop/interception/wccp/router-config
      class router_config(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:wanop/interception/wccp"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          router_config_object_list = self.validate_inputs_form_payload(mapping_dict)

          for router_config_object in router_config_object_list:
            #fetch payload
            router_config_payload = router_config_object.getxml(filter=True)
            util.log_debug('router_config_payload %s'%router_config_payload)
            payload_list.append(router_config_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:wanop/interception/wccp"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          router_config_object_list = self.validate_inputs_form_payload(mapping_dict)

          for router_config_object in router_config_object_list:
            #fetch payload
            router_config_payload = router_config_object.getxml(filter=True)

            util.log_debug('router_config_payload %s'%router_config_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=router_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:wanop/interception/wccp"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          router_config_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/router-config"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, router_config_object in enumerate(router_config_object_list):
            #fetch payload
            router_config_payload = router_config_object.getxml(filter=True)

            util.log_debug('update router_config_payload %s'%router_config_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=router_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:wanop/interception/wccp"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/router-config"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          router_config_object_list = []
          from servicemodel.controller.devices.device.wanop.interception import wccp
          router_config_object = wccp.router_config.router_config()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('redirect_method', None)) != ''):
              router_config_object.redirect_method = mapping_dict.get('redirect_method', None)
            else:
              router_config_object.redirect_method._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('wan_interface_name', None)) != ''):
              router_config_object.wan_interface_name = mapping_dict.get('wan_interface_name', None)
            else:
              router_config_object.wan_interface_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('direction', None)) != ''):
              router_config_object.direction = mapping_dict.get('direction', None)
            else:
              router_config_object.direction._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
              router_config_object.vlan = mapping_dict.get('vlan', None)
            else:
              router_config_object.vlan._empty_tag = True
          except TypeError:
            pass
          router_config_object_list.append(router_config_object)

          return router_config_object_list

        #XPATH devices/device/wanop/interception/wccp/router-config/lan-interface
        class lan_interface(AbstractDeviceMgr):
          key_hints = [[]]
          def getRcpathPayload(self, sdata, dev, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/router-config"
            rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            lan_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for lan_interface_object in lan_interface_object_list:
              #fetch payload
              lan_interface_payload = lan_interface_object.getxml(filter=True)
              util.log_debug('lan_interface_payload %s'%lan_interface_payload)
              payload_list.append(lan_interface_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #convert parent keys to list
            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/router-config"
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            lan_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for lan_interface_object in lan_interface_object_list:
              #fetch payload
              lan_interface_payload = lan_interface_object.getxml(filter=True)

              util.log_debug('lan_interface_payload %s'%lan_interface_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=lan_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return

            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/router-config"
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            lan_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/lan-interface"
            rcpath_list.append(rcpath_tmp)
            for rc_counter, lan_interface_object in enumerate(lan_interface_object_list):
              #fetch payload
              lan_interface_payload = lan_interface_object.getxml(filter=True)

              util.log_debug('update lan_interface_payload %s'%lan_interface_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=lan_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return

            ##prepare rcpath
            rcpath = "wanoptimizer:wanop/interception/wccp/router-config"
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/lan-interface"
            rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs

            #convert keys to list

            #prepare payload
            lan_interface_object_list = []
            from servicemodel.controller.devices.device.wanop.interception.wccp import router_config
            lan_interface_object = router_config.lan_interface.lan_interface()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('lan_interface_ip_address', None)) != ''):
                lan_interface_object.lan_interface_ip_address = mapping_dict.get('lan_interface_ip_address', None)
              else:
                lan_interface_object.lan_interface_ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('lan_interface_netmask', None)) != ''):
                lan_interface_object.lan_interface_netmask = mapping_dict.get('lan_interface_netmask', None)
              else:
                lan_interface_object.lan_interface_netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('lan_interface_default_gateway', None)) != ''):
                lan_interface_object.lan_interface_default_gateway = mapping_dict.get('lan_interface_default_gateway', None)
              else:
                lan_interface_object.lan_interface_default_gateway._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('wanoptimizer_device_type', None)) != ''):
                lan_interface_object.wanoptimizer_device_type = mapping_dict.get('wanoptimizer_device_type', None)
              else:
                lan_interface_object.wanoptimizer_device_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
                lan_interface_object.vlan = mapping_dict.get('vlan', None)
              else:
                lan_interface_object.vlan._empty_tag = True
            except TypeError:
              pass
            lan_interface_object_list.append(lan_interface_object)

            return lan_interface_object_list

    #XPATH devices/device/wanop/interception/inpath
    class inpath(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        inpath_object_list = self.validate_inputs_form_payload(mapping_dict)

        for inpath_object in inpath_object_list:
          #fetch payload
          inpath_payload = inpath_object.getxml(filter=True)
          util.log_debug('inpath_payload %s'%inpath_payload)
          payload_list.append(inpath_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        inpath_object_list = self.validate_inputs_form_payload(mapping_dict)

        for inpath_object in inpath_object_list:
          #fetch payload
          inpath_payload = inpath_object.getxml(filter=True)

          util.log_debug('inpath_payload %s'%inpath_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=inpath_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        inpath_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/inpath"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, inpath_object in enumerate(inpath_object_list):
          #fetch payload
          inpath_payload = inpath_object.getxml(filter=True)

          util.log_debug('update inpath_payload %s'%inpath_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=inpath_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/inpath"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        inpath_object_list = []
        from servicemodel.controller.devices.device.wanop import interception
        inpath_object = interception.inpath.inpath()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
            inpath_object.vlan = mapping_dict.get('vlan', None)
          else:
            inpath_object.vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
            inpath_object.ip_address = mapping_dict.get('ip_address', None)
          else:
            inpath_object.ip_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            inpath_object.netmask = mapping_dict.get('netmask', None)
          else:
            inpath_object.netmask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('gateway', None)) != ''):
            inpath_object.gateway = mapping_dict.get('gateway', None)
          else:
            inpath_object.gateway._empty_tag = True
        except TypeError:
          pass
        inpath_object_list.append(inpath_object)

        return inpath_object_list

    #XPATH devices/device/wanop/interception/agent-interception
    class agent_interception(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        agent_interception_object_list = self.validate_inputs_form_payload(mapping_dict)

        for agent_interception_object in agent_interception_object_list:
          #fetch payload
          agent_interception_payload = agent_interception_object.getxml(filter=True)
          util.log_debug('agent_interception_payload %s'%agent_interception_payload)
          payload_list.append(agent_interception_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        agent_interception_object_list = self.validate_inputs_form_payload(mapping_dict)

        for agent_interception_object in agent_interception_object_list:
          #fetch payload
          agent_interception_payload = agent_interception_object.getxml(filter=True)

          util.log_debug('agent_interception_payload %s'%agent_interception_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=agent_interception_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        agent_interception_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/agent-interception"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, agent_interception_object in enumerate(agent_interception_object_list):
          #fetch payload
          agent_interception_payload = agent_interception_object.getxml(filter=True)

          util.log_debug('update agent_interception_payload %s'%agent_interception_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=agent_interception_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:wanop/interception"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/agent-interception"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        agent_interception_object_list = []
        from servicemodel.controller.devices.device.wanop import interception
        agent_interception_object = interception.agent_interception.agent_interception()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('state', None)) != ''):
            agent_interception_object.state = mapping_dict.get('state', None)
          else:
            agent_interception_object.state._empty_tag = True
        except TypeError:
          pass
        agent_interception_object_list.append(agent_interception_object)

        return agent_interception_object_list

