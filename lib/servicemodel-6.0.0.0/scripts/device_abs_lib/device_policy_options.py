#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class policy_options(object):
  class prefix_lists(object):
    #XPATH devices/device/policy-options/prefix-lists/prefix-list
    class prefix_list(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:policy-options/prefix-lists"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        prefix_list_object_list = self.validate_inputs_form_payload(mapping_dict)

        for prefix_list_object in prefix_list_object_list:
          #fetch payload
          prefix_list_payload = prefix_list_object.getxml(filter=True)
          util.log_debug('prefix_list_payload %s'%prefix_list_payload)
          payload_list.append(prefix_list_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:policy-options/prefix-lists"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        prefix_list_object_list = self.validate_inputs_form_payload(mapping_dict)

        for prefix_list_object in prefix_list_object_list:
          #fetch payload
          prefix_list_payload = prefix_list_object.getxml(filter=True)

          util.log_debug('prefix_list_payload %s'%prefix_list_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=prefix_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/prefix-lists"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        prefix_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/prefix-list=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, prefix_list_object in enumerate(prefix_list_object_list):
          #fetch payload
          prefix_list_payload = prefix_list_object.getxml(filter=True)

          util.log_debug('update prefix_list_payload %s'%prefix_list_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=prefix_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/prefix-lists"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/prefix-list=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        prefix_list_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.policy_options import prefix_lists
          prefix_list_object = prefix_lists.prefix_list.prefix_list()
          prefix_list_object.name = name_iterator
          prefix_list_object_list.append(prefix_list_object)

        return prefix_list_object_list

      #XPATH devices/device/policy-options/prefix-lists/prefix-list/prefix
      class prefix(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, prefix_list_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_object_list = self.validate_inputs_form_payload(mapping_dict)

          for prefix_object in prefix_object_list:
            #fetch payload
            prefix_payload = prefix_object.getxml(filter=True)
            util.log_debug('prefix_payload %s'%prefix_payload)
            payload_list.append(prefix_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, prefix_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)

          #convert parent keys to list
          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_object_list = self.validate_inputs_form_payload(mapping_dict)

          for prefix_object in prefix_object_list:
            #fetch payload
            prefix_payload = prefix_object.getxml(filter=True)

            util.log_debug('prefix_payload %s'%prefix_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=prefix_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, prefix_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)


          ##prepare rcpath
          rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/prefix=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, prefix_object in enumerate(prefix_object_list):
            #fetch payload
            prefix_payload = prefix_object.getxml(filter=True)

            util.log_debug('update prefix_payload %s'%prefix_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=prefix_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, prefix_list_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)


          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/prefix=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, prefix_list_name):
          #Parent Key Validations
          if util.isEmpty(prefix_list_name):
            raise Exception("'prefix_list_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          prefix_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.policy_options.prefix_lists import prefix_list
            prefix_object = prefix_list.prefix.prefix()
            prefix_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                prefix_object.netmask = mapping_dict.get('netmask', None)
              else:
                prefix_object.netmask._empty_tag = True
            except TypeError:
              pass
            prefix_object_list.append(prefix_object)

          return prefix_object_list

      #XPATH devices/device/policy-options/prefix-lists/prefix-list/prefix-v6
      class prefix_v6(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, prefix_list_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_v6_object_list = self.validate_inputs_form_payload(mapping_dict)

          for prefix_v6_object in prefix_v6_object_list:
            #fetch payload
            prefix_v6_payload = prefix_v6_object.getxml(filter=True)
            util.log_debug('prefix_v6_payload %s'%prefix_v6_payload)
            payload_list.append(prefix_v6_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, prefix_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)

          #convert parent keys to list
          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_v6_object_list = self.validate_inputs_form_payload(mapping_dict)

          for prefix_v6_object in prefix_v6_object_list:
            #fetch payload
            prefix_v6_payload = prefix_v6_object.getxml(filter=True)

            util.log_debug('prefix_v6_payload %s'%prefix_v6_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=prefix_v6_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, prefix_list_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)


          ##prepare rcpath
          rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          prefix_v6_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/prefix-v6=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, prefix_v6_object in enumerate(prefix_v6_object_list):
            #fetch payload
            prefix_v6_payload = prefix_v6_object.getxml(filter=True)

            util.log_debug('update prefix_v6_payload %s'%prefix_v6_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=prefix_v6_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, prefix_list_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_list_name)


          if not isinstance(prefix_list_name, list):
            prefix_list_name_list = [prefix_list_name]
          else:
            prefix_list_name_list = prefix_list_name

          for prefix_list_name in prefix_list_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/prefix-lists/prefix-list=%s"%(util.make_interfacename(prefix_list_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/prefix-v6=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, prefix_list_name):
          #Parent Key Validations
          if util.isEmpty(prefix_list_name):
            raise Exception("'prefix_list_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          prefix_v6_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.policy_options.prefix_lists import prefix_list
            prefix_v6_object = prefix_list.prefix_v6.prefix_v6()
            prefix_v6_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prefix_length', None)) != ''):
                prefix_v6_object.prefix_length = mapping_dict.get('prefix_length', None)
              else:
                prefix_v6_object.prefix_length._empty_tag = True
            except TypeError:
              pass
            prefix_v6_object_list.append(prefix_v6_object)

          return prefix_v6_object_list

  class policy_statements(object):
    #XPATH devices/device/policy-options/policy-statements/policy-statement
    class policy_statement(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:policy-options/policy-statements"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        policy_statement_object_list = self.validate_inputs_form_payload(mapping_dict)

        for policy_statement_object in policy_statement_object_list:
          #fetch payload
          policy_statement_payload = policy_statement_object.getxml(filter=True)
          util.log_debug('policy_statement_payload %s'%policy_statement_payload)
          payload_list.append(policy_statement_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:policy-options/policy-statements"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        policy_statement_object_list = self.validate_inputs_form_payload(mapping_dict)

        for policy_statement_object in policy_statement_object_list:
          #fetch payload
          policy_statement_payload = policy_statement_object.getxml(filter=True)

          util.log_debug('policy_statement_payload %s'%policy_statement_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=policy_statement_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/policy-statements"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        policy_statement_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/policy-statement=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, policy_statement_object in enumerate(policy_statement_object_list):
          #fetch payload
          policy_statement_payload = policy_statement_object.getxml(filter=True)

          util.log_debug('update policy_statement_payload %s'%policy_statement_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=policy_statement_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/policy-statements"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/policy-statement=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        policy_statement_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.policy_options import policy_statements
          policy_statement_object = policy_statements.policy_statement.policy_statement()
          policy_statement_object.name = name_iterator
          policy_statement_object_list.append(policy_statement_object)

        return policy_statement_object_list

      #XPATH devices/device/policy-options/policy-statements/policy-statement/term
      class term(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, policy_statement_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          term_object_list = self.validate_inputs_form_payload(mapping_dict)

          for term_object in term_object_list:
            #fetch payload
            term_payload = term_object.getxml(filter=True)
            util.log_debug('term_payload %s'%term_payload)
            payload_list.append(term_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, policy_statement_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)

          #convert parent keys to list
          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          term_object_list = self.validate_inputs_form_payload(mapping_dict)

          for term_object in term_object_list:
            #fetch payload
            term_payload = term_object.getxml(filter=True)

            util.log_debug('term_payload %s'%term_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=term_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, policy_statement_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)


          ##prepare rcpath
          rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          term_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/term=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, term_object in enumerate(term_object_list):
            #fetch payload
            term_payload = term_object.getxml(filter=True)

            util.log_debug('update term_payload %s'%term_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=term_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, policy_statement_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)


          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/term=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, policy_statement_name):
          #Parent Key Validations
          if util.isEmpty(policy_statement_name):
            raise Exception("'policy_statement_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          term_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.policy_options.policy_statements import policy_statement
            term_object = policy_statement.term.term()
            term_object.name = name_iterator
            term_object_list.append(term_object)

          return term_object_list

        #XPATH devices/device/policy-options/policy-statements/policy-statement/term/from
        class from_(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, policy_statement_name, term_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from__object_list = self.validate_inputs_form_payload(mapping_dict)

            for from__object in from__object_list:
              #fetch payload
              from__payload = from__object.getxml(filter=True)
              util.log_debug('from__payload %s'%from__payload)
              payload_list.append(from__payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, policy_statement_name, term_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)

            #convert parent keys to list
            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from__object_list = self.validate_inputs_form_payload(mapping_dict)

            for from__object in from__object_list:
              #fetch payload
              from__payload = from__object.getxml(filter=True)

              util.log_debug('from__payload %s'%from__payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=from__payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, policy_statement_name, term_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)


            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            from__object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/from"
            rcpath_list.append(rcpath_tmp)
            for rc_counter, from__object in enumerate(from__object_list):
              #fetch payload
              from__payload = from__object.getxml(filter=True)

              util.log_debug('update from__payload %s'%from__payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=from__payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, policy_statement_name, term_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)


            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/from"
            rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, policy_statement_name, term_name):
            #Parent Key Validations
            if util.isEmpty(policy_statement_name):
              raise Exception("'policy_statement_name' cannot be empty")
            if util.isEmpty(term_name):
              raise Exception("'term_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs

            #convert keys to list

            #prepare payload
            from__object_list = []
            from servicemodel.controller.devices.device.policy_options.policy_statements.policy_statement import term
            from__object = term.from_.from_()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('protocol', None)) != ''):
                from__object.protocol = mapping_dict.get('protocol', None)
              else:
                from__object.protocol._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('community', None)) != ''):
                from__object.community = mapping_dict.get('community', None)
              else:
                from__object.community._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prefix_list_filter', None)) != ''):
                from__object.prefix_list_filter = mapping_dict.get('prefix_list_filter', None)
              else:
                from__object.prefix_list_filter._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prefix_match_condition', None)) != ''):
                from__object.prefix_match_condition = mapping_dict.get('prefix_match_condition', None)
              else:
                from__object.prefix_match_condition._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                from__object.family = mapping_dict.get('family', None)
              else:
                from__object.family._empty_tag = True
            except TypeError:
              pass
            from__object_list.append(from__object)

            return from__object_list

        #XPATH devices/device/policy-options/policy-statements/policy-statement/term/then
        class then(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, policy_statement_name, term_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            then_object_list = self.validate_inputs_form_payload(mapping_dict)

            for then_object in then_object_list:
              #fetch payload
              then_payload = then_object.getxml(filter=True)
              util.log_debug('then_payload %s'%then_payload)
              payload_list.append(then_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, policy_statement_name, term_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)

            #convert parent keys to list
            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            then_object_list = self.validate_inputs_form_payload(mapping_dict)

            for then_object in then_object_list:
              #fetch payload
              then_payload = then_object.getxml(filter=True)

              util.log_debug('then_payload %s'%then_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=then_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, policy_statement_name, term_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)


            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            then_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/then"
            rcpath_list.append(rcpath_tmp)
            for rc_counter, then_object in enumerate(then_object_list):
              #fetch payload
              then_payload = then_object.getxml(filter=True)

              util.log_debug('update then_payload %s'%then_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=then_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, policy_statement_name, term_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( policy_statement_name, term_name)


            if not isinstance(policy_statement_name, list):
              policy_statement_name_list = [policy_statement_name]
            else:
              policy_statement_name_list = policy_statement_name
            if not isinstance(term_name, list):
              term_name_list = [term_name]
            else:
              term_name_list = term_name

            for policy_statement_name in policy_statement_name_list:
              for term_name in term_name_list:
                ##prepare rcpath
                rcpath = "l3features:policy-options/policy-statements/policy-statement=%s/term=%s"%(util.make_interfacename(policy_statement_name),util.make_interfacename(term_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs

            #convert keys to list

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            rcpath_tmp =  rcpath+"/then"
            rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, policy_statement_name, term_name):
            #Parent Key Validations
            if util.isEmpty(policy_statement_name):
              raise Exception("'policy_statement_name' cannot be empty")
            if util.isEmpty(term_name):
              raise Exception("'term_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs

            #convert keys to list

            #prepare payload
            then_object_list = []
            from servicemodel.controller.devices.device.policy_options.policy_statements.policy_statement import term
            then_object = term.then.then()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
                then_object.action = mapping_dict.get('action', None)
              else:
                then_object.action._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('next_term', None)) != ''):
                then_object.next_term = mapping_dict.get('next_term', None)
              else:
                then_object.next_term._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('next_policy', None)) != ''):
                then_object.next_policy = mapping_dict.get('next_policy', None)
              else:
                then_object.next_policy._empty_tag = True
            except TypeError:
              pass
            then_object_list.append(then_object)

            return then_object_list

      #XPATH devices/device/policy-options/policy-statements/policy-statement/then
      class then(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, policy_statement_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          then_object_list = self.validate_inputs_form_payload(mapping_dict)

          for then_object in then_object_list:
            #fetch payload
            then_payload = then_object.getxml(filter=True)
            util.log_debug('then_payload %s'%then_payload)
            payload_list.append(then_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, policy_statement_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)

          #convert parent keys to list
          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          then_object_list = self.validate_inputs_form_payload(mapping_dict)

          for then_object in then_object_list:
            #fetch payload
            then_payload = then_object.getxml(filter=True)

            util.log_debug('then_payload %s'%then_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=then_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, policy_statement_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)


          ##prepare rcpath
          rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          then_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/then"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, then_object in enumerate(then_object_list):
            #fetch payload
            then_payload = then_object.getxml(filter=True)

            util.log_debug('update then_payload %s'%then_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=then_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, policy_statement_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( policy_statement_name)


          if not isinstance(policy_statement_name, list):
            policy_statement_name_list = [policy_statement_name]
          else:
            policy_statement_name_list = policy_statement_name

          for policy_statement_name in policy_statement_name_list:
            ##prepare rcpath
            rcpath = "l3features:policy-options/policy-statements/policy-statement=%s"%(util.make_interfacename(policy_statement_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/then"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, policy_statement_name):
          #Parent Key Validations
          if util.isEmpty(policy_statement_name):
            raise Exception("'policy_statement_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          then_object_list = []
          from servicemodel.controller.devices.device.policy_options.policy_statements import policy_statement
          then_object = policy_statement.then.then()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('community_name', None)) != ''):
              then_object.community_name = mapping_dict.get('community_name', None)
            else:
              then_object.community_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
              then_object.action = mapping_dict.get('action', None)
            else:
              then_object.action._empty_tag = True
          except TypeError:
            pass
          then_object_list.append(then_object)

          return then_object_list

  class communities(object):
    #XPATH devices/device/policy-options/communities/community
    class community(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:policy-options/communities"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        community_object_list = self.validate_inputs_form_payload(mapping_dict)

        for community_object in community_object_list:
          #fetch payload
          community_payload = community_object.getxml(filter=True)
          util.log_debug('community_payload %s'%community_payload)
          payload_list.append(community_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:policy-options/communities"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        community_object_list = self.validate_inputs_form_payload(mapping_dict)

        for community_object in community_object_list:
          #fetch payload
          community_payload = community_object.getxml(filter=True)

          util.log_debug('community_payload %s'%community_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=community_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/communities"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        community_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/community=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, community_object in enumerate(community_object_list):
          #fetch payload
          community_payload = community_object.getxml(filter=True)

          util.log_debug('update community_payload %s'%community_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=community_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:policy-options/communities"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/community=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        community_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.policy_options import communities
          community_object = communities.community.community()
          community_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('members_value', None)) != ''):
              community_object.members_value = mapping_dict.get('members_value', None)
            else:
              community_object.members_value._empty_tag = True
          except TypeError:
            pass
          community_object_list.append(community_object)

        return community_object_list

