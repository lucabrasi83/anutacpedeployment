#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class addressbooks(object):
  #XPATH devices/device/addressbooks/address-book
  class address_book(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:addressbooks"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_book_object_list = self.validate_inputs_form_payload(mapping_dict)

      for address_book_object in address_book_object_list:
        #fetch payload
        address_book_payload = address_book_object.getxml(filter=True)
        util.log_debug('address_book_payload %s'%address_book_payload)
        payload_list.append(address_book_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:addressbooks"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_book_object_list = self.validate_inputs_form_payload(mapping_dict)

      for address_book_object in address_book_object_list:
        #fetch payload
        address_book_payload = address_book_object.getxml(filter=True)

        util.log_debug('address_book_payload %s'%address_book_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_book_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:addressbooks"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_book_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/address-book=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, address_book_object in enumerate(address_book_object_list):
        #fetch payload
        address_book_payload = address_book_object.getxml(filter=True)

        util.log_debug('update address_book_payload %s'%address_book_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_book_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:addressbooks"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/address-book=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      address_book_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import addressbooks
        address_book_object = addressbooks.address_book.address_book()
        address_book_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('zone_name', None)) != ''):
            address_book_object.zone_name = mapping_dict.get('zone_name', None)
          else:
            address_book_object.zone_name._empty_tag = True
        except TypeError:
          pass
        address_book_object_list.append(address_book_object)

      return address_book_object_list

    class addresses(object):
      #XPATH devices/device/addressbooks/address-book/addresses/ab-address
      class ab_address(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, address_book_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/addresses"%(util.make_interfacename(address_book_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ab_address_object in ab_address_object_list:
            #fetch payload
            ab_address_payload = ab_address_object.getxml(filter=True)
            util.log_debug('ab_address_payload %s'%ab_address_payload)
            payload_list.append(ab_address_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, address_book_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)

          #convert parent keys to list
          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/addresses"%(util.make_interfacename(address_book_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ab_address_object in ab_address_object_list:
            #fetch payload
            ab_address_payload = ab_address_object.getxml(filter=True)

            util.log_debug('ab_address_payload %s'%ab_address_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ab_address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, address_book_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)


          ##prepare rcpath
          rcpath = "firewall:addressbooks/address-book=%s/addresses"%(util.make_interfacename(address_book_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/ab-address=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ab_address_object in enumerate(ab_address_object_list):
            #fetch payload
            ab_address_payload = ab_address_object.getxml(filter=True)

            util.log_debug('update ab_address_payload %s'%ab_address_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ab_address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, address_book_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)


          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/addresses"%(util.make_interfacename(address_book_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/ab-address=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, address_book_name):
          #Parent Key Validations
          if util.isEmpty(address_book_name):
            raise Exception("'address_book_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          ab_address_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.addressbooks.address_book import addresses
            ab_address_object = addresses.ab_address.ab_address()
            ab_address_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                ab_address_object.description = mapping_dict.get('description', None)
              else:
                ab_address_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('address_type', None)) != ''):
                ab_address_object.address_type = mapping_dict.get('address_type', None)
              else:
                ab_address_object.address_type._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
                ab_address_object.ip_address = mapping_dict.get('ip_address', None)
              else:
                ab_address_object.ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                ab_address_object.netmask = mapping_dict.get('netmask', None)
              else:
                ab_address_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('dns_name', None)) != ''):
                ab_address_object.dns_name = mapping_dict.get('dns_name', None)
              else:
                ab_address_object.dns_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('start_ip', None)) != ''):
                ab_address_object.start_ip = mapping_dict.get('start_ip', None)
              else:
                ab_address_object.start_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('end_ip', None)) != ''):
                ab_address_object.end_ip = mapping_dict.get('end_ip', None)
              else:
                ab_address_object.end_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
                ab_address_object.interface_name = mapping_dict.get('interface_name', None)
              else:
                ab_address_object.interface_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
                ab_address_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
              else:
                ab_address_object.virtual_device_name._empty_tag = True
            except TypeError:
              pass
            ab_address_object_list.append(ab_address_object)

          return ab_address_object_list

    class address_sets(object):
      #XPATH devices/device/addressbooks/address-book/address-sets/ab-address-set
      class ab_address_set(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, address_book_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/address-sets"%(util.make_interfacename(address_book_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ab_address_set_object in ab_address_set_object_list:
            #fetch payload
            ab_address_set_payload = ab_address_set_object.getxml(filter=True)
            util.log_debug('ab_address_set_payload %s'%ab_address_set_payload)
            payload_list.append(ab_address_set_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, address_book_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)

          #convert parent keys to list
          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/address-sets"%(util.make_interfacename(address_book_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ab_address_set_object in ab_address_set_object_list:
            #fetch payload
            ab_address_set_payload = ab_address_set_object.getxml(filter=True)

            util.log_debug('ab_address_set_payload %s'%ab_address_set_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ab_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, address_book_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)


          ##prepare rcpath
          rcpath = "firewall:addressbooks/address-book=%s/address-sets"%(util.make_interfacename(address_book_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ab_address_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/ab-address-set=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ab_address_set_object in enumerate(ab_address_set_object_list):
            #fetch payload
            ab_address_set_payload = ab_address_set_object.getxml(filter=True)

            util.log_debug('update ab_address_set_payload %s'%ab_address_set_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ab_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, address_book_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( address_book_name)


          if not isinstance(address_book_name, list):
            address_book_name_list = [address_book_name]
          else:
            address_book_name_list = address_book_name

          for address_book_name in address_book_name_list:
            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/address-sets"%(util.make_interfacename(address_book_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/ab-address-set=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, address_book_name):
          #Parent Key Validations
          if util.isEmpty(address_book_name):
            raise Exception("'address_book_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          ab_address_set_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.addressbooks.address_book import address_sets
            ab_address_set_object = address_sets.ab_address_set.ab_address_set()
            ab_address_set_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                ab_address_set_object.description = mapping_dict.get('description', None)
              else:
                ab_address_set_object.description._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
                ab_address_set_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
              else:
                ab_address_set_object.virtual_device_name._empty_tag = True
            except TypeError:
              pass
            ab_address_set_object_list.append(ab_address_set_object)

          return ab_address_set_object_list

        #XPATH devices/device/addressbooks/address-book/address-sets/ab-address-set/address
        class address(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)

            #convert parent keys to list
            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)


            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_name_iterator in address_name:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)


            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address_name')):
              raise Exception("'address_name' cannot be empty")

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_name_iterator in address_name:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, address_book_name, ab_address_set_name):
            #Parent Key Validations
            if util.isEmpty(address_book_name):
              raise Exception("'address_book_name' cannot be empty")
            if util.isEmpty(ab_address_set_name):
              raise Exception("'ab_address_set_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address_name')):
              raise Exception("'address_name' cannot be empty")

            #convert keys to list
            address_name = mapping_dict.get('address_name')
            if not isinstance(address_name, list):
              address_name = [address_name]

            #prepare payload
            address_object_list = []
            for address_name_iterator in address_name:
              from servicemodel.controller.devices.device.addressbooks.address_book.address_sets import ab_address_set
              address_object = ab_address_set.address.address()
              address_object.address_name = address_name_iterator
              address_object_list.append(address_object)

            return address_object_list

        #XPATH devices/device/addressbooks/address-book/address-sets/ab-address-set/sub-address-set
        class sub_address_set(AbstractDeviceMgr):
          key_hints = [['name'],['name']]
          def getRcpathPayload(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_address_set_object in sub_address_set_object_list:
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)
              util.log_debug('sub_address_set_payload %s'%sub_address_set_payload)
              payload_list.append(sub_address_set_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)

            #convert parent keys to list
            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict)

            for sub_address_set_object in sub_address_set_object_list:
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)

              util.log_debug('sub_address_set_payload %s'%sub_address_set_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sub_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)


            ##prepare rcpath
            rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            sub_address_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_set_name_iterator in address_set_name:
              rcpath_tmp =  rcpath+"/sub-address-set=%s"%(util.make_interfacename(address_set_name_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, sub_address_set_object in enumerate(sub_address_set_object_list):
              #fetch payload
              sub_address_set_payload = sub_address_set_object.getxml(filter=True)

              util.log_debug('update sub_address_set_payload %s'%sub_address_set_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sub_address_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, address_book_name, ab_address_set_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( address_book_name, ab_address_set_name)


            if not isinstance(address_book_name, list):
              address_book_name_list = [address_book_name]
            else:
              address_book_name_list = address_book_name
            if not isinstance(ab_address_set_name, list):
              ab_address_set_name_list = [ab_address_set_name]
            else:
              ab_address_set_name_list = ab_address_set_name

            for address_book_name in address_book_name_list:
              for ab_address_set_name in ab_address_set_name_list:
                ##prepare rcpath
                rcpath = "firewall:addressbooks/address-book=%s/address-sets/ab-address-set=%s"%(util.make_interfacename(address_book_name),util.make_interfacename(ab_address_set_name))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address_set_name')):
              raise Exception("'address_set_name' cannot be empty")

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_set_name_iterator in address_set_name:
              rcpath_tmp =  rcpath+"/sub-address-set=%s"%(util.make_interfacename(address_set_name_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, address_book_name, ab_address_set_name):
            #Parent Key Validations
            if util.isEmpty(address_book_name):
              raise Exception("'address_book_name' cannot be empty")
            if util.isEmpty(ab_address_set_name):
              raise Exception("'ab_address_set_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address_set_name')):
              raise Exception("'address_set_name' cannot be empty")

            #convert keys to list
            address_set_name = mapping_dict.get('address_set_name')
            if not isinstance(address_set_name, list):
              address_set_name = [address_set_name]

            #prepare payload
            sub_address_set_object_list = []
            for address_set_name_iterator in address_set_name:
              from servicemodel.controller.devices.device.addressbooks.address_book.address_sets import ab_address_set
              sub_address_set_object = ab_address_set.sub_address_set.sub_address_set()
              sub_address_set_object.address_set_name = address_set_name_iterator
              sub_address_set_object_list.append(sub_address_set_object)

            return sub_address_set_object_list

