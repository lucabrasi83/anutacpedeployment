#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class optimization_services(object):
  class ssl_certificates(object):
    #XPATH devices/device/optimization-services/ssl-certificates/ssl-certificate
    class ssl_certificate(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/ssl-certificates"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssl_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ssl_certificate_object in ssl_certificate_object_list:
          #fetch payload
          ssl_certificate_payload = ssl_certificate_object.getxml(filter=True)
          util.log_debug('ssl_certificate_payload %s'%ssl_certificate_payload)
          payload_list.append(ssl_certificate_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/ssl-certificates"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssl_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ssl_certificate_object in ssl_certificate_object_list:
          #fetch payload
          ssl_certificate_payload = ssl_certificate_object.getxml(filter=True)

          util.log_debug('ssl_certificate_payload %s'%ssl_certificate_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ssl_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/ssl-certificates"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ssl_certificate_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        ssl = mapping_dict.get('ssl')
        if not isinstance(ssl, list):
          ssl = [ssl]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ssl_iterator in ssl:
          rcpath_tmp =  rcpath+"/ssl-certificate=%s"%(util.make_interfacename(ssl_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, ssl_certificate_object in enumerate(ssl_certificate_object_list):
          #fetch payload
          ssl_certificate_payload = ssl_certificate_object.getxml(filter=True)

          util.log_debug('update ssl_certificate_payload %s'%ssl_certificate_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ssl_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/ssl-certificates"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('ssl')):
          raise Exception("'ssl' cannot be empty")

        #convert keys to list
        ssl = mapping_dict.get('ssl')
        if not isinstance(ssl, list):
          ssl = [ssl]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ssl_iterator in ssl:
          rcpath_tmp =  rcpath+"/ssl-certificate=%s"%(util.make_interfacename(ssl_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('ssl')):
          raise Exception("'ssl' cannot be empty")

        #convert keys to list
        ssl = mapping_dict.get('ssl')
        if not isinstance(ssl, list):
          ssl = [ssl]

        #prepare payload
        ssl_certificate_object_list = []
        for ssl_iterator in ssl:
          from servicemodel.controller.devices.device.optimization_services import ssl_certificates
          ssl_certificate_object = ssl_certificates.ssl_certificate.ssl_certificate()
          ssl_certificate_object.ssl = ssl_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('enable_ssl', None)) != ''):
              ssl_certificate_object.enable_ssl = mapping_dict.get('enable_ssl', None)
            else:
              ssl_certificate_object.enable_ssl._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('protocol_vers', None)) != ''):
              ssl_certificate_object.protocol_vers = mapping_dict.get('protocol_vers', None)
            else:
              ssl_certificate_object.protocol_vers._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('sfe_mode', None)) != ''):
              ssl_certificate_object.sfe_mode = mapping_dict.get('sfe_mode', None)
            else:
              ssl_certificate_object.sfe_mode._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('session_timeout', None)) != ''):
              ssl_certificate_object.session_timeout = mapping_dict.get('session_timeout', None)
            else:
              ssl_certificate_object.session_timeout._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('server_cert_name', None)) != ''):
              ssl_certificate_object.server_cert_name = mapping_dict.get('server_cert_name', None)
            else:
              ssl_certificate_object.server_cert_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('chain_cert_name', None)) != ''):
              ssl_certificate_object.chain_cert_name = mapping_dict.get('chain_cert_name', None)
            else:
              ssl_certificate_object.chain_cert_name._empty_tag = True
          except TypeError:
            pass
          ssl_certificate_object_list.append(ssl_certificate_object)

        return ssl_certificate_object_list

  class data_replication(object):
    #XPATH devices/device/optimization-services/data-replication/snapmirror
    class snapmirror(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snapmirror_object_list = self.validate_inputs_form_payload(mapping_dict)

        for snapmirror_object in snapmirror_object_list:
          #fetch payload
          snapmirror_payload = snapmirror_object.getxml(filter=True)
          util.log_debug('snapmirror_payload %s'%snapmirror_payload)
          payload_list.append(snapmirror_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snapmirror_object_list = self.validate_inputs_form_payload(mapping_dict)

        for snapmirror_object in snapmirror_object_list:
          #fetch payload
          snapmirror_payload = snapmirror_object.getxml(filter=True)

          util.log_debug('snapmirror_payload %s'%snapmirror_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=snapmirror_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        snapmirror_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/snapmirror"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, snapmirror_object in enumerate(snapmirror_object_list):
          #fetch payload
          snapmirror_payload = snapmirror_object.getxml(filter=True)

          util.log_debug('update snapmirror_payload %s'%snapmirror_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=snapmirror_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/snapmirror"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        snapmirror_object_list = []
        from servicemodel.controller.devices.device.optimization_services import data_replication
        snapmirror_object = data_replication.snapmirror.snapmirror()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('snapmirror', None)) != ''):
            snapmirror_object.snapmirror = mapping_dict.get('snapmirror', None)
          else:
            snapmirror_object.snapmirror._empty_tag = True
        except TypeError:
          pass
        snapmirror_object_list.append(snapmirror_object)

        return snapmirror_object_list

      #XPATH devices/device/optimization-services/data-replication/snapmirror/ports
      class ports(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)
            util.log_debug('ports_payload %s'%ports_payload)
            payload_list.append(ports_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('ports_payload %s'%ports_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ports_object in enumerate(ports_object_list):
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('update ports_payload %s'%ports_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare payload
          ports_object_list = []
          for port_num_iterator in port_num:
            from servicemodel.controller.devices.device.optimization_services.data_replication import snapmirror
            ports_object = snapmirror.ports.ports()
            ports_object.port_num = port_num_iterator
            ports_object_list.append(ports_object)

          return ports_object_list

      #XPATH devices/device/optimization-services/data-replication/snapmirror/filer
      class filer(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          filer_object_list = self.validate_inputs_form_payload(mapping_dict)

          for filer_object in filer_object_list:
            #fetch payload
            filer_payload = filer_object.getxml(filter=True)
            util.log_debug('filer_payload %s'%filer_payload)
            payload_list.append(filer_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          filer_object_list = self.validate_inputs_form_payload(mapping_dict)

          for filer_object in filer_object_list:
            #fetch payload
            filer_payload = filer_object.getxml(filter=True)

            util.log_debug('filer_payload %s'%filer_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=filer_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          filer_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          filer_name = mapping_dict.get('filer_name')
          if not isinstance(filer_name, list):
            filer_name = [filer_name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filer_name_iterator in filer_name:
            rcpath_tmp =  rcpath+"/filer=%s"%(util.make_interfacename(filer_name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, filer_object in enumerate(filer_object_list):
            #fetch payload
            filer_payload = filer_object.getxml(filter=True)

            util.log_debug('update filer_payload %s'%filer_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=filer_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('filer_name')):
            raise Exception("'filer_name' cannot be empty")

          #convert keys to list
          filer_name = mapping_dict.get('filer_name')
          if not isinstance(filer_name, list):
            filer_name = [filer_name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filer_name_iterator in filer_name:
            rcpath_tmp =  rcpath+"/filer=%s"%(util.make_interfacename(filer_name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('filer_name')):
            raise Exception("'filer_name' cannot be empty")

          #convert keys to list
          filer_name = mapping_dict.get('filer_name')
          if not isinstance(filer_name, list):
            filer_name = [filer_name]

          #prepare payload
          filer_object_list = []
          for filer_name_iterator in filer_name:
            from servicemodel.controller.devices.device.optimization_services.data_replication import snapmirror
            filer_object = snapmirror.filer.filer()
            filer_object.filer_name = filer_name_iterator
            filer_object_list.append(filer_object)

          return filer_object_list

        #XPATH devices/device/optimization-services/data-replication/snapmirror/filer/address
        class address(AbstractDeviceMgr):
          key_hints = [['filer_name']]
          def getRcpathPayload(self, sdata, dev, filer_filer_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_iterator in address:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, filer_filer_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address')):
              raise Exception("'address' cannot be empty")

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_iterator in address:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, filer_filer_name):
            #Parent Key Validations
            if util.isEmpty(filer_filer_name):
              raise Exception("'filer_filer_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address')):
              raise Exception("'address' cannot be empty")

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare payload
            address_object_list = []
            for address_iterator in address:
              from servicemodel.controller.devices.device.optimization_services.data_replication.snapmirror import filer
              address_object = filer.address.address()
              address_object.address = address_iterator
              address_object_list.append(address_object)

            return address_object_list

        #XPATH devices/device/optimization-services/data-replication/snapmirror/filer/volume
        class volume(AbstractDeviceMgr):
          key_hints = [['filer_name']]
          def getRcpathPayload(self, sdata, dev, filer_filer_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            volume_object_list = self.validate_inputs_form_payload(mapping_dict)

            for volume_object in volume_object_list:
              #fetch payload
              volume_payload = volume_object.getxml(filter=True)
              util.log_debug('volume_payload %s'%volume_payload)
              payload_list.append(volume_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            volume_object_list = self.validate_inputs_form_payload(mapping_dict)

            for volume_object in volume_object_list:
              #fetch payload
              volume_payload = volume_object.getxml(filter=True)

              util.log_debug('volume_payload %s'%volume_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=volume_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            volume_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            volume = mapping_dict.get('volume')
            if not isinstance(volume, list):
              volume = [volume]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for volume_iterator in volume:
              rcpath_tmp =  rcpath+"/volume=%s"%(util.make_interfacename(volume_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, volume_object in enumerate(volume_object_list):
              #fetch payload
              volume_payload = volume_object.getxml(filter=True)

              util.log_debug('update volume_payload %s'%volume_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=volume_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, filer_filer_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('volume')):
              raise Exception("'volume' cannot be empty")

            #convert keys to list
            volume = mapping_dict.get('volume')
            if not isinstance(volume, list):
              volume = [volume]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for volume_iterator in volume:
              rcpath_tmp =  rcpath+"/volume=%s"%(util.make_interfacename(volume_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, filer_filer_name):
            #Parent Key Validations
            if util.isEmpty(filer_filer_name):
              raise Exception("'filer_filer_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('volume')):
              raise Exception("'volume' cannot be empty")

            #convert keys to list
            volume = mapping_dict.get('volume')
            if not isinstance(volume, list):
              volume = [volume]

            #prepare payload
            volume_object_list = []
            for volume_iterator in volume:
              from servicemodel.controller.devices.device.optimization_services.data_replication.snapmirror import filer
              volume_object = filer.volume.volume()
              volume_object.volume = volume_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                  volume_object.description = mapping_dict.get('description', None)
                else:
                  volume_object.description._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('policy', None)) != ''):
                  volume_object.policy = mapping_dict.get('policy', None)
                else:
                  volume_object.policy._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
                  volume_object.priority = mapping_dict.get('priority', None)
                else:
                  volume_object.priority._empty_tag = True
              except TypeError:
                pass
              volume_object_list.append(volume_object)

            return volume_object_list

        #XPATH devices/device/optimization-services/data-replication/snapmirror/filer/optimization
        class optimization(AbstractDeviceMgr):
          key_hints = [['filer_name']]
          def getRcpathPayload(self, sdata, dev, filer_filer_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            optimization_object_list = self.validate_inputs_form_payload(mapping_dict)

            for optimization_object in optimization_object_list:
              #fetch payload
              optimization_payload = optimization_object.getxml(filter=True)
              util.log_debug('optimization_payload %s'%optimization_payload)
              payload_list.append(optimization_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)

            #convert parent keys to list
            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            optimization_object_list = self.validate_inputs_form_payload(mapping_dict)

            for optimization_object in optimization_object_list:
              #fetch payload
              optimization_payload = optimization_object.getxml(filter=True)

              util.log_debug('optimization_payload %s'%optimization_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=optimization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, filer_filer_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            optimization_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            optimization = mapping_dict.get('optimization')
            if not isinstance(optimization, list):
              optimization = [optimization]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for optimization_iterator in optimization:
              rcpath_tmp =  rcpath+"/optimization=%s"%(util.make_interfacename(optimization_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, optimization_object in enumerate(optimization_object_list):
              #fetch payload
              optimization_payload = optimization_object.getxml(filter=True)

              util.log_debug('update optimization_payload %s'%optimization_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=optimization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, filer_filer_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( filer_filer_name)


            if not isinstance(filer_filer_name, list):
              filer_filer_name_list = [filer_filer_name]
            else:
              filer_filer_name_list = filer_filer_name

            for filer_filer_name in filer_filer_name_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/snapmirror/filer=%s"%(util.make_interfacename(filer_filer_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('optimization')):
              raise Exception("'optimization' cannot be empty")

            #convert keys to list
            optimization = mapping_dict.get('optimization')
            if not isinstance(optimization, list):
              optimization = [optimization]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for optimization_iterator in optimization:
              rcpath_tmp =  rcpath+"/optimization=%s"%(util.make_interfacename(optimization_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, filer_filer_name):
            #Parent Key Validations
            if util.isEmpty(filer_filer_name):
              raise Exception("'filer_filer_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('optimization')):
              raise Exception("'optimization' cannot be empty")

            #convert keys to list
            optimization = mapping_dict.get('optimization')
            if not isinstance(optimization, list):
              optimization = [optimization]

            #prepare payload
            optimization_object_list = []
            for optimization_iterator in optimization:
              from servicemodel.controller.devices.device.optimization_services.data_replication.snapmirror import filer
              optimization_object = filer.optimization.optimization()
              optimization_object.optimization = optimization_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                  optimization_object.description = mapping_dict.get('description', None)
                else:
                  optimization_object.description._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
                  optimization_object.priority = mapping_dict.get('priority', None)
                else:
                  optimization_object.priority._empty_tag = True
              except TypeError:
                pass
              optimization_object_list.append(optimization_object)

            return optimization_object_list

    #XPATH devices/device/optimization-services/data-replication/datastore
    class datastore(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        datastore_object_list = self.validate_inputs_form_payload(mapping_dict)

        for datastore_object in datastore_object_list:
          #fetch payload
          datastore_payload = datastore_object.getxml(filter=True)
          util.log_debug('datastore_payload %s'%datastore_payload)
          payload_list.append(datastore_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        datastore_object_list = self.validate_inputs_form_payload(mapping_dict)

        for datastore_object in datastore_object_list:
          #fetch payload
          datastore_payload = datastore_object.getxml(filter=True)

          util.log_debug('datastore_payload %s'%datastore_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=datastore_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        datastore_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/datastore"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, datastore_object in enumerate(datastore_object_list):
          #fetch payload
          datastore_payload = datastore_object.getxml(filter=True)

          util.log_debug('update datastore_payload %s'%datastore_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=datastore_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/datastore"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        datastore_object_list = []
        from servicemodel.controller.devices.device.optimization_services import data_replication
        datastore_object = data_replication.datastore.datastore()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('datastore_type', None)) != ''):
            datastore_object.datastore_type = mapping_dict.get('datastore_type', None)
          else:
            datastore_object.datastore_type._empty_tag = True
        except TypeError:
          pass
        datastore_object_list.append(datastore_object)

        return datastore_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/datastore-sync
      class datastore_sync(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          datastore_sync_object_list = self.validate_inputs_form_payload(mapping_dict)

          for datastore_sync_object in datastore_sync_object_list:
            #fetch payload
            datastore_sync_payload = datastore_sync_object.getxml(filter=True)
            util.log_debug('datastore_sync_payload %s'%datastore_sync_payload)
            payload_list.append(datastore_sync_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          datastore_sync_object_list = self.validate_inputs_form_payload(mapping_dict)

          for datastore_sync_object in datastore_sync_object_list:
            #fetch payload
            datastore_sync_payload = datastore_sync_object.getxml(filter=True)

            util.log_debug('datastore_sync_payload %s'%datastore_sync_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=datastore_sync_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          datastore_sync_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/datastore-sync"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, datastore_sync_object in enumerate(datastore_sync_object_list):
            #fetch payload
            datastore_sync_payload = datastore_sync_object.getxml(filter=True)

            util.log_debug('update datastore_sync_payload %s'%datastore_sync_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=datastore_sync_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/datastore-sync"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          datastore_sync_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          datastore_sync_object = datastore.datastore_sync.datastore_sync()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('enable_sync', None)) != ''):
              datastore_sync_object.enable_sync = mapping_dict.get('enable_sync', None)
            else:
              datastore_sync_object.enable_sync._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('sync_type', None)) != ''):
              datastore_sync_object.sync_type = mapping_dict.get('sync_type', None)
            else:
              datastore_sync_object.sync_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('peer_ip', None)) != ''):
              datastore_sync_object.peer_ip = mapping_dict.get('peer_ip', None)
            else:
              datastore_sync_object.peer_ip._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('reconnect', None)) != ''):
              datastore_sync_object.reconnect = mapping_dict.get('reconnect', None)
            else:
              datastore_sync_object.reconnect._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
              datastore_sync_object.port = mapping_dict.get('port', None)
            else:
              datastore_sync_object.port._empty_tag = True
          except TypeError:
            pass
          datastore_sync_object_list.append(datastore_sync_object)

          return datastore_sync_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/branchwarming
      class branchwarming(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          branchwarming_object_list = self.validate_inputs_form_payload(mapping_dict)

          for branchwarming_object in branchwarming_object_list:
            #fetch payload
            branchwarming_payload = branchwarming_object.getxml(filter=True)
            util.log_debug('branchwarming_payload %s'%branchwarming_payload)
            payload_list.append(branchwarming_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          branchwarming_object_list = self.validate_inputs_form_payload(mapping_dict)

          for branchwarming_object in branchwarming_object_list:
            #fetch payload
            branchwarming_payload = branchwarming_object.getxml(filter=True)

            util.log_debug('branchwarming_payload %s'%branchwarming_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=branchwarming_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          branchwarming_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/branchwarming"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, branchwarming_object in enumerate(branchwarming_object_list):
            #fetch payload
            branchwarming_payload = branchwarming_object.getxml(filter=True)

            util.log_debug('update branchwarming_payload %s'%branchwarming_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=branchwarming_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/branchwarming"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          branchwarming_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          branchwarming_object = datastore.branchwarming.branchwarming()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('branchwarming', None)) != ''):
              branchwarming_object.branchwarming = mapping_dict.get('branchwarming', None)
            else:
              branchwarming_object.branchwarming._empty_tag = True
          except TypeError:
            pass
          branchwarming_object_list.append(branchwarming_object)

          return branchwarming_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/notification
      class notification(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          notification_object_list = self.validate_inputs_form_payload(mapping_dict)

          for notification_object in notification_object_list:
            #fetch payload
            notification_payload = notification_object.getxml(filter=True)
            util.log_debug('notification_payload %s'%notification_payload)
            payload_list.append(notification_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          notification_object_list = self.validate_inputs_form_payload(mapping_dict)

          for notification_object in notification_object_list:
            #fetch payload
            notification_payload = notification_object.getxml(filter=True)

            util.log_debug('notification_payload %s'%notification_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=notification_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          notification_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/notification"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, notification_object in enumerate(notification_object_list):
            #fetch payload
            notification_payload = notification_object.getxml(filter=True)

            util.log_debug('update notification_payload %s'%notification_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=notification_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/notification"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          notification_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          notification_object = datastore.notification.notification()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('notification', None)) != ''):
              notification_object.notification = mapping_dict.get('notification', None)
            else:
              notification_object.notification._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('wrap_around', None)) != ''):
              notification_object.wrap_around = mapping_dict.get('wrap_around', None)
            else:
              notification_object.wrap_around._empty_tag = True
          except TypeError:
            pass
          notification_object_list.append(notification_object)

          return notification_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/disklayout
      class disklayout(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          disklayout_object_list = self.validate_inputs_form_payload(mapping_dict)

          for disklayout_object in disklayout_object_list:
            #fetch payload
            disklayout_payload = disklayout_object.getxml(filter=True)
            util.log_debug('disklayout_payload %s'%disklayout_payload)
            payload_list.append(disklayout_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          disklayout_object_list = self.validate_inputs_form_payload(mapping_dict)

          for disklayout_object in disklayout_object_list:
            #fetch payload
            disklayout_payload = disklayout_object.getxml(filter=True)

            util.log_debug('disklayout_payload %s'%disklayout_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=disklayout_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          disklayout_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/disklayout"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, disklayout_object in enumerate(disklayout_object_list):
            #fetch payload
            disklayout_payload = disklayout_object.getxml(filter=True)

            util.log_debug('update disklayout_payload %s'%disklayout_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=disklayout_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/disklayout"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          disklayout_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          disklayout_object = datastore.disklayout.disklayout()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('disklayout', None)) != ''):
              disklayout_object.disklayout = mapping_dict.get('disklayout', None)
            else:
              disklayout_object.disklayout._empty_tag = True
          except TypeError:
            pass
          disklayout_object_list.append(disklayout_object)

          return disklayout_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/sdr-policy
      class sdr_policy(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          sdr_policy_object_list = self.validate_inputs_form_payload(mapping_dict)

          for sdr_policy_object in sdr_policy_object_list:
            #fetch payload
            sdr_policy_payload = sdr_policy_object.getxml(filter=True)
            util.log_debug('sdr_policy_payload %s'%sdr_policy_payload)
            payload_list.append(sdr_policy_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          sdr_policy_object_list = self.validate_inputs_form_payload(mapping_dict)

          for sdr_policy_object in sdr_policy_object_list:
            #fetch payload
            sdr_policy_payload = sdr_policy_object.getxml(filter=True)

            util.log_debug('sdr_policy_payload %s'%sdr_policy_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sdr_policy_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          sdr_policy_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/sdr-policy"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, sdr_policy_object in enumerate(sdr_policy_object_list):
            #fetch payload
            sdr_policy_payload = sdr_policy_object.getxml(filter=True)

            util.log_debug('update sdr_policy_payload %s'%sdr_policy_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sdr_policy_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/sdr-policy"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          sdr_policy_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          sdr_policy_object = datastore.sdr_policy.sdr_policy()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('sdr_policy', None)) != ''):
              sdr_policy_object.sdr_policy = mapping_dict.get('sdr_policy', None)
            else:
              sdr_policy_object.sdr_policy._empty_tag = True
          except TypeError:
            pass
          sdr_policy_object_list.append(sdr_policy_object)

          return sdr_policy_object_list

      #XPATH devices/device/optimization-services/data-replication/datastore/codec
      class codec(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          codec_object_list = self.validate_inputs_form_payload(mapping_dict)

          for codec_object in codec_object_list:
            #fetch payload
            codec_payload = codec_object.getxml(filter=True)
            util.log_debug('codec_payload %s'%codec_payload)
            payload_list.append(codec_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          codec_object_list = self.validate_inputs_form_payload(mapping_dict)

          for codec_object in codec_object_list:
            #fetch payload
            codec_payload = codec_object.getxml(filter=True)

            util.log_debug('codec_payload %s'%codec_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=codec_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          codec_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/codec"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, codec_object in enumerate(codec_object_list):
            #fetch payload
            codec_payload = codec_object.getxml(filter=True)

            util.log_debug('update codec_payload %s'%codec_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=codec_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/datastore"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/codec"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          codec_object_list = []
          from servicemodel.controller.devices.device.optimization_services.data_replication import datastore
          codec_object = datastore.codec.codec()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('codec', None)) != ''):
              codec_object.codec = mapping_dict.get('codec', None)
            else:
              codec_object.codec._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('compression_types', None)) != ''):
              codec_object.compression_types = mapping_dict.get('compression_types', None)
            else:
              codec_object.compression_types._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('level', None)) != ''):
              codec_object.level = mapping_dict.get('level', None)
            else:
              codec_object.level._empty_tag = True
          except TypeError:
            pass
          codec_object_list.append(codec_object)

          return codec_object_list

    #XPATH devices/device/optimization-services/data-replication/fcip
    class fcip(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        fcip_object_list = self.validate_inputs_form_payload(mapping_dict)

        for fcip_object in fcip_object_list:
          #fetch payload
          fcip_payload = fcip_object.getxml(filter=True)
          util.log_debug('fcip_payload %s'%fcip_payload)
          payload_list.append(fcip_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        fcip_object_list = self.validate_inputs_form_payload(mapping_dict)

        for fcip_object in fcip_object_list:
          #fetch payload
          fcip_payload = fcip_object.getxml(filter=True)

          util.log_debug('fcip_payload %s'%fcip_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=fcip_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        fcip_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/fcip"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, fcip_object in enumerate(fcip_object_list):
          #fetch payload
          fcip_payload = fcip_object.getxml(filter=True)

          util.log_debug('update fcip_payload %s'%fcip_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=fcip_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/fcip"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        fcip_object_list = []
        from servicemodel.controller.devices.device.optimization_services import data_replication
        fcip_object = data_replication.fcip.fcip()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('fcip', None)) != ''):
            fcip_object.fcip = mapping_dict.get('fcip', None)
          else:
            fcip_object.fcip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('stat_port', None)) != ''):
            fcip_object.stat_port = mapping_dict.get('stat_port', None)
          else:
            fcip_object.stat_port._empty_tag = True
        except TypeError:
          pass
        fcip_object_list.append(fcip_object)

        return fcip_object_list

      #XPATH devices/device/optimization-services/data-replication/fcip/ports
      class ports(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)
            util.log_debug('ports_payload %s'%ports_payload)
            payload_list.append(ports_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('ports_payload %s'%ports_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ports_object in enumerate(ports_object_list):
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('update ports_payload %s'%ports_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare payload
          ports_object_list = []
          for port_num_iterator in port_num:
            from servicemodel.controller.devices.device.optimization_services.data_replication import fcip
            ports_object = fcip.ports.ports()
            ports_object.port_num = port_num_iterator
            ports_object_list.append(ports_object)

          return ports_object_list

      #XPATH devices/device/optimization-services/data-replication/fcip/rules
      class rules(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rules_object in rules_object_list:
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)
            util.log_debug('rules_payload %s'%rules_payload)
            payload_list.append(rules_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rules_object in rules_object_list:
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)

            util.log_debug('rules_payload %s'%rules_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=rules_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              rcpath_tmp =  rcpath+"/rules=%s,%s"%(util.make_interfacename(src_ip_iterator),util.make_interfacename(dst_ip_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, rules_object in enumerate(rules_object_list):
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)

            util.log_debug('update rules_payload %s'%rules_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=rules_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/fcip"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('src_ip')):
            raise Exception("'src_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('dst_ip')):
            raise Exception("'dst_ip' cannot be empty")

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              rcpath_tmp =  rcpath+"/rules=%s,%s"%(util.make_interfacename(src_ip_iterator),util.make_interfacename(dst_ip_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('src_ip')):
            raise Exception("'src_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('dst_ip')):
            raise Exception("'dst_ip' cannot be empty")

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare payload
          rules_object_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              from servicemodel.controller.devices.device.optimization_services.data_replication import fcip
              rules_object = fcip.rules.rules()
              rules_object.src_ip = src_ip_iterator
              rules_object.dst_ip = dst_ip_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dif', None)) != ''):
                  rules_object.dif = mapping_dict.get('dif', None)
                else:
                  rules_object.dif._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dif_blocksize', None)) != ''):
                  rules_object.dif_blocksize = mapping_dict.get('dif_blocksize', None)
                else:
                  rules_object.dif_blocksize._empty_tag = True
              except TypeError:
                pass
              rules_object_list.append(rules_object)

          return rules_object_list

    #XPATH devices/device/optimization-services/data-replication/srdf
    class srdf(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srdf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for srdf_object in srdf_object_list:
          #fetch payload
          srdf_payload = srdf_object.getxml(filter=True)
          util.log_debug('srdf_payload %s'%srdf_payload)
          payload_list.append(srdf_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srdf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for srdf_object in srdf_object_list:
          #fetch payload
          srdf_payload = srdf_object.getxml(filter=True)

          util.log_debug('srdf_payload %s'%srdf_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=srdf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srdf_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/srdf"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, srdf_object in enumerate(srdf_object_list):
          #fetch payload
          srdf_payload = srdf_object.getxml(filter=True)

          util.log_debug('update srdf_payload %s'%srdf_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=srdf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/data-replication"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/srdf"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        srdf_object_list = []
        from servicemodel.controller.devices.device.optimization_services import data_replication
        srdf_object = data_replication.srdf.srdf()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('srdf', None)) != ''):
            srdf_object.srdf = mapping_dict.get('srdf', None)
          else:
            srdf_object.srdf._empty_tag = True
        except TypeError:
          pass
        srdf_object_list.append(srdf_object)

        return srdf_object_list

      #XPATH devices/device/optimization-services/data-replication/srdf/ports
      class ports(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)
            util.log_debug('ports_payload %s'%ports_payload)
            payload_list.append(ports_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict)

          for ports_object in ports_object_list:
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('ports_payload %s'%ports_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          ports_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, ports_object in enumerate(ports_object_list):
            #fetch payload
            ports_payload = ports_object.getxml(filter=True)

            util.log_debug('update ports_payload %s'%ports_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for port_num_iterator in port_num:
            rcpath_tmp =  rcpath+"/ports=%s"%(util.make_interfacename(port_num_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('port_num')):
            raise Exception("'port_num' cannot be empty")

          #convert keys to list
          port_num = mapping_dict.get('port_num')
          if not isinstance(port_num, list):
            port_num = [port_num]

          #prepare payload
          ports_object_list = []
          for port_num_iterator in port_num:
            from servicemodel.controller.devices.device.optimization_services.data_replication import srdf
            ports_object = srdf.ports.ports()
            ports_object.port_num = port_num_iterator
            ports_object_list.append(ports_object)

          return ports_object_list

      #XPATH devices/device/optimization-services/data-replication/srdf/rules
      class rules(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rules_object in rules_object_list:
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)
            util.log_debug('rules_payload %s'%rules_payload)
            payload_list.append(rules_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict)

          for rules_object in rules_object_list:
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)

            util.log_debug('rules_payload %s'%rules_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=rules_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          rules_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              rcpath_tmp =  rcpath+"/rules=%s,%s"%(util.make_interfacename(src_ip_iterator),util.make_interfacename(dst_ip_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, rules_object in enumerate(rules_object_list):
            #fetch payload
            rules_payload = rules_object.getxml(filter=True)

            util.log_debug('update rules_payload %s'%rules_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=rules_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('src_ip')):
            raise Exception("'src_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('dst_ip')):
            raise Exception("'dst_ip' cannot be empty")

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              rcpath_tmp =  rcpath+"/rules=%s,%s"%(util.make_interfacename(src_ip_iterator),util.make_interfacename(dst_ip_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('src_ip')):
            raise Exception("'src_ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('dst_ip')):
            raise Exception("'dst_ip' cannot be empty")

          #convert keys to list
          src_ip = mapping_dict.get('src_ip')
          if not isinstance(src_ip, list):
            src_ip = [src_ip]
          dst_ip = mapping_dict.get('dst_ip')
          if not isinstance(dst_ip, list):
            dst_ip = [dst_ip]

          #prepare payload
          rules_object_list = []
          for src_ip_iterator in src_ip:
            for dst_ip_iterator in dst_ip:
              from servicemodel.controller.devices.device.optimization_services.data_replication import srdf
              rules_object = srdf.rules.rules()
              rules_object.src_ip = src_ip_iterator
              rules_object.dst_ip = dst_ip_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dif', None)) != ''):
                  rules_object.dif = mapping_dict.get('dif', None)
                else:
                  rules_object.dif._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('dif_blocksize', None)) != ''):
                  rules_object.dif_blocksize = mapping_dict.get('dif_blocksize', None)
                else:
                  rules_object.dif_blocksize._empty_tag = True
              except TypeError:
                pass
              rules_object_list.append(rules_object)

          return rules_object_list

      #XPATH devices/device/optimization-services/data-replication/srdf/optimization-settings
      class optimization_settings(AbstractDeviceMgr):
        key_hints = [[]]
        def getRcpathPayload(self, sdata, dev, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          optimization_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

          for optimization_settings_object in optimization_settings_object_list:
            #fetch payload
            optimization_settings_payload = optimization_settings_object.getxml(filter=True)
            util.log_debug('optimization_settings_payload %s'%optimization_settings_payload)
            payload_list.append(optimization_settings_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #convert parent keys to list
          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          optimization_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

          for optimization_settings_object in optimization_settings_object_list:
            #fetch payload
            optimization_settings_payload = optimization_settings_object.getxml(filter=True)

            util.log_debug('optimization_settings_payload %s'%optimization_settings_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=optimization_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          optimization_settings_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          group_id = mapping_dict.get('group_id')
          if not isinstance(group_id, list):
            group_id = [group_id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for group_id_iterator in group_id:
            rcpath_tmp =  rcpath+"/optimization-settings=%s"%(util.make_interfacename(group_id_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, optimization_settings_object in enumerate(optimization_settings_object_list):
            #fetch payload
            optimization_settings_payload = optimization_settings_object.getxml(filter=True)

            util.log_debug('update optimization_settings_payload %s'%optimization_settings_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=optimization_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return

          ##prepare rcpath
          rcpath = "wanoptimizer:optimization-services/data-replication/srdf"
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('group_id')):
            raise Exception("'group_id' cannot be empty")

          #convert keys to list
          group_id = mapping_dict.get('group_id')
          if not isinstance(group_id, list):
            group_id = [group_id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for group_id_iterator in group_id:
            rcpath_tmp =  rcpath+"/optimization-settings=%s"%(util.make_interfacename(group_id_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('group_id')):
            raise Exception("'group_id' cannot be empty")

          #convert keys to list
          group_id = mapping_dict.get('group_id')
          if not isinstance(group_id, list):
            group_id = [group_id]

          #prepare payload
          optimization_settings_object_list = []
          for group_id_iterator in group_id:
            from servicemodel.controller.devices.device.optimization_services.data_replication import srdf
            optimization_settings_object = srdf.optimization_settings.optimization_settings()
            optimization_settings_object.group_id = group_id_iterator
            optimization_settings_object_list.append(optimization_settings_object)

          return optimization_settings_object_list

        #XPATH devices/device/optimization-services/data-replication/srdf/optimization-settings/address
        class address(AbstractDeviceMgr):
          key_hints = [['group_id']]
          def getRcpathPayload(self, sdata, dev, optimization_settings_group_id, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_iterator in address:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, optimization_settings_group_id, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('address')):
              raise Exception("'address' cannot be empty")

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for address_iterator in address:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(address_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, optimization_settings_group_id):
            #Parent Key Validations
            if util.isEmpty(optimization_settings_group_id):
              raise Exception("'optimization_settings_group_id' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('address')):
              raise Exception("'address' cannot be empty")

            #convert keys to list
            address = mapping_dict.get('address')
            if not isinstance(address, list):
              address = [address]

            #prepare payload
            address_object_list = []
            for address_iterator in address:
              from servicemodel.controller.devices.device.optimization_services.data_replication.srdf import optimization_settings
              address_object = optimization_settings.address.address()
              address_object.address = address_iterator
              address_object_list.append(address_object)

            return address_object_list

        #XPATH devices/device/optimization-services/data-replication/srdf/optimization-settings/base-rdf-group
        class base_rdf_group(AbstractDeviceMgr):
          key_hints = [['group_id']]
          def getRcpathPayload(self, sdata, dev, optimization_settings_group_id, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            base_rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for base_rdf_group_object in base_rdf_group_object_list:
              #fetch payload
              base_rdf_group_payload = base_rdf_group_object.getxml(filter=True)
              util.log_debug('base_rdf_group_payload %s'%base_rdf_group_payload)
              payload_list.append(base_rdf_group_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            base_rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for base_rdf_group_object in base_rdf_group_object_list:
              #fetch payload
              base_rdf_group_payload = base_rdf_group_object.getxml(filter=True)

              util.log_debug('base_rdf_group_payload %s'%base_rdf_group_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=base_rdf_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            base_rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            base_rdf_group = mapping_dict.get('base_rdf_group')
            if not isinstance(base_rdf_group, list):
              base_rdf_group = [base_rdf_group]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for base_rdf_group_iterator in base_rdf_group:
              rcpath_tmp =  rcpath+"/base-rdf-group=%s"%(util.make_interfacename(base_rdf_group_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, base_rdf_group_object in enumerate(base_rdf_group_object_list):
              #fetch payload
              base_rdf_group_payload = base_rdf_group_object.getxml(filter=True)

              util.log_debug('update base_rdf_group_payload %s'%base_rdf_group_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=base_rdf_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, optimization_settings_group_id, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('base_rdf_group')):
              raise Exception("'base_rdf_group' cannot be empty")

            #convert keys to list
            base_rdf_group = mapping_dict.get('base_rdf_group')
            if not isinstance(base_rdf_group, list):
              base_rdf_group = [base_rdf_group]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for base_rdf_group_iterator in base_rdf_group:
              rcpath_tmp =  rcpath+"/base-rdf-group=%s"%(util.make_interfacename(base_rdf_group_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, optimization_settings_group_id):
            #Parent Key Validations
            if util.isEmpty(optimization_settings_group_id):
              raise Exception("'optimization_settings_group_id' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('base_rdf_group')):
              raise Exception("'base_rdf_group' cannot be empty")

            #convert keys to list
            base_rdf_group = mapping_dict.get('base_rdf_group')
            if not isinstance(base_rdf_group, list):
              base_rdf_group = [base_rdf_group]

            #prepare payload
            base_rdf_group_object_list = []
            for base_rdf_group_iterator in base_rdf_group:
              from servicemodel.controller.devices.device.optimization_services.data_replication.srdf import optimization_settings
              base_rdf_group_object = optimization_settings.base_rdf_group.base_rdf_group()
              base_rdf_group_object.base_rdf_group = base_rdf_group_iterator
              base_rdf_group_object_list.append(base_rdf_group_object)

            return base_rdf_group_object_list

        #XPATH devices/device/optimization-services/data-replication/srdf/optimization-settings/rdf-group
        class rdf_group(AbstractDeviceMgr):
          key_hints = [['group_id']]
          def getRcpathPayload(self, sdata, dev, optimization_settings_group_id, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for rdf_group_object in rdf_group_object_list:
              #fetch payload
              rdf_group_payload = rdf_group_object.getxml(filter=True)
              util.log_debug('rdf_group_payload %s'%rdf_group_payload)
              payload_list.append(rdf_group_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)

            #convert parent keys to list
            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict)

            for rdf_group_object in rdf_group_object_list:
              #fetch payload
              rdf_group_payload = rdf_group_object.getxml(filter=True)

              util.log_debug('rdf_group_payload %s'%rdf_group_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=rdf_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, optimization_settings_group_id, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            ##prepare rcpath
            rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            rdf_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            rdf_group = mapping_dict.get('rdf_group')
            if not isinstance(rdf_group, list):
              rdf_group = [rdf_group]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for rdf_group_iterator in rdf_group:
              rcpath_tmp =  rcpath+"/rdf-group=%s"%(util.make_interfacename(rdf_group_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, rdf_group_object in enumerate(rdf_group_object_list):
              #fetch payload
              rdf_group_payload = rdf_group_object.getxml(filter=True)

              util.log_debug('update rdf_group_payload %s'%rdf_group_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=rdf_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, optimization_settings_group_id, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( optimization_settings_group_id)


            if not isinstance(optimization_settings_group_id, list):
              optimization_settings_group_id_list = [optimization_settings_group_id]
            else:
              optimization_settings_group_id_list = optimization_settings_group_id

            for optimization_settings_group_id in optimization_settings_group_id_list:
              ##prepare rcpath
              rcpath = "wanoptimizer:optimization-services/data-replication/srdf/optimization-settings=%s"%(util.make_interfacename(optimization_settings_group_id))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('rdf_group')):
              raise Exception("'rdf_group' cannot be empty")

            #convert keys to list
            rdf_group = mapping_dict.get('rdf_group')
            if not isinstance(rdf_group, list):
              rdf_group = [rdf_group]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for rdf_group_iterator in rdf_group:
              rcpath_tmp =  rcpath+"/rdf-group=%s"%(util.make_interfacename(rdf_group_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, optimization_settings_group_id):
            #Parent Key Validations
            if util.isEmpty(optimization_settings_group_id):
              raise Exception("'optimization_settings_group_id' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('rdf_group')):
              raise Exception("'rdf_group' cannot be empty")

            #convert keys to list
            rdf_group = mapping_dict.get('rdf_group')
            if not isinstance(rdf_group, list):
              rdf_group = [rdf_group]

            #prepare payload
            rdf_group_object_list = []
            for rdf_group_iterator in rdf_group:
              from servicemodel.controller.devices.device.optimization_services.data_replication.srdf import optimization_settings
              rdf_group_object = optimization_settings.rdf_group.rdf_group()
              rdf_group_object.rdf_group = rdf_group_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('policy', None)) != ''):
                  rdf_group_object.policy = mapping_dict.get('policy', None)
                else:
                  rdf_group_object.policy._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                  rdf_group_object.description = mapping_dict.get('description', None)
                else:
                  rdf_group_object.description._empty_tag = True
              except TypeError:
                pass
              rdf_group_object_list.append(rdf_group_object)

            return rdf_group_object_list

  class active_directory(object):
    #XPATH devices/device/optimization-services/active-directory/domain-join
    class domain_join(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_join_object_list = self.validate_inputs_form_payload(mapping_dict)

        for domain_join_object in domain_join_object_list:
          #fetch payload
          domain_join_payload = domain_join_object.getxml(filter=True)
          util.log_debug('domain_join_payload %s'%domain_join_payload)
          payload_list.append(domain_join_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_join_object_list = self.validate_inputs_form_payload(mapping_dict)

        for domain_join_object in domain_join_object_list:
          #fetch payload
          domain_join_payload = domain_join_object.getxml(filter=True)

          util.log_debug('domain_join_payload %s'%domain_join_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=domain_join_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        domain_join_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/domain-join"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, domain_join_object in enumerate(domain_join_object_list):
          #fetch payload
          domain_join_payload = domain_join_object.getxml(filter=True)

          util.log_debug('update domain_join_payload %s'%domain_join_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=domain_join_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/domain-join"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        domain_join_object_list = []
        from servicemodel.controller.devices.device.optimization_services import active_directory
        domain_join_object = active_directory.domain_join.domain_join()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
            domain_join_object.domain_name = mapping_dict.get('domain_name', None)
          else:
            domain_join_object.domain_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('login', None)) != ''):
            domain_join_object.login = mapping_dict.get('login', None)
          else:
            domain_join_object.login._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
            domain_join_object.password = mapping_dict.get('password', None)
          else:
            domain_join_object.password._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dc_list', None)) != ''):
            domain_join_object.dc_list = mapping_dict.get('dc_list', None)
          else:
            domain_join_object.dc_list._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('join_type', None)) != ''):
            domain_join_object.join_type = mapping_dict.get('join_type', None)
          else:
            domain_join_object.join_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netbios_name', None)) != ''):
            domain_join_object.netbios_name = mapping_dict.get('netbios_name', None)
          else:
            domain_join_object.netbios_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('org_unit', None)) != ''):
            domain_join_object.org_unit = mapping_dict.get('org_unit', None)
          else:
            domain_join_object.org_unit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('short_name', None)) != ''):
            domain_join_object.short_name = mapping_dict.get('short_name', None)
          else:
            domain_join_object.short_name._empty_tag = True
        except TypeError:
          pass
        domain_join_object_list.append(domain_join_object)

        return domain_join_object_list

    #XPATH devices/device/optimization-services/active-directory/auto-config
    class auto_config(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        auto_config_object_list = self.validate_inputs_form_payload(mapping_dict)

        for auto_config_object in auto_config_object_list:
          #fetch payload
          auto_config_payload = auto_config_object.getxml(filter=True)
          util.log_debug('auto_config_payload %s'%auto_config_payload)
          payload_list.append(auto_config_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        auto_config_object_list = self.validate_inputs_form_payload(mapping_dict)

        for auto_config_object in auto_config_object_list:
          #fetch payload
          auto_config_payload = auto_config_object.getxml(filter=True)

          util.log_debug('auto_config_payload %s'%auto_config_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=auto_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        auto_config_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/auto-config"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, auto_config_object in enumerate(auto_config_object_list):
          #fetch payload
          auto_config_payload = auto_config_object.getxml(filter=True)

          util.log_debug('update auto_config_payload %s'%auto_config_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=auto_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:optimization-services/active-directory"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/auto-config"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        auto_config_object_list = []
        from servicemodel.controller.devices.device.optimization_services import active_directory
        auto_config_object = active_directory.auto_config.auto_config()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
            auto_config_object.domain_name = mapping_dict.get('domain_name', None)
          else:
            auto_config_object.domain_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('login', None)) != ''):
            auto_config_object.login = mapping_dict.get('login', None)
          else:
            auto_config_object.login._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
            auto_config_object.password = mapping_dict.get('password', None)
          else:
            auto_config_object.password._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dc_list', None)) != ''):
            auto_config_object.dc_list = mapping_dict.get('dc_list', None)
          else:
            auto_config_object.dc_list._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('short_name', None)) != ''):
            auto_config_object.short_name = mapping_dict.get('short_name', None)
          else:
            auto_config_object.short_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_smbv1_mode', None)) != ''):
            auto_config_object.enable_smbv1_mode = mapping_dict.get('enable_smbv1_mode', None)
          else:
            auto_config_object.enable_smbv1_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_smb_signing', None)) != ''):
            auto_config_object.enable_smb_signing = mapping_dict.get('enable_smb_signing', None)
          else:
            auto_config_object.enable_smb_signing._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('smb_signing_modetype', None)) != ''):
            auto_config_object.smb_signing_modetype = mapping_dict.get('smb_signing_modetype', None)
          else:
            auto_config_object.smb_signing_modetype._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('delegation', None)) != ''):
            auto_config_object.delegation = mapping_dict.get('delegation', None)
          else:
            auto_config_object.delegation._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auto_mode', None)) != ''):
            auto_config_object.auto_mode = mapping_dict.get('auto_mode', None)
          else:
            auto_config_object.auto_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('user_name', None)) != ''):
            auto_config_object.user_name = mapping_dict.get('user_name', None)
          else:
            auto_config_object.user_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('user_password', None)) != ''):
            auto_config_object.user_password = mapping_dict.get('user_password', None)
          else:
            auto_config_object.user_password._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rule_type', None)) != ''):
            auto_config_object.rule_type = mapping_dict.get('rule_type', None)
          else:
            auto_config_object.rule_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipaddress', None)) != ''):
            auto_config_object.ipaddress = mapping_dict.get('ipaddress', None)
          else:
            auto_config_object.ipaddress._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('select', None)) != ''):
            auto_config_object.select = mapping_dict.get('select', None)
          else:
            auto_config_object.select._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_smb2_signing', None)) != ''):
            auto_config_object.enable_smb2_signing = mapping_dict.get('enable_smb2_signing', None)
          else:
            auto_config_object.enable_smb2_signing._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('enable_smb3_signing', None)) != ''):
            auto_config_object.enable_smb3_signing = mapping_dict.get('enable_smb3_signing', None)
          else:
            auto_config_object.enable_smb3_signing._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mapi', None)) != ''):
            auto_config_object.mapi = mapping_dict.get('mapi', None)
          else:
            auto_config_object.mapi._empty_tag = True
        except TypeError:
          pass
        auto_config_object_list.append(auto_config_object)

        return auto_config_object_list

