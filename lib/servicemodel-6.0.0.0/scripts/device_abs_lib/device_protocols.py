#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class protocols(object):
  #XPATH devices/device/protocols/cifs
  class cifs(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cifs_object_list = self.validate_inputs_form_payload(mapping_dict)

      for cifs_object in cifs_object_list:
        #fetch payload
        cifs_payload = cifs_object.getxml(filter=True)
        util.log_debug('cifs_payload %s'%cifs_payload)
        payload_list.append(cifs_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cifs_object_list = self.validate_inputs_form_payload(mapping_dict)

      for cifs_object in cifs_object_list:
        #fetch payload
        cifs_payload = cifs_object.getxml(filter=True)

        util.log_debug('cifs_payload %s'%cifs_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=cifs_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      cifs_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/cifs"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, cifs_object in enumerate(cifs_object_list):
        #fetch payload
        cifs_payload = cifs_object.getxml(filter=True)

        util.log_debug('update cifs_payload %s'%cifs_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=cifs_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/cifs"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      cifs_object_list = []
      from servicemodel.controller.devices.device import protocols
      cifs_object = protocols.cifs.cifs()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('cifs_enable', None)) != ''):
          cifs_object.cifs_enable = mapping_dict.get('cifs_enable', None)
        else:
          cifs_object.cifs_enable._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('applock', None)) != ''):
          cifs_object.applock = mapping_dict.get('applock', None)
        else:
          cifs_object.applock._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('clear_read_resp', None)) != ''):
          cifs_object.clear_read_resp = mapping_dict.get('clear_read_resp', None)
        else:
          cifs_object.clear_read_resp._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('write_optimization', None)) != ''):
          cifs_object.write_optimization = mapping_dict.get('write_optimization', None)
        else:
          cifs_object.write_optimization._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('dw_throttling', None)) != ''):
          cifs_object.dw_throttling = mapping_dict.get('dw_throttling', None)
        else:
          cifs_object.dw_throttling._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ext_dir_cache', None)) != ''):
          cifs_object.ext_dir_cache = mapping_dict.get('ext_dir_cache', None)
        else:
          cifs_object.ext_dir_cache._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mac_oplock', None)) != ''):
          cifs_object.mac_oplock = mapping_dict.get('mac_oplock', None)
        else:
          cifs_object.mac_oplock._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen', None)) != ''):
          cifs_object.oopen = mapping_dict.get('oopen', None)
        else:
          cifs_object.oopen._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen_policy', None)) != ''):
          cifs_object.oopen_policy = mapping_dict.get('oopen_policy', None)
        else:
          cifs_object.oopen_policy._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen_extension', None)) != ''):
          cifs_object.oopen_extension = mapping_dict.get('oopen_extension', None)
        else:
          cifs_object.oopen_extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen_add_extension', None)) != ''):
          cifs_object.oopen_add_extension = mapping_dict.get('oopen_add_extension', None)
        else:
          cifs_object.oopen_add_extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('add_settings_always_policy', None)) != ''):
          cifs_object.add_settings_always_policy = mapping_dict.get('add_settings_always_policy', None)
        else:
          cifs_object.add_settings_always_policy._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen_modify_extension', None)) != ''):
          cifs_object.oopen_modify_extension = mapping_dict.get('oopen_modify_extension', None)
        else:
          cifs_object.oopen_modify_extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('modify_settings_policy', None)) != ''):
          cifs_object.modify_settings_policy = mapping_dict.get('modify_settings_policy', None)
        else:
          cifs_object.modify_settings_policy._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oopen_remove_extension', None)) != ''):
          cifs_object.oopen_remove_extension = mapping_dict.get('oopen_remove_extension', None)
        else:
          cifs_object.oopen_remove_extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb_signing', None)) != ''):
          cifs_object.smb_signing = mapping_dict.get('smb_signing', None)
        else:
          cifs_object.smb_signing._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb_signing_ntlm_bypass', None)) != ''):
          cifs_object.smb_signing_ntlm_bypass = mapping_dict.get('smb_signing_ntlm_bypass', None)
        else:
          cifs_object.smb_signing_ntlm_bypass._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb_signing_mode_type', None)) != ''):
          cifs_object.smb_signing_mode_type = mapping_dict.get('smb_signing_mode_type', None)
        else:
          cifs_object.smb_signing_mode_type._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb_signing_native_krb', None)) != ''):
          cifs_object.smb_signing_native_krb = mapping_dict.get('smb_signing_native_krb', None)
        else:
          cifs_object.smb_signing_native_krb._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smbv1_mode', None)) != ''):
          cifs_object.smbv1_mode = mapping_dict.get('smbv1_mode', None)
        else:
          cifs_object.smbv1_mode._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('cifs_prepop', None)) != ''):
          cifs_object.cifs_prepop = mapping_dict.get('cifs_prepop', None)
        else:
          cifs_object.cifs_prepop._empty_tag = True
      except TypeError:
        pass
      cifs_object_list.append(cifs_object)

      return cifs_object_list

  #XPATH devices/device/protocols/smb2
  class smb2(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb2_object_list = self.validate_inputs_form_payload(mapping_dict)

      for smb2_object in smb2_object_list:
        #fetch payload
        smb2_payload = smb2_object.getxml(filter=True)
        util.log_debug('smb2_payload %s'%smb2_payload)
        payload_list.append(smb2_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb2_object_list = self.validate_inputs_form_payload(mapping_dict)

      for smb2_object in smb2_object_list:
        #fetch payload
        smb2_payload = smb2_object.getxml(filter=True)

        util.log_debug('smb2_payload %s'%smb2_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=smb2_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb2_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/smb2"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, smb2_object in enumerate(smb2_object_list):
        #fetch payload
        smb2_payload = smb2_object.getxml(filter=True)

        util.log_debug('update smb2_payload %s'%smb2_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=smb2_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/smb2"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      smb2_object_list = []
      from servicemodel.controller.devices.device import protocols
      smb2_object = protocols.smb2.smb2()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2', None)) != ''):
          smb2_object.smb2 = mapping_dict.get('smb2', None)
        else:
          smb2_object.smb2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('decoder_check', None)) != ''):
          smb2_object.decoder_check = mapping_dict.get('decoder_check', None)
        else:
          smb2_object.decoder_check._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('dump_list_limit', None)) != ''):
          smb2_object.dump_list_limit = mapping_dict.get('dump_list_limit', None)
        else:
          smb2_object.dump_list_limit._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2_signing', None)) != ''):
          smb2_object.smb2_signing = mapping_dict.get('smb2_signing', None)
        else:
          smb2_object.smb2_signing._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2_signing_ntlm_bypass', None)) != ''):
          smb2_object.smb2_signing_ntlm_bypass = mapping_dict.get('smb2_signing_ntlm_bypass', None)
        else:
          smb2_object.smb2_signing_ntlm_bypass._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2_signing_mode_type', None)) != ''):
          smb2_object.smb2_signing_mode_type = mapping_dict.get('smb2_signing_mode_type', None)
        else:
          smb2_object.smb2_signing_mode_type._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2_native_krb', None)) != ''):
          smb2_object.smb2_native_krb = mapping_dict.get('smb2_native_krb', None)
        else:
          smb2_object.smb2_native_krb._empty_tag = True
      except TypeError:
        pass
      smb2_object_list.append(smb2_object)

      return smb2_object_list

  #XPATH devices/device/protocols/smb3
  class smb3(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb3_object_list = self.validate_inputs_form_payload(mapping_dict)

      for smb3_object in smb3_object_list:
        #fetch payload
        smb3_payload = smb3_object.getxml(filter=True)
        util.log_debug('smb3_payload %s'%smb3_payload)
        payload_list.append(smb3_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb3_object_list = self.validate_inputs_form_payload(mapping_dict)

      for smb3_object in smb3_object_list:
        #fetch payload
        smb3_payload = smb3_object.getxml(filter=True)

        util.log_debug('smb3_payload %s'%smb3_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=smb3_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      smb3_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/smb3"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, smb3_object in enumerate(smb3_object_list):
        #fetch payload
        smb3_payload = smb3_object.getxml(filter=True)

        util.log_debug('update smb3_payload %s'%smb3_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=smb3_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/smb3"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      smb3_object_list = []
      from servicemodel.controller.devices.device import protocols
      smb3_object = protocols.smb3.smb3()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb2', None)) != ''):
          smb3_object.smb2 = mapping_dict.get('smb2', None)
        else:
          smb3_object.smb2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('smb3_support', None)) != ''):
          smb3_object.smb3_support = mapping_dict.get('smb3_support', None)
        else:
          smb3_object.smb3_support._empty_tag = True
      except TypeError:
        pass
      smb3_object_list.append(smb3_object)

      return smb3_object_list

  #XPATH devices/device/protocols/http
  class http(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      http_object_list = self.validate_inputs_form_payload(mapping_dict)

      for http_object in http_object_list:
        #fetch payload
        http_payload = http_object.getxml(filter=True)
        util.log_debug('http_payload %s'%http_payload)
        payload_list.append(http_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      http_object_list = self.validate_inputs_form_payload(mapping_dict)

      for http_object in http_object_list:
        #fetch payload
        http_payload = http_object.getxml(filter=True)

        util.log_debug('http_payload %s'%http_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=http_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      http_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/http"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, http_object in enumerate(http_object_list):
        #fetch payload
        http_payload = http_object.getxml(filter=True)

        util.log_debug('update http_payload %s'%http_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=http_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/http"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      http_object_list = []
      from servicemodel.controller.devices.device import protocols
      http_object = protocols.http.http()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http', None)) != ''):
          http_object.http = mapping_dict.get('http', None)
        else:
          http_object.http._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http_prepop', None)) != ''):
          http_object.http_prepop = mapping_dict.get('http_prepop', None)
        else:
          http_object.http_prepop._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http_prepop_list', None)) != ''):
          http_object.http_prepop_list = mapping_dict.get('http_prepop_list', None)
        else:
          http_object.http_prepop_list._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http_prepop_verify_svr_cert', None)) != ''):
          http_object.http_prepop_verify_svr_cert = mapping_dict.get('http_prepop_verify_svr_cert', None)
        else:
          http_object.http_prepop_verify_svr_cert._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('metadata_resp_extension', None)) != ''):
          http_object.metadata_resp_extension = mapping_dict.get('metadata_resp_extension', None)
        else:
          http_object.metadata_resp_extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('metadata_resp_max_time', None)) != ''):
          http_object.metadata_resp_max_time = mapping_dict.get('metadata_resp_max_time', None)
        else:
          http_object.metadata_resp_max_time._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('metadata_resp_min_time', None)) != ''):
          http_object.metadata_resp_min_time = mapping_dict.get('metadata_resp_min_time', None)
        else:
          http_object.metadata_resp_min_time._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('metadata_resp_mode', None)) != ''):
          http_object.metadata_resp_mode = mapping_dict.get('metadata_resp_mode', None)
        else:
          http_object.metadata_resp_mode._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('auto_config', None)) != ''):
          http_object.auto_config = mapping_dict.get('auto_config', None)
        else:
          http_object.auto_config._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('auto_config_selection', None)) != ''):
          http_object.auto_config_selection = mapping_dict.get('auto_config_selection', None)
        else:
          http_object.auto_config_selection._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http_native_krb', None)) != ''):
          http_object.http_native_krb = mapping_dict.get('http_native_krb', None)
        else:
          http_object.http_native_krb._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('http_prefetch', None)) != ''):
          http_object.http_prefetch = mapping_dict.get('http_prefetch', None)
        else:
          http_object.http_prefetch._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('extension', None)) != ''):
          http_object.extension = mapping_dict.get('extension', None)
        else:
          http_object.extension._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
          http_object.tag = mapping_dict.get('tag', None)
        else:
          http_object.tag._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('tag_attribute', None)) != ''):
          http_object.tag_attribute = mapping_dict.get('tag_attribute', None)
        else:
          http_object.tag_attribute._empty_tag = True
      except TypeError:
        pass
      http_object_list.append(http_object)

      return http_object_list

    #XPATH devices/device/protocols/http/http-server-table
    class http_server_table(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/http"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        http_server_table_object_list = self.validate_inputs_form_payload(mapping_dict)

        for http_server_table_object in http_server_table_object_list:
          #fetch payload
          http_server_table_payload = http_server_table_object.getxml(filter=True)
          util.log_debug('http_server_table_payload %s'%http_server_table_payload)
          payload_list.append(http_server_table_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/http"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        http_server_table_object_list = self.validate_inputs_form_payload(mapping_dict)

        for http_server_table_object in http_server_table_object_list:
          #fetch payload
          http_server_table_payload = http_server_table_object.getxml(filter=True)

          util.log_debug('http_server_table_payload %s'%http_server_table_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=http_server_table_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/http"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        http_server_table_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        server_table = mapping_dict.get('server_table')
        if not isinstance(server_table, list):
          server_table = [server_table]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_table_iterator in server_table:
          rcpath_tmp =  rcpath+"/http-server-table=%s"%(util.make_interfacename(server_table_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, http_server_table_object in enumerate(http_server_table_object_list):
          #fetch payload
          http_server_table_payload = http_server_table_object.getxml(filter=True)

          util.log_debug('update http_server_table_payload %s'%http_server_table_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=http_server_table_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/http"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('server_table')):
          raise Exception("'server_table' cannot be empty")

        #convert keys to list
        server_table = mapping_dict.get('server_table')
        if not isinstance(server_table, list):
          server_table = [server_table]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_table_iterator in server_table:
          rcpath_tmp =  rcpath+"/http-server-table=%s"%(util.make_interfacename(server_table_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('server_table')):
          raise Exception("'server_table' cannot be empty")

        #convert keys to list
        server_table = mapping_dict.get('server_table')
        if not isinstance(server_table, list):
          server_table = [server_table]

        #prepare payload
        http_server_table_object_list = []
        for server_table_iterator in server_table:
          from servicemodel.controller.devices.device.protocols import http
          http_server_table_object = http.http_server_table.http_server_table()
          http_server_table_object.server_table = server_table_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('subnet', None)) != ''):
              http_server_table_object.subnet = mapping_dict.get('subnet', None)
            else:
              http_server_table_object.subnet._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('hostname', None)) != ''):
              http_server_table_object.hostname = mapping_dict.get('hostname', None)
            else:
              http_server_table_object.hostname._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('obj_pref_table', None)) != ''):
              http_server_table_object.obj_pref_table = mapping_dict.get('obj_pref_table', None)
            else:
              http_server_table_object.obj_pref_table._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('parse_prefetch', None)) != ''):
              http_server_table_object.parse_prefetch = mapping_dict.get('parse_prefetch', None)
            else:
              http_server_table_object.parse_prefetch._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('url_learning', None)) != ''):
              http_server_table_object.url_learning = mapping_dict.get('url_learning', None)
            else:
              http_server_table_object.url_learning._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('reuse_auth', None)) != ''):
              http_server_table_object.reuse_auth = mapping_dict.get('reuse_auth', None)
            else:
              http_server_table_object.reuse_auth._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('strip_auth_hdr', None)) != ''):
              http_server_table_object.strip_auth_hdr = mapping_dict.get('strip_auth_hdr', None)
            else:
              http_server_table_object.strip_auth_hdr._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('stream_split', None)) != ''):
              http_server_table_object.stream_split = mapping_dict.get('stream_split', None)
            else:
              http_server_table_object.stream_split._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('gratuitous_401', None)) != ''):
              http_server_table_object.gratuitous_401 = mapping_dict.get('gratuitous_401', None)
            else:
              http_server_table_object.gratuitous_401._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('force_nego_ntlm', None)) != ''):
              http_server_table_object.force_nego_ntlm = mapping_dict.get('force_nego_ntlm', None)
            else:
              http_server_table_object.force_nego_ntlm._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('strip_compress', None)) != ''):
              http_server_table_object.strip_compress = mapping_dict.get('strip_compress', None)
            else:
              http_server_table_object.strip_compress._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('insert_cookie', None)) != ''):
              http_server_table_object.insert_cookie = mapping_dict.get('insert_cookie', None)
            else:
              http_server_table_object.insert_cookie._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('insrt_keep_aliv', None)) != ''):
              http_server_table_object.insrt_keep_aliv = mapping_dict.get('insrt_keep_aliv', None)
            else:
              http_server_table_object.insrt_keep_aliv._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('fpse', None)) != ''):
              http_server_table_object.fpse = mapping_dict.get('fpse', None)
            else:
              http_server_table_object.fpse._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('webdav', None)) != ''):
              http_server_table_object.webdav = mapping_dict.get('webdav', None)
            else:
              http_server_table_object.webdav._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('fsshttp', None)) != ''):
              http_server_table_object.fsshttp = mapping_dict.get('fsshttp', None)
            else:
              http_server_table_object.fsshttp._empty_tag = True
          except TypeError:
            pass
          http_server_table_object_list.append(http_server_table_object)

        return http_server_table_object_list

  #XPATH devices/device/protocols/oracle-forms
  class oracle_forms(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      oracle_forms_object_list = self.validate_inputs_form_payload(mapping_dict)

      for oracle_forms_object in oracle_forms_object_list:
        #fetch payload
        oracle_forms_payload = oracle_forms_object.getxml(filter=True)
        util.log_debug('oracle_forms_payload %s'%oracle_forms_payload)
        payload_list.append(oracle_forms_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      oracle_forms_object_list = self.validate_inputs_form_payload(mapping_dict)

      for oracle_forms_object in oracle_forms_object_list:
        #fetch payload
        oracle_forms_payload = oracle_forms_object.getxml(filter=True)

        util.log_debug('oracle_forms_payload %s'%oracle_forms_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=oracle_forms_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      oracle_forms_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/oracle-forms"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, oracle_forms_object in enumerate(oracle_forms_object_list):
        #fetch payload
        oracle_forms_payload = oracle_forms_object.getxml(filter=True)

        util.log_debug('update oracle_forms_payload %s'%oracle_forms_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=oracle_forms_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/oracle-forms"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      oracle_forms_object_list = []
      from servicemodel.controller.devices.device import protocols
      oracle_forms_object = protocols.oracle_forms.oracle_forms()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oracle_forms_enable', None)) != ''):
          oracle_forms_object.oracle_forms_enable = mapping_dict.get('oracle_forms_enable', None)
        else:
          oracle_forms_object.oracle_forms_enable._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('oracle_forms_http_enable', None)) != ''):
          oracle_forms_object.oracle_forms_http_enable = mapping_dict.get('oracle_forms_http_enable', None)
        else:
          oracle_forms_object.oracle_forms_http_enable._empty_tag = True
      except TypeError:
        pass
      oracle_forms_object_list.append(oracle_forms_object)

      return oracle_forms_object_list

  #XPATH devices/device/protocols/mapi
  class mapi(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mapi_object_list = self.validate_inputs_form_payload(mapping_dict)

      for mapi_object in mapi_object_list:
        #fetch payload
        mapi_payload = mapi_object.getxml(filter=True)
        util.log_debug('mapi_payload %s'%mapi_payload)
        payload_list.append(mapi_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mapi_object_list = self.validate_inputs_form_payload(mapping_dict)

      for mapi_object in mapi_object_list:
        #fetch payload
        mapi_payload = mapi_object.getxml(filter=True)

        util.log_debug('mapi_payload %s'%mapi_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=mapi_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mapi_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/mapi"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, mapi_object in enumerate(mapi_object_list):
        #fetch payload
        mapi_payload = mapi_object.getxml(filter=True)

        util.log_debug('update mapi_payload %s'%mapi_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=mapi_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/mapi"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      mapi_object_list = []
      from servicemodel.controller.devices.device import protocols
      mapi_object = protocols.mapi.mapi()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_enable', None)) != ''):
          mapi_object.mapi_enable = mapping_dict.get('mapi_enable', None)
        else:
          mapi_object.mapi_enable._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_port', None)) != ''):
          mapi_object.mapi_port = mapping_dict.get('mapi_port', None)
        else:
          mapi_object.mapi_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('outlook_anywhr', None)) != ''):
          mapi_object.outlook_anywhr = mapping_dict.get('outlook_anywhr', None)
        else:
          mapi_object.outlook_anywhr._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ex365domain', None)) != ''):
          mapi_object.ex365domain = mapping_dict.get('ex365domain', None)
        else:
          mapi_object.ex365domain._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_encrypted', None)) != ''):
          mapi_object.mapi_encrypted = mapping_dict.get('mapi_encrypted', None)
        else:
          mapi_object.mapi_encrypted._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_ntlm_auth', None)) != ''):
          mapi_object.mapi_ntlm_auth = mapping_dict.get('mapi_ntlm_auth', None)
        else:
          mapi_object.mapi_ntlm_auth._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_encrypted_delegation', None)) != ''):
          mapi_object.mapi_encrypted_delegation = mapping_dict.get('mapi_encrypted_delegation', None)
        else:
          mapi_object.mapi_encrypted_delegation._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_native_krb', None)) != ''):
          mapi_object.mapi_native_krb = mapping_dict.get('mapi_native_krb', None)
        else:
          mapi_object.mapi_native_krb._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_encyprted_ntlm_bypass', None)) != ''):
          mapi_object.mapi_encyprted_ntlm_bypass = mapping_dict.get('mapi_encyprted_ntlm_bypass', None)
        else:
          mapi_object.mapi_encyprted_ntlm_bypass._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_multi_auth', None)) != ''):
          mapi_object.mapi_multi_auth = mapping_dict.get('mapi_multi_auth', None)
        else:
          mapi_object.mapi_multi_auth._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_prepop', None)) != ''):
          mapi_object.mapi_prepop = mapping_dict.get('mapi_prepop', None)
        else:
          mapi_object.mapi_prepop._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_prepop_max_connections', None)) != ''):
          mapi_object.mapi_prepop_max_connections = mapping_dict.get('mapi_prepop_max_connections', None)
        else:
          mapi_object.mapi_prepop_max_connections._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_prepop_poll_interval', None)) != ''):
          mapi_object.mapi_prepop_poll_interval = mapping_dict.get('mapi_prepop_poll_interval', None)
        else:
          mapi_object.mapi_prepop_poll_interval._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_prepop_timeout', None)) != ''):
          mapi_object.mapi_prepop_timeout = mapping_dict.get('mapi_prepop_timeout', None)
        else:
          mapi_object.mapi_prepop_timeout._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('mapi_port_remap', None)) != ''):
          mapi_object.mapi_port_remap = mapping_dict.get('mapi_port_remap', None)
        else:
          mapi_object.mapi_port_remap._empty_tag = True
      except TypeError:
        pass
      mapi_object_list.append(mapi_object)

      return mapi_object_list

  #XPATH devices/device/protocols/nfs
  class nfs(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      nfs_object_list = self.validate_inputs_form_payload(mapping_dict)

      for nfs_object in nfs_object_list:
        #fetch payload
        nfs_payload = nfs_object.getxml(filter=True)
        util.log_debug('nfs_payload %s'%nfs_payload)
        payload_list.append(nfs_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      nfs_object_list = self.validate_inputs_form_payload(mapping_dict)

      for nfs_object in nfs_object_list:
        #fetch payload
        nfs_payload = nfs_object.getxml(filter=True)

        util.log_debug('nfs_payload %s'%nfs_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=nfs_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      nfs_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/nfs"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, nfs_object in enumerate(nfs_object_list):
        #fetch payload
        nfs_payload = nfs_object.getxml(filter=True)

        util.log_debug('update nfs_payload %s'%nfs_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=nfs_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/nfs"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      nfs_object_list = []
      from servicemodel.controller.devices.device import protocols
      nfs_object = protocols.nfs.nfs()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('nfs_enable', None)) != ''):
          nfs_object.nfs_enable = mapping_dict.get('nfs_enable', None)
        else:
          nfs_object.nfs_enable._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('nfs_v2_v4_alarm', None)) != ''):
          nfs_object.nfs_v2_v4_alarm = mapping_dict.get('nfs_v2_v4_alarm', None)
        else:
          nfs_object.nfs_v2_v4_alarm._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('nfs_alarm', None)) != ''):
          nfs_object.nfs_alarm = mapping_dict.get('nfs_alarm', None)
        else:
          nfs_object.nfs_alarm._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('nfs_default_server', None)) != ''):
          nfs_object.nfs_default_server = mapping_dict.get('nfs_default_server', None)
        else:
          nfs_object.nfs_default_server._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('policy', None)) != ''):
          nfs_object.policy = mapping_dict.get('policy', None)
        else:
          nfs_object.policy._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('read_ahead', None)) != ''):
          nfs_object.read_ahead = mapping_dict.get('read_ahead', None)
        else:
          nfs_object.read_ahead._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('transfer_size', None)) != ''):
          nfs_object.transfer_size = mapping_dict.get('transfer_size', None)
        else:
          nfs_object.transfer_size._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('read_dir', None)) != ''):
          nfs_object.read_dir = mapping_dict.get('read_dir', None)
        else:
          nfs_object.read_dir._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('read_size', None)) != ''):
          nfs_object.read_size = mapping_dict.get('read_size', None)
        else:
          nfs_object.read_size._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('threshold_multiple', None)) != ''):
          nfs_object.threshold_multiple = mapping_dict.get('threshold_multiple', None)
        else:
          nfs_object.threshold_multiple._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('write', None)) != ''):
          nfs_object.write = mapping_dict.get('write', None)
        else:
          nfs_object.write._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('write_maxdata', None)) != ''):
          nfs_object.write_maxdata = mapping_dict.get('write_maxdata', None)
        else:
          nfs_object.write_maxdata._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('nfs_default_volume', None)) != ''):
          nfs_object.nfs_default_volume = mapping_dict.get('nfs_default_volume', None)
        else:
          nfs_object.nfs_default_volume._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('default_volume_policy', None)) != ''):
          nfs_object.default_volume_policy = mapping_dict.get('default_volume_policy', None)
        else:
          nfs_object.default_volume_policy._empty_tag = True
      except TypeError:
        pass
      nfs_object_list.append(nfs_object)

      return nfs_object_list

    #XPATH devices/device/protocols/nfs/nfs-server
    class nfs_server(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/nfs"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nfs_server_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nfs_server_object in nfs_server_object_list:
          #fetch payload
          nfs_server_payload = nfs_server_object.getxml(filter=True)
          util.log_debug('nfs_server_payload %s'%nfs_server_payload)
          payload_list.append(nfs_server_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/nfs"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nfs_server_object_list = self.validate_inputs_form_payload(mapping_dict)

        for nfs_server_object in nfs_server_object_list:
          #fetch payload
          nfs_server_payload = nfs_server_object.getxml(filter=True)

          util.log_debug('nfs_server_payload %s'%nfs_server_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=nfs_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/nfs"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        nfs_server_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        server_name = mapping_dict.get('server_name')
        if not isinstance(server_name, list):
          server_name = [server_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_name_iterator in server_name:
          rcpath_tmp =  rcpath+"/nfs-server=%s"%(util.make_interfacename(server_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, nfs_server_object in enumerate(nfs_server_object_list):
          #fetch payload
          nfs_server_payload = nfs_server_object.getxml(filter=True)

          util.log_debug('update nfs_server_payload %s'%nfs_server_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=nfs_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:protocols/nfs"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('server_name')):
          raise Exception("'server_name' cannot be empty")

        #convert keys to list
        server_name = mapping_dict.get('server_name')
        if not isinstance(server_name, list):
          server_name = [server_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_name_iterator in server_name:
          rcpath_tmp =  rcpath+"/nfs-server=%s"%(util.make_interfacename(server_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('server_name')):
          raise Exception("'server_name' cannot be empty")

        #convert keys to list
        server_name = mapping_dict.get('server_name')
        if not isinstance(server_name, list):
          server_name = [server_name]

        #prepare payload
        nfs_server_object_list = []
        for server_name_iterator in server_name:
          from servicemodel.controller.devices.device.protocols import nfs
          nfs_server_object = nfs.nfs_server.nfs_server()
          nfs_server_object.server_name = server_name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('nfs_server', None)) != ''):
              nfs_server_object.nfs_server = mapping_dict.get('nfs_server', None)
            else:
              nfs_server_object.nfs_server._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('default_volume', None)) != ''):
              nfs_server_object.default_volume = mapping_dict.get('default_volume', None)
            else:
              nfs_server_object.default_volume._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('policy', None)) != ''):
              nfs_server_object.policy = mapping_dict.get('policy', None)
            else:
              nfs_server_object.policy._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
              nfs_server_object.ip_address = mapping_dict.get('ip_address', None)
            else:
              nfs_server_object.ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('read_ahead', None)) != ''):
              nfs_server_object.read_ahead = mapping_dict.get('read_ahead', None)
            else:
              nfs_server_object.read_ahead._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('transfer_size', None)) != ''):
              nfs_server_object.transfer_size = mapping_dict.get('transfer_size', None)
            else:
              nfs_server_object.transfer_size._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('read_dir', None)) != ''):
              nfs_server_object.read_dir = mapping_dict.get('read_dir', None)
            else:
              nfs_server_object.read_dir._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('read_size', None)) != ''):
              nfs_server_object.read_size = mapping_dict.get('read_size', None)
            else:
              nfs_server_object.read_size._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('volume_id', None)) != ''):
              nfs_server_object.volume_id = mapping_dict.get('volume_id', None)
            else:
              nfs_server_object.volume_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('volume', None)) != ''):
              nfs_server_object.volume = mapping_dict.get('volume', None)
            else:
              nfs_server_object.volume._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('write', None)) != ''):
              nfs_server_object.write = mapping_dict.get('write', None)
            else:
              nfs_server_object.write._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('write_maxdata', None)) != ''):
              nfs_server_object.write_maxdata = mapping_dict.get('write_maxdata', None)
            else:
              nfs_server_object.write_maxdata._empty_tag = True
          except TypeError:
            pass
          nfs_server_object_list.append(nfs_server_object)

        return nfs_server_object_list

  #XPATH devices/device/protocols/citrix
  class citrix(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      citrix_object_list = self.validate_inputs_form_payload(mapping_dict)

      for citrix_object in citrix_object_list:
        #fetch payload
        citrix_payload = citrix_object.getxml(filter=True)
        util.log_debug('citrix_payload %s'%citrix_payload)
        payload_list.append(citrix_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      citrix_object_list = self.validate_inputs_form_payload(mapping_dict)

      for citrix_object in citrix_object_list:
        #fetch payload
        citrix_payload = citrix_object.getxml(filter=True)

        util.log_debug('citrix_payload %s'%citrix_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=citrix_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      citrix_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/citrix"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, citrix_object in enumerate(citrix_object_list):
        #fetch payload
        citrix_payload = citrix_object.getxml(filter=True)

        util.log_debug('update citrix_payload %s'%citrix_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=citrix_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/citrix"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      citrix_object_list = []
      from servicemodel.controller.devices.device import protocols
      citrix_object = protocols.citrix.citrix()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('citrix_optimization', None)) != ''):
          citrix_object.citrix_optimization = mapping_dict.get('citrix_optimization', None)
        else:
          citrix_object.citrix_optimization._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('ica_port', None)) != ''):
          citrix_object.ica_port = mapping_dict.get('ica_port', None)
        else:
          citrix_object.ica_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('session_reliability_port', None)) != ''):
          citrix_object.session_reliability_port = mapping_dict.get('session_reliability_port', None)
        else:
          citrix_object.session_reliability_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('secure_ica_encryption', None)) != ''):
          citrix_object.secure_ica_encryption = mapping_dict.get('secure_ica_encryption', None)
        else:
          citrix_object.secure_ica_encryption._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('client_device_mapping', None)) != ''):
          citrix_object.client_device_mapping = mapping_dict.get('client_device_mapping', None)
        else:
          citrix_object.client_device_mapping._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('auto_msi', None)) != ''):
          citrix_object.auto_msi = mapping_dict.get('auto_msi', None)
        else:
          citrix_object.auto_msi._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('multiport_ica', None)) != ''):
          citrix_object.multiport_ica = mapping_dict.get('multiport_ica', None)
        else:
          citrix_object.multiport_ica._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('priority_0_port', None)) != ''):
          citrix_object.priority_0_port = mapping_dict.get('priority_0_port', None)
        else:
          citrix_object.priority_0_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('priority_1_port', None)) != ''):
          citrix_object.priority_1_port = mapping_dict.get('priority_1_port', None)
        else:
          citrix_object.priority_1_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('priority_2_port', None)) != ''):
          citrix_object.priority_2_port = mapping_dict.get('priority_2_port', None)
        else:
          citrix_object.priority_2_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('priority_3_port', None)) != ''):
          citrix_object.priority_3_port = mapping_dict.get('priority_3_port', None)
        else:
          citrix_object.priority_3_port._empty_tag = True
      except TypeError:
        pass
      citrix_object_list.append(citrix_object)

      return citrix_object_list

  #XPATH devices/device/protocols/lotus-notes
  class lotus_notes(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lotus_notes_object_list = self.validate_inputs_form_payload(mapping_dict)

      for lotus_notes_object in lotus_notes_object_list:
        #fetch payload
        lotus_notes_payload = lotus_notes_object.getxml(filter=True)
        util.log_debug('lotus_notes_payload %s'%lotus_notes_payload)
        payload_list.append(lotus_notes_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lotus_notes_object_list = self.validate_inputs_form_payload(mapping_dict)

      for lotus_notes_object in lotus_notes_object_list:
        #fetch payload
        lotus_notes_payload = lotus_notes_object.getxml(filter=True)

        util.log_debug('lotus_notes_payload %s'%lotus_notes_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=lotus_notes_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lotus_notes_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/lotus-notes"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, lotus_notes_object in enumerate(lotus_notes_object_list):
        #fetch payload
        lotus_notes_payload = lotus_notes_object.getxml(filter=True)

        util.log_debug('update lotus_notes_payload %s'%lotus_notes_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=lotus_notes_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:protocols"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/lotus-notes"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      lotus_notes_object_list = []
      from servicemodel.controller.devices.device import protocols
      lotus_notes_object = protocols.lotus_notes.lotus_notes()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('lotus_notes_optimization', None)) != ''):
          lotus_notes_object.lotus_notes_optimization = mapping_dict.get('lotus_notes_optimization', None)
        else:
          lotus_notes_object.lotus_notes_optimization._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('lotus_notes_port', None)) != ''):
          lotus_notes_object.lotus_notes_port = mapping_dict.get('lotus_notes_port', None)
        else:
          lotus_notes_object.lotus_notes_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('encrypted_lotus_notes_optimization', None)) != ''):
          lotus_notes_object.encrypted_lotus_notes_optimization = mapping_dict.get('encrypted_lotus_notes_optimization', None)
        else:
          lotus_notes_object.encrypted_lotus_notes_optimization._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('unencrypted_server_port', None)) != ''):
          lotus_notes_object.unencrypted_server_port = mapping_dict.get('unencrypted_server_port', None)
        else:
          lotus_notes_object.unencrypted_server_port._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('protocol', None)) != ''):
          lotus_notes_object.protocol = mapping_dict.get('protocol', None)
        else:
          lotus_notes_object.protocol._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('username', None)) != ''):
          lotus_notes_object.username = mapping_dict.get('username', None)
        else:
          lotus_notes_object.username._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
          lotus_notes_object.password = mapping_dict.get('password', None)
        else:
          lotus_notes_object.password._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('server', None)) != ''):
          lotus_notes_object.server = mapping_dict.get('server', None)
        else:
          lotus_notes_object.server._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('path', None)) != ''):
          lotus_notes_object.path = mapping_dict.get('path', None)
        else:
          lotus_notes_object.path._empty_tag = True
      except TypeError:
        pass
      lotus_notes_object_list.append(lotus_notes_object)

      return lotus_notes_object_list

