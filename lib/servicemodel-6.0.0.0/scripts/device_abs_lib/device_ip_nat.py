#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class ip_nat(object):
  #XPATH devices/device/ip-nat/address-translation
  class address_translation(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:ip-nat"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_translation_object_list = self.validate_inputs_form_payload(mapping_dict)

      for address_translation_object in address_translation_object_list:
        #fetch payload
        address_translation_payload = address_translation_object.getxml(filter=True)
        util.log_debug('address_translation_payload %s'%address_translation_payload)
        payload_list.append(address_translation_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:ip-nat"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_translation_object_list = self.validate_inputs_form_payload(mapping_dict)

      for address_translation_object in address_translation_object_list:
        #fetch payload
        address_translation_payload = address_translation_object.getxml(filter=True)

        util.log_debug('address_translation_payload %s'%address_translation_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_translation_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-nat"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      address_translation_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      nat_list = mapping_dict.get('nat_list')
      if not isinstance(nat_list, list):
        nat_list = [nat_list]
      value = mapping_dict.get('value')
      if not isinstance(value, list):
        value = [value]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for nat_list_iterator in nat_list:
        for value_iterator in value:
          rcpath_tmp =  rcpath+"/address-translation=%s,%s"%(util.make_interfacename(nat_list_iterator),util.make_interfacename(value_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, address_translation_object in enumerate(address_translation_object_list):
        #fetch payload
        address_translation_payload = address_translation_object.getxml(filter=True)

        util.log_debug('update address_translation_payload %s'%address_translation_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_translation_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-nat"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('nat_list')):
        raise Exception("'nat_list' cannot be empty")
      if util.isEmpty(mapping_dict.get('value')):
        raise Exception("'value' cannot be empty")

      #convert keys to list
      nat_list = mapping_dict.get('nat_list')
      if not isinstance(nat_list, list):
        nat_list = [nat_list]
      value = mapping_dict.get('value')
      if not isinstance(value, list):
        value = [value]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for nat_list_iterator in nat_list:
        for value_iterator in value:
          rcpath_tmp =  rcpath+"/address-translation=%s,%s"%(util.make_interfacename(nat_list_iterator),util.make_interfacename(value_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('nat_list')):
        raise Exception("'nat_list' cannot be empty")
      if util.isEmpty(mapping_dict.get('value')):
        raise Exception("'value' cannot be empty")

      #convert keys to list
      nat_list = mapping_dict.get('nat_list')
      if not isinstance(nat_list, list):
        nat_list = [nat_list]
      value = mapping_dict.get('value')
      if not isinstance(value, list):
        value = [value]

      #prepare payload
      address_translation_object_list = []
      for nat_list_iterator in nat_list:
        for value_iterator in value:
          from servicemodel.controller.devices.device import ip_nat
          address_translation_object = ip_nat.address_translation.address_translation()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('side', None)) != ''):
              address_translation_object.side = mapping_dict.get('side', None)
            else:
              address_translation_object.side._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('address_translation', None)) != ''):
              address_translation_object.address_translation = mapping_dict.get('address_translation', None)
            else:
              address_translation_object.address_translation._empty_tag = True
          except TypeError:
            pass
          address_translation_object.nat_list = nat_list_iterator
          address_translation_object.value = value_iterator
          address_translation_object_list.append(address_translation_object)

      return address_translation_object_list

    #XPATH devices/device/ip-nat/address-translation/pool
    class pool(AbstractDeviceMgr):
      key_hints = [['nat_list','value']]
      def getRcpathPayload(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pool_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pool_object in pool_object_list:
          #fetch payload
          pool_payload = pool_object.getxml(filter=True)
          util.log_debug('pool_payload %s'%pool_payload)
          payload_list.append(pool_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)

        #convert parent keys to list
        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pool_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pool_object in pool_object_list:
          #fetch payload
          pool_payload = pool_object.getxml(filter=True)

          util.log_debug('pool_payload %s'%pool_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=pool_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)


        ##prepare rcpath
        rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pool_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        pool_name = mapping_dict.get('pool_name')
        if not isinstance(pool_name, list):
          pool_name = [pool_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for pool_name_iterator in pool_name:
          rcpath_tmp =  rcpath+"/pool=%s"%(util.make_interfacename(pool_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, pool_object in enumerate(pool_object_list):
          #fetch payload
          pool_payload = pool_object.getxml(filter=True)

          util.log_debug('update pool_payload %s'%pool_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=pool_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)


        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('pool_name')):
          raise Exception("'pool_name' cannot be empty")

        #convert keys to list
        pool_name = mapping_dict.get('pool_name')
        if not isinstance(pool_name, list):
          pool_name = [pool_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for pool_name_iterator in pool_name:
          rcpath_tmp =  rcpath+"/pool=%s"%(util.make_interfacename(pool_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, address_translation_nat_list, address_translation_value):
        #Parent Key Validations
        if util.isEmpty(address_translation_nat_list):
          raise Exception("'address_translation_nat_list' cannot be empty")
        if util.isEmpty(address_translation_value):
          raise Exception("'address_translation_value' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('pool_name')):
          raise Exception("'pool_name' cannot be empty")

        #convert keys to list
        pool_name = mapping_dict.get('pool_name')
        if not isinstance(pool_name, list):
          pool_name = [pool_name]

        #prepare payload
        pool_object_list = []
        for pool_name_iterator in pool_name:
          from servicemodel.controller.devices.device.ip_nat import address_translation
          pool_object = address_translation.pool.pool()
          pool_object.pool_name = pool_name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('redundancy_id', None)) != ''):
              pool_object.redundancy_id = mapping_dict.get('redundancy_id', None)
            else:
              pool_object.redundancy_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('mapping_id', None)) != ''):
              pool_object.mapping_id = mapping_dict.get('mapping_id', None)
            else:
              pool_object.mapping_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
              pool_object.vrf = mapping_dict.get('vrf', None)
            else:
              pool_object.vrf._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('overload', None)) != ''):
              pool_object.overload = mapping_dict.get('overload', None)
            else:
              pool_object.overload._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('oer', None)) != ''):
              pool_object.oer = mapping_dict.get('oer', None)
            else:
              pool_object.oer._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('match_in_vrf', None)) != ''):
              pool_object.match_in_vrf = mapping_dict.get('match_in_vrf', None)
            else:
              pool_object.match_in_vrf._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('extended', None)) != ''):
              pool_object.extended = mapping_dict.get('extended', None)
            else:
              pool_object.extended._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('add_route', None)) != ''):
              pool_object.add_route = mapping_dict.get('add_route', None)
            else:
              pool_object.add_route._empty_tag = True
          except TypeError:
            pass
          pool_object_list.append(pool_object)

        return pool_object_list

    #XPATH devices/device/ip-nat/address-translation/interface
    class interface(AbstractDeviceMgr):
      key_hints = [['nat_list','value']]
      def getRcpathPayload(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)
          util.log_debug('interface_payload %s'%interface_payload)
          payload_list.append(interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)

        #convert parent keys to list
        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('interface_payload %s'%interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)


        ##prepare rcpath
        rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_name_iterator in interface_name:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, interface_object in enumerate(interface_object_list):
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('update interface_payload %s'%interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, address_translation_nat_list, address_translation_value, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( address_translation_nat_list, address_translation_value)


        if not isinstance(address_translation_nat_list, list):
          address_translation_nat_list_list = [address_translation_nat_list]
        else:
          address_translation_nat_list_list = address_translation_nat_list
        if not isinstance(address_translation_value, list):
          address_translation_value_list = [address_translation_value]
        else:
          address_translation_value_list = address_translation_value

        for address_translation_nat_list in address_translation_nat_list_list:
          for address_translation_value in address_translation_value_list:
            ##prepare rcpath
            rcpath = "l3features:ip-nat/address-translation=%s,%s"%(util.make_interfacename(address_translation_nat_list),util.make_interfacename(address_translation_value))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_name')):
          raise Exception("'interface_name' cannot be empty")

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for interface_name_iterator in interface_name:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, address_translation_nat_list, address_translation_value):
        #Parent Key Validations
        if util.isEmpty(address_translation_nat_list):
          raise Exception("'address_translation_nat_list' cannot be empty")
        if util.isEmpty(address_translation_value):
          raise Exception("'address_translation_value' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('interface_name')):
          raise Exception("'interface_name' cannot be empty")

        #convert keys to list
        interface_name = mapping_dict.get('interface_name')
        if not isinstance(interface_name, list):
          interface_name = [interface_name]

        #prepare payload
        interface_object_list = []
        for interface_name_iterator in interface_name:
          from servicemodel.controller.devices.device.ip_nat import address_translation
          interface_object = address_translation.interface.interface()
          interface_object.interface_name = interface_name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
              interface_object.vrf = mapping_dict.get('vrf', None)
            else:
              interface_object.vrf._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('overload', None)) != ''):
              interface_object.overload = mapping_dict.get('overload', None)
            else:
              interface_object.overload._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('oer', None)) != ''):
              interface_object.oer = mapping_dict.get('oer', None)
            else:
              interface_object.oer._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('extended', None)) != ''):
              interface_object.extended = mapping_dict.get('extended', None)
            else:
              interface_object.extended._empty_tag = True
          except TypeError:
            pass
          interface_object_list.append(interface_object)

        return interface_object_list

