#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class ip_sla(object):
  #XPATH devices/device/ip-sla/sla
  class sla(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      sla_object_list = self.validate_inputs_form_payload(mapping_dict)

      for sla_object in sla_object_list:
        #fetch payload
        sla_payload = sla_object.getxml(filter=True)
        util.log_debug('sla_payload %s'%sla_payload)
        payload_list.append(sla_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      sla_object_list = self.validate_inputs_form_payload(mapping_dict)

      for sla_object in sla_object_list:
        #fetch payload
        sla_payload = sla_object.getxml(filter=True)

        util.log_debug('sla_payload %s'%sla_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sla_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      sla_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      entry_number = mapping_dict.get('entry_number')
      if not isinstance(entry_number, list):
        entry_number = [entry_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for entry_number_iterator in entry_number:
        rcpath_tmp =  rcpath+"/sla=%s"%(util.make_interfacename(entry_number_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, sla_object in enumerate(sla_object_list):
        #fetch payload
        sla_payload = sla_object.getxml(filter=True)

        util.log_debug('update sla_payload %s'%sla_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sla_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('entry_number')):
        raise Exception("'entry_number' cannot be empty")

      #convert keys to list
      entry_number = mapping_dict.get('entry_number')
      if not isinstance(entry_number, list):
        entry_number = [entry_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for entry_number_iterator in entry_number:
        rcpath_tmp =  rcpath+"/sla=%s"%(util.make_interfacename(entry_number_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('entry_number')):
        raise Exception("'entry_number' cannot be empty")

      #convert keys to list
      entry_number = mapping_dict.get('entry_number')
      if not isinstance(entry_number, list):
        entry_number = [entry_number]

      #prepare payload
      sla_object_list = []
      for entry_number_iterator in entry_number:
        from servicemodel.controller.devices.device import ip_sla
        sla_object = ip_sla.sla.sla()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
            sla_object.vrf_name = mapping_dict.get('vrf_name', None)
          else:
            sla_object.vrf_name._empty_tag = True
        except TypeError:
          pass
        sla_object.entry_number = entry_number_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('operation_type', None)) != ''):
            sla_object.operation_type = mapping_dict.get('operation_type', None)
          else:
            sla_object.operation_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('http_request_type', None)) != ''):
            sla_object.http_request_type = mapping_dict.get('http_request_type', None)
          else:
            sla_object.http_request_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('http_url', None)) != ''):
            sla_object.http_url = mapping_dict.get('http_url', None)
          else:
            sla_object.http_url._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('http_raw_request', None)) != ''):
            sla_object.http_raw_request = mapping_dict.get('http_raw_request', None)
          else:
            sla_object.http_raw_request._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('destination', None)) != ''):
            sla_object.destination = mapping_dict.get('destination', None)
          else:
            sla_object.destination._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source', None)) != ''):
            sla_object.source = mapping_dict.get('source', None)
          else:
            sla_object.source._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_interface_name', None)) != ''):
            sla_object.source_interface_name = mapping_dict.get('source_interface_name', None)
          else:
            sla_object.source_interface_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_interface_ip', None)) != ''):
            sla_object.source_interface_ip = mapping_dict.get('source_interface_ip', None)
          else:
            sla_object.source_interface_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('data_size', None)) != ''):
            sla_object.data_size = mapping_dict.get('data_size', None)
          else:
            sla_object.data_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('response_data_size', None)) != ''):
            sla_object.response_data_size = mapping_dict.get('response_data_size', None)
          else:
            sla_object.response_data_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('frequency', None)) != ''):
            sla_object.frequency = mapping_dict.get('frequency', None)
          else:
            sla_object.frequency._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timeout', None)) != ''):
            sla_object.timeout = mapping_dict.get('timeout', None)
          else:
            sla_object.timeout._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('threshold', None)) != ''):
            sla_object.threshold = mapping_dict.get('threshold', None)
          else:
            sla_object.threshold._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('destination_port', None)) != ''):
            sla_object.destination_port = mapping_dict.get('destination_port', None)
          else:
            sla_object.destination_port._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_port', None)) != ''):
            sla_object.source_port = mapping_dict.get('source_port', None)
          else:
            sla_object.source_port._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('interval', None)) != ''):
            sla_object.interval = mapping_dict.get('interval', None)
          else:
            sla_object.interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tos', None)) != ''):
            sla_object.tos = mapping_dict.get('tos', None)
          else:
            sla_object.tos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('tag', None)) != ''):
            sla_object.tag = mapping_dict.get('tag', None)
          else:
            sla_object.tag._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('history_interval', None)) != ''):
            sla_object.history_interval = mapping_dict.get('history_interval', None)
          else:
            sla_object.history_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('buckets_size', None)) != ''):
            sla_object.buckets_size = mapping_dict.get('buckets_size', None)
          else:
            sla_object.buckets_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('num_packets', None)) != ''):
            sla_object.num_packets = mapping_dict.get('num_packets', None)
          else:
            sla_object.num_packets._empty_tag = True
        except TypeError:
          pass
        sla_object_list.append(sla_object)

      return sla_object_list

  #XPATH devices/device/ip-sla/responder
  class responder(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      responder_object_list = self.validate_inputs_form_payload(mapping_dict)

      for responder_object in responder_object_list:
        #fetch payload
        responder_payload = responder_object.getxml(filter=True)
        util.log_debug('responder_payload %s'%responder_payload)
        payload_list.append(responder_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      responder_object_list = self.validate_inputs_form_payload(mapping_dict)

      for responder_object in responder_object_list:
        #fetch payload
        responder_payload = responder_object.getxml(filter=True)

        util.log_debug('responder_payload %s'%responder_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=responder_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      responder_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/responder"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, responder_object in enumerate(responder_object_list):
        #fetch payload
        responder_payload = responder_object.getxml(filter=True)

        util.log_debug('update responder_payload %s'%responder_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=responder_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:ip-sla"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/responder"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      responder_object_list = []
      from servicemodel.controller.devices.device import ip_sla
      responder_object = ip_sla.responder.responder()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('is_responder', None)) != ''):
          responder_object.is_responder = mapping_dict.get('is_responder', None)
        else:
          responder_object.is_responder._empty_tag = True
      except TypeError:
        pass
      responder_object_list.append(responder_object)

      return responder_object_list

    #XPATH devices/device/ip-sla/responder/responder-options
    class responder_options(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:ip-sla/responder"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        responder_options_object_list = self.validate_inputs_form_payload(mapping_dict)

        for responder_options_object in responder_options_object_list:
          #fetch payload
          responder_options_payload = responder_options_object.getxml(filter=True)
          util.log_debug('responder_options_payload %s'%responder_options_payload)
          payload_list.append(responder_options_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:ip-sla/responder"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        responder_options_object_list = self.validate_inputs_form_payload(mapping_dict)

        for responder_options_object in responder_options_object_list:
          #fetch payload
          responder_options_payload = responder_options_object.getxml(filter=True)

          util.log_debug('responder_options_payload %s'%responder_options_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=responder_options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:ip-sla/responder"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        responder_options_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        operation_type = mapping_dict.get('operation_type')
        if not isinstance(operation_type, list):
          operation_type = [operation_type]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for operation_type_iterator in operation_type:
          rcpath_tmp =  rcpath+"/responder-options=%s"%(util.make_interfacename(operation_type_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, responder_options_object in enumerate(responder_options_object_list):
          #fetch payload
          responder_options_payload = responder_options_object.getxml(filter=True)

          util.log_debug('update responder_options_payload %s'%responder_options_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=responder_options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:ip-sla/responder"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('operation_type')):
          raise Exception("'operation_type' cannot be empty")

        #convert keys to list
        operation_type = mapping_dict.get('operation_type')
        if not isinstance(operation_type, list):
          operation_type = [operation_type]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for operation_type_iterator in operation_type:
          rcpath_tmp =  rcpath+"/responder-options=%s"%(util.make_interfacename(operation_type_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('operation_type')):
          raise Exception("'operation_type' cannot be empty")

        #convert keys to list
        operation_type = mapping_dict.get('operation_type')
        if not isinstance(operation_type, list):
          operation_type = [operation_type]

        #prepare payload
        responder_options_object_list = []
        for operation_type_iterator in operation_type:
          from servicemodel.controller.devices.device.ip_sla import responder
          responder_options_object = responder.responder_options.responder_options()
          responder_options_object.operation_type = operation_type_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('host', None)) != ''):
              responder_options_object.host = mapping_dict.get('host', None)
            else:
              responder_options_object.host._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('auto_register_type', None)) != ''):
              responder_options_object.auto_register_type = mapping_dict.get('auto_register_type', None)
            else:
              responder_options_object.auto_register_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('client_id', None)) != ''):
              responder_options_object.client_id = mapping_dict.get('client_id', None)
            else:
              responder_options_object.client_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('endpoint_list_name', None)) != ''):
              responder_options_object.endpoint_list_name = mapping_dict.get('endpoint_list_name', None)
            else:
              responder_options_object.endpoint_list_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('endpoint_list_type', None)) != ''):
              responder_options_object.endpoint_list_type = mapping_dict.get('endpoint_list_type', None)
            else:
              responder_options_object.endpoint_list_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('retry_timer', None)) != ''):
              responder_options_object.retry_timer = mapping_dict.get('retry_timer', None)
            else:
              responder_options_object.retry_timer._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ipaddress', None)) != ''):
              responder_options_object.ipaddress = mapping_dict.get('ipaddress', None)
            else:
              responder_options_object.ipaddress._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
              responder_options_object.port = mapping_dict.get('port', None)
            else:
              responder_options_object.port._empty_tag = True
          except TypeError:
            pass
          responder_options_object_list.append(responder_options_object)

        return responder_options_object_list

