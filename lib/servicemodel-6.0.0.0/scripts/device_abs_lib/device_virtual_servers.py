#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class virtual_servers(object):
  #XPATH devices/device/virtual-servers/virtual-server
  class virtual_server(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "loadbalancer:virtual-servers"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_server_object_list = self.validate_inputs_form_payload(mapping_dict)

      for virtual_server_object in virtual_server_object_list:
        #fetch payload
        virtual_server_payload = virtual_server_object.getxml(filter=True)
        util.log_debug('virtual_server_payload %s'%virtual_server_payload)
        payload_list.append(virtual_server_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "loadbalancer:virtual-servers"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_server_object_list = self.validate_inputs_form_payload(mapping_dict)

      for virtual_server_object in virtual_server_object_list:
        #fetch payload
        virtual_server_payload = virtual_server_object.getxml(filter=True)

        util.log_debug('virtual_server_payload %s'%virtual_server_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=virtual_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:virtual-servers"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      virtual_server_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      vip = mapping_dict.get('vip')
      if not isinstance(vip, list):
        vip = [vip]
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for vip_iterator in vip:
        for domain_number_iterator in domain_number:
          for partition_iterator in partition:
            rcpath_tmp =  rcpath+"/virtual-server=%s,%s,%s"%(util.make_interfacename(vip_iterator),util.make_interfacename(domain_number_iterator),util.make_interfacename(partition_iterator))
            rcpath_list.append(rcpath_tmp)
      for rc_counter, virtual_server_object in enumerate(virtual_server_object_list):
        #fetch payload
        virtual_server_payload = virtual_server_object.getxml(filter=True)

        util.log_debug('update virtual_server_payload %s'%virtual_server_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=virtual_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:virtual-servers"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('vip')):
        raise Exception("'vip' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain_number')):
        raise Exception("'domain_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      vip = mapping_dict.get('vip')
      if not isinstance(vip, list):
        vip = [vip]
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for vip_iterator in vip:
        for domain_number_iterator in domain_number:
          for partition_iterator in partition:
            rcpath_tmp =  rcpath+"/virtual-server=%s,%s,%s"%(util.make_interfacename(vip_iterator),util.make_interfacename(domain_number_iterator),util.make_interfacename(partition_iterator))
            rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('vip')):
        raise Exception("'vip' cannot be empty")
      if util.isEmpty(mapping_dict.get('port')):
        raise Exception("'port' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain_number')):
        raise Exception("'domain_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      vip = mapping_dict.get('vip')
      if not isinstance(vip, list):
        vip = [vip]
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare payload
      virtual_server_object_list = []
      for vip_iterator in vip:
        for domain_number_iterator in domain_number:
          for partition_iterator in partition:
            from servicemodel.controller.devices.device import virtual_servers
            virtual_server_object = virtual_servers.virtual_server.virtual_server()
            try:
              if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
                virtual_server_object.name = mapping_dict.get('name', None)
              else:
                virtual_server_object.name._empty_tag = True
            except TypeError:
              pass
            virtual_server_object.vip = vip_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
                virtual_server_object.port = mapping_dict.get('port', None)
              else:
                virtual_server_object.port._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('l4_protocol', None)) != ''):
                virtual_server_object.l4_protocol = mapping_dict.get('l4_protocol', None)
              else:
                virtual_server_object.l4_protocol._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('state', None)) != ''):
                virtual_server_object.state = mapping_dict.get('state', None)
              else:
                virtual_server_object.state._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('pool', None)) != ''):
                virtual_server_object.pool = mapping_dict.get('pool', None)
              else:
                virtual_server_object.pool._empty_tag = True
            except TypeError:
              pass
            virtual_server_object.domain_number = domain_number_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('load_balancing_method', None)) != ''):
                virtual_server_object.load_balancing_method = mapping_dict.get('load_balancing_method', None)
              else:
                virtual_server_object.load_balancing_method._empty_tag = True
            except TypeError:
              pass
            virtual_server_object.partition = partition_iterator
            virtual_server_object_list.append(virtual_server_object)

      return virtual_server_object_list

    #XPATH devices/device/virtual-servers/virtual-server/server-certificate
    class server_certificate(AbstractDeviceMgr):
      key_hints = [['vip','domain_number','partition']]
      def getRcpathPayload(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        server_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for server_certificate_object in server_certificate_object_list:
          #fetch payload
          server_certificate_payload = server_certificate_object.getxml(filter=True)
          util.log_debug('server_certificate_payload %s'%server_certificate_payload)
          payload_list.append(server_certificate_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        server_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for server_certificate_object in server_certificate_object_list:
          #fetch payload
          server_certificate_payload = server_certificate_object.getxml(filter=True)

          util.log_debug('server_certificate_payload %s'%server_certificate_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=server_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        ##prepare rcpath
        rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        server_certificate_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/server-certificate"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, server_certificate_object in enumerate(server_certificate_object_list):
          #fetch payload
          server_certificate_payload = server_certificate_object.getxml(filter=True)

          util.log_debug('update server_certificate_payload %s'%server_certificate_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=server_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/server-certificate"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_server_vip, virtual_server_domain_number, virtual_server_partition):
        #Parent Key Validations
        if util.isEmpty(virtual_server_vip):
          raise Exception("'virtual_server_vip' cannot be empty")
        if util.isEmpty(virtual_server_domain_number):
          raise Exception("'virtual_server_domain_number' cannot be empty")
        if util.isEmpty(virtual_server_partition):
          raise Exception("'virtual_server_partition' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        server_certificate_object_list = []
        from servicemodel.controller.devices.device.virtual_servers import virtual_server
        server_certificate_object = virtual_server.server_certificate.server_certificate()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
            server_certificate_object.name = mapping_dict.get('name', None)
          else:
            server_certificate_object.name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('sni', None)) != ''):
            server_certificate_object.sni = mapping_dict.get('sni', None)
          else:
            server_certificate_object.sni._empty_tag = True
        except TypeError:
          pass
        server_certificate_object_list.append(server_certificate_object)

        return server_certificate_object_list

    #XPATH devices/device/virtual-servers/virtual-server/ca-certificate
    class ca_certificate(AbstractDeviceMgr):
      key_hints = [['vip','domain_number','partition']]
      def getRcpathPayload(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ca_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ca_certificate_object in ca_certificate_object_list:
          #fetch payload
          ca_certificate_payload = ca_certificate_object.getxml(filter=True)
          util.log_debug('ca_certificate_payload %s'%ca_certificate_payload)
          payload_list.append(ca_certificate_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ca_certificate_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ca_certificate_object in ca_certificate_object_list:
          #fetch payload
          ca_certificate_payload = ca_certificate_object.getxml(filter=True)

          util.log_debug('ca_certificate_payload %s'%ca_certificate_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ca_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        ##prepare rcpath
        rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ca_certificate_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ca-certificate"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, ca_certificate_object in enumerate(ca_certificate_object_list):
          #fetch payload
          ca_certificate_payload = ca_certificate_object.getxml(filter=True)

          util.log_debug('update ca_certificate_payload %s'%ca_certificate_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ca_certificate_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ca-certificate"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_server_vip, virtual_server_domain_number, virtual_server_partition):
        #Parent Key Validations
        if util.isEmpty(virtual_server_vip):
          raise Exception("'virtual_server_vip' cannot be empty")
        if util.isEmpty(virtual_server_domain_number):
          raise Exception("'virtual_server_domain_number' cannot be empty")
        if util.isEmpty(virtual_server_partition):
          raise Exception("'virtual_server_partition' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        ca_certificate_object_list = []
        from servicemodel.controller.devices.device.virtual_servers import virtual_server
        ca_certificate_object = virtual_server.ca_certificate.ca_certificate()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
            ca_certificate_object.name = mapping_dict.get('name', None)
          else:
            ca_certificate_object.name._empty_tag = True
        except TypeError:
          pass
        ca_certificate_object_list.append(ca_certificate_object)

        return ca_certificate_object_list

    #XPATH devices/device/virtual-servers/virtual-server/persistence
    class persistence(AbstractDeviceMgr):
      key_hints = [['vip','domain_number','partition']]
      def getRcpathPayload(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        persistence_object_list = self.validate_inputs_form_payload(mapping_dict)

        for persistence_object in persistence_object_list:
          #fetch payload
          persistence_payload = persistence_object.getxml(filter=True)
          util.log_debug('persistence_payload %s'%persistence_payload)
          payload_list.append(persistence_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        persistence_object_list = self.validate_inputs_form_payload(mapping_dict)

        for persistence_object in persistence_object_list:
          #fetch payload
          persistence_payload = persistence_object.getxml(filter=True)

          util.log_debug('persistence_payload %s'%persistence_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=persistence_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        ##prepare rcpath
        rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        persistence_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/persistence"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, persistence_object in enumerate(persistence_object_list):
          #fetch payload
          persistence_payload = persistence_object.getxml(filter=True)

          util.log_debug('update persistence_payload %s'%persistence_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=persistence_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/persistence"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_server_vip, virtual_server_domain_number, virtual_server_partition):
        #Parent Key Validations
        if util.isEmpty(virtual_server_vip):
          raise Exception("'virtual_server_vip' cannot be empty")
        if util.isEmpty(virtual_server_domain_number):
          raise Exception("'virtual_server_domain_number' cannot be empty")
        if util.isEmpty(virtual_server_partition):
          raise Exception("'virtual_server_partition' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        persistence_object_list = []
        from servicemodel.controller.devices.device.virtual_servers import virtual_server
        persistence_object = virtual_server.persistence.persistence()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            persistence_object.type = mapping_dict.get('type', None)
          else:
            persistence_object.type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('time_out', None)) != ''):
            persistence_object.time_out = mapping_dict.get('time_out', None)
          else:
            persistence_object.time_out._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cookie_name', None)) != ''):
            persistence_object.cookie_name = mapping_dict.get('cookie_name', None)
          else:
            persistence_object.cookie_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            persistence_object.netmask = mapping_dict.get('netmask', None)
          else:
            persistence_object.netmask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipv6_mask_length', None)) != ''):
            persistence_object.ipv6_mask_length = mapping_dict.get('ipv6_mask_length', None)
          else:
            persistence_object.ipv6_mask_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('expression', None)) != ''):
            persistence_object.expression = mapping_dict.get('expression', None)
          else:
            persistence_object.expression._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('response_expression', None)) != ''):
            persistence_object.response_expression = mapping_dict.get('response_expression', None)
          else:
            persistence_object.response_expression._empty_tag = True
        except TypeError:
          pass
        persistence_object_list.append(persistence_object)

        return persistence_object_list

    #XPATH devices/device/virtual-servers/virtual-server/protection
    class protection(AbstractDeviceMgr):
      key_hints = [['vip','domain_number','partition']]
      def getRcpathPayload(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        protection_object_list = self.validate_inputs_form_payload(mapping_dict)

        for protection_object in protection_object_list:
          #fetch payload
          protection_payload = protection_object.getxml(filter=True)
          util.log_debug('protection_payload %s'%protection_payload)
          payload_list.append(protection_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)

        #convert parent keys to list
        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        protection_object_list = self.validate_inputs_form_payload(mapping_dict)

        for protection_object in protection_object_list:
          #fetch payload
          protection_payload = protection_object.getxml(filter=True)

          util.log_debug('protection_payload %s'%protection_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=protection_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        ##prepare rcpath
        rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        protection_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/protection"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, protection_object in enumerate(protection_object_list):
          #fetch payload
          protection_payload = protection_object.getxml(filter=True)

          util.log_debug('update protection_payload %s'%protection_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=protection_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, virtual_server_vip, virtual_server_domain_number, virtual_server_partition, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( virtual_server_vip, virtual_server_domain_number, virtual_server_partition)


        if not isinstance(virtual_server_vip, list):
          virtual_server_vip_list = [virtual_server_vip]
        else:
          virtual_server_vip_list = virtual_server_vip
        if not isinstance(virtual_server_domain_number, list):
          virtual_server_domain_number_list = [virtual_server_domain_number]
        else:
          virtual_server_domain_number_list = virtual_server_domain_number
        if not isinstance(virtual_server_partition, list):
          virtual_server_partition_list = [virtual_server_partition]
        else:
          virtual_server_partition_list = virtual_server_partition

        for virtual_server_vip in virtual_server_vip_list:
          for virtual_server_domain_number in virtual_server_domain_number_list:
            for virtual_server_partition in virtual_server_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:virtual-servers/virtual-server=%s,%s,%s"%(util.make_interfacename(virtual_server_vip),util.make_interfacename(virtual_server_domain_number),util.make_interfacename(virtual_server_partition))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/protection"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, virtual_server_vip, virtual_server_domain_number, virtual_server_partition):
        #Parent Key Validations
        if util.isEmpty(virtual_server_vip):
          raise Exception("'virtual_server_vip' cannot be empty")
        if util.isEmpty(virtual_server_domain_number):
          raise Exception("'virtual_server_domain_number' cannot be empty")
        if util.isEmpty(virtual_server_partition):
          raise Exception("'virtual_server_partition' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        protection_object_list = []
        from servicemodel.controller.devices.device.virtual_servers import virtual_server
        protection_object = virtual_server.protection.protection()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('redirect_url', None)) != ''):
            protection_object.redirect_url = mapping_dict.get('redirect_url', None)
          else:
            protection_object.redirect_url._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('backup_virtual_server', None)) != ''):
            protection_object.backup_virtual_server = mapping_dict.get('backup_virtual_server', None)
          else:
            protection_object.backup_virtual_server._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('disable_primary_when_down', None)) != ''):
            protection_object.disable_primary_when_down = mapping_dict.get('disable_primary_when_down', None)
          else:
            protection_object.disable_primary_when_down._empty_tag = True
        except TypeError:
          pass
        protection_object_list.append(protection_object)

        return protection_object_list

