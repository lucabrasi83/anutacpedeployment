#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class inpath_rules(object):
  #XPATH devices/device/inpath-rules/inpath-rules-def
  class inpath_rules_def(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      inpath_rules_def_object_list = self.validate_inputs_form_payload(mapping_dict)

      for inpath_rules_def_object in inpath_rules_def_object_list:
        #fetch payload
        inpath_rules_def_payload = inpath_rules_def_object.getxml(filter=True)
        util.log_debug('inpath_rules_def_payload %s'%inpath_rules_def_payload)
        payload_list.append(inpath_rules_def_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      inpath_rules_def_object_list = self.validate_inputs_form_payload(mapping_dict)

      for inpath_rules_def_object in inpath_rules_def_object_list:
        #fetch payload
        inpath_rules_def_payload = inpath_rules_def_object.getxml(filter=True)

        util.log_debug('inpath_rules_def_payload %s'%inpath_rules_def_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=inpath_rules_def_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      inpath_rules_def_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      rulenum = mapping_dict.get('rulenum')
      if not isinstance(rulenum, list):
        rulenum = [rulenum]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for rulenum_iterator in rulenum:
        rcpath_tmp =  rcpath+"/inpath-rules-def=%s"%(util.make_interfacename(rulenum_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, inpath_rules_def_object in enumerate(inpath_rules_def_object_list):
        #fetch payload
        inpath_rules_def_payload = inpath_rules_def_object.getxml(filter=True)

        util.log_debug('update inpath_rules_def_payload %s'%inpath_rules_def_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=inpath_rules_def_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('rulenum')):
        raise Exception("'rulenum' cannot be empty")

      #convert keys to list
      rulenum = mapping_dict.get('rulenum')
      if not isinstance(rulenum, list):
        rulenum = [rulenum]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for rulenum_iterator in rulenum:
        rcpath_tmp =  rcpath+"/inpath-rules-def=%s"%(util.make_interfacename(rulenum_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('rulenum')):
        raise Exception("'rulenum' cannot be empty")

      #convert keys to list
      rulenum = mapping_dict.get('rulenum')
      if not isinstance(rulenum, list):
        rulenum = [rulenum]

      #prepare payload
      inpath_rules_def_object_list = []
      for rulenum_iterator in rulenum:
        from servicemodel.controller.devices.device import inpath_rules
        inpath_rules_def_object = inpath_rules.inpath_rules_def.inpath_rules_def()
        inpath_rules_def_object.rulenum = rulenum_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rule_type', None)) != ''):
            inpath_rules_def_object.rule_type = mapping_dict.get('rule_type', None)
          else:
            inpath_rules_def_object.rule_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('packet_mode_uni', None)) != ''):
            inpath_rules_def_object.packet_mode_uni = mapping_dict.get('packet_mode_uni', None)
          else:
            inpath_rules_def_object.packet_mode_uni._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('srcaddr', None)) != ''):
            inpath_rules_def_object.srcaddr = mapping_dict.get('srcaddr', None)
          else:
            inpath_rules_def_object.srcaddr._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('srcport', None)) != ''):
            inpath_rules_def_object.srcport = mapping_dict.get('srcport', None)
          else:
            inpath_rules_def_object.srcport._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dstaddr', None)) != ''):
            inpath_rules_def_object.dstaddr = mapping_dict.get('dstaddr', None)
          else:
            inpath_rules_def_object.dstaddr._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dstport', None)) != ''):
            inpath_rules_def_object.dstport = mapping_dict.get('dstport', None)
          else:
            inpath_rules_def_object.dstport._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dst_domain', None)) != ''):
            inpath_rules_def_object.dst_domain = mapping_dict.get('dst_domain', None)
          else:
            inpath_rules_def_object.dst_domain._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dst_host', None)) != ''):
            inpath_rules_def_object.dst_host = mapping_dict.get('dst_host', None)
          else:
            inpath_rules_def_object.dst_host._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('optimization', None)) != ''):
            inpath_rules_def_object.optimization = mapping_dict.get('optimization', None)
          else:
            inpath_rules_def_object.optimization._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('preoptimization', None)) != ''):
            inpath_rules_def_object.preoptimization = mapping_dict.get('preoptimization', None)
          else:
            inpath_rules_def_object.preoptimization._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('latency_opt', None)) != ''):
            inpath_rules_def_object.latency_opt = mapping_dict.get('latency_opt', None)
          else:
            inpath_rules_def_object.latency_opt._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
            inpath_rules_def_object.vlan = mapping_dict.get('vlan', None)
          else:
            inpath_rules_def_object.vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('neural_mode', None)) != ''):
            inpath_rules_def_object.neural_mode = mapping_dict.get('neural_mode', None)
          else:
            inpath_rules_def_object.neural_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cloud_accel', None)) != ''):
            inpath_rules_def_object.cloud_accel = mapping_dict.get('cloud_accel', None)
          else:
            inpath_rules_def_object.cloud_accel._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('web_proxy', None)) != ''):
            inpath_rules_def_object.web_proxy = mapping_dict.get('web_proxy', None)
          else:
            inpath_rules_def_object.web_proxy._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('wan_visibility', None)) != ''):
            inpath_rules_def_object.wan_visibility = mapping_dict.get('wan_visibility', None)
          else:
            inpath_rules_def_object.wan_visibility._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('wan_vis_opt', None)) != ''):
            inpath_rules_def_object.wan_vis_opt = mapping_dict.get('wan_vis_opt', None)
          else:
            inpath_rules_def_object.wan_vis_opt._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            inpath_rules_def_object.description = mapping_dict.get('description', None)
          else:
            inpath_rules_def_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auto_kickoff', None)) != ''):
            inpath_rules_def_object.auto_kickoff = mapping_dict.get('auto_kickoff', None)
          else:
            inpath_rules_def_object.auto_kickoff._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rule_enable', None)) != ''):
            inpath_rules_def_object.rule_enable = mapping_dict.get('rule_enable', None)
          else:
            inpath_rules_def_object.rule_enable._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('protocol', None)) != ''):
            inpath_rules_def_object.protocol = mapping_dict.get('protocol', None)
          else:
            inpath_rules_def_object.protocol._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('target_addr', None)) != ''):
            inpath_rules_def_object.target_addr = mapping_dict.get('target_addr', None)
          else:
            inpath_rules_def_object.target_addr._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('target_port', None)) != ''):
            inpath_rules_def_object.target_port = mapping_dict.get('target_port', None)
          else:
            inpath_rules_def_object.target_port._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('backup_addr', None)) != ''):
            inpath_rules_def_object.backup_addr = mapping_dict.get('backup_addr', None)
          else:
            inpath_rules_def_object.backup_addr._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('backup_port', None)) != ''):
            inpath_rules_def_object.backup_port = mapping_dict.get('backup_port', None)
          else:
            inpath_rules_def_object.backup_port._empty_tag = True
        except TypeError:
          pass
        inpath_rules_def_object_list.append(inpath_rules_def_object)

      return inpath_rules_def_object_list

  #XPATH devices/device/inpath-rules/move-rule
  class move_rule(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      move_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

      for move_rule_object in move_rule_object_list:
        #fetch payload
        move_rule_payload = move_rule_object.getxml(filter=True)
        util.log_debug('move_rule_payload %s'%move_rule_payload)
        payload_list.append(move_rule_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      move_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

      for move_rule_object in move_rule_object_list:
        #fetch payload
        move_rule_payload = move_rule_object.getxml(filter=True)

        util.log_debug('move_rule_payload %s'%move_rule_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=move_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      move_rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      id = mapping_dict.get('id')
      if not isinstance(id, list):
        id = [id]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for id_iterator in id:
        rcpath_tmp =  rcpath+"/move-rule=%s"%(util.make_interfacename(id_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, move_rule_object in enumerate(move_rule_object_list):
        #fetch payload
        move_rule_payload = move_rule_object.getxml(filter=True)

        util.log_debug('update move_rule_payload %s'%move_rule_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=move_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-rules"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('id')):
        raise Exception("'id' cannot be empty")

      #convert keys to list
      id = mapping_dict.get('id')
      if not isinstance(id, list):
        id = [id]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for id_iterator in id:
        rcpath_tmp =  rcpath+"/move-rule=%s"%(util.make_interfacename(id_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('id')):
        raise Exception("'id' cannot be empty")
      if util.isEmpty(mapping_dict.get('to_rule_num')):
        raise Exception("'to_rule_num' cannot be empty")

      #convert keys to list
      id = mapping_dict.get('id')
      if not isinstance(id, list):
        id = [id]

      #prepare payload
      move_rule_object_list = []
      for id_iterator in id:
        from servicemodel.controller.devices.device import inpath_rules
        move_rule_object = inpath_rules.move_rule.move_rule()
        move_rule_object.id = id_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('from_rule_num', None)) != ''):
            move_rule_object.from_rule_num = mapping_dict.get('from_rule_num', None)
          else:
            move_rule_object.from_rule_num._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('to_rule_num', None)) != ''):
            move_rule_object.to_rule_num = mapping_dict.get('to_rule_num', None)
          else:
            move_rule_object.to_rule_num._empty_tag = True
        except TypeError:
          pass
        move_rule_object_list.append(move_rule_object)

      return move_rule_object_list

