#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class lb_domains(object):
  #XPATH devices/device/lb-domains/lb-domain
  class lb_domain(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "loadbalancer:lb-domains"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lb_domain_object_list = self.validate_inputs_form_payload(mapping_dict)

      for lb_domain_object in lb_domain_object_list:
        #fetch payload
        lb_domain_payload = lb_domain_object.getxml(filter=True)
        util.log_debug('lb_domain_payload %s'%lb_domain_payload)
        payload_list.append(lb_domain_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "loadbalancer:lb-domains"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lb_domain_object_list = self.validate_inputs_form_payload(mapping_dict)

      for lb_domain_object in lb_domain_object_list:
        #fetch payload
        lb_domain_payload = lb_domain_object.getxml(filter=True)

        util.log_debug('lb_domain_payload %s'%lb_domain_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=lb_domain_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:lb-domains"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      lb_domain_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for domain_number_iterator in domain_number:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/lb-domain=%s,%s"%(util.make_interfacename(domain_number_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, lb_domain_object in enumerate(lb_domain_object_list):
        #fetch payload
        lb_domain_payload = lb_domain_object.getxml(filter=True)

        util.log_debug('update lb_domain_payload %s'%lb_domain_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=lb_domain_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:lb-domains"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('domain_number')):
        raise Exception("'domain_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for domain_number_iterator in domain_number:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/lb-domain=%s,%s"%(util.make_interfacename(domain_number_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('domain_number')):
        raise Exception("'domain_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      domain_number = mapping_dict.get('domain_number')
      if not isinstance(domain_number, list):
        domain_number = [domain_number]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare payload
      lb_domain_object_list = []
      for domain_number_iterator in domain_number:
        for partition_iterator in partition:
          from servicemodel.controller.devices.device import lb_domains
          lb_domain_object = lb_domains.lb_domain.lb_domain()
          lb_domain_object.domain_number = domain_number_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
              lb_domain_object.domain_name = mapping_dict.get('domain_name', None)
            else:
              lb_domain_object.domain_name._empty_tag = True
          except TypeError:
            pass
          lb_domain_object.partition = partition_iterator
          lb_domain_object_list.append(lb_domain_object)

      return lb_domain_object_list

    class vlans(object):
      #XPATH devices/device/lb-domains/lb-domain/vlans/vlan
      class vlan(AbstractDeviceMgr):
        key_hints = [['domain_number','partition']]
        def getRcpathPayload(self, sdata, dev, lb_domain_domain_number, lb_domain_partition, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( lb_domain_domain_number, lb_domain_partition)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(lb_domain_domain_number, list):
            lb_domain_domain_number_list = [lb_domain_domain_number]
          else:
            lb_domain_domain_number_list = lb_domain_domain_number
          if not isinstance(lb_domain_partition, list):
            lb_domain_partition_list = [lb_domain_partition]
          else:
            lb_domain_partition_list = lb_domain_partition

          for lb_domain_domain_number in lb_domain_domain_number_list:
            for lb_domain_partition in lb_domain_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:lb-domains/lb-domain=%s,%s/vlans"%(util.make_interfacename(lb_domain_domain_number),util.make_interfacename(lb_domain_partition))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)
            util.log_debug('vlan_payload %s'%vlan_payload)
            payload_list.append(vlan_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, lb_domain_domain_number, lb_domain_partition, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( lb_domain_domain_number, lb_domain_partition)

          #convert parent keys to list
          if not isinstance(lb_domain_domain_number, list):
            lb_domain_domain_number_list = [lb_domain_domain_number]
          else:
            lb_domain_domain_number_list = lb_domain_domain_number
          if not isinstance(lb_domain_partition, list):
            lb_domain_partition_list = [lb_domain_partition]
          else:
            lb_domain_partition_list = lb_domain_partition

          for lb_domain_domain_number in lb_domain_domain_number_list:
            for lb_domain_partition in lb_domain_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:lb-domains/lb-domain=%s,%s/vlans"%(util.make_interfacename(lb_domain_domain_number),util.make_interfacename(lb_domain_partition))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('vlan_payload %s'%vlan_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, lb_domain_domain_number, lb_domain_partition, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( lb_domain_domain_number, lb_domain_partition)


          ##prepare rcpath
          rcpath = "loadbalancer:lb-domains/lb-domain=%s,%s/vlans"%(util.make_interfacename(lb_domain_domain_number),util.make_interfacename(lb_domain_partition))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          vlan_number = mapping_dict.get('vlan_number')
          if not isinstance(vlan_number, list):
            vlan_number = [vlan_number]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for vlan_number_iterator in vlan_number:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(vlan_number_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, vlan_object in enumerate(vlan_object_list):
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('update vlan_payload %s'%vlan_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, lb_domain_domain_number, lb_domain_partition, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( lb_domain_domain_number, lb_domain_partition)


          if not isinstance(lb_domain_domain_number, list):
            lb_domain_domain_number_list = [lb_domain_domain_number]
          else:
            lb_domain_domain_number_list = lb_domain_domain_number
          if not isinstance(lb_domain_partition, list):
            lb_domain_partition_list = [lb_domain_partition]
          else:
            lb_domain_partition_list = lb_domain_partition

          for lb_domain_domain_number in lb_domain_domain_number_list:
            for lb_domain_partition in lb_domain_partition_list:
              ##prepare rcpath
              rcpath = "loadbalancer:lb-domains/lb-domain=%s,%s/vlans"%(util.make_interfacename(lb_domain_domain_number),util.make_interfacename(lb_domain_partition))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('vlan_number')):
            raise Exception("'vlan_number' cannot be empty")

          #convert keys to list
          vlan_number = mapping_dict.get('vlan_number')
          if not isinstance(vlan_number, list):
            vlan_number = [vlan_number]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for vlan_number_iterator in vlan_number:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(vlan_number_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, lb_domain_domain_number, lb_domain_partition):
          #Parent Key Validations
          if util.isEmpty(lb_domain_domain_number):
            raise Exception("'lb_domain_domain_number' cannot be empty")
          if util.isEmpty(lb_domain_partition):
            raise Exception("'lb_domain_partition' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('vlan_number')):
            raise Exception("'vlan_number' cannot be empty")

          #convert keys to list
          vlan_number = mapping_dict.get('vlan_number')
          if not isinstance(vlan_number, list):
            vlan_number = [vlan_number]

          #prepare payload
          vlan_object_list = []
          for vlan_number_iterator in vlan_number:
            from servicemodel.controller.devices.device.lb_domains.lb_domain import vlans
            vlan_object = vlans.vlan.vlan()
            vlan_object.vlan_number = vlan_number_iterator
            vlan_object_list.append(vlan_object)

          return vlan_object_list

