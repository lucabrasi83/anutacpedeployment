#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/ssh
class ssh(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    ssh_object_list = self.validate_inputs_form_payload(mapping_dict)

    for ssh_object in ssh_object_list:
      #fetch payload
      ssh_payload = ssh_object.getxml(filter=True)
      util.log_debug('ssh_payload %s'%ssh_payload)
      payload_list.append(ssh_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    ssh_object_list = self.validate_inputs_form_payload(mapping_dict)

    for ssh_object in ssh_object_list:
      #fetch payload
      ssh_payload = ssh_object.getxml(filter=True)

      util.log_debug('ssh_payload %s'%ssh_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ssh_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    ssh_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/ssh"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, ssh_object in enumerate(ssh_object_list):
      #fetch payload
      ssh_payload = ssh_object.getxml(filter=True)

      util.log_debug('update ssh_payload %s'%ssh_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ssh_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/ssh"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs

    #convert keys to list

    #prepare payload
    ssh_object_list = []
    from servicemodel.controller.devices import device
    ssh_object = device.ssh.ssh()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
        ssh_object.name = mapping_dict.get('name', None)
      else:
        ssh_object.name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('timeout', None)) != ''):
        ssh_object.timeout = mapping_dict.get('timeout', None)
      else:
        ssh_object.timeout._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('version', None)) != ''):
        ssh_object.version = mapping_dict.get('version', None)
      else:
        ssh_object.version._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
        ssh_object.interface_name = mapping_dict.get('interface_name', None)
      else:
        ssh_object.interface_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('label', None)) != ''):
        ssh_object.label = mapping_dict.get('label', None)
      else:
        ssh_object.label._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('key_modulus', None)) != ''):
        ssh_object.key_modulus = mapping_dict.get('key_modulus', None)
      else:
        ssh_object.key_modulus._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('rsa_keypair_name', None)) != ''):
        ssh_object.rsa_keypair_name = mapping_dict.get('rsa_keypair_name', None)
      else:
        ssh_object.rsa_keypair_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('auth_retries_count', None)) != ''):
        ssh_object.auth_retries_count = mapping_dict.get('auth_retries_count', None)
      else:
        ssh_object.auth_retries_count._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('source_interface', None)) != ''):
        ssh_object.source_interface = mapping_dict.get('source_interface', None)
      else:
        ssh_object.source_interface._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('acl_rule_number', None)) != ''):
        ssh_object.acl_rule_number = mapping_dict.get('acl_rule_number', None)
      else:
        ssh_object.acl_rule_number._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('scp_enable', None)) != ''):
        ssh_object.scp_enable = mapping_dict.get('scp_enable', None)
      else:
        ssh_object.scp_enable._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('authentication_mode', None)) != ''):
        ssh_object.authentication_mode = mapping_dict.get('authentication_mode', None)
      else:
        ssh_object.authentication_mode._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
        ssh_object.context_name = mapping_dict.get('context_name', None)
      else:
        ssh_object.context_name._empty_tag = True
    except TypeError:
      pass
    ssh_object_list.append(ssh_object)

    return ssh_object_list

  #XPATH devices/device/ssh/network
  class network(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:ssh"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      network_object_list = self.validate_inputs_form_payload(mapping_dict)

      for network_object in network_object_list:
        #fetch payload
        network_payload = network_object.getxml(filter=True)
        util.log_debug('network_payload %s'%network_payload)
        payload_list.append(network_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:ssh"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      network_object_list = self.validate_inputs_form_payload(mapping_dict)

      for network_object in network_object_list:
        #fetch payload
        network_payload = network_object.getxml(filter=True)

        util.log_debug('network_payload %s'%network_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:ssh"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      ip_address = mapping_dict.get('ip_address')
      if not isinstance(ip_address, list):
        ip_address = [ip_address]
      netmask = mapping_dict.get('netmask')
      if not isinstance(netmask, list):
        netmask = [netmask]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for ip_address_iterator in ip_address:
        for netmask_iterator in netmask:
          rcpath_tmp =  rcpath+"/network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, network_object in enumerate(network_object_list):
        #fetch payload
        network_payload = network_object.getxml(filter=True)

        util.log_debug('update network_payload %s'%network_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:ssh"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('ip_address')):
        raise Exception("'ip_address' cannot be empty")
      if util.isEmpty(mapping_dict.get('netmask')):
        raise Exception("'netmask' cannot be empty")

      #convert keys to list
      ip_address = mapping_dict.get('ip_address')
      if not isinstance(ip_address, list):
        ip_address = [ip_address]
      netmask = mapping_dict.get('netmask')
      if not isinstance(netmask, list):
        netmask = [netmask]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for ip_address_iterator in ip_address:
        for netmask_iterator in netmask:
          rcpath_tmp =  rcpath+"/network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('ip_address')):
        raise Exception("'ip_address' cannot be empty")
      if util.isEmpty(mapping_dict.get('netmask')):
        raise Exception("'netmask' cannot be empty")

      #convert keys to list
      ip_address = mapping_dict.get('ip_address')
      if not isinstance(ip_address, list):
        ip_address = [ip_address]
      netmask = mapping_dict.get('netmask')
      if not isinstance(netmask, list):
        netmask = [netmask]

      #prepare payload
      network_object_list = []
      for ip_address_iterator in ip_address:
        for netmask_iterator in netmask:
          from servicemodel.controller.devices.device import ssh
          network_object = ssh.network.network()
          network_object.ip_address = ip_address_iterator
          network_object.netmask = netmask_iterator
          network_object_list.append(network_object)

      return network_object_list

