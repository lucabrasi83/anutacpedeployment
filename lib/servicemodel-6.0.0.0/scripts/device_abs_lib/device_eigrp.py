#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class eigrp(object):
  #XPATH devices/device/eigrp/router-eigrp
  class router_eigrp(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eigrp"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      router_eigrp_object_list = self.validate_inputs_form_payload(mapping_dict)

      for router_eigrp_object in router_eigrp_object_list:
        #fetch payload
        router_eigrp_payload = router_eigrp_object.getxml(filter=True)
        util.log_debug('router_eigrp_payload %s'%router_eigrp_payload)
        payload_list.append(router_eigrp_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eigrp"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      router_eigrp_object_list = self.validate_inputs_form_payload(mapping_dict)

      for router_eigrp_object in router_eigrp_object_list:
        #fetch payload
        router_eigrp_payload = router_eigrp_object.getxml(filter=True)

        util.log_debug('router_eigrp_payload %s'%router_eigrp_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=router_eigrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eigrp"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      router_eigrp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      eigrp_name = mapping_dict.get('eigrp_name')
      if not isinstance(eigrp_name, list):
        eigrp_name = [eigrp_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for eigrp_name_iterator in eigrp_name:
        rcpath_tmp =  rcpath+"/router-eigrp=%s"%(util.make_interfacename(eigrp_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, router_eigrp_object in enumerate(router_eigrp_object_list):
        #fetch payload
        router_eigrp_payload = router_eigrp_object.getxml(filter=True)

        util.log_debug('update router_eigrp_payload %s'%router_eigrp_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=router_eigrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eigrp"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('eigrp_name')):
        raise Exception("'eigrp_name' cannot be empty")

      #convert keys to list
      eigrp_name = mapping_dict.get('eigrp_name')
      if not isinstance(eigrp_name, list):
        eigrp_name = [eigrp_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for eigrp_name_iterator in eigrp_name:
        rcpath_tmp =  rcpath+"/router-eigrp=%s"%(util.make_interfacename(eigrp_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('eigrp_name')):
        raise Exception("'eigrp_name' cannot be empty")

      #convert keys to list
      eigrp_name = mapping_dict.get('eigrp_name')
      if not isinstance(eigrp_name, list):
        eigrp_name = [eigrp_name]

      #prepare payload
      router_eigrp_object_list = []
      for eigrp_name_iterator in eigrp_name:
        from servicemodel.controller.devices.device import eigrp
        router_eigrp_object = eigrp.router_eigrp.router_eigrp()
        router_eigrp_object.eigrp_name = eigrp_name_iterator
        router_eigrp_object_list.append(router_eigrp_object)

      return router_eigrp_object_list

    #XPATH devices/device/eigrp/router-eigrp/address-family
    class address_family(AbstractDeviceMgr):
      key_hints = [['eigrp_name']]
      def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( router_eigrp_eigrp_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(router_eigrp_eigrp_name, list):
          router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
        else:
          router_eigrp_eigrp_name_list = router_eigrp_eigrp_name

        for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s"%(util.make_interfacename(router_eigrp_eigrp_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        address_family_object_list = self.validate_inputs_form_payload(mapping_dict)

        for address_family_object in address_family_object_list:
          #fetch payload
          address_family_payload = address_family_object.getxml(filter=True)
          util.log_debug('address_family_payload %s'%address_family_payload)
          payload_list.append(address_family_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, router_eigrp_eigrp_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( router_eigrp_eigrp_name)

        #convert parent keys to list
        if not isinstance(router_eigrp_eigrp_name, list):
          router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
        else:
          router_eigrp_eigrp_name_list = router_eigrp_eigrp_name

        for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s"%(util.make_interfacename(router_eigrp_eigrp_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        address_family_object_list = self.validate_inputs_form_payload(mapping_dict)

        for address_family_object in address_family_object_list:
          #fetch payload
          address_family_payload = address_family_object.getxml(filter=True)

          util.log_debug('address_family_payload %s'%address_family_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_family_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, router_eigrp_eigrp_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( router_eigrp_eigrp_name)


        ##prepare rcpath
        rcpath = "l3features:eigrp/router-eigrp=%s"%(util.make_interfacename(router_eigrp_eigrp_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        address_family_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        as_number = mapping_dict.get('as_number')
        if not isinstance(as_number, list):
          as_number = [as_number]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for as_number_iterator in as_number:
          rcpath_tmp =  rcpath+"/address-family=%s"%(util.make_interfacename(as_number_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, address_family_object in enumerate(address_family_object_list):
          #fetch payload
          address_family_payload = address_family_object.getxml(filter=True)

          util.log_debug('update address_family_payload %s'%address_family_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_family_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, router_eigrp_eigrp_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( router_eigrp_eigrp_name)


        if not isinstance(router_eigrp_eigrp_name, list):
          router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
        else:
          router_eigrp_eigrp_name_list = router_eigrp_eigrp_name

        for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s"%(util.make_interfacename(router_eigrp_eigrp_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('as_number')):
          raise Exception("'as_number' cannot be empty")

        #convert keys to list
        as_number = mapping_dict.get('as_number')
        if not isinstance(as_number, list):
          as_number = [as_number]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for as_number_iterator in as_number:
          rcpath_tmp =  rcpath+"/address-family=%s"%(util.make_interfacename(as_number_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, router_eigrp_eigrp_name):
        #Parent Key Validations
        if util.isEmpty(router_eigrp_eigrp_name):
          raise Exception("'router_eigrp_eigrp_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('as_number')):
          raise Exception("'as_number' cannot be empty")

        #convert keys to list
        as_number = mapping_dict.get('as_number')
        if not isinstance(as_number, list):
          as_number = [as_number]

        #prepare payload
        address_family_object_list = []
        for as_number_iterator in as_number:
          from servicemodel.controller.devices.device.eigrp import router_eigrp
          address_family_object = router_eigrp.address_family.address_family()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
              address_family_object.vrf_name = mapping_dict.get('vrf_name', None)
            else:
              address_family_object.vrf_name._empty_tag = True
          except TypeError:
            pass
          address_family_object.as_number = as_number_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('cast', None)) != ''):
              address_family_object.cast = mapping_dict.get('cast', None)
            else:
              address_family_object.cast._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('router_id', None)) != ''):
              address_family_object.router_id = mapping_dict.get('router_id', None)
            else:
              address_family_object.router_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('nsf', None)) != ''):
              address_family_object.nsf = mapping_dict.get('nsf', None)
            else:
              address_family_object.nsf._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('eigrp_stub', None)) != ''):
              address_family_object.eigrp_stub = mapping_dict.get('eigrp_stub', None)
            else:
              address_family_object.eigrp_stub._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('summary', None)) != ''):
              address_family_object.summary = mapping_dict.get('summary', None)
            else:
              address_family_object.summary._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('redistributed', None)) != ''):
              address_family_object.redistributed = mapping_dict.get('redistributed', None)
            else:
              address_family_object.redistributed._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('topology_base', None)) != ''):
              address_family_object.topology_base = mapping_dict.get('topology_base', None)
            else:
              address_family_object.topology_base._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('internal_route_distance', None)) != ''):
              address_family_object.internal_route_distance = mapping_dict.get('internal_route_distance', None)
            else:
              address_family_object.internal_route_distance._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('external_route_distance', None)) != ''):
              address_family_object.external_route_distance = mapping_dict.get('external_route_distance', None)
            else:
              address_family_object.external_route_distance._empty_tag = True
          except TypeError:
            pass
          address_family_object_list.append(address_family_object)

        return address_family_object_list

      #XPATH devices/device/eigrp/router-eigrp/address-family/af-interface
      class af_interface(AbstractDeviceMgr):
        key_hints = [['eigrp_name'],['as_number']]
        def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          af_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for af_interface_object in af_interface_object_list:
            #fetch payload
            af_interface_payload = af_interface_object.getxml(filter=True)
            util.log_debug('af_interface_payload %s'%af_interface_payload)
            payload_list.append(af_interface_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          af_interface_object_list = self.validate_inputs_form_payload(mapping_dict)

          for af_interface_object in af_interface_object_list:
            #fetch payload
            af_interface_payload = af_interface_object.getxml(filter=True)

            util.log_debug('af_interface_payload %s'%af_interface_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=af_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          af_interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for interface_iterator in interface:
            rcpath_tmp =  rcpath+"/af-interface=%s"%(util.make_interfacename(interface_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, af_interface_object in enumerate(af_interface_object_list):
            #fetch payload
            af_interface_payload = af_interface_object.getxml(filter=True)

            util.log_debug('update af_interface_payload %s'%af_interface_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=af_interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('interface')):
            raise Exception("'interface' cannot be empty")

          #convert keys to list
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for interface_iterator in interface:
            rcpath_tmp =  rcpath+"/af-interface=%s"%(util.make_interfacename(interface_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number):
          #Parent Key Validations
          if util.isEmpty(router_eigrp_eigrp_name):
            raise Exception("'router_eigrp_eigrp_name' cannot be empty")
          if util.isEmpty(address_family_as_number):
            raise Exception("'address_family_as_number' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('interface')):
            raise Exception("'interface' cannot be empty")

          #convert keys to list
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare payload
          af_interface_object_list = []
          for interface_iterator in interface:
            from servicemodel.controller.devices.device.eigrp.router_eigrp import address_family
            af_interface_object = address_family.af_interface.af_interface()
            af_interface_object.interface = interface_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('passive_interface', None)) != ''):
                af_interface_object.passive_interface = mapping_dict.get('passive_interface', None)
              else:
                af_interface_object.passive_interface._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('auth_mode', None)) != ''):
                af_interface_object.auth_mode = mapping_dict.get('auth_mode', None)
              else:
                af_interface_object.auth_mode._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('key_chain', None)) != ''):
                af_interface_object.key_chain = mapping_dict.get('key_chain', None)
              else:
                af_interface_object.key_chain._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('hello_interval', None)) != ''):
                af_interface_object.hello_interval = mapping_dict.get('hello_interval', None)
              else:
                af_interface_object.hello_interval._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('hold_time', None)) != ''):
                af_interface_object.hold_time = mapping_dict.get('hold_time', None)
              else:
                af_interface_object.hold_time._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('split_horizon', None)) != ''):
                af_interface_object.split_horizon = mapping_dict.get('split_horizon', None)
              else:
                af_interface_object.split_horizon._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('stub_site', None)) != ''):
                af_interface_object.stub_site = mapping_dict.get('stub_site', None)
              else:
                af_interface_object.stub_site._empty_tag = True
            except TypeError:
              pass
            af_interface_object_list.append(af_interface_object)

          return af_interface_object_list

        #XPATH devices/device/eigrp/router-eigrp/address-family/af-interface/summary-network
        class summary_network(AbstractDeviceMgr):
          key_hints = [['eigrp_name'],['as_number'],['interface']]
          def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, af_interface_interface, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number, af_interface_interface)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(router_eigrp_eigrp_name, list):
              router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
            else:
              router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
            if not isinstance(address_family_as_number, list):
              address_family_as_number_list = [address_family_as_number]
            else:
              address_family_as_number_list = address_family_as_number
            if not isinstance(af_interface_interface, list):
              af_interface_interface_list = [af_interface_interface]
            else:
              af_interface_interface_list = af_interface_interface

            for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
              for address_family_as_number in address_family_as_number_list:
                for af_interface_interface in af_interface_interface_list:
                  ##prepare rcpath
                  rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s/af-interface=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number),util.make_interfacename(af_interface_interface))
                  rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            summary_network_object_list = self.validate_inputs_form_payload(mapping_dict)

            for summary_network_object in summary_network_object_list:
              #fetch payload
              summary_network_payload = summary_network_object.getxml(filter=True)
              util.log_debug('summary_network_payload %s'%summary_network_payload)
              payload_list.append(summary_network_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, af_interface_interface, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number, af_interface_interface)

            #convert parent keys to list
            if not isinstance(router_eigrp_eigrp_name, list):
              router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
            else:
              router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
            if not isinstance(address_family_as_number, list):
              address_family_as_number_list = [address_family_as_number]
            else:
              address_family_as_number_list = address_family_as_number
            if not isinstance(af_interface_interface, list):
              af_interface_interface_list = [af_interface_interface]
            else:
              af_interface_interface_list = af_interface_interface

            for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
              for address_family_as_number in address_family_as_number_list:
                for af_interface_interface in af_interface_interface_list:
                  ##prepare rcpath
                  rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s/af-interface=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number),util.make_interfacename(af_interface_interface))
                  self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            summary_network_object_list = self.validate_inputs_form_payload(mapping_dict)

            for summary_network_object in summary_network_object_list:
              #fetch payload
              summary_network_payload = summary_network_object.getxml(filter=True)

              util.log_debug('summary_network_payload %s'%summary_network_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=summary_network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, af_interface_interface, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number, af_interface_interface)


            ##prepare rcpath
            rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s/af-interface=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number),util.make_interfacename(af_interface_interface))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            summary_network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            ip_address = mapping_dict.get('ip_address')
            if not isinstance(ip_address, list):
              ip_address = [ip_address]
            netmask = mapping_dict.get('netmask')
            if not isinstance(netmask, list):
              netmask = [netmask]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_address_iterator in ip_address:
              for netmask_iterator in netmask:
                rcpath_tmp =  rcpath+"/summary-network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
                rcpath_list.append(rcpath_tmp)
            for rc_counter, summary_network_object in enumerate(summary_network_object_list):
              #fetch payload
              summary_network_payload = summary_network_object.getxml(filter=True)

              util.log_debug('update summary_network_payload %s'%summary_network_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=summary_network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, af_interface_interface, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number, af_interface_interface)


            if not isinstance(router_eigrp_eigrp_name, list):
              router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
            else:
              router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
            if not isinstance(address_family_as_number, list):
              address_family_as_number_list = [address_family_as_number]
            else:
              address_family_as_number_list = address_family_as_number
            if not isinstance(af_interface_interface, list):
              af_interface_interface_list = [af_interface_interface]
            else:
              af_interface_interface_list = af_interface_interface

            for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
              for address_family_as_number in address_family_as_number_list:
                for af_interface_interface in af_interface_interface_list:
                  ##prepare rcpath
                  rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s/af-interface=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number),util.make_interfacename(af_interface_interface))
                  self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('ip_address')):
              raise Exception("'ip_address' cannot be empty")
            if util.isEmpty(mapping_dict.get('netmask')):
              raise Exception("'netmask' cannot be empty")

            #convert keys to list
            ip_address = mapping_dict.get('ip_address')
            if not isinstance(ip_address, list):
              ip_address = [ip_address]
            netmask = mapping_dict.get('netmask')
            if not isinstance(netmask, list):
              netmask = [netmask]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_address_iterator in ip_address:
              for netmask_iterator in netmask:
                rcpath_tmp =  rcpath+"/summary-network=%s,%s"%(util.make_interfacename(ip_address_iterator),util.make_interfacename(netmask_iterator))
                rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number, af_interface_interface):
            #Parent Key Validations
            if util.isEmpty(router_eigrp_eigrp_name):
              raise Exception("'router_eigrp_eigrp_name' cannot be empty")
            if util.isEmpty(address_family_as_number):
              raise Exception("'address_family_as_number' cannot be empty")
            if util.isEmpty(af_interface_interface):
              raise Exception("'af_interface_interface' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('ip_address')):
              raise Exception("'ip_address' cannot be empty")
            if util.isEmpty(mapping_dict.get('netmask')):
              raise Exception("'netmask' cannot be empty")

            #convert keys to list
            ip_address = mapping_dict.get('ip_address')
            if not isinstance(ip_address, list):
              ip_address = [ip_address]
            netmask = mapping_dict.get('netmask')
            if not isinstance(netmask, list):
              netmask = [netmask]

            #prepare payload
            summary_network_object_list = []
            for ip_address_iterator in ip_address:
              for netmask_iterator in netmask:
                from servicemodel.controller.devices.device.eigrp.router_eigrp.address_family import af_interface
                summary_network_object = af_interface.summary_network.summary_network()
                summary_network_object.ip_address = ip_address_iterator
                summary_network_object.netmask = netmask_iterator
                summary_network_object_list.append(summary_network_object)

            return summary_network_object_list

      #XPATH devices/device/eigrp/router-eigrp/address-family/network
      class network(AbstractDeviceMgr):
        key_hints = [['eigrp_name'],['as_number']]
        def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)
            util.log_debug('network_payload %s'%network_payload)
            payload_list.append(network_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('network_payload %s'%network_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, network_object in enumerate(network_object_list):
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('update network_payload %s'%network_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number):
          #Parent Key Validations
          if util.isEmpty(router_eigrp_eigrp_name):
            raise Exception("'router_eigrp_eigrp_name' cannot be empty")
          if util.isEmpty(address_family_as_number):
            raise Exception("'address_family_as_number' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          network_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.eigrp.router_eigrp import address_family
            network_object = address_family.network.network()
            network_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                network_object.netmask = mapping_dict.get('netmask', None)
              else:
                network_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('route_map', None)) != ''):
                network_object.route_map = mapping_dict.get('route_map', None)
              else:
                network_object.route_map._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('wild_card', None)) != ''):
                network_object.wild_card = mapping_dict.get('wild_card', None)
              else:
                network_object.wild_card._empty_tag = True
            except TypeError:
              pass
            network_object_list.append(network_object)

          return network_object_list

      #XPATH devices/device/eigrp/router-eigrp/address-family/distribute-list
      class distribute_list(AbstractDeviceMgr):
        key_hints = [['eigrp_name'],['as_number']]
        def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          distribute_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for distribute_list_object in distribute_list_object_list:
            #fetch payload
            distribute_list_payload = distribute_list_object.getxml(filter=True)
            util.log_debug('distribute_list_payload %s'%distribute_list_payload)
            payload_list.append(distribute_list_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          distribute_list_object_list = self.validate_inputs_form_payload(mapping_dict)

          for distribute_list_object in distribute_list_object_list:
            #fetch payload
            distribute_list_payload = distribute_list_object.getxml(filter=True)

            util.log_debug('distribute_list_payload %s'%distribute_list_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=distribute_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          distribute_list_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          filter = mapping_dict.get('filter')
          if not isinstance(filter, list):
            filter = [filter]
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filter_iterator in filter:
            for interface_iterator in interface:
              rcpath_tmp =  rcpath+"/distribute-list=%s,%s"%(util.make_interfacename(filter_iterator),util.make_interfacename(interface_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, distribute_list_object in enumerate(distribute_list_object_list):
            #fetch payload
            distribute_list_payload = distribute_list_object.getxml(filter=True)

            util.log_debug('update distribute_list_payload %s'%distribute_list_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=distribute_list_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('filter')):
            raise Exception("'filter' cannot be empty")
          if util.isEmpty(mapping_dict.get('interface')):
            raise Exception("'interface' cannot be empty")

          #convert keys to list
          filter = mapping_dict.get('filter')
          if not isinstance(filter, list):
            filter = [filter]
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for filter_iterator in filter:
            for interface_iterator in interface:
              rcpath_tmp =  rcpath+"/distribute-list=%s,%s"%(util.make_interfacename(filter_iterator),util.make_interfacename(interface_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number):
          #Parent Key Validations
          if util.isEmpty(router_eigrp_eigrp_name):
            raise Exception("'router_eigrp_eigrp_name' cannot be empty")
          if util.isEmpty(address_family_as_number):
            raise Exception("'address_family_as_number' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('filter')):
            raise Exception("'filter' cannot be empty")
          if util.isEmpty(mapping_dict.get('interface')):
            raise Exception("'interface' cannot be empty")

          #convert keys to list
          filter = mapping_dict.get('filter')
          if not isinstance(filter, list):
            filter = [filter]
          interface = mapping_dict.get('interface')
          if not isinstance(interface, list):
            interface = [interface]

          #prepare payload
          distribute_list_object_list = []
          for filter_iterator in filter:
            for interface_iterator in interface:
              from servicemodel.controller.devices.device.eigrp.router_eigrp import address_family
              distribute_list_object = address_family.distribute_list.distribute_list()
              try:
                if (update == False) or (update == True and str(mapping_dict.get('route_map', None)) != ''):
                  distribute_list_object.route_map = mapping_dict.get('route_map', None)
                else:
                  distribute_list_object.route_map._empty_tag = True
              except TypeError:
                pass
              distribute_list_object.filter = filter_iterator
              distribute_list_object.interface = interface_iterator
              distribute_list_object_list.append(distribute_list_object)

          return distribute_list_object_list

      #XPATH devices/device/eigrp/router-eigrp/address-family/summary-metric
      class summary_metric(AbstractDeviceMgr):
        key_hints = [['eigrp_name'],['as_number']]
        def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          summary_metric_object_list = self.validate_inputs_form_payload(mapping_dict)

          for summary_metric_object in summary_metric_object_list:
            #fetch payload
            summary_metric_payload = summary_metric_object.getxml(filter=True)
            util.log_debug('summary_metric_payload %s'%summary_metric_payload)
            payload_list.append(summary_metric_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          summary_metric_object_list = self.validate_inputs_form_payload(mapping_dict)

          for summary_metric_object in summary_metric_object_list:
            #fetch payload
            summary_metric_payload = summary_metric_object.getxml(filter=True)

            util.log_debug('summary_metric_payload %s'%summary_metric_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=summary_metric_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          summary_metric_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          summary = mapping_dict.get('summary')
          if not isinstance(summary, list):
            summary = [summary]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for summary_iterator in summary:
            rcpath_tmp =  rcpath+"/summary-metric=%s"%(util.make_interfacename(summary_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, summary_metric_object in enumerate(summary_metric_object_list):
            #fetch payload
            summary_metric_payload = summary_metric_object.getxml(filter=True)

            util.log_debug('update summary_metric_payload %s'%summary_metric_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=summary_metric_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('summary')):
            raise Exception("'summary' cannot be empty")

          #convert keys to list
          summary = mapping_dict.get('summary')
          if not isinstance(summary, list):
            summary = [summary]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for summary_iterator in summary:
            rcpath_tmp =  rcpath+"/summary-metric=%s"%(util.make_interfacename(summary_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number):
          #Parent Key Validations
          if util.isEmpty(router_eigrp_eigrp_name):
            raise Exception("'router_eigrp_eigrp_name' cannot be empty")
          if util.isEmpty(address_family_as_number):
            raise Exception("'address_family_as_number' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('summary')):
            raise Exception("'summary' cannot be empty")

          #convert keys to list
          summary = mapping_dict.get('summary')
          if not isinstance(summary, list):
            summary = [summary]

          #prepare payload
          summary_metric_object_list = []
          for summary_iterator in summary:
            from servicemodel.controller.devices.device.eigrp.router_eigrp import address_family
            summary_metric_object = address_family.summary_metric.summary_metric()
            summary_metric_object.summary = summary_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('bandwidth_metric', None)) != ''):
                summary_metric_object.bandwidth_metric = mapping_dict.get('bandwidth_metric', None)
              else:
                summary_metric_object.bandwidth_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('delay_metric', None)) != ''):
                summary_metric_object.delay_metric = mapping_dict.get('delay_metric', None)
              else:
                summary_metric_object.delay_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('reliability_metric', None)) != ''):
                summary_metric_object.reliability_metric = mapping_dict.get('reliability_metric', None)
              else:
                summary_metric_object.reliability_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('load_metric', None)) != ''):
                summary_metric_object.load_metric = mapping_dict.get('load_metric', None)
              else:
                summary_metric_object.load_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                summary_metric_object.mtu = mapping_dict.get('mtu', None)
              else:
                summary_metric_object.mtu._empty_tag = True
            except TypeError:
              pass
            summary_metric_object_list.append(summary_metric_object)

          return summary_metric_object_list

      #XPATH devices/device/eigrp/router-eigrp/address-family/redistribute
      class redistribute(AbstractDeviceMgr):
        key_hints = [['eigrp_name'],['as_number']]
        def getRcpathPayload(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict)

          for redistribute_object in redistribute_object_list:
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)
            util.log_debug('redistribute_payload %s'%redistribute_payload)
            payload_list.append(redistribute_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)

          #convert parent keys to list
          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict)

          for redistribute_object in redistribute_object_list:
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)

            util.log_debug('redistribute_payload %s'%redistribute_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=redistribute_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          ##prepare rcpath
          rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          redistribute_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          protocol = mapping_dict.get('protocol')
          if not isinstance(protocol, list):
            protocol = [protocol]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for protocol_iterator in protocol:
            rcpath_tmp =  rcpath+"/redistribute=%s"%(util.make_interfacename(protocol_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, redistribute_object in enumerate(redistribute_object_list):
            #fetch payload
            redistribute_payload = redistribute_object.getxml(filter=True)

            util.log_debug('update redistribute_payload %s'%redistribute_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=redistribute_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, router_eigrp_eigrp_name, address_family_as_number, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( router_eigrp_eigrp_name, address_family_as_number)


          if not isinstance(router_eigrp_eigrp_name, list):
            router_eigrp_eigrp_name_list = [router_eigrp_eigrp_name]
          else:
            router_eigrp_eigrp_name_list = router_eigrp_eigrp_name
          if not isinstance(address_family_as_number, list):
            address_family_as_number_list = [address_family_as_number]
          else:
            address_family_as_number_list = address_family_as_number

          for router_eigrp_eigrp_name in router_eigrp_eigrp_name_list:
            for address_family_as_number in address_family_as_number_list:
              ##prepare rcpath
              rcpath = "l3features:eigrp/router-eigrp=%s/address-family=%s"%(util.make_interfacename(router_eigrp_eigrp_name),util.make_interfacename(address_family_as_number))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('protocol')):
            raise Exception("'protocol' cannot be empty")

          #convert keys to list
          protocol = mapping_dict.get('protocol')
          if not isinstance(protocol, list):
            protocol = [protocol]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for protocol_iterator in protocol:
            rcpath_tmp =  rcpath+"/redistribute=%s"%(util.make_interfacename(protocol_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, router_eigrp_eigrp_name, address_family_as_number):
          #Parent Key Validations
          if util.isEmpty(router_eigrp_eigrp_name):
            raise Exception("'router_eigrp_eigrp_name' cannot be empty")
          if util.isEmpty(address_family_as_number):
            raise Exception("'address_family_as_number' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('protocol')):
            raise Exception("'protocol' cannot be empty")

          #convert keys to list
          protocol = mapping_dict.get('protocol')
          if not isinstance(protocol, list):
            protocol = [protocol]

          #prepare payload
          redistribute_object_list = []
          for protocol_iterator in protocol:
            from servicemodel.controller.devices.device.eigrp.router_eigrp import address_family
            redistribute_object = address_family.redistribute.redistribute()
            redistribute_object.protocol = protocol_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('as_number', None)) != ''):
                redistribute_object.as_number = mapping_dict.get('as_number', None)
              else:
                redistribute_object.as_number._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ospf_id', None)) != ''):
                redistribute_object.ospf_id = mapping_dict.get('ospf_id', None)
              else:
                redistribute_object.ospf_id._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('route_map', None)) != ''):
                redistribute_object.route_map = mapping_dict.get('route_map', None)
              else:
                redistribute_object.route_map._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('bandwidth_metric', None)) != ''):
                redistribute_object.bandwidth_metric = mapping_dict.get('bandwidth_metric', None)
              else:
                redistribute_object.bandwidth_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('delay_metric', None)) != ''):
                redistribute_object.delay_metric = mapping_dict.get('delay_metric', None)
              else:
                redistribute_object.delay_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('reliability_metric', None)) != ''):
                redistribute_object.reliability_metric = mapping_dict.get('reliability_metric', None)
              else:
                redistribute_object.reliability_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('load_metric', None)) != ''):
                redistribute_object.load_metric = mapping_dict.get('load_metric', None)
              else:
                redistribute_object.load_metric._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                redistribute_object.mtu = mapping_dict.get('mtu', None)
              else:
                redistribute_object.mtu._empty_tag = True
            except TypeError:
              pass
            redistribute_object_list.append(redistribute_object)

          return redistribute_object_list

