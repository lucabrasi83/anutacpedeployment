#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/aaa-group
class aaa_group(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    aaa_group_object_list = self.validate_inputs_form_payload(mapping_dict)

    for aaa_group_object in aaa_group_object_list:
      #fetch payload
      aaa_group_payload = aaa_group_object.getxml(filter=True)
      util.log_debug('aaa_group_payload %s'%aaa_group_payload)
      payload_list.append(aaa_group_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    aaa_group_object_list = self.validate_inputs_form_payload(mapping_dict)

    for aaa_group_object in aaa_group_object_list:
      #fetch payload
      aaa_group_payload = aaa_group_object.getxml(filter=True)

      util.log_debug('aaa_group_payload %s'%aaa_group_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=aaa_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    aaa_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/aaa-group"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, aaa_group_object in enumerate(aaa_group_object_list):
      #fetch payload
      aaa_group_payload = aaa_group_object.getxml(filter=True)

      util.log_debug('update aaa_group_payload %s'%aaa_group_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=aaa_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/aaa-group"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs

    #convert keys to list

    #prepare payload
    aaa_group_object_list = []
    from servicemodel.controller.devices import device
    aaa_group_object = device.aaa_group.aaa_group()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('tacacs_server_group', None)) != ''):
        aaa_group_object.tacacs_server_group = mapping_dict.get('tacacs_server_group', None)
      else:
        aaa_group_object.tacacs_server_group._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
        aaa_group_object.vrf = mapping_dict.get('vrf', None)
      else:
        aaa_group_object.vrf._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('source_interface', None)) != ''):
        aaa_group_object.source_interface = mapping_dict.get('source_interface', None)
      else:
        aaa_group_object.source_interface._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('aaa_new_model', None)) != ''):
        aaa_group_object.aaa_new_model = mapping_dict.get('aaa_new_model', None)
      else:
        aaa_group_object.aaa_new_model._empty_tag = True
    except TypeError:
      pass
    aaa_group_object_list.append(aaa_group_object)

    return aaa_group_object_list

  #XPATH devices/device/aaa-group/aaa-servers
  class aaa_servers(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_object_list = self.validate_inputs_form_payload(mapping_dict)

      for aaa_servers_object in aaa_servers_object_list:
        #fetch payload
        aaa_servers_payload = aaa_servers_object.getxml(filter=True)
        util.log_debug('aaa_servers_payload %s'%aaa_servers_payload)
        payload_list.append(aaa_servers_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_object_list = self.validate_inputs_form_payload(mapping_dict)

      for aaa_servers_object in aaa_servers_object_list:
        #fetch payload
        aaa_servers_payload = aaa_servers_object.getxml(filter=True)

        util.log_debug('aaa_servers_payload %s'%aaa_servers_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=aaa_servers_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      aaa_server = mapping_dict.get('aaa_server')
      if not isinstance(aaa_server, list):
        aaa_server = [aaa_server]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for aaa_server_iterator in aaa_server:
        rcpath_tmp =  rcpath+"/aaa-servers=%s"%(util.make_interfacename(aaa_server_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, aaa_servers_object in enumerate(aaa_servers_object_list):
        #fetch payload
        aaa_servers_payload = aaa_servers_object.getxml(filter=True)

        util.log_debug('update aaa_servers_payload %s'%aaa_servers_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=aaa_servers_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('aaa_server')):
        raise Exception("'aaa_server' cannot be empty")

      #convert keys to list
      aaa_server = mapping_dict.get('aaa_server')
      if not isinstance(aaa_server, list):
        aaa_server = [aaa_server]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for aaa_server_iterator in aaa_server:
        rcpath_tmp =  rcpath+"/aaa-servers=%s"%(util.make_interfacename(aaa_server_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('aaa_server')):
        raise Exception("'aaa_server' cannot be empty")

      #convert keys to list
      aaa_server = mapping_dict.get('aaa_server')
      if not isinstance(aaa_server, list):
        aaa_server = [aaa_server]

      #prepare payload
      aaa_servers_object_list = []
      for aaa_server_iterator in aaa_server:
        from servicemodel.controller.devices.device import aaa_group
        aaa_servers_object = aaa_group.aaa_servers.aaa_servers()
        aaa_servers_object.aaa_server = aaa_server_iterator
        aaa_servers_object_list.append(aaa_servers_object)

      return aaa_servers_object_list

  #XPATH devices/device/aaa-group/aaa-servers-private
  class aaa_servers_private(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_private_object_list = self.validate_inputs_form_payload(mapping_dict)

      for aaa_servers_private_object in aaa_servers_private_object_list:
        #fetch payload
        aaa_servers_private_payload = aaa_servers_private_object.getxml(filter=True)
        util.log_debug('aaa_servers_private_payload %s'%aaa_servers_private_payload)
        payload_list.append(aaa_servers_private_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_private_object_list = self.validate_inputs_form_payload(mapping_dict)

      for aaa_servers_private_object in aaa_servers_private_object_list:
        #fetch payload
        aaa_servers_private_payload = aaa_servers_private_object.getxml(filter=True)

        util.log_debug('aaa_servers_private_payload %s'%aaa_servers_private_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=aaa_servers_private_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      aaa_servers_private_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      aaa_server_private = mapping_dict.get('aaa_server_private')
      if not isinstance(aaa_server_private, list):
        aaa_server_private = [aaa_server_private]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for aaa_server_private_iterator in aaa_server_private:
        rcpath_tmp =  rcpath+"/aaa-servers-private=%s"%(util.make_interfacename(aaa_server_private_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, aaa_servers_private_object in enumerate(aaa_servers_private_object_list):
        #fetch payload
        aaa_servers_private_payload = aaa_servers_private_object.getxml(filter=True)

        util.log_debug('update aaa_servers_private_payload %s'%aaa_servers_private_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=aaa_servers_private_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('aaa_server_private')):
        raise Exception("'aaa_server_private' cannot be empty")

      #convert keys to list
      aaa_server_private = mapping_dict.get('aaa_server_private')
      if not isinstance(aaa_server_private, list):
        aaa_server_private = [aaa_server_private]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for aaa_server_private_iterator in aaa_server_private:
        rcpath_tmp =  rcpath+"/aaa-servers-private=%s"%(util.make_interfacename(aaa_server_private_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('aaa_server_private')):
        raise Exception("'aaa_server_private' cannot be empty")

      #convert keys to list
      aaa_server_private = mapping_dict.get('aaa_server_private')
      if not isinstance(aaa_server_private, list):
        aaa_server_private = [aaa_server_private]

      #prepare payload
      aaa_servers_private_object_list = []
      for aaa_server_private_iterator in aaa_server_private:
        from servicemodel.controller.devices.device import aaa_group
        aaa_servers_private_object = aaa_group.aaa_servers_private.aaa_servers_private()
        aaa_servers_private_object.aaa_server_private = aaa_server_private_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('privilege_level', None)) != ''):
            aaa_servers_private_object.privilege_level = mapping_dict.get('privilege_level', None)
          else:
            aaa_servers_private_object.privilege_level._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('privilege_key', None)) != ''):
            aaa_servers_private_object.privilege_key = mapping_dict.get('privilege_key', None)
          else:
            aaa_servers_private_object.privilege_key._empty_tag = True
        except TypeError:
          pass
        aaa_servers_private_object_list.append(aaa_servers_private_object)

      return aaa_servers_private_object_list

  #XPATH devices/device/aaa-group/authentication
  class authentication(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authentication_object_list = self.validate_inputs_form_payload(mapping_dict)

      for authentication_object in authentication_object_list:
        #fetch payload
        authentication_payload = authentication_object.getxml(filter=True)
        util.log_debug('authentication_payload %s'%authentication_payload)
        payload_list.append(authentication_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authentication_object_list = self.validate_inputs_form_payload(mapping_dict)

      for authentication_object in authentication_object_list:
        #fetch payload
        authentication_payload = authentication_object.getxml(filter=True)

        util.log_debug('authentication_payload %s'%authentication_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=authentication_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authentication_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/authentication"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, authentication_object in enumerate(authentication_object_list):
        #fetch payload
        authentication_payload = authentication_object.getxml(filter=True)

        util.log_debug('update authentication_payload %s'%authentication_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=authentication_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/authentication"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      authentication_object_list = []
      from servicemodel.controller.devices.device import aaa_group
      authentication_object = aaa_group.authentication.authentication()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('server_group', None)) != ''):
          authentication_object.server_group = mapping_dict.get('server_group', None)
        else:
          authentication_object.server_group._empty_tag = True
      except TypeError:
        pass
      authentication_object_list.append(authentication_object)

      return authentication_object_list

  #XPATH devices/device/aaa-group/authorization
  class authorization(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authorization_object_list = self.validate_inputs_form_payload(mapping_dict)

      for authorization_object in authorization_object_list:
        #fetch payload
        authorization_payload = authorization_object.getxml(filter=True)
        util.log_debug('authorization_payload %s'%authorization_payload)
        payload_list.append(authorization_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authorization_object_list = self.validate_inputs_form_payload(mapping_dict)

      for authorization_object in authorization_object_list:
        #fetch payload
        authorization_payload = authorization_object.getxml(filter=True)

        util.log_debug('authorization_payload %s'%authorization_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=authorization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      authorization_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/authorization"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, authorization_object in enumerate(authorization_object_list):
        #fetch payload
        authorization_payload = authorization_object.getxml(filter=True)

        util.log_debug('update authorization_payload %s'%authorization_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=authorization_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/authorization"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      authorization_object_list = []
      from servicemodel.controller.devices.device import aaa_group
      authorization_object = aaa_group.authorization.authorization()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('server_group', None)) != ''):
          authorization_object.server_group = mapping_dict.get('server_group', None)
        else:
          authorization_object.server_group._empty_tag = True
      except TypeError:
        pass
      authorization_object_list.append(authorization_object)

      return authorization_object_list

  #XPATH devices/device/aaa-group/accounting
  class accounting(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      accounting_object_list = self.validate_inputs_form_payload(mapping_dict)

      for accounting_object in accounting_object_list:
        #fetch payload
        accounting_payload = accounting_object.getxml(filter=True)
        util.log_debug('accounting_payload %s'%accounting_payload)
        payload_list.append(accounting_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      accounting_object_list = self.validate_inputs_form_payload(mapping_dict)

      for accounting_object in accounting_object_list:
        #fetch payload
        accounting_payload = accounting_object.getxml(filter=True)

        util.log_debug('accounting_payload %s'%accounting_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=accounting_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      accounting_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/accounting"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, accounting_object in enumerate(accounting_object_list):
        #fetch payload
        accounting_payload = accounting_object.getxml(filter=True)

        util.log_debug('update accounting_payload %s'%accounting_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=accounting_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "basicDeviceConfigs:aaa-group"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/accounting"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      accounting_object_list = []
      from servicemodel.controller.devices.device import aaa_group
      accounting_object = aaa_group.accounting.accounting()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('server_group', None)) != ''):
          accounting_object.server_group = mapping_dict.get('server_group', None)
        else:
          accounting_object.server_group._empty_tag = True
      except TypeError:
        pass
      accounting_object_list.append(accounting_object)

      return accounting_object_list

