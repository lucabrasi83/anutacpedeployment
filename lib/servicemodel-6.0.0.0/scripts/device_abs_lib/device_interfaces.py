#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class interfaces(object):
  #XPATH devices/device/interfaces/interface
  class interface(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "interface:interfaces"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_object_list = self.validate_inputs_form_payload(mapping_dict)

      for interface_object in interface_object_list:
        #fetch payload
        interface_payload = interface_object.getxml(filter=True)
        util.log_debug('interface_payload %s'%interface_payload)
        payload_list.append(interface_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "interface:interfaces"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_object_list = self.validate_inputs_form_payload(mapping_dict)

      for interface_object in interface_object_list:
        #fetch payload
        interface_payload = interface_object.getxml(filter=True)

        util.log_debug('interface_payload %s'%interface_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "interface:interfaces"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      long_name = mapping_dict.get('long_name')
      if not isinstance(long_name, list):
        long_name = [long_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for long_name_iterator in long_name:
        rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(long_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, interface_object in enumerate(interface_object_list):
        #fetch payload
        interface_payload = interface_object.getxml(filter=True)

        util.log_debug('update interface_payload %s'%interface_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "interface:interfaces"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('long_name')):
        raise Exception("'long_name' cannot be empty")

      #convert keys to list
      long_name = mapping_dict.get('long_name')
      if not isinstance(long_name, list):
        long_name = [long_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for long_name_iterator in long_name:
        rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(long_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('long_name')):
        raise Exception("'long_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      long_name = mapping_dict.get('long_name')
      if not isinstance(long_name, list):
        long_name = [long_name]

      #prepare payload
      interface_object_list = []
      for long_name_iterator in long_name:
        from servicemodel.controller.devices.device import interfaces
        interface_object = interfaces.interface.interface()
        interface_object.long_name = long_name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('name', None)) != ''):
            interface_object.name = mapping_dict.get('name', None)
          else:
            interface_object.name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('if_index', None)) != ''):
            interface_object.if_index = mapping_dict.get('if_index', None)
          else:
            interface_object.if_index._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            interface_object.description = mapping_dict.get('description', None)
          else:
            interface_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
            interface_object.mode = mapping_dict.get('mode', None)
          else:
            interface_object.mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
            interface_object.mtu = mapping_dict.get('mtu', None)
          else:
            interface_object.mtu._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hold_time_up', None)) != ''):
            interface_object.hold_time_up = mapping_dict.get('hold_time_up', None)
          else:
            interface_object.hold_time_up._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hold_time_down', None)) != ''):
            interface_object.hold_time_down = mapping_dict.get('hold_time_down', None)
          else:
            interface_object.hold_time_down._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('physical_address', None)) != ''):
            interface_object.physical_address = mapping_dict.get('physical_address', None)
          else:
            interface_object.physical_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rnc_name', None)) != ''):
            interface_object.rnc_name = mapping_dict.get('rnc_name', None)
          else:
            interface_object.rnc_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port', None)) != ''):
            interface_object.port = mapping_dict.get('port', None)
          else:
            interface_object.port._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dhcp', None)) != ''):
            interface_object.dhcp = mapping_dict.get('dhcp', None)
          else:
            interface_object.dhcp._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inpath_optimisation', None)) != ''):
            interface_object.inpath_optimisation = mapping_dict.get('inpath_optimisation', None)
          else:
            interface_object.inpath_optimisation._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
            interface_object.ip_address = mapping_dict.get('ip_address', None)
          else:
            interface_object.ip_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            interface_object.netmask = mapping_dict.get('netmask', None)
          else:
            interface_object.netmask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipv4_prefix_length', None)) != ''):
            interface_object.ipv4_prefix_length = mapping_dict.get('ipv4_prefix_length', None)
          else:
            interface_object.ipv4_prefix_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipv6_address', None)) != ''):
            interface_object.ipv6_address = mapping_dict.get('ipv6_address', None)
          else:
            interface_object.ipv6_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipv6_prefix_length', None)) != ''):
            interface_object.ipv6_prefix_length = mapping_dict.get('ipv6_prefix_length', None)
          else:
            interface_object.ipv6_prefix_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('alias_address', None)) != ''):
            interface_object.alias_address = mapping_dict.get('alias_address', None)
          else:
            interface_object.alias_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('gateway', None)) != ''):
            interface_object.gateway = mapping_dict.get('gateway', None)
          else:
            interface_object.gateway._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inpath_gateway', None)) != ''):
            interface_object.inpath_gateway = mapping_dict.get('inpath_gateway', None)
          else:
            interface_object.inpath_gateway._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('primaryip', None)) != ''):
            interface_object.primaryip = mapping_dict.get('primaryip', None)
          else:
            interface_object.primaryip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('secondaryip', None)) != ''):
            interface_object.secondaryip = mapping_dict.get('secondaryip', None)
          else:
            interface_object.secondaryip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('admin_state', None)) != ''):
            interface_object.admin_state = mapping_dict.get('admin_state', None)
          else:
            interface_object.admin_state._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('operation_state', None)) != ''):
            interface_object._set_operation_state(mapping_dict.get('operation_state', None))
          else:
            interface_object._unset_operation_state()
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('out_bandwidth', None)) != ''):
            interface_object.out_bandwidth = mapping_dict.get('out_bandwidth', None)
          else:
            interface_object.out_bandwidth._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('in_bandwidth', None)) != ''):
            interface_object.in_bandwidth = mapping_dict.get('in_bandwidth', None)
          else:
            interface_object.in_bandwidth._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('speed', None)) != ''):
            interface_object.speed = mapping_dict.get('speed', None)
          else:
            interface_object.speed._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('native_vlan', None)) != ''):
            interface_object.native_vlan = mapping_dict.get('native_vlan', None)
          else:
            interface_object.native_vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('portfast', None)) != ''):
            interface_object.portfast = mapping_dict.get('portfast', None)
          else:
            interface_object.portfast._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('service', None)) != ''):
            interface_object.service = mapping_dict.get('service', None)
          else:
            interface_object.service._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cdp', None)) != ''):
            interface_object.cdp = mapping_dict.get('cdp', None)
          else:
            interface_object.cdp._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bpduguard', None)) != ''):
            interface_object.bpduguard = mapping_dict.get('bpduguard', None)
          else:
            interface_object.bpduguard._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('broadcast', None)) != ''):
            interface_object.broadcast = mapping_dict.get('broadcast', None)
          else:
            interface_object.broadcast._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nonegotiate', None)) != ''):
            interface_object.nonegotiate = mapping_dict.get('nonegotiate', None)
          else:
            interface_object.nonegotiate._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('power_inline', None)) != ''):
            interface_object.power_inline = mapping_dict.get('power_inline', None)
          else:
            interface_object.power_inline._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('value', None)) != ''):
            interface_object.value = mapping_dict.get('value', None)
          else:
            interface_object.value._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('priority_queue', None)) != ''):
            interface_object.priority_queue = mapping_dict.get('priority_queue', None)
          else:
            interface_object.priority_queue._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('voice_vlan', None)) != ''):
            interface_object.voice_vlan = mapping_dict.get('voice_vlan', None)
          else:
            interface_object.voice_vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('level', None)) != ''):
            interface_object.level = mapping_dict.get('level', None)
          else:
            interface_object.level._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('speed_unit', None)) != ''):
            interface_object.speed_unit = mapping_dict.get('speed_unit', None)
          else:
            interface_object.speed_unit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('policer_name', None)) != ''):
            interface_object.policer_name = mapping_dict.get('policer_name', None)
          else:
            interface_object.policer_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('unit', None)) != ''):
            interface_object.unit = mapping_dict.get('unit', None)
          else:
            interface_object.unit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan_count', None)) != ''):
            interface_object._set_vlan_count(mapping_dict.get('vlan_count', None))
          else:
            interface_object._unset_vlan_count()
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
            interface_object.context_name = mapping_dict.get('context_name', None)
          else:
            interface_object.context_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('visible_interface', None)) != ''):
            interface_object.visible_interface = mapping_dict.get('visible_interface', None)
          else:
            interface_object.visible_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inside_name', None)) != ''):
            interface_object.inside_name = mapping_dict.get('inside_name', None)
          else:
            interface_object.inside_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('security_level_inside', None)) != ''):
            interface_object.security_level_inside = mapping_dict.get('security_level_inside', None)
          else:
            interface_object.security_level_inside._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mpls_device_role', None)) != ''):
            interface_object.mpls_device_role = mapping_dict.get('mpls_device_role', None)
          else:
            interface_object.mpls_device_role._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inner_vlan', None)) != ''):
            interface_object.inner_vlan = mapping_dict.get('inner_vlan', None)
          else:
            interface_object.inner_vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('outbound_qos', None)) != ''):
            interface_object.outbound_qos = mapping_dict.get('outbound_qos', None)
          else:
            interface_object.outbound_qos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inbound_qos', None)) != ''):
            interface_object.inbound_qos = mapping_dict.get('inbound_qos', None)
          else:
            interface_object.inbound_qos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('load_interval_delay', None)) != ''):
            interface_object.load_interval_delay = mapping_dict.get('load_interval_delay', None)
          else:
            interface_object.load_interval_delay._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('in_queue_length', None)) != ''):
            interface_object.in_queue_length = mapping_dict.get('in_queue_length', None)
          else:
            interface_object.in_queue_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('out_queue_length', None)) != ''):
            interface_object.out_queue_length = mapping_dict.get('out_queue_length', None)
          else:
            interface_object.out_queue_length._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('link_negotiation', None)) != ''):
            interface_object.link_negotiation = mapping_dict.get('link_negotiation', None)
          else:
            interface_object.link_negotiation._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_receive', None)) != ''):
            interface_object.vrf_receive = mapping_dict.get('vrf_receive', None)
          else:
            interface_object.vrf_receive._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bgp_policy', None)) != ''):
            interface_object.bgp_policy = mapping_dict.get('bgp_policy', None)
          else:
            interface_object.bgp_policy._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bgp_policy_qos', None)) != ''):
            interface_object.bgp_policy_qos = mapping_dict.get('bgp_policy_qos', None)
          else:
            interface_object.bgp_policy_qos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('pbr_policy', None)) != ''):
            interface_object.pbr_policy = mapping_dict.get('pbr_policy', None)
          else:
            interface_object.pbr_policy._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_definition_mode', None)) != ''):
            interface_object.vrf_definition_mode = mapping_dict.get('vrf_definition_mode', None)
          else:
            interface_object.vrf_definition_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('encap_mode', None)) != ''):
            interface_object.encap_mode = mapping_dict.get('encap_mode', None)
          else:
            interface_object.encap_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_number', None)) != ''):
            interface_object.port_number = mapping_dict.get('port_number', None)
          else:
            interface_object.port_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mgmt_profile', None)) != ''):
            interface_object.mgmt_profile = mapping_dict.get('mgmt_profile', None)
          else:
            interface_object.mgmt_profile._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('address1_comment', None)) != ''):
            interface_object.address1_comment = mapping_dict.get('address1_comment', None)
          else:
            interface_object.address1_comment._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('address2_comment', None)) != ''):
            interface_object.address2_comment = mapping_dict.get('address2_comment', None)
          else:
            interface_object.address2_comment._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rpf_check', None)) != ''):
            interface_object.rpf_check = mapping_dict.get('rpf_check', None)
          else:
            interface_object.rpf_check._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('postscrub_unit', None)) != ''):
            interface_object.postscrub_unit = mapping_dict.get('postscrub_unit', None)
          else:
            interface_object.postscrub_unit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('keepalive_time', None)) != ''):
            interface_object.keepalive_time = mapping_dict.get('keepalive_time', None)
          else:
            interface_object.keepalive_time._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_ethernet_number', None)) != ''):
            interface_object.virtual_ethernet_number = mapping_dict.get('virtual_ethernet_number', None)
          else:
            interface_object.virtual_ethernet_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ethernet_number_vpls', None)) != ''):
            interface_object.ethernet_number_vpls = mapping_dict.get('ethernet_number_vpls', None)
          else:
            interface_object.ethernet_number_vpls._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cos', None)) != ''):
            interface_object.cos = mapping_dict.get('cos', None)
          else:
            interface_object.cos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_number_vpls', None)) != ''):
            interface_object.port_number_vpls = mapping_dict.get('port_number_vpls', None)
          else:
            interface_object.port_number_vpls._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('slot_number', None)) != ''):
            interface_object.slot_number = mapping_dict.get('slot_number', None)
          else:
            interface_object.slot_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('full_slot_number', None)) != ''):
            interface_object.full_slot_number = mapping_dict.get('full_slot_number', None)
          else:
            interface_object.full_slot_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('slot_module_number', None)) != ''):
            interface_object.slot_module_number = mapping_dict.get('slot_module_number', None)
          else:
            interface_object.slot_module_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vpn_instance_name', None)) != ''):
            interface_object.vpn_instance_name = mapping_dict.get('vpn_instance_name', None)
          else:
            interface_object.vpn_instance_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vsi_vlan_name', None)) != ''):
            interface_object.vsi_vlan_name = mapping_dict.get('vsi_vlan_name', None)
          else:
            interface_object.vsi_vlan_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_type', None)) != ''):
            interface_object.port_type = mapping_dict.get('port_type', None)
          else:
            interface_object.port_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('if_type', None)) != ''):
            interface_object.if_type = mapping_dict.get('if_type', None)
          else:
            interface_object.if_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('arp_timeout', None)) != ''):
            interface_object.arp_timeout = mapping_dict.get('arp_timeout', None)
          else:
            interface_object.arp_timeout._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_number_vlan', None)) != ''):
            interface_object.port_number_vlan = mapping_dict.get('port_number_vlan', None)
          else:
            interface_object.port_number_vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vpls_name', None)) != ''):
            interface_object.vpls_name = mapping_dict.get('vpls_name', None)
          else:
            interface_object.vpls_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bandwidth', None)) != ''):
            interface_object.bandwidth = mapping_dict.get('bandwidth', None)
          else:
            interface_object.bandwidth._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('delay', None)) != ''):
            interface_object.delay = mapping_dict.get('delay', None)
          else:
            interface_object.delay._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('maximum_segment_size', None)) != ''):
            interface_object.maximum_segment_size = mapping_dict.get('maximum_segment_size', None)
          else:
            interface_object.maximum_segment_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nat_name', None)) != ''):
            interface_object.nat_name = mapping_dict.get('nat_name', None)
          else:
            interface_object.nat_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('minimum_links', None)) != ''):
            interface_object.minimum_links = mapping_dict.get('minimum_links', None)
          else:
            interface_object.minimum_links._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('link_speed', None)) != ''):
            interface_object.link_speed = mapping_dict.get('link_speed', None)
          else:
            interface_object.link_speed._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('duplex', None)) != ''):
            interface_object.duplex = mapping_dict.get('duplex', None)
          else:
            interface_object.duplex._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('fcoe_lag', None)) != ''):
            interface_object.fcoe_lag = mapping_dict.get('fcoe_lag', None)
          else:
            interface_object.fcoe_lag._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('lacp_active_enable', None)) != ''):
            interface_object.lacp_active_enable = mapping_dict.get('lacp_active_enable', None)
          else:
            interface_object.lacp_active_enable._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('lacp_active_periodic_fast', None)) != ''):
            interface_object.lacp_active_periodic_fast = mapping_dict.get('lacp_active_periodic_fast', None)
          else:
            interface_object.lacp_active_periodic_fast._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
            interface_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
          else:
            interface_object.acl_inbound_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
            interface_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
          else:
            interface_object.acl_outbound_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan', None)) != ''):
            interface_object.vlan = mapping_dict.get('vlan', None)
          else:
            interface_object.vlan._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_channel_name', None)) != ''):
            interface_object.port_channel_name = mapping_dict.get('port_channel_name', None)
          else:
            interface_object.port_channel_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('channel_group_mode', None)) != ''):
            interface_object.channel_group_mode = mapping_dict.get('channel_group_mode', None)
          else:
            interface_object.channel_group_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('channel_protocol', None)) != ''):
            interface_object.channel_protocol = mapping_dict.get('channel_protocol', None)
          else:
            interface_object.channel_protocol._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
            interface_object.vrf = mapping_dict.get('vrf', None)
          else:
            interface_object.vrf._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bfd_name', None)) != ''):
            interface_object.bfd_name = mapping_dict.get('bfd_name', None)
          else:
            interface_object.bfd_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('context_name', None)) != ''):
            interface_object.context_name = mapping_dict.get('context_name', None)
          else:
            interface_object.context_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
            interface_object.source_ip = mapping_dict.get('source_ip', None)
          else:
            interface_object.source_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
            interface_object.destination_ip = mapping_dict.get('destination_ip', None)
          else:
            interface_object.destination_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
            interface_object.destination_vrf = mapping_dict.get('destination_vrf', None)
          else:
            interface_object.destination_vrf._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_qos_group_template', None)) != ''):
            interface_object.port_qos_group_template = mapping_dict.get('port_qos_group_template', None)
          else:
            interface_object.port_qos_group_template._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('port_qos_scheduler_policy', None)) != ''):
            interface_object.port_qos_scheduler_policy = mapping_dict.get('port_qos_scheduler_policy', None)
          else:
            interface_object.port_qos_scheduler_policy._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('rate_limit', None)) != ''):
            interface_object.rate_limit = mapping_dict.get('rate_limit', None)
          else:
            interface_object.rate_limit._empty_tag = True
        except TypeError:
          pass
        interface_object_list.append(interface_object)

      return interface_object_list

    class additional_ipv4_address(object):
      #XPATH devices/device/interfaces/interface/additional-ipv4-address/address
      class address(AbstractDeviceMgr):
        key_hints = [['long_name']]
        def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)
            util.log_debug('address_payload %s'%address_payload)
            payload_list.append(address_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('address_payload %s'%address_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_iterator in ip:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, address_object in enumerate(address_object_list):
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('update address_payload %s'%address_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip')):
            raise Exception("'ip' cannot be empty")

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_iterator in ip:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, interface_long_name):
          #Parent Key Validations
          if util.isEmpty(interface_long_name):
            raise Exception("'interface_long_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip')):
            raise Exception("'ip' cannot be empty")
          if util.isEmpty(mapping_dict.get('netmask')):
            raise Exception("'netmask' cannot be empty")

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare payload
          address_object_list = []
          for ip_iterator in ip:
            from servicemodel.controller.devices.device.interfaces.interface import additional_ipv4_address
            address_object = additional_ipv4_address.address.address()
            address_object.ip = ip_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                address_object.netmask = mapping_dict.get('netmask', None)
              else:
                address_object.netmask._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                address_object.family = mapping_dict.get('family', None)
              else:
                address_object.family._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                address_object.mtu = mapping_dict.get('mtu', None)
              else:
                address_object.mtu._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
              else:
                address_object.acl_inbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
              else:
                address_object.acl_outbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                address_object.source_ip = mapping_dict.get('source_ip', None)
              else:
                address_object.source_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                address_object.destination_ip = mapping_dict.get('destination_ip', None)
              else:
                address_object.destination_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
              else:
                address_object.destination_vrf._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
              else:
                address_object.allow_fragmentation._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('comment', None)) != ''):
                address_object.comment = mapping_dict.get('comment', None)
              else:
                address_object.comment._empty_tag = True
            except TypeError:
              pass
            address_object_list.append(address_object)

          return address_object_list

    #XPATH devices/device/interfaces/interface/mls-qos
    class mls_qos(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict)

        for mls_qos_object in mls_qos_object_list:
          #fetch payload
          mls_qos_payload = mls_qos_object.getxml(filter=True)
          util.log_debug('mls_qos_payload %s'%mls_qos_payload)
          payload_list.append(mls_qos_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict)

        for mls_qos_object in mls_qos_object_list:
          #fetch payload
          mls_qos_payload = mls_qos_object.getxml(filter=True)

          util.log_debug('mls_qos_payload %s'%mls_qos_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=mls_qos_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        mls_qos_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/mls-qos"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, mls_qos_object in enumerate(mls_qos_object_list):
          #fetch payload
          mls_qos_payload = mls_qos_object.getxml(filter=True)

          util.log_debug('update mls_qos_payload %s'%mls_qos_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=mls_qos_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/mls-qos"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        mls_qos_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        mls_qos_object = interface.mls_qos.mls_qos()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            mls_qos_object.type = mapping_dict.get('type', None)
          else:
            mls_qos_object.type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cos', None)) != ''):
            mls_qos_object.cos = mapping_dict.get('cos', None)
          else:
            mls_qos_object.cos._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('trust', None)) != ''):
            mls_qos_object.trust = mapping_dict.get('trust', None)
          else:
            mls_qos_object.trust._empty_tag = True
        except TypeError:
          pass
        mls_qos_object_list.append(mls_qos_object)

        return mls_qos_object_list

    #XPATH devices/device/interfaces/interface/srr-queue
    class srr_queue(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict)

        for srr_queue_object in srr_queue_object_list:
          #fetch payload
          srr_queue_payload = srr_queue_object.getxml(filter=True)
          util.log_debug('srr_queue_payload %s'%srr_queue_payload)
          payload_list.append(srr_queue_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict)

        for srr_queue_object in srr_queue_object_list:
          #fetch payload
          srr_queue_payload = srr_queue_object.getxml(filter=True)

          util.log_debug('srr_queue_payload %s'%srr_queue_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=srr_queue_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        srr_queue_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/srr-queue"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, srr_queue_object in enumerate(srr_queue_object_list):
          #fetch payload
          srr_queue_payload = srr_queue_object.getxml(filter=True)

          util.log_debug('update srr_queue_payload %s'%srr_queue_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=srr_queue_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/srr-queue"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        srr_queue_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        srr_queue_object = interface.srr_queue.srr_queue()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('weight1', None)) != ''):
            srr_queue_object.weight1 = mapping_dict.get('weight1', None)
          else:
            srr_queue_object.weight1._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('weight2', None)) != ''):
            srr_queue_object.weight2 = mapping_dict.get('weight2', None)
          else:
            srr_queue_object.weight2._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('weight3', None)) != ''):
            srr_queue_object.weight3 = mapping_dict.get('weight3', None)
          else:
            srr_queue_object.weight3._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('weight4', None)) != ''):
            srr_queue_object.weight4 = mapping_dict.get('weight4', None)
          else:
            srr_queue_object.weight4._empty_tag = True
        except TypeError:
          pass
        srr_queue_object_list.append(srr_queue_object)

        return srr_queue_object_list

    class additional_ipv6_address(object):
      #XPATH devices/device/interfaces/interface/additional-ipv6-address/address
      class address(AbstractDeviceMgr):
        key_hints = [['long_name']]
        def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)
            util.log_debug('address_payload %s'%address_payload)
            payload_list.append(address_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict)

          for address_object in address_object_list:
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('address_payload %s'%address_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_iterator in ip:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, address_object in enumerate(address_object_list):
            #fetch payload
            address_payload = address_object.getxml(filter=True)

            util.log_debug('update address_payload %s'%address_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip')):
            raise Exception("'ip' cannot be empty")

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_iterator in ip:
            rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, interface_long_name):
          #Parent Key Validations
          if util.isEmpty(interface_long_name):
            raise Exception("'interface_long_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip')):
            raise Exception("'ip' cannot be empty")

          #convert keys to list
          ip = mapping_dict.get('ip')
          if not isinstance(ip, list):
            ip = [ip]

          #prepare payload
          address_object_list = []
          for ip_iterator in ip:
            from servicemodel.controller.devices.device.interfaces.interface import additional_ipv6_address
            address_object = additional_ipv6_address.address.address()
            address_object.ip = ip_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('prefix_length', None)) != ''):
                address_object.prefix_length = mapping_dict.get('prefix_length', None)
              else:
                address_object.prefix_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                address_object.family = mapping_dict.get('family', None)
              else:
                address_object.family._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                address_object.mtu = mapping_dict.get('mtu', None)
              else:
                address_object.mtu._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
              else:
                address_object.acl_inbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
              else:
                address_object.acl_outbound_name._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                address_object.source_ip = mapping_dict.get('source_ip', None)
              else:
                address_object.source_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                address_object.destination_ip = mapping_dict.get('destination_ip', None)
              else:
                address_object.destination_ip._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
              else:
                address_object.destination_vrf._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
              else:
                address_object.allow_fragmentation._empty_tag = True
            except TypeError:
              pass
            address_object_list.append(address_object)

          return address_object_list

    #XPATH devices/device/interfaces/interface/allowed-vlans
    class allowed_vlans(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict)

        for allowed_vlans_object in allowed_vlans_object_list:
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)
          util.log_debug('allowed_vlans_payload %s'%allowed_vlans_payload)
          payload_list.append(allowed_vlans_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict)

        for allowed_vlans_object in allowed_vlans_object_list:
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)

          util.log_debug('allowed_vlans_payload %s'%allowed_vlans_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=allowed_vlans_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/allowed-vlans"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, allowed_vlans_object in enumerate(allowed_vlans_object_list):
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)

          util.log_debug('update allowed_vlans_payload %s'%allowed_vlans_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=allowed_vlans_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/allowed-vlans"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        allowed_vlans_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        allowed_vlans_object = interface.allowed_vlans.allowed_vlans()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan_range', None)) != ''):
            allowed_vlans_object.vlan_range = mapping_dict.get('vlan_range', None)
          else:
            allowed_vlans_object.vlan_range._empty_tag = True
        except TypeError:
          pass
        allowed_vlans_object_list.append(allowed_vlans_object)

        return allowed_vlans_object_list

      #XPATH devices/device/interfaces/interface/allowed-vlans/vlan
      class vlan(AbstractDeviceMgr):
        key_hints = [['long_name']]
        def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/allowed-vlans"%(util.make_interfacename(interface_long_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)
            util.log_debug('vlan_payload %s'%vlan_payload)
            payload_list.append(vlan_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/allowed-vlans"%(util.make_interfacename(interface_long_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('vlan_payload %s'%vlan_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s/allowed-vlans"%(util.make_interfacename(interface_long_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for id_iterator in id:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(id_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, vlan_object in enumerate(vlan_object_list):
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('update vlan_payload %s'%vlan_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/allowed-vlans"%(util.make_interfacename(interface_long_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('id')):
            raise Exception("'id' cannot be empty")

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for id_iterator in id:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(id_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, interface_long_name):
          #Parent Key Validations
          if util.isEmpty(interface_long_name):
            raise Exception("'interface_long_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('id')):
            raise Exception("'id' cannot be empty")

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare payload
          vlan_object_list = []
          for id_iterator in id:
            from servicemodel.controller.devices.device.interfaces.interface import allowed_vlans
            vlan_object = allowed_vlans.vlan.vlan()
            vlan_object.id = id_iterator
            vlan_object_list.append(vlan_object)

          return vlan_object_list

    #XPATH devices/device/interfaces/interface/ospf
    class ospf(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ospf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ospf_object in ospf_object_list:
          #fetch payload
          ospf_payload = ospf_object.getxml(filter=True)
          util.log_debug('ospf_payload %s'%ospf_payload)
          payload_list.append(ospf_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ospf_object_list = self.validate_inputs_form_payload(mapping_dict)

        for ospf_object in ospf_object_list:
          #fetch payload
          ospf_payload = ospf_object.getxml(filter=True)

          util.log_debug('ospf_payload %s'%ospf_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ospf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        ospf_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ospf"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, ospf_object in enumerate(ospf_object_list):
          #fetch payload
          ospf_payload = ospf_object.getxml(filter=True)

          util.log_debug('update ospf_payload %s'%ospf_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ospf_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/ospf"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        ospf_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        ospf_object = interface.ospf.ospf()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
            ospf_object.priority = mapping_dict.get('priority', None)
          else:
            ospf_object.priority._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cost', None)) != ''):
            ospf_object.cost = mapping_dict.get('cost', None)
          else:
            ospf_object.cost._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hello_interval', None)) != ''):
            ospf_object.hello_interval = mapping_dict.get('hello_interval', None)
          else:
            ospf_object.hello_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dead_interval', None)) != ''):
            ospf_object.dead_interval = mapping_dict.get('dead_interval', None)
          else:
            ospf_object.dead_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hello_multiplier', None)) != ''):
            ospf_object.hello_multiplier = mapping_dict.get('hello_multiplier', None)
          else:
            ospf_object.hello_multiplier._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ospf_id', None)) != ''):
            ospf_object.ospf_id = mapping_dict.get('ospf_id', None)
          else:
            ospf_object.ospf_id._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('area', None)) != ''):
            ospf_object.area = mapping_dict.get('area', None)
          else:
            ospf_object.area._empty_tag = True
        except TypeError:
          pass
        ospf_object_list.append(ospf_object)

        return ospf_object_list

    #XPATH devices/device/interfaces/interface/hsrp
    class hsrp(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hsrp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hsrp_object in hsrp_object_list:
          #fetch payload
          hsrp_payload = hsrp_object.getxml(filter=True)
          util.log_debug('hsrp_payload %s'%hsrp_payload)
          payload_list.append(hsrp_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hsrp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for hsrp_object in hsrp_object_list:
          #fetch payload
          hsrp_payload = hsrp_object.getxml(filter=True)

          util.log_debug('hsrp_payload %s'%hsrp_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=hsrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        hsrp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/hsrp"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, hsrp_object in enumerate(hsrp_object_list):
          #fetch payload
          hsrp_payload = hsrp_object.getxml(filter=True)

          util.log_debug('update hsrp_payload %s'%hsrp_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=hsrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/hsrp"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        hsrp_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        hsrp_object = interface.hsrp.hsrp()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
            hsrp_object.ip_address = mapping_dict.get('ip_address', None)
          else:
            hsrp_object.ip_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('group', None)) != ''):
            hsrp_object.group = mapping_dict.get('group', None)
          else:
            hsrp_object.group._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
            hsrp_object.priority = mapping_dict.get('priority', None)
          else:
            hsrp_object.priority._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hsrp_preempt', None)) != ''):
            hsrp_object.hsrp_preempt = mapping_dict.get('hsrp_preempt', None)
          else:
            hsrp_object.hsrp_preempt._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('preempt_reload', None)) != ''):
            hsrp_object.preempt_reload = mapping_dict.get('preempt_reload', None)
          else:
            hsrp_object.preempt_reload._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_type', None)) != ''):
            hsrp_object.auth_type = mapping_dict.get('auth_type', None)
          else:
            hsrp_object.auth_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_key', None)) != ''):
            hsrp_object.auth_key = mapping_dict.get('auth_key', None)
          else:
            hsrp_object.auth_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timer1_msec', None)) != ''):
            hsrp_object.timer1_msec = mapping_dict.get('timer1_msec', None)
          else:
            hsrp_object.timer1_msec._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timer1', None)) != ''):
            hsrp_object.timer1 = mapping_dict.get('timer1', None)
          else:
            hsrp_object.timer1._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timer2_msec', None)) != ''):
            hsrp_object.timer2_msec = mapping_dict.get('timer2_msec', None)
          else:
            hsrp_object.timer2_msec._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('timer2', None)) != ''):
            hsrp_object.timer2 = mapping_dict.get('timer2', None)
          else:
            hsrp_object.timer2._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('version', None)) != ''):
            hsrp_object.version = mapping_dict.get('version', None)
          else:
            hsrp_object.version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('group_name', None)) != ''):
            hsrp_object.group_name = mapping_dict.get('group_name', None)
          else:
            hsrp_object.group_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bfd', None)) != ''):
            hsrp_object.bfd = mapping_dict.get('bfd', None)
          else:
            hsrp_object.bfd._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bfd_interval', None)) != ''):
            hsrp_object.bfd_interval = mapping_dict.get('bfd_interval', None)
          else:
            hsrp_object.bfd_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('bfd_multiplier', None)) != ''):
            hsrp_object.bfd_multiplier = mapping_dict.get('bfd_multiplier', None)
          else:
            hsrp_object.bfd_multiplier._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('preempt_minimum_delay', None)) != ''):
            hsrp_object.preempt_minimum_delay = mapping_dict.get('preempt_minimum_delay', None)
          else:
            hsrp_object.preempt_minimum_delay._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mgo', None)) != ''):
            hsrp_object.mgo = mapping_dict.get('mgo', None)
          else:
            hsrp_object.mgo._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('track', None)) != ''):
            hsrp_object.track = mapping_dict.get('track', None)
          else:
            hsrp_object.track._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('decrement', None)) != ''):
            hsrp_object.decrement = mapping_dict.get('decrement', None)
          else:
            hsrp_object.decrement._empty_tag = True
        except TypeError:
          pass
        hsrp_object_list.append(hsrp_object)

        return hsrp_object_list

      class additional_ipv4_address(object):
        #XPATH devices/device/interfaces/interface/hsrp/additional-ipv4-address/address
        class address(AbstractDeviceMgr):
          key_hints = [['long_name']]
          def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)

            #convert parent keys to list
            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)


            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_iterator in ip:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)


            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv4-address"%(util.make_interfacename(interface_long_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('ip')):
              raise Exception("'ip' cannot be empty")

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_iterator in ip:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, interface_long_name):
            #Parent Key Validations
            if util.isEmpty(interface_long_name):
              raise Exception("'interface_long_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('ip')):
              raise Exception("'ip' cannot be empty")
            if util.isEmpty(mapping_dict.get('netmask')):
              raise Exception("'netmask' cannot be empty")

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare payload
            address_object_list = []
            for ip_iterator in ip:
              from servicemodel.controller.devices.device.interfaces.interface.hsrp import additional_ipv4_address
              address_object = additional_ipv4_address.address.address()
              address_object.ip = ip_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                  address_object.netmask = mapping_dict.get('netmask', None)
                else:
                  address_object.netmask._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                  address_object.family = mapping_dict.get('family', None)
                else:
                  address_object.family._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                  address_object.mtu = mapping_dict.get('mtu', None)
                else:
                  address_object.mtu._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                  address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
                else:
                  address_object.acl_inbound_name._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                  address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
                else:
                  address_object.acl_outbound_name._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                  address_object.source_ip = mapping_dict.get('source_ip', None)
                else:
                  address_object.source_ip._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                  address_object.destination_ip = mapping_dict.get('destination_ip', None)
                else:
                  address_object.destination_ip._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                  address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
                else:
                  address_object.destination_vrf._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                  address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
                else:
                  address_object.allow_fragmentation._empty_tag = True
              except TypeError:
                pass
              address_object_list.append(address_object)

            return address_object_list

      class additional_ipv6_address(object):
        #XPATH devices/device/interfaces/interface/hsrp/additional-ipv6-address/address
        class address(AbstractDeviceMgr):
          key_hints = [['long_name']]
          def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)
              util.log_debug('address_payload %s'%address_payload)
              payload_list.append(address_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)

            #convert parent keys to list
            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict)

            for address_object in address_object_list:
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('address_payload %s'%address_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)


            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            address_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_iterator in ip:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, address_object in enumerate(address_object_list):
              #fetch payload
              address_payload = address_object.getxml(filter=True)

              util.log_debug('update address_payload %s'%address_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=address_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( interface_long_name)


            if not isinstance(interface_long_name, list):
              interface_long_name_list = [interface_long_name]
            else:
              interface_long_name_list = interface_long_name

            for interface_long_name in interface_long_name_list:
              ##prepare rcpath
              rcpath = "interface:interfaces/interface=%s/hsrp:hsrp/additional-ipv6-address"%(util.make_interfacename(interface_long_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('ip')):
              raise Exception("'ip' cannot be empty")

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for ip_iterator in ip:
              rcpath_tmp =  rcpath+"/address=%s"%(util.make_interfacename(ip_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, interface_long_name):
            #Parent Key Validations
            if util.isEmpty(interface_long_name):
              raise Exception("'interface_long_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('ip')):
              raise Exception("'ip' cannot be empty")
            if util.isEmpty(mapping_dict.get('prefix_length')):
              raise Exception("'prefix_length' cannot be empty")

            #convert keys to list
            ip = mapping_dict.get('ip')
            if not isinstance(ip, list):
              ip = [ip]

            #prepare payload
            address_object_list = []
            for ip_iterator in ip:
              from servicemodel.controller.devices.device.interfaces.interface.hsrp import additional_ipv6_address
              address_object = additional_ipv6_address.address.address()
              address_object.ip = ip_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('prefix_length', None)) != ''):
                  address_object.prefix_length = mapping_dict.get('prefix_length', None)
                else:
                  address_object.prefix_length._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('family', None)) != ''):
                  address_object.family = mapping_dict.get('family', None)
                else:
                  address_object.family._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
                  address_object.mtu = mapping_dict.get('mtu', None)
                else:
                  address_object.mtu._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('acl_inbound_name', None)) != ''):
                  address_object.acl_inbound_name = mapping_dict.get('acl_inbound_name', None)
                else:
                  address_object.acl_inbound_name._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('acl_outbound_name', None)) != ''):
                  address_object.acl_outbound_name = mapping_dict.get('acl_outbound_name', None)
                else:
                  address_object.acl_outbound_name._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('source_ip', None)) != ''):
                  address_object.source_ip = mapping_dict.get('source_ip', None)
                else:
                  address_object.source_ip._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('destination_ip', None)) != ''):
                  address_object.destination_ip = mapping_dict.get('destination_ip', None)
                else:
                  address_object.destination_ip._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('destination_vrf', None)) != ''):
                  address_object.destination_vrf = mapping_dict.get('destination_vrf', None)
                else:
                  address_object.destination_vrf._empty_tag = True
              except TypeError:
                pass
              try:
                if (update == False) or (update == True and str(mapping_dict.get('allow_fragmentation', None)) != ''):
                  address_object.allow_fragmentation = mapping_dict.get('allow_fragmentation', None)
                else:
                  address_object.allow_fragmentation._empty_tag = True
              except TypeError:
                pass
              address_object_list.append(address_object)

            return address_object_list

    #XPATH devices/device/interfaces/interface/vrrp
    class vrrp(AbstractDeviceMgr):
      key_hints = [['long_name']]
      def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vrrp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for vrrp_object in vrrp_object_list:
          #fetch payload
          vrrp_payload = vrrp_object.getxml(filter=True)
          util.log_debug('vrrp_payload %s'%vrrp_payload)
          payload_list.append(vrrp_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)

        #convert parent keys to list
        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vrrp_object_list = self.validate_inputs_form_payload(mapping_dict)

        for vrrp_object in vrrp_object_list:
          #fetch payload
          vrrp_payload = vrrp_object.getxml(filter=True)

          util.log_debug('vrrp_payload %s'%vrrp_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vrrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        ##prepare rcpath
        rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vrrp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/vrrp"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, vrrp_object in enumerate(vrrp_object_list):
          #fetch payload
          vrrp_payload = vrrp_object.getxml(filter=True)

          util.log_debug('update vrrp_payload %s'%vrrp_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vrrp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_long_name)


        if not isinstance(interface_long_name, list):
          interface_long_name_list = [interface_long_name]
        else:
          interface_long_name_list = interface_long_name

        for interface_long_name in interface_long_name_list:
          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s"%(util.make_interfacename(interface_long_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/vrrp"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_long_name):
        #Parent Key Validations
        if util.isEmpty(interface_long_name):
          raise Exception("'interface_long_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        vrrp_object_list = []
        from servicemodel.controller.devices.device.interfaces import interface
        vrrp_object = interface.vrrp.vrrp()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrrp_interface_name', None)) != ''):
            vrrp_object.vrrp_interface_name = mapping_dict.get('vrrp_interface_name', None)
          else:
            vrrp_object.vrrp_interface_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrid', None)) != ''):
            vrrp_object.vrid = mapping_dict.get('vrid', None)
          else:
            vrrp_object.vrid._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('unit', None)) != ''):
            vrrp_object.unit = mapping_dict.get('unit', None)
          else:
            vrrp_object.unit._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inet_address', None)) != ''):
            vrrp_object.inet_address = mapping_dict.get('inet_address', None)
          else:
            vrrp_object.inet_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mask', None)) != ''):
            vrrp_object.mask = mapping_dict.get('mask', None)
          else:
            vrrp_object.mask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('priority', None)) != ''):
            vrrp_object.priority = mapping_dict.get('priority', None)
          else:
            vrrp_object.priority._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrrp_group', None)) != ''):
            vrrp_object.vrrp_group = mapping_dict.get('vrrp_group', None)
          else:
            vrrp_object.vrrp_group._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_address', None)) != ''):
            vrrp_object.virtual_address = mapping_dict.get('virtual_address', None)
          else:
            vrrp_object.virtual_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('advertisement_interval', None)) != ''):
            vrrp_object.advertisement_interval = mapping_dict.get('advertisement_interval', None)
          else:
            vrrp_object.advertisement_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('delay_interval', None)) != ''):
            vrrp_object.delay_interval = mapping_dict.get('delay_interval', None)
          else:
            vrrp_object.delay_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('preempt', None)) != ''):
            vrrp_object.preempt = mapping_dict.get('preempt', None)
          else:
            vrrp_object.preempt._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_type', None)) != ''):
            vrrp_object.auth_type = mapping_dict.get('auth_type', None)
          else:
            vrrp_object.auth_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_key', None)) != ''):
            vrrp_object.auth_key = mapping_dict.get('auth_key', None)
          else:
            vrrp_object.auth_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('track_interface', None)) != ''):
            vrrp_object.track_interface = mapping_dict.get('track_interface', None)
          else:
            vrrp_object.track_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrrp_track_group', None)) != ''):
            vrrp_object.vrrp_track_group = mapping_dict.get('vrrp_track_group', None)
          else:
            vrrp_object.vrrp_track_group._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrrp_interface_type', None)) != ''):
            vrrp_object.vrrp_interface_type = mapping_dict.get('vrrp_interface_type', None)
          else:
            vrrp_object.vrrp_interface_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('l3vpn_name', None)) != ''):
            vrrp_object.l3vpn_name = mapping_dict.get('l3vpn_name', None)
          else:
            vrrp_object.l3vpn_name._empty_tag = True
        except TypeError:
          pass
        vrrp_object_list.append(vrrp_object)

        return vrrp_object_list

      #XPATH devices/device/interfaces/interface/vrrp/bfd
      class bfd(AbstractDeviceMgr):
        key_hints = [['long_name']]
        def getRcpathPayload(self, sdata, dev, interface_long_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/vrrp:vrrp"%(util.make_interfacename(interface_long_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          bfd_object_list = self.validate_inputs_form_payload(mapping_dict)

          for bfd_object in bfd_object_list:
            #fetch payload
            bfd_payload = bfd_object.getxml(filter=True)
            util.log_debug('bfd_payload %s'%bfd_payload)
            payload_list.append(bfd_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)

          #convert parent keys to list
          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/vrrp:vrrp"%(util.make_interfacename(interface_long_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          bfd_object_list = self.validate_inputs_form_payload(mapping_dict)

          for bfd_object in bfd_object_list:
            #fetch payload
            bfd_payload = bfd_object.getxml(filter=True)

            util.log_debug('bfd_payload %s'%bfd_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=bfd_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, interface_long_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          ##prepare rcpath
          rcpath = "interface:interfaces/interface=%s/vrrp:vrrp"%(util.make_interfacename(interface_long_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          bfd_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/bfd"
          rcpath_list.append(rcpath_tmp)
          for rc_counter, bfd_object in enumerate(bfd_object_list):
            #fetch payload
            bfd_payload = bfd_object.getxml(filter=True)

            util.log_debug('update bfd_payload %s'%bfd_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=bfd_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, interface_long_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_long_name)


          if not isinstance(interface_long_name, list):
            interface_long_name_list = [interface_long_name]
          else:
            interface_long_name_list = interface_long_name

          for interface_long_name in interface_long_name_list:
            ##prepare rcpath
            rcpath = "interface:interfaces/interface=%s/vrrp:vrrp"%(util.make_interfacename(interface_long_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs

          #convert keys to list

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          rcpath_tmp =  rcpath+"/bfd"
          rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, interface_long_name):
          #Parent Key Validations
          if util.isEmpty(interface_long_name):
            raise Exception("'interface_long_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs

          #convert keys to list

          #prepare payload
          bfd_object_list = []
          from servicemodel.controller.devices.device.interfaces.interface import vrrp
          bfd_object = vrrp.bfd.bfd()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('bfd_vrrp_id', None)) != ''):
              bfd_object.bfd_vrrp_id = mapping_dict.get('bfd_vrrp_id', None)
            else:
              bfd_object.bfd_vrrp_id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('local_', None)) != ''):
              bfd_object.local_ = mapping_dict.get('local_', None)
            else:
              bfd_object.local_._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('remote', None)) != ''):
              bfd_object.remote = mapping_dict.get('remote', None)
            else:
              bfd_object.remote._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('peer_ip', None)) != ''):
              bfd_object.peer_ip = mapping_dict.get('peer_ip', None)
            else:
              bfd_object.peer_ip._empty_tag = True
          except TypeError:
            pass
          bfd_object_list.append(bfd_object)

          return bfd_object_list

