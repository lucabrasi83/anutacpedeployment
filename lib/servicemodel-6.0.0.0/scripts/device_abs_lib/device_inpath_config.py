#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/inpath-config
class inpath_config(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    inpath_config_object_list = self.validate_inputs_form_payload(mapping_dict)

    for inpath_config_object in inpath_config_object_list:
      #fetch payload
      inpath_config_payload = inpath_config_object.getxml(filter=True)
      util.log_debug('inpath_config_payload %s'%inpath_config_payload)
      payload_list.append(inpath_config_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    inpath_config_object_list = self.validate_inputs_form_payload(mapping_dict)

    for inpath_config_object in inpath_config_object_list:
      #fetch payload
      inpath_config_payload = inpath_config_object.getxml(filter=True)

      util.log_debug('inpath_config_payload %s'%inpath_config_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=inpath_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    inpath_config_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/inpath-config"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, inpath_config_object in enumerate(inpath_config_object_list):
      #fetch payload
      inpath_config_payload = inpath_config_object.getxml(filter=True)

      util.log_debug('update inpath_config_payload %s'%inpath_config_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=inpath_config_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/inpath-config"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs

    #convert keys to list

    #prepare payload
    inpath_config_object_list = []
    from servicemodel.controller.devices import device
    inpath_config_object = device.inpath_config.inpath_config()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('inpath_enable', None)) != ''):
        inpath_config_object.inpath_enable = mapping_dict.get('inpath_enable', None)
      else:
        inpath_config_object.inpath_enable._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('inpath_peering', None)) != ''):
        inpath_config_object.inpath_peering = mapping_dict.get('inpath_peering', None)
      else:
        inpath_config_object.inpath_peering._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('oobtransparency', None)) != ''):
        inpath_config_object.oobtransparency = mapping_dict.get('oobtransparency', None)
      else:
        inpath_config_object.oobtransparency._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('oobtransparency_port', None)) != ''):
        inpath_config_object.oobtransparency_port = mapping_dict.get('oobtransparency_port', None)
      else:
        inpath_config_object.oobtransparency_port._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('oobtransparency_mode', None)) != ''):
        inpath_config_object.oobtransparency_mode = mapping_dict.get('oobtransparency_mode', None)
      else:
        inpath_config_object.oobtransparency_mode._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('inpath_simplified_routing', None)) != ''):
        inpath_config_object.inpath_simplified_routing = mapping_dict.get('inpath_simplified_routing', None)
      else:
        inpath_config_object.inpath_simplified_routing._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('inpath_lsp', None)) != ''):
        inpath_config_object.inpath_lsp = mapping_dict.get('inpath_lsp', None)
      else:
        inpath_config_object.inpath_lsp._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('asymmetric_routing_detection', None)) != ''):
        inpath_config_object.asymmetric_routing_detection = mapping_dict.get('asymmetric_routing_detection', None)
      else:
        inpath_config_object.asymmetric_routing_detection._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('asymmetric_routing_pass_through', None)) != ''):
        inpath_config_object.asymmetric_routing_pass_through = mapping_dict.get('asymmetric_routing_pass_through', None)
      else:
        inpath_config_object.asymmetric_routing_pass_through._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('asym_route_tab_flush', None)) != ''):
        inpath_config_object.asym_route_tab_flush = mapping_dict.get('asym_route_tab_flush', None)
      else:
        inpath_config_object.asym_route_tab_flush._empty_tag = True
    except TypeError:
      pass
    inpath_config_object_list.append(inpath_config_object)

    return inpath_config_object_list

  #XPATH devices/device/inpath-config/in-path-interface-bundle
  class in_path_interface_bundle(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-config"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      in_path_interface_bundle_object_list = self.validate_inputs_form_payload(mapping_dict)

      for in_path_interface_bundle_object in in_path_interface_bundle_object_list:
        #fetch payload
        in_path_interface_bundle_payload = in_path_interface_bundle_object.getxml(filter=True)
        util.log_debug('in_path_interface_bundle_payload %s'%in_path_interface_bundle_payload)
        payload_list.append(in_path_interface_bundle_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-config"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      in_path_interface_bundle_object_list = self.validate_inputs_form_payload(mapping_dict)

      for in_path_interface_bundle_object in in_path_interface_bundle_object_list:
        #fetch payload
        in_path_interface_bundle_payload = in_path_interface_bundle_object.getxml(filter=True)

        util.log_debug('in_path_interface_bundle_payload %s'%in_path_interface_bundle_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=in_path_interface_bundle_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-config"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      in_path_interface_bundle_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      bundle_name = mapping_dict.get('bundle_name')
      if not isinstance(bundle_name, list):
        bundle_name = [bundle_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for bundle_name_iterator in bundle_name:
        rcpath_tmp =  rcpath+"/in-path-interface-bundle=%s"%(util.make_interfacename(bundle_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, in_path_interface_bundle_object in enumerate(in_path_interface_bundle_object_list):
        #fetch payload
        in_path_interface_bundle_payload = in_path_interface_bundle_object.getxml(filter=True)

        util.log_debug('update in_path_interface_bundle_payload %s'%in_path_interface_bundle_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=in_path_interface_bundle_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:inpath-config"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('bundle_name')):
        raise Exception("'bundle_name' cannot be empty")

      #convert keys to list
      bundle_name = mapping_dict.get('bundle_name')
      if not isinstance(bundle_name, list):
        bundle_name = [bundle_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for bundle_name_iterator in bundle_name:
        rcpath_tmp =  rcpath+"/in-path-interface-bundle=%s"%(util.make_interfacename(bundle_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('bundle_name')):
        raise Exception("'bundle_name' cannot be empty")

      #convert keys to list
      bundle_name = mapping_dict.get('bundle_name')
      if not isinstance(bundle_name, list):
        bundle_name = [bundle_name]

      #prepare payload
      in_path_interface_bundle_object_list = []
      for bundle_name_iterator in bundle_name:
        from servicemodel.controller.devices.device import inpath_config
        in_path_interface_bundle_object = inpath_config.in_path_interface_bundle.in_path_interface_bundle()
        in_path_interface_bundle_object.bundle_name = bundle_name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('inpath_interfaces', None)) != ''):
            in_path_interface_bundle_object.inpath_interfaces = mapping_dict.get('inpath_interfaces', None)
          else:
            in_path_interface_bundle_object.inpath_interfaces._empty_tag = True
        except TypeError:
          pass
        in_path_interface_bundle_object_list.append(in_path_interface_bundle_object)

      return in_path_interface_bundle_object_list

