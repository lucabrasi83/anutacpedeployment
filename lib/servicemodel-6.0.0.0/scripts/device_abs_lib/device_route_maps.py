#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class route_maps(object):
  #XPATH devices/device/route-maps/route-map
  class route_map(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:route-maps"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_map_object_list = self.validate_inputs_form_payload(mapping_dict)

      for route_map_object in route_map_object_list:
        #fetch payload
        route_map_payload = route_map_object.getxml(filter=True)
        util.log_debug('route_map_payload %s'%route_map_payload)
        payload_list.append(route_map_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:route-maps"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_map_object_list = self.validate_inputs_form_payload(mapping_dict)

      for route_map_object in route_map_object_list:
        #fetch payload
        route_map_payload = route_map_object.getxml(filter=True)

        util.log_debug('route_map_payload %s'%route_map_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=route_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:route-maps"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      route_map_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/route-map=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, route_map_object in enumerate(route_map_object_list):
        #fetch payload
        route_map_payload = route_map_object.getxml(filter=True)

        util.log_debug('update route_map_payload %s'%route_map_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=route_map_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:route-maps"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/route-map=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      route_map_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import route_maps
        route_map_object = route_maps.route_map.route_map()
        route_map_object.name = name_iterator
        route_map_object_list.append(route_map_object)

      return route_map_object_list

    #XPATH devices/device/route-maps/route-map/route-map-entries
    class route_map_entries(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, route_map_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_map_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(route_map_name, list):
          route_map_name_list = [route_map_name]
        else:
          route_map_name_list = route_map_name

        for route_map_name in route_map_name_list:
          ##prepare rcpath
          rcpath = "l3features:route-maps/route-map=%s"%(util.make_interfacename(route_map_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        route_map_entries_object_list = self.validate_inputs_form_payload(mapping_dict)

        for route_map_entries_object in route_map_entries_object_list:
          #fetch payload
          route_map_entries_payload = route_map_entries_object.getxml(filter=True)
          util.log_debug('route_map_entries_payload %s'%route_map_entries_payload)
          payload_list.append(route_map_entries_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, route_map_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_map_name)

        #convert parent keys to list
        if not isinstance(route_map_name, list):
          route_map_name_list = [route_map_name]
        else:
          route_map_name_list = route_map_name

        for route_map_name in route_map_name_list:
          ##prepare rcpath
          rcpath = "l3features:route-maps/route-map=%s"%(util.make_interfacename(route_map_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        route_map_entries_object_list = self.validate_inputs_form_payload(mapping_dict)

        for route_map_entries_object in route_map_entries_object_list:
          #fetch payload
          route_map_entries_payload = route_map_entries_object.getxml(filter=True)

          util.log_debug('route_map_entries_payload %s'%route_map_entries_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=route_map_entries_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, route_map_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_map_name)


        ##prepare rcpath
        rcpath = "l3features:route-maps/route-map=%s"%(util.make_interfacename(route_map_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        route_map_entries_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        seq = mapping_dict.get('seq')
        if not isinstance(seq, list):
          seq = [seq]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for seq_iterator in seq:
          rcpath_tmp =  rcpath+"/route-map-entries=%s"%(util.make_interfacename(seq_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, route_map_entries_object in enumerate(route_map_entries_object_list):
          #fetch payload
          route_map_entries_payload = route_map_entries_object.getxml(filter=True)

          util.log_debug('update route_map_entries_payload %s'%route_map_entries_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=route_map_entries_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, route_map_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( route_map_name)


        if not isinstance(route_map_name, list):
          route_map_name_list = [route_map_name]
        else:
          route_map_name_list = route_map_name

        for route_map_name in route_map_name_list:
          ##prepare rcpath
          rcpath = "l3features:route-maps/route-map=%s"%(util.make_interfacename(route_map_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('seq')):
          raise Exception("'seq' cannot be empty")

        #convert keys to list
        seq = mapping_dict.get('seq')
        if not isinstance(seq, list):
          seq = [seq]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for seq_iterator in seq:
          rcpath_tmp =  rcpath+"/route-map-entries=%s"%(util.make_interfacename(seq_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, route_map_name):
        #Parent Key Validations
        if util.isEmpty(route_map_name):
          raise Exception("'route_map_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('seq')):
          raise Exception("'seq' cannot be empty")

        #convert keys to list
        seq = mapping_dict.get('seq')
        if not isinstance(seq, list):
          seq = [seq]

        #prepare payload
        route_map_entries_object_list = []
        for seq_iterator in seq:
          from servicemodel.controller.devices.device.route_maps import route_map
          route_map_entries_object = route_map.route_map_entries.route_map_entries()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('action', None)) != ''):
              route_map_entries_object.action = mapping_dict.get('action', None)
            else:
              route_map_entries_object.action._empty_tag = True
          except TypeError:
            pass
          route_map_entries_object.seq = seq_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('prefix_list', None)) != ''):
              route_map_entries_object.prefix_list = mapping_dict.get('prefix_list', None)
            else:
              route_map_entries_object.prefix_list._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('next_hop_value', None)) != ''):
              route_map_entries_object.next_hop_value = mapping_dict.get('next_hop_value', None)
            else:
              route_map_entries_object.next_hop_value._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('local_preference_value', None)) != ''):
              route_map_entries_object.local_preference_value = mapping_dict.get('local_preference_value', None)
            else:
              route_map_entries_object.local_preference_value._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('community_attribute', None)) != ''):
              route_map_entries_object.community_attribute = mapping_dict.get('community_attribute', None)
            else:
              route_map_entries_object.community_attribute._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('as_path_prepend', None)) != ''):
              route_map_entries_object.as_path_prepend = mapping_dict.get('as_path_prepend', None)
            else:
              route_map_entries_object.as_path_prepend._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('weight', None)) != ''):
              route_map_entries_object.weight = mapping_dict.get('weight', None)
            else:
              route_map_entries_object.weight._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('match_condition_type', None)) != ''):
              route_map_entries_object.match_condition_type = mapping_dict.get('match_condition_type', None)
            else:
              route_map_entries_object.match_condition_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('route_type_value', None)) != ''):
              route_map_entries_object.route_type_value = mapping_dict.get('route_type_value', None)
            else:
              route_map_entries_object.route_type_value._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              route_map_entries_object.description = mapping_dict.get('description', None)
            else:
              route_map_entries_object.description._empty_tag = True
          except TypeError:
            pass
          route_map_entries_object_list.append(route_map_entries_object)

        return route_map_entries_object_list

      #XPATH devices/device/route-maps/route-map/route-map-entries/match-condition
      class match_condition(AbstractDeviceMgr):
        key_hints = [['name'],['seq']]
        def getRcpathPayload(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

          for match_condition_object in match_condition_object_list:
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)
            util.log_debug('match_condition_payload %s'%match_condition_payload)
            payload_list.append(match_condition_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)

          #convert parent keys to list
          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

          for match_condition_object in match_condition_object_list:
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)

            util.log_debug('match_condition_payload %s'%match_condition_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)


          ##prepare rcpath
          rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          condition_type = mapping_dict.get('condition_type')
          if not isinstance(condition_type, list):
            condition_type = [condition_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for condition_type_iterator in condition_type:
            for value_iterator in value:
              rcpath_tmp =  rcpath+"/match-condition=%s,%s"%(util.make_interfacename(condition_type_iterator),util.make_interfacename(value_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, match_condition_object in enumerate(match_condition_object_list):
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)

            util.log_debug('update match_condition_payload %s'%match_condition_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)


          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('condition_type')):
            raise Exception("'condition_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('value')):
            raise Exception("'value' cannot be empty")

          #convert keys to list
          condition_type = mapping_dict.get('condition_type')
          if not isinstance(condition_type, list):
            condition_type = [condition_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for condition_type_iterator in condition_type:
            for value_iterator in value:
              rcpath_tmp =  rcpath+"/match-condition=%s,%s"%(util.make_interfacename(condition_type_iterator),util.make_interfacename(value_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, route_map_name, route_map_entries_seq):
          #Parent Key Validations
          if util.isEmpty(route_map_name):
            raise Exception("'route_map_name' cannot be empty")
          if util.isEmpty(route_map_entries_seq):
            raise Exception("'route_map_entries_seq' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('condition_type')):
            raise Exception("'condition_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('value')):
            raise Exception("'value' cannot be empty")

          #convert keys to list
          condition_type = mapping_dict.get('condition_type')
          if not isinstance(condition_type, list):
            condition_type = [condition_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare payload
          match_condition_object_list = []
          for condition_type_iterator in condition_type:
            for value_iterator in value:
              from servicemodel.controller.devices.device.route_maps.route_map import route_map_entries
              match_condition_object = route_map_entries.match_condition.match_condition()
              match_condition_object.condition_type = condition_type_iterator
              match_condition_object.value = value_iterator
              match_condition_object_list.append(match_condition_object)

          return match_condition_object_list

      #XPATH devices/device/route-maps/route-map/route-map-entries/set-action
      class set_action(AbstractDeviceMgr):
        key_hints = [['name'],['seq']]
        def getRcpathPayload(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          set_action_object_list = self.validate_inputs_form_payload(mapping_dict)

          for set_action_object in set_action_object_list:
            #fetch payload
            set_action_payload = set_action_object.getxml(filter=True)
            util.log_debug('set_action_payload %s'%set_action_payload)
            payload_list.append(set_action_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)

          #convert parent keys to list
          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          set_action_object_list = self.validate_inputs_form_payload(mapping_dict)

          for set_action_object in set_action_object_list:
            #fetch payload
            set_action_payload = set_action_object.getxml(filter=True)

            util.log_debug('set_action_payload %s'%set_action_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=set_action_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)


          ##prepare rcpath
          rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          set_action_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          set_type = mapping_dict.get('set_type')
          if not isinstance(set_type, list):
            set_type = [set_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for set_type_iterator in set_type:
            for value_iterator in value:
              rcpath_tmp =  rcpath+"/set-action=%s,%s"%(util.make_interfacename(set_type_iterator),util.make_interfacename(value_iterator))
              rcpath_list.append(rcpath_tmp)
          for rc_counter, set_action_object in enumerate(set_action_object_list):
            #fetch payload
            set_action_payload = set_action_object.getxml(filter=True)

            util.log_debug('update set_action_payload %s'%set_action_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=set_action_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, route_map_name, route_map_entries_seq, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( route_map_name, route_map_entries_seq)


          if not isinstance(route_map_name, list):
            route_map_name_list = [route_map_name]
          else:
            route_map_name_list = route_map_name
          if not isinstance(route_map_entries_seq, list):
            route_map_entries_seq_list = [route_map_entries_seq]
          else:
            route_map_entries_seq_list = route_map_entries_seq

          for route_map_name in route_map_name_list:
            for route_map_entries_seq in route_map_entries_seq_list:
              ##prepare rcpath
              rcpath = "l3features:route-maps/route-map=%s/route-map-entries=%s"%(util.make_interfacename(route_map_name),util.make_interfacename(route_map_entries_seq))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('set_type')):
            raise Exception("'set_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('value')):
            raise Exception("'value' cannot be empty")

          #convert keys to list
          set_type = mapping_dict.get('set_type')
          if not isinstance(set_type, list):
            set_type = [set_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for set_type_iterator in set_type:
            for value_iterator in value:
              rcpath_tmp =  rcpath+"/set-action=%s,%s"%(util.make_interfacename(set_type_iterator),util.make_interfacename(value_iterator))
              rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, route_map_name, route_map_entries_seq):
          #Parent Key Validations
          if util.isEmpty(route_map_name):
            raise Exception("'route_map_name' cannot be empty")
          if util.isEmpty(route_map_entries_seq):
            raise Exception("'route_map_entries_seq' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('set_type')):
            raise Exception("'set_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('value')):
            raise Exception("'value' cannot be empty")

          #convert keys to list
          set_type = mapping_dict.get('set_type')
          if not isinstance(set_type, list):
            set_type = [set_type]
          value = mapping_dict.get('value')
          if not isinstance(value, list):
            value = [value]

          #prepare payload
          set_action_object_list = []
          for set_type_iterator in set_type:
            for value_iterator in value:
              from servicemodel.controller.devices.device.route_maps.route_map import route_map_entries
              set_action_object = route_map_entries.set_action.set_action()
              set_action_object.set_type = set_type_iterator
              try:
                if (update == False) or (update == True and str(mapping_dict.get('ip', None)) != ''):
                  set_action_object.ip = mapping_dict.get('ip', None)
                else:
                  set_action_object.ip._empty_tag = True
              except TypeError:
                pass
              set_action_object.value = value_iterator
              set_action_object_list.append(set_action_object)

          return set_action_object_list

