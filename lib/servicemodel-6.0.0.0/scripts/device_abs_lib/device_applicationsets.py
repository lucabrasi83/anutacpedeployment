#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class applicationsets(object):
  #XPATH devices/device/applicationsets/application-set
  class application_set(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:applicationsets"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_set_object_list = self.validate_inputs_form_payload(mapping_dict)

      for application_set_object in application_set_object_list:
        #fetch payload
        application_set_payload = application_set_object.getxml(filter=True)
        util.log_debug('application_set_payload %s'%application_set_payload)
        payload_list.append(application_set_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:applicationsets"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_set_object_list = self.validate_inputs_form_payload(mapping_dict)

      for application_set_object in application_set_object_list:
        #fetch payload
        application_set_payload = application_set_object.getxml(filter=True)

        util.log_debug('application_set_payload %s'%application_set_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:applicationsets"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      application_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/application-set=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, application_set_object in enumerate(application_set_object_list):
        #fetch payload
        application_set_payload = application_set_object.getxml(filter=True)

        util.log_debug('update application_set_payload %s'%application_set_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:applicationsets"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/application-set=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      application_set_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import applicationsets
        application_set_object = applicationsets.application_set.application_set()
        application_set_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
            application_set_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
          else:
            application_set_object.virtual_device_name._empty_tag = True
        except TypeError:
          pass
        application_set_object_list.append(application_set_object)

      return application_set_object_list

    #XPATH devices/device/applicationsets/application-set/application
    class application(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, application_set_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict)

        for application_object in application_object_list:
          #fetch payload
          application_payload = application_object.getxml(filter=True)
          util.log_debug('application_payload %s'%application_payload)
          payload_list.append(application_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, application_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)

        #convert parent keys to list
        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict)

        for application_object in application_object_list:
          #fetch payload
          application_payload = application_object.getxml(filter=True)

          util.log_debug('application_payload %s'%application_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, application_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)


        ##prepare rcpath
        rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        application_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        application_name = mapping_dict.get('application_name')
        if not isinstance(application_name, list):
          application_name = [application_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for application_name_iterator in application_name:
          rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(application_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, application_object in enumerate(application_object_list):
          #fetch payload
          application_payload = application_object.getxml(filter=True)

          util.log_debug('update application_payload %s'%application_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=application_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, application_set_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)


        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('application_name')):
          raise Exception("'application_name' cannot be empty")

        #convert keys to list
        application_name = mapping_dict.get('application_name')
        if not isinstance(application_name, list):
          application_name = [application_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for application_name_iterator in application_name:
          rcpath_tmp =  rcpath+"/application=%s"%(util.make_interfacename(application_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, application_set_name):
        #Parent Key Validations
        if util.isEmpty(application_set_name):
          raise Exception("'application_set_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('application_name')):
          raise Exception("'application_name' cannot be empty")

        #convert keys to list
        application_name = mapping_dict.get('application_name')
        if not isinstance(application_name, list):
          application_name = [application_name]

        #prepare payload
        application_object_list = []
        for application_name_iterator in application_name:
          from servicemodel.controller.devices.device.applicationsets import application_set
          application_object = application_set.application.application()
          application_object.application_name = application_name_iterator
          application_object_list.append(application_object)

        return application_object_list

    #XPATH devices/device/applicationsets/application-set/sub-application-set
    class sub_application_set(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, application_set_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_application_set_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sub_application_set_object in sub_application_set_object_list:
          #fetch payload
          sub_application_set_payload = sub_application_set_object.getxml(filter=True)
          util.log_debug('sub_application_set_payload %s'%sub_application_set_payload)
          payload_list.append(sub_application_set_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, application_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)

        #convert parent keys to list
        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_application_set_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sub_application_set_object in sub_application_set_object_list:
          #fetch payload
          sub_application_set_payload = sub_application_set_object.getxml(filter=True)

          util.log_debug('sub_application_set_payload %s'%sub_application_set_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sub_application_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, application_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)


        ##prepare rcpath
        rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_application_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        application_set_name = mapping_dict.get('application_set_name')
        if not isinstance(application_set_name, list):
          application_set_name = [application_set_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for application_set_name_iterator in application_set_name:
          rcpath_tmp =  rcpath+"/sub-application-set=%s"%(util.make_interfacename(application_set_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, sub_application_set_object in enumerate(sub_application_set_object_list):
          #fetch payload
          sub_application_set_payload = sub_application_set_object.getxml(filter=True)

          util.log_debug('update sub_application_set_payload %s'%sub_application_set_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sub_application_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, application_set_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( application_set_name)


        if not isinstance(application_set_name, list):
          application_set_name_list = [application_set_name]
        else:
          application_set_name_list = application_set_name

        for application_set_name in application_set_name_list:
          ##prepare rcpath
          rcpath = "firewall:applicationsets/application-set=%s"%(util.make_interfacename(application_set_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('application_set_name')):
          raise Exception("'application_set_name' cannot be empty")

        #convert keys to list
        application_set_name = mapping_dict.get('application_set_name')
        if not isinstance(application_set_name, list):
          application_set_name = [application_set_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for application_set_name_iterator in application_set_name:
          rcpath_tmp =  rcpath+"/sub-application-set=%s"%(util.make_interfacename(application_set_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, application_set_name):
        #Parent Key Validations
        if util.isEmpty(application_set_name):
          raise Exception("'application_set_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('application_set_name')):
          raise Exception("'application_set_name' cannot be empty")

        #convert keys to list
        application_set_name = mapping_dict.get('application_set_name')
        if not isinstance(application_set_name, list):
          application_set_name = [application_set_name]

        #prepare payload
        sub_application_set_object_list = []
        for application_set_name_iterator in application_set_name:
          from servicemodel.controller.devices.device.applicationsets import application_set
          sub_application_set_object = application_set.sub_application_set.sub_application_set()
          sub_application_set_object.application_set_name = application_set_name_iterator
          sub_application_set_object_list.append(sub_application_set_object)

        return sub_application_set_object_list

