#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class pfr_classes(object):
  #XPATH devices/device/pfr-classes/pfr-class
  class pfr_class(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "qos:pfr-classes"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      pfr_class_object_list = self.validate_inputs_form_payload(mapping_dict)

      for pfr_class_object in pfr_class_object_list:
        #fetch payload
        pfr_class_payload = pfr_class_object.getxml(filter=True)
        util.log_debug('pfr_class_payload %s'%pfr_class_payload)
        payload_list.append(pfr_class_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "qos:pfr-classes"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      pfr_class_object_list = self.validate_inputs_form_payload(mapping_dict)

      for pfr_class_object in pfr_class_object_list:
        #fetch payload
        pfr_class_payload = pfr_class_object.getxml(filter=True)

        util.log_debug('pfr_class_payload %s'%pfr_class_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=pfr_class_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "qos:pfr-classes"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      pfr_class_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/pfr-class=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, pfr_class_object in enumerate(pfr_class_object_list):
        #fetch payload
        pfr_class_payload = pfr_class_object.getxml(filter=True)

        util.log_debug('update pfr_class_payload %s'%pfr_class_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=pfr_class_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "qos:pfr-classes"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/pfr-class=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('sequence_number')):
        raise Exception("'sequence_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain_name')):
        raise Exception("'domain_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('vrf_name')):
        raise Exception("'vrf_name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      pfr_class_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import pfr_classes
        pfr_class_object = pfr_classes.pfr_class.pfr_class()
        pfr_class_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('sequence_number', None)) != ''):
            pfr_class_object.sequence_number = mapping_dict.get('sequence_number', None)
          else:
            pfr_class_object.sequence_number._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
            pfr_class_object.domain_name = mapping_dict.get('domain_name', None)
          else:
            pfr_class_object.domain_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
            pfr_class_object.vrf_name = mapping_dict.get('vrf_name', None)
          else:
            pfr_class_object.vrf_name._empty_tag = True
        except TypeError:
          pass
        pfr_class_object_list.append(pfr_class_object)

      return pfr_class_object_list

    #XPATH devices/device/pfr-classes/pfr-class/class-match-condition
    class class_match_condition(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, pfr_class_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

        for class_match_condition_object in class_match_condition_object_list:
          #fetch payload
          class_match_condition_payload = class_match_condition_object.getxml(filter=True)
          util.log_debug('class_match_condition_payload %s'%class_match_condition_payload)
          payload_list.append(class_match_condition_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, pfr_class_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)

        #convert parent keys to list
        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

        for class_match_condition_object in class_match_condition_object_list:
          #fetch payload
          class_match_condition_payload = class_match_condition_object.getxml(filter=True)

          util.log_debug('class_match_condition_payload %s'%class_match_condition_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=class_match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, pfr_class_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)


        ##prepare rcpath
        rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        class_match_condition_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        condition_type = mapping_dict.get('condition_type')
        if not isinstance(condition_type, list):
          condition_type = [condition_type]
        match_value = mapping_dict.get('match_value')
        if not isinstance(match_value, list):
          match_value = [match_value]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for condition_type_iterator in condition_type:
          for match_value_iterator in match_value:
            rcpath_tmp =  rcpath+"/class-match-condition=%s,%s"%(util.make_interfacename(condition_type_iterator),util.make_interfacename(match_value_iterator))
            rcpath_list.append(rcpath_tmp)
        for rc_counter, class_match_condition_object in enumerate(class_match_condition_object_list):
          #fetch payload
          class_match_condition_payload = class_match_condition_object.getxml(filter=True)

          util.log_debug('update class_match_condition_payload %s'%class_match_condition_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=class_match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, pfr_class_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)


        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('condition_type')):
          raise Exception("'condition_type' cannot be empty")
        if util.isEmpty(mapping_dict.get('match_value')):
          raise Exception("'match_value' cannot be empty")

        #convert keys to list
        condition_type = mapping_dict.get('condition_type')
        if not isinstance(condition_type, list):
          condition_type = [condition_type]
        match_value = mapping_dict.get('match_value')
        if not isinstance(match_value, list):
          match_value = [match_value]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for condition_type_iterator in condition_type:
          for match_value_iterator in match_value:
            rcpath_tmp =  rcpath+"/class-match-condition=%s,%s"%(util.make_interfacename(condition_type_iterator),util.make_interfacename(match_value_iterator))
            rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, pfr_class_name):
        #Parent Key Validations
        if util.isEmpty(pfr_class_name):
          raise Exception("'pfr_class_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('condition_type')):
          raise Exception("'condition_type' cannot be empty")
        if util.isEmpty(mapping_dict.get('match_value')):
          raise Exception("'match_value' cannot be empty")

        #convert keys to list
        condition_type = mapping_dict.get('condition_type')
        if not isinstance(condition_type, list):
          condition_type = [condition_type]
        match_value = mapping_dict.get('match_value')
        if not isinstance(match_value, list):
          match_value = [match_value]

        #prepare payload
        class_match_condition_object_list = []
        for condition_type_iterator in condition_type:
          for match_value_iterator in match_value:
            from servicemodel.controller.devices.device.pfr_classes import pfr_class
            class_match_condition_object = pfr_class.class_match_condition.class_match_condition()
            class_match_condition_object.condition_type = condition_type_iterator
            class_match_condition_object.match_value = match_value_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('match_policy', None)) != ''):
                class_match_condition_object.match_policy = mapping_dict.get('match_policy', None)
              else:
                class_match_condition_object.match_policy._empty_tag = True
            except TypeError:
              pass
            class_match_condition_object_list.append(class_match_condition_object)

        return class_match_condition_object_list

      #XPATH devices/device/pfr-classes/pfr-class/class-match-condition/priority
      class priority(AbstractDeviceMgr):
        key_hints = [['name'],['condition_type','match_value']]
        def getRcpathPayload(self, sdata, dev, pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(pfr_class_name, list):
            pfr_class_name_list = [pfr_class_name]
          else:
            pfr_class_name_list = pfr_class_name
          if not isinstance(class_match_condition_condition_type, list):
            class_match_condition_condition_type_list = [class_match_condition_condition_type]
          else:
            class_match_condition_condition_type_list = class_match_condition_condition_type
          if not isinstance(class_match_condition_match_value, list):
            class_match_condition_match_value_list = [class_match_condition_match_value]
          else:
            class_match_condition_match_value_list = class_match_condition_match_value

          for pfr_class_name in pfr_class_name_list:
            for class_match_condition_condition_type in class_match_condition_condition_type_list:
              for class_match_condition_match_value in class_match_condition_match_value_list:
                ##prepare rcpath
                rcpath = "qos:pfr-classes/pfr-class=%s/class-match-condition=%s,%s"%(util.make_interfacename(pfr_class_name),util.make_interfacename(class_match_condition_condition_type),util.make_interfacename(class_match_condition_match_value))
                rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          priority_object_list = self.validate_inputs_form_payload(mapping_dict)

          for priority_object in priority_object_list:
            #fetch payload
            priority_payload = priority_object.getxml(filter=True)
            util.log_debug('priority_payload %s'%priority_payload)
            payload_list.append(priority_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value)

          #convert parent keys to list
          if not isinstance(pfr_class_name, list):
            pfr_class_name_list = [pfr_class_name]
          else:
            pfr_class_name_list = pfr_class_name
          if not isinstance(class_match_condition_condition_type, list):
            class_match_condition_condition_type_list = [class_match_condition_condition_type]
          else:
            class_match_condition_condition_type_list = class_match_condition_condition_type
          if not isinstance(class_match_condition_match_value, list):
            class_match_condition_match_value_list = [class_match_condition_match_value]
          else:
            class_match_condition_match_value_list = class_match_condition_match_value

          for pfr_class_name in pfr_class_name_list:
            for class_match_condition_condition_type in class_match_condition_condition_type_list:
              for class_match_condition_match_value in class_match_condition_match_value_list:
                ##prepare rcpath
                rcpath = "qos:pfr-classes/pfr-class=%s/class-match-condition=%s,%s"%(util.make_interfacename(pfr_class_name),util.make_interfacename(class_match_condition_condition_type),util.make_interfacename(class_match_condition_match_value))
                self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          priority_object_list = self.validate_inputs_form_payload(mapping_dict)

          for priority_object in priority_object_list:
            #fetch payload
            priority_payload = priority_object.getxml(filter=True)

            util.log_debug('priority_payload %s'%priority_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=priority_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value)


          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s/class-match-condition=%s,%s"%(util.make_interfacename(pfr_class_name),util.make_interfacename(class_match_condition_condition_type),util.make_interfacename(class_match_condition_match_value))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          priority_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          priority_value = mapping_dict.get('priority_value')
          if not isinstance(priority_value, list):
            priority_value = [priority_value]
          priority_type = mapping_dict.get('priority_type')
          if not isinstance(priority_type, list):
            priority_type = [priority_type]
          threshold_value = mapping_dict.get('threshold_value')
          if not isinstance(threshold_value, list):
            threshold_value = [threshold_value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for priority_value_iterator in priority_value:
            for priority_type_iterator in priority_type:
              for threshold_value_iterator in threshold_value:
                rcpath_tmp =  rcpath+"/priority=%s,%s,%s"%(util.make_interfacename(priority_value_iterator),util.make_interfacename(priority_type_iterator),util.make_interfacename(threshold_value_iterator))
                rcpath_list.append(rcpath_tmp)
          for rc_counter, priority_object in enumerate(priority_object_list):
            #fetch payload
            priority_payload = priority_object.getxml(filter=True)

            util.log_debug('update priority_payload %s'%priority_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=priority_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value)


          if not isinstance(pfr_class_name, list):
            pfr_class_name_list = [pfr_class_name]
          else:
            pfr_class_name_list = pfr_class_name
          if not isinstance(class_match_condition_condition_type, list):
            class_match_condition_condition_type_list = [class_match_condition_condition_type]
          else:
            class_match_condition_condition_type_list = class_match_condition_condition_type
          if not isinstance(class_match_condition_match_value, list):
            class_match_condition_match_value_list = [class_match_condition_match_value]
          else:
            class_match_condition_match_value_list = class_match_condition_match_value

          for pfr_class_name in pfr_class_name_list:
            for class_match_condition_condition_type in class_match_condition_condition_type_list:
              for class_match_condition_match_value in class_match_condition_match_value_list:
                ##prepare rcpath
                rcpath = "qos:pfr-classes/pfr-class=%s/class-match-condition=%s,%s"%(util.make_interfacename(pfr_class_name),util.make_interfacename(class_match_condition_condition_type),util.make_interfacename(class_match_condition_match_value))
                self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('priority_value')):
            raise Exception("'priority_value' cannot be empty")
          if util.isEmpty(mapping_dict.get('priority_type')):
            raise Exception("'priority_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('threshold_value')):
            raise Exception("'threshold_value' cannot be empty")

          #convert keys to list
          priority_value = mapping_dict.get('priority_value')
          if not isinstance(priority_value, list):
            priority_value = [priority_value]
          priority_type = mapping_dict.get('priority_type')
          if not isinstance(priority_type, list):
            priority_type = [priority_type]
          threshold_value = mapping_dict.get('threshold_value')
          if not isinstance(threshold_value, list):
            threshold_value = [threshold_value]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for priority_value_iterator in priority_value:
            for priority_type_iterator in priority_type:
              for threshold_value_iterator in threshold_value:
                rcpath_tmp =  rcpath+"/priority=%s,%s,%s"%(util.make_interfacename(priority_value_iterator),util.make_interfacename(priority_type_iterator),util.make_interfacename(threshold_value_iterator))
                rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, pfr_class_name, class_match_condition_condition_type, class_match_condition_match_value):
          #Parent Key Validations
          if util.isEmpty(pfr_class_name):
            raise Exception("'pfr_class_name' cannot be empty")
          if util.isEmpty(class_match_condition_condition_type):
            raise Exception("'class_match_condition_condition_type' cannot be empty")
          if util.isEmpty(class_match_condition_match_value):
            raise Exception("'class_match_condition_match_value' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('priority_value')):
            raise Exception("'priority_value' cannot be empty")
          if util.isEmpty(mapping_dict.get('priority_type')):
            raise Exception("'priority_type' cannot be empty")
          if util.isEmpty(mapping_dict.get('threshold_value')):
            raise Exception("'threshold_value' cannot be empty")

          #convert keys to list
          priority_value = mapping_dict.get('priority_value')
          if not isinstance(priority_value, list):
            priority_value = [priority_value]
          priority_type = mapping_dict.get('priority_type')
          if not isinstance(priority_type, list):
            priority_type = [priority_type]
          threshold_value = mapping_dict.get('threshold_value')
          if not isinstance(threshold_value, list):
            threshold_value = [threshold_value]

          #prepare payload
          priority_object_list = []
          for priority_value_iterator in priority_value:
            for priority_type_iterator in priority_type:
              for threshold_value_iterator in threshold_value:
                from servicemodel.controller.devices.device.pfr_classes.pfr_class import class_match_condition
                priority_object = class_match_condition.priority.priority()
                priority_object.priority_value = priority_value_iterator
                priority_object.priority_type = priority_type_iterator
                priority_object.threshold_value = threshold_value_iterator
                priority_object_list.append(priority_object)

          return priority_object_list

    #XPATH devices/device/pfr-classes/pfr-class/pfr-path
    class pfr_path(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, pfr_class_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pfr_path_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pfr_path_object in pfr_path_object_list:
          #fetch payload
          pfr_path_payload = pfr_path_object.getxml(filter=True)
          util.log_debug('pfr_path_payload %s'%pfr_path_payload)
          payload_list.append(pfr_path_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, pfr_class_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)

        #convert parent keys to list
        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pfr_path_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pfr_path_object in pfr_path_object_list:
          #fetch payload
          pfr_path_payload = pfr_path_object.getxml(filter=True)

          util.log_debug('pfr_path_payload %s'%pfr_path_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=pfr_path_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, pfr_class_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)


        ##prepare rcpath
        rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pfr_path_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        primary_path_preference = mapping_dict.get('primary_path_preference')
        if not isinstance(primary_path_preference, list):
          primary_path_preference = [primary_path_preference]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for primary_path_preference_iterator in primary_path_preference:
          rcpath_tmp =  rcpath+"/pfr-path=%s"%(util.make_interfacename(primary_path_preference_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, pfr_path_object in enumerate(pfr_path_object_list):
          #fetch payload
          pfr_path_payload = pfr_path_object.getxml(filter=True)

          util.log_debug('update pfr_path_payload %s'%pfr_path_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=pfr_path_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, pfr_class_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( pfr_class_name)


        if not isinstance(pfr_class_name, list):
          pfr_class_name_list = [pfr_class_name]
        else:
          pfr_class_name_list = pfr_class_name

        for pfr_class_name in pfr_class_name_list:
          ##prepare rcpath
          rcpath = "qos:pfr-classes/pfr-class=%s"%(util.make_interfacename(pfr_class_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('primary_path_preference')):
          raise Exception("'primary_path_preference' cannot be empty")

        #convert keys to list
        primary_path_preference = mapping_dict.get('primary_path_preference')
        if not isinstance(primary_path_preference, list):
          primary_path_preference = [primary_path_preference]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for primary_path_preference_iterator in primary_path_preference:
          rcpath_tmp =  rcpath+"/pfr-path=%s"%(util.make_interfacename(primary_path_preference_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, pfr_class_name):
        #Parent Key Validations
        if util.isEmpty(pfr_class_name):
          raise Exception("'pfr_class_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('primary_path_preference')):
          raise Exception("'primary_path_preference' cannot be empty")

        #convert keys to list
        primary_path_preference = mapping_dict.get('primary_path_preference')
        if not isinstance(primary_path_preference, list):
          primary_path_preference = [primary_path_preference]

        #prepare payload
        pfr_path_object_list = []
        for primary_path_preference_iterator in primary_path_preference:
          from servicemodel.controller.devices.device.pfr_classes import pfr_class
          pfr_path_object = pfr_class.pfr_path.pfr_path()
          pfr_path_object.primary_path_preference = primary_path_preference_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('secondary_path_preference', None)) != ''):
              pfr_path_object.secondary_path_preference = mapping_dict.get('secondary_path_preference', None)
            else:
              pfr_path_object.secondary_path_preference._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('next_fallback', None)) != ''):
              pfr_path_object.next_fallback = mapping_dict.get('next_fallback', None)
            else:
              pfr_path_object.next_fallback._empty_tag = True
          except TypeError:
            pass
          pfr_path_object_list.append(pfr_path_object)

        return pfr_path_object_list

