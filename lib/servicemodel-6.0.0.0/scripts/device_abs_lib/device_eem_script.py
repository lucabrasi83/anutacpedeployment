#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class eem_script(object):
  class eem_if_errors(object):
    #XPATH devices/device/eem-script/eem-if-errors/interface
    class interface(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:eem-script/eem-if-errors"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)
          util.log_debug('interface_payload %s'%interface_payload)
          payload_list.append(interface_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:eem-script/eem-if-errors"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict)

        for interface_object in interface_object_list:
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('interface_payload %s'%interface_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:eem-script/eem-if-errors"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        if_tag = mapping_dict.get('if_tag')
        if not isinstance(if_tag, list):
          if_tag = [if_tag]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for if_tag_iterator in if_tag:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(if_tag_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, interface_object in enumerate(interface_object_list):
          #fetch payload
          interface_payload = interface_object.getxml(filter=True)

          util.log_debug('update interface_payload %s'%interface_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:eem-script/eem-if-errors"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('if_tag')):
          raise Exception("'if_tag' cannot be empty")

        #convert keys to list
        if_tag = mapping_dict.get('if_tag')
        if not isinstance(if_tag, list):
          if_tag = [if_tag]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for if_tag_iterator in if_tag:
          rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(if_tag_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('if_tag')):
          raise Exception("'if_tag' cannot be empty")

        #convert keys to list
        if_tag = mapping_dict.get('if_tag')
        if not isinstance(if_tag, list):
          if_tag = [if_tag]

        #prepare payload
        interface_object_list = []
        for if_tag_iterator in if_tag:
          from servicemodel.controller.devices.device.eem_script import eem_if_errors
          interface_object = eem_if_errors.interface.interface()
          interface_object.if_tag = if_tag_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
              interface_object.interface_name = mapping_dict.get('interface_name', None)
            else:
              interface_object.interface_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('correlate', None)) != ''):
              interface_object.correlate = mapping_dict.get('correlate', None)
            else:
              interface_object.correlate._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
              interface_object.variable1 = mapping_dict.get('variable1', None)
            else:
              interface_object.variable1._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
              interface_object.variable2 = mapping_dict.get('variable2', None)
            else:
              interface_object.variable2._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('variable3', None)) != ''):
              interface_object.variable3 = mapping_dict.get('variable3', None)
            else:
              interface_object.variable3._empty_tag = True
          except TypeError:
            pass
          interface_object_list.append(interface_object)

        return interface_object_list

  #XPATH devices/device/eem-script/eem-bgp-adj
  class eem_bgp_adj(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_bgp_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_bgp_adj_object in eem_bgp_adj_object_list:
        #fetch payload
        eem_bgp_adj_payload = eem_bgp_adj_object.getxml(filter=True)
        util.log_debug('eem_bgp_adj_payload %s'%eem_bgp_adj_payload)
        payload_list.append(eem_bgp_adj_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_bgp_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_bgp_adj_object in eem_bgp_adj_object_list:
        #fetch payload
        eem_bgp_adj_payload = eem_bgp_adj_object.getxml(filter=True)

        util.log_debug('eem_bgp_adj_payload %s'%eem_bgp_adj_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=eem_bgp_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_bgp_adj_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-bgp-adj"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, eem_bgp_adj_object in enumerate(eem_bgp_adj_object_list):
        #fetch payload
        eem_bgp_adj_payload = eem_bgp_adj_object.getxml(filter=True)

        util.log_debug('update eem_bgp_adj_payload %s'%eem_bgp_adj_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=eem_bgp_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-bgp-adj"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      eem_bgp_adj_object_list = []
      from servicemodel.controller.devices.device import eem_script
      eem_bgp_adj_object = eem_script.eem_bgp_adj.eem_bgp_adj()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('enable_bgp_adj_eem', None)) != ''):
          eem_bgp_adj_object.enable_bgp_adj_eem = mapping_dict.get('enable_bgp_adj_eem', None)
        else:
          eem_bgp_adj_object.enable_bgp_adj_eem._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
          eem_bgp_adj_object.variable1 = mapping_dict.get('variable1', None)
        else:
          eem_bgp_adj_object.variable1._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
          eem_bgp_adj_object.variable2 = mapping_dict.get('variable2', None)
        else:
          eem_bgp_adj_object.variable2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable3', None)) != ''):
          eem_bgp_adj_object.variable3 = mapping_dict.get('variable3', None)
        else:
          eem_bgp_adj_object.variable3._empty_tag = True
      except TypeError:
        pass
      eem_bgp_adj_object_list.append(eem_bgp_adj_object)

      return eem_bgp_adj_object_list

  #XPATH devices/device/eem-script/eem-eigrp-adj
  class eem_eigrp_adj(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_eigrp_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_eigrp_adj_object in eem_eigrp_adj_object_list:
        #fetch payload
        eem_eigrp_adj_payload = eem_eigrp_adj_object.getxml(filter=True)
        util.log_debug('eem_eigrp_adj_payload %s'%eem_eigrp_adj_payload)
        payload_list.append(eem_eigrp_adj_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_eigrp_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_eigrp_adj_object in eem_eigrp_adj_object_list:
        #fetch payload
        eem_eigrp_adj_payload = eem_eigrp_adj_object.getxml(filter=True)

        util.log_debug('eem_eigrp_adj_payload %s'%eem_eigrp_adj_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=eem_eigrp_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_eigrp_adj_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-eigrp-adj"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, eem_eigrp_adj_object in enumerate(eem_eigrp_adj_object_list):
        #fetch payload
        eem_eigrp_adj_payload = eem_eigrp_adj_object.getxml(filter=True)

        util.log_debug('update eem_eigrp_adj_payload %s'%eem_eigrp_adj_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=eem_eigrp_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-eigrp-adj"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      eem_eigrp_adj_object_list = []
      from servicemodel.controller.devices.device import eem_script
      eem_eigrp_adj_object = eem_script.eem_eigrp_adj.eem_eigrp_adj()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('enable_eigrp_adj_eem', None)) != ''):
          eem_eigrp_adj_object.enable_eigrp_adj_eem = mapping_dict.get('enable_eigrp_adj_eem', None)
        else:
          eem_eigrp_adj_object.enable_eigrp_adj_eem._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
          eem_eigrp_adj_object.variable1 = mapping_dict.get('variable1', None)
        else:
          eem_eigrp_adj_object.variable1._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
          eem_eigrp_adj_object.variable2 = mapping_dict.get('variable2', None)
        else:
          eem_eigrp_adj_object.variable2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable3', None)) != ''):
          eem_eigrp_adj_object.variable3 = mapping_dict.get('variable3', None)
        else:
          eem_eigrp_adj_object.variable3._empty_tag = True
      except TypeError:
        pass
      eem_eigrp_adj_object_list.append(eem_eigrp_adj_object)

      return eem_eigrp_adj_object_list

  #XPATH devices/device/eem-script/eem-ospf-adj
  class eem_ospf_adj(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_ospf_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_ospf_adj_object in eem_ospf_adj_object_list:
        #fetch payload
        eem_ospf_adj_payload = eem_ospf_adj_object.getxml(filter=True)
        util.log_debug('eem_ospf_adj_payload %s'%eem_ospf_adj_payload)
        payload_list.append(eem_ospf_adj_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_ospf_adj_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_ospf_adj_object in eem_ospf_adj_object_list:
        #fetch payload
        eem_ospf_adj_payload = eem_ospf_adj_object.getxml(filter=True)

        util.log_debug('eem_ospf_adj_payload %s'%eem_ospf_adj_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=eem_ospf_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_ospf_adj_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-ospf-adj"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, eem_ospf_adj_object in enumerate(eem_ospf_adj_object_list):
        #fetch payload
        eem_ospf_adj_payload = eem_ospf_adj_object.getxml(filter=True)

        util.log_debug('update eem_ospf_adj_payload %s'%eem_ospf_adj_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=eem_ospf_adj_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-ospf-adj"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      eem_ospf_adj_object_list = []
      from servicemodel.controller.devices.device import eem_script
      eem_ospf_adj_object = eem_script.eem_ospf_adj.eem_ospf_adj()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('enable_ospf_adj_eem', None)) != ''):
          eem_ospf_adj_object.enable_ospf_adj_eem = mapping_dict.get('enable_ospf_adj_eem', None)
        else:
          eem_ospf_adj_object.enable_ospf_adj_eem._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
          eem_ospf_adj_object.variable1 = mapping_dict.get('variable1', None)
        else:
          eem_ospf_adj_object.variable1._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
          eem_ospf_adj_object.variable2 = mapping_dict.get('variable2', None)
        else:
          eem_ospf_adj_object.variable2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable3', None)) != ''):
          eem_ospf_adj_object.variable3 = mapping_dict.get('variable3', None)
        else:
          eem_ospf_adj_object.variable3._empty_tag = True
      except TypeError:
        pass
      eem_ospf_adj_object_list.append(eem_ospf_adj_object)

      return eem_ospf_adj_object_list

  #XPATH devices/device/eem-script/eem-cpu-threshold
  class eem_cpu_threshold(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_cpu_threshold_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_cpu_threshold_object in eem_cpu_threshold_object_list:
        #fetch payload
        eem_cpu_threshold_payload = eem_cpu_threshold_object.getxml(filter=True)
        util.log_debug('eem_cpu_threshold_payload %s'%eem_cpu_threshold_payload)
        payload_list.append(eem_cpu_threshold_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_cpu_threshold_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_cpu_threshold_object in eem_cpu_threshold_object_list:
        #fetch payload
        eem_cpu_threshold_payload = eem_cpu_threshold_object.getxml(filter=True)

        util.log_debug('eem_cpu_threshold_payload %s'%eem_cpu_threshold_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=eem_cpu_threshold_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_cpu_threshold_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-cpu-threshold"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, eem_cpu_threshold_object in enumerate(eem_cpu_threshold_object_list):
        #fetch payload
        eem_cpu_threshold_payload = eem_cpu_threshold_object.getxml(filter=True)

        util.log_debug('update eem_cpu_threshold_payload %s'%eem_cpu_threshold_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=eem_cpu_threshold_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-cpu-threshold"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      eem_cpu_threshold_object_list = []
      from servicemodel.controller.devices.device import eem_script
      eem_cpu_threshold_object = eem_script.eem_cpu_threshold.eem_cpu_threshold()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('rising_threshold', None)) != ''):
          eem_cpu_threshold_object.rising_threshold = mapping_dict.get('rising_threshold', None)
        else:
          eem_cpu_threshold_object.rising_threshold._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('rising_threshold_interval', None)) != ''):
          eem_cpu_threshold_object.rising_threshold_interval = mapping_dict.get('rising_threshold_interval', None)
        else:
          eem_cpu_threshold_object.rising_threshold_interval._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('falling_threshold', None)) != ''):
          eem_cpu_threshold_object.falling_threshold = mapping_dict.get('falling_threshold', None)
        else:
          eem_cpu_threshold_object.falling_threshold._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('falling_threshold_interval', None)) != ''):
          eem_cpu_threshold_object.falling_threshold_interval = mapping_dict.get('falling_threshold_interval', None)
        else:
          eem_cpu_threshold_object.falling_threshold_interval._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
          eem_cpu_threshold_object.variable1 = mapping_dict.get('variable1', None)
        else:
          eem_cpu_threshold_object.variable1._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
          eem_cpu_threshold_object.variable2 = mapping_dict.get('variable2', None)
        else:
          eem_cpu_threshold_object.variable2._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable3', None)) != ''):
          eem_cpu_threshold_object.variable3 = mapping_dict.get('variable3', None)
        else:
          eem_cpu_threshold_object.variable3._empty_tag = True
      except TypeError:
        pass
      eem_cpu_threshold_object_list.append(eem_cpu_threshold_object)

      return eem_cpu_threshold_object_list

  #XPATH devices/device/eem-script/eem-mem-threshold
  class eem_mem_threshold(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_mem_threshold_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_mem_threshold_object in eem_mem_threshold_object_list:
        #fetch payload
        eem_mem_threshold_payload = eem_mem_threshold_object.getxml(filter=True)
        util.log_debug('eem_mem_threshold_payload %s'%eem_mem_threshold_payload)
        payload_list.append(eem_mem_threshold_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_mem_threshold_object_list = self.validate_inputs_form_payload(mapping_dict)

      for eem_mem_threshold_object in eem_mem_threshold_object_list:
        #fetch payload
        eem_mem_threshold_payload = eem_mem_threshold_object.getxml(filter=True)

        util.log_debug('eem_mem_threshold_payload %s'%eem_mem_threshold_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=eem_mem_threshold_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      eem_mem_threshold_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-mem-threshold"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, eem_mem_threshold_object in enumerate(eem_mem_threshold_object_list):
        #fetch payload
        eem_mem_threshold_payload = eem_mem_threshold_object.getxml(filter=True)

        util.log_debug('update eem_mem_threshold_payload %s'%eem_mem_threshold_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=eem_mem_threshold_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:eem-script"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/eem-mem-threshold"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      eem_mem_threshold_object_list = []
      from servicemodel.controller.devices.device import eem_script
      eem_mem_threshold_object = eem_script.eem_mem_threshold.eem_mem_threshold()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('enable_mem_threshold_eem', None)) != ''):
          eem_mem_threshold_object.enable_mem_threshold_eem = mapping_dict.get('enable_mem_threshold_eem', None)
        else:
          eem_mem_threshold_object.enable_mem_threshold_eem._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable1', None)) != ''):
          eem_mem_threshold_object.variable1 = mapping_dict.get('variable1', None)
        else:
          eem_mem_threshold_object.variable1._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('variable2', None)) != ''):
          eem_mem_threshold_object.variable2 = mapping_dict.get('variable2', None)
        else:
          eem_mem_threshold_object.variable2._empty_tag = True
      except TypeError:
        pass
      eem_mem_threshold_object_list.append(eem_mem_threshold_object)

      return eem_mem_threshold_object_list

