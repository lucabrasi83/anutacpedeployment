#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class vn_services(object):
  #XPATH devices/device/vn-services/vn-service
  class vn_service(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l2features:vn-services"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      vn_service_object_list = self.validate_inputs_form_payload(mapping_dict)

      for vn_service_object in vn_service_object_list:
        #fetch payload
        vn_service_payload = vn_service_object.getxml(filter=True)
        util.log_debug('vn_service_payload %s'%vn_service_payload)
        payload_list.append(vn_service_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l2features:vn-services"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      vn_service_object_list = self.validate_inputs_form_payload(mapping_dict)

      for vn_service_object in vn_service_object_list:
        #fetch payload
        vn_service_payload = vn_service_object.getxml(filter=True)

        util.log_debug('vn_service_payload %s'%vn_service_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vn_service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l2features:vn-services"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      vn_service_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      node_name = mapping_dict.get('node_name')
      if not isinstance(node_name, list):
        node_name = [node_name]
      node_type = mapping_dict.get('node_type')
      if not isinstance(node_type, list):
        node_type = [node_type]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for node_name_iterator in node_name:
        for node_type_iterator in node_type:
          rcpath_tmp =  rcpath+"/vn-service=%s,%s"%(util.make_interfacename(node_name_iterator),util.make_interfacename(node_type_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, vn_service_object in enumerate(vn_service_object_list):
        #fetch payload
        vn_service_payload = vn_service_object.getxml(filter=True)

        util.log_debug('update vn_service_payload %s'%vn_service_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vn_service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l2features:vn-services"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('node_name')):
        raise Exception("'node_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('node_type')):
        raise Exception("'node_type' cannot be empty")

      #convert keys to list
      node_name = mapping_dict.get('node_name')
      if not isinstance(node_name, list):
        node_name = [node_name]
      node_type = mapping_dict.get('node_type')
      if not isinstance(node_type, list):
        node_type = [node_type]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for node_name_iterator in node_name:
        for node_type_iterator in node_type:
          rcpath_tmp =  rcpath+"/vn-service=%s,%s"%(util.make_interfacename(node_name_iterator),util.make_interfacename(node_type_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('node_name')):
        raise Exception("'node_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('node_type')):
        raise Exception("'node_type' cannot be empty")

      #convert keys to list
      node_name = mapping_dict.get('node_name')
      if not isinstance(node_name, list):
        node_name = [node_name]
      node_type = mapping_dict.get('node_type')
      if not isinstance(node_type, list):
        node_type = [node_type]

      #prepare payload
      vn_service_object_list = []
      for node_name_iterator in node_name:
        for node_type_iterator in node_type:
          from servicemodel.controller.devices.device import vn_services
          vn_service_object = vn_services.vn_service.vn_service()
          vn_service_object.node_name = node_name_iterator
          vn_service_object.node_type = node_type_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('data_ipaddress', None)) != ''):
              vn_service_object.data_ipaddress = mapping_dict.get('data_ipaddress', None)
            else:
              vn_service_object.data_ipaddress._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vlan_name', None)) != ''):
              vn_service_object.vlan_name = mapping_dict.get('vlan_name', None)
            else:
              vn_service_object.vlan_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('inside_vlan', None)) != ''):
              vn_service_object.inside_vlan = mapping_dict.get('inside_vlan', None)
            else:
              vn_service_object.inside_vlan._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('port_profile_name', None)) != ''):
              vn_service_object.port_profile_name = mapping_dict.get('port_profile_name', None)
            else:
              vn_service_object.port_profile_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('org_hierarchy', None)) != ''):
              vn_service_object.org_hierarchy = mapping_dict.get('org_hierarchy', None)
            else:
              vn_service_object.org_hierarchy._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('security_profile_name', None)) != ''):
              vn_service_object.security_profile_name = mapping_dict.get('security_profile_name', None)
            else:
              vn_service_object.security_profile_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
              vn_service_object.mode = mapping_dict.get('mode', None)
            else:
              vn_service_object.mode._empty_tag = True
          except TypeError:
            pass
          vn_service_object_list.append(vn_service_object)

      return vn_service_object_list

