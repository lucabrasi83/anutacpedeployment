#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class crypto_keyrings(object):
  #XPATH devices/device/crypto-keyrings/crypto-keyring
  class crypto_keyring(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "dmvpn:crypto-keyrings"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crypto_keyring_object_list = self.validate_inputs_form_payload(mapping_dict)

      for crypto_keyring_object in crypto_keyring_object_list:
        #fetch payload
        crypto_keyring_payload = crypto_keyring_object.getxml(filter=True)
        util.log_debug('crypto_keyring_payload %s'%crypto_keyring_payload)
        payload_list.append(crypto_keyring_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "dmvpn:crypto-keyrings"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crypto_keyring_object_list = self.validate_inputs_form_payload(mapping_dict)

      for crypto_keyring_object in crypto_keyring_object_list:
        #fetch payload
        crypto_keyring_payload = crypto_keyring_object.getxml(filter=True)

        util.log_debug('crypto_keyring_payload %s'%crypto_keyring_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=crypto_keyring_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:crypto-keyrings"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      crypto_keyring_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      key_ring_name = mapping_dict.get('key_ring_name')
      if not isinstance(key_ring_name, list):
        key_ring_name = [key_ring_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for key_ring_name_iterator in key_ring_name:
        rcpath_tmp =  rcpath+"/crypto-keyring=%s"%(util.make_interfacename(key_ring_name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, crypto_keyring_object in enumerate(crypto_keyring_object_list):
        #fetch payload
        crypto_keyring_payload = crypto_keyring_object.getxml(filter=True)

        util.log_debug('update crypto_keyring_payload %s'%crypto_keyring_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=crypto_keyring_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:crypto-keyrings"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('key_ring_name')):
        raise Exception("'key_ring_name' cannot be empty")

      #convert keys to list
      key_ring_name = mapping_dict.get('key_ring_name')
      if not isinstance(key_ring_name, list):
        key_ring_name = [key_ring_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for key_ring_name_iterator in key_ring_name:
        rcpath_tmp =  rcpath+"/crypto-keyring=%s"%(util.make_interfacename(key_ring_name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('key_ring_name')):
        raise Exception("'key_ring_name' cannot be empty")

      #convert keys to list
      key_ring_name = mapping_dict.get('key_ring_name')
      if not isinstance(key_ring_name, list):
        key_ring_name = [key_ring_name]

      #prepare payload
      crypto_keyring_object_list = []
      for key_ring_name_iterator in key_ring_name:
        from servicemodel.controller.devices.device import crypto_keyrings
        crypto_keyring_object = crypto_keyrings.crypto_keyring.crypto_keyring()
        crypto_keyring_object.key_ring_name = key_ring_name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ike_version', None)) != ''):
            crypto_keyring_object.ike_version = mapping_dict.get('ike_version', None)
          else:
            crypto_keyring_object.ike_version._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('auth_type', None)) != ''):
            crypto_keyring_object.auth_type = mapping_dict.get('auth_type', None)
          else:
            crypto_keyring_object.auth_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
            crypto_keyring_object.vrf_name = mapping_dict.get('vrf_name', None)
          else:
            crypto_keyring_object.vrf_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('cryptoisakmpkey', None)) != ''):
            crypto_keyring_object.cryptoisakmpkey = mapping_dict.get('cryptoisakmpkey', None)
          else:
            crypto_keyring_object.cryptoisakmpkey._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('peer_name', None)) != ''):
            crypto_keyring_object.peer_name = mapping_dict.get('peer_name', None)
          else:
            crypto_keyring_object.peer_name._empty_tag = True
        except TypeError:
          pass
        crypto_keyring_object_list.append(crypto_keyring_object)

      return crypto_keyring_object_list

    #XPATH devices/device/crypto-keyrings/crypto-keyring/pre-shared-key
    class pre_shared_key(AbstractDeviceMgr):
      key_hints = [['key_ring_name']]
      def getRcpathPayload(self, sdata, dev, crypto_keyring_key_ring_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( crypto_keyring_key_ring_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(crypto_keyring_key_ring_name, list):
          crypto_keyring_key_ring_name_list = [crypto_keyring_key_ring_name]
        else:
          crypto_keyring_key_ring_name_list = crypto_keyring_key_ring_name

        for crypto_keyring_key_ring_name in crypto_keyring_key_ring_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:crypto-keyrings/crypto-keyring=%s"%(util.make_interfacename(crypto_keyring_key_ring_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pre_shared_key_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pre_shared_key_object in pre_shared_key_object_list:
          #fetch payload
          pre_shared_key_payload = pre_shared_key_object.getxml(filter=True)
          util.log_debug('pre_shared_key_payload %s'%pre_shared_key_payload)
          payload_list.append(pre_shared_key_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, crypto_keyring_key_ring_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( crypto_keyring_key_ring_name)

        #convert parent keys to list
        if not isinstance(crypto_keyring_key_ring_name, list):
          crypto_keyring_key_ring_name_list = [crypto_keyring_key_ring_name]
        else:
          crypto_keyring_key_ring_name_list = crypto_keyring_key_ring_name

        for crypto_keyring_key_ring_name in crypto_keyring_key_ring_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:crypto-keyrings/crypto-keyring=%s"%(util.make_interfacename(crypto_keyring_key_ring_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pre_shared_key_object_list = self.validate_inputs_form_payload(mapping_dict)

        for pre_shared_key_object in pre_shared_key_object_list:
          #fetch payload
          pre_shared_key_payload = pre_shared_key_object.getxml(filter=True)

          util.log_debug('pre_shared_key_payload %s'%pre_shared_key_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=pre_shared_key_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, crypto_keyring_key_ring_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( crypto_keyring_key_ring_name)


        ##prepare rcpath
        rcpath = "dmvpn:crypto-keyrings/crypto-keyring=%s"%(util.make_interfacename(crypto_keyring_key_ring_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        pre_shared_key_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ip_address_iterator in ip_address:
          rcpath_tmp =  rcpath+"/pre-shared-key=%s"%(util.make_interfacename(ip_address_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, pre_shared_key_object in enumerate(pre_shared_key_object_list):
          #fetch payload
          pre_shared_key_payload = pre_shared_key_object.getxml(filter=True)

          util.log_debug('update pre_shared_key_payload %s'%pre_shared_key_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=pre_shared_key_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, crypto_keyring_key_ring_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( crypto_keyring_key_ring_name)


        if not isinstance(crypto_keyring_key_ring_name, list):
          crypto_keyring_key_ring_name_list = [crypto_keyring_key_ring_name]
        else:
          crypto_keyring_key_ring_name_list = crypto_keyring_key_ring_name

        for crypto_keyring_key_ring_name in crypto_keyring_key_ring_name_list:
          ##prepare rcpath
          rcpath = "dmvpn:crypto-keyrings/crypto-keyring=%s"%(util.make_interfacename(crypto_keyring_key_ring_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for ip_address_iterator in ip_address:
          rcpath_tmp =  rcpath+"/pre-shared-key=%s"%(util.make_interfacename(ip_address_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, crypto_keyring_key_ring_name):
        #Parent Key Validations
        if util.isEmpty(crypto_keyring_key_ring_name):
          raise Exception("'crypto_keyring_key_ring_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('ip_address')):
          raise Exception("'ip_address' cannot be empty")

        #convert keys to list
        ip_address = mapping_dict.get('ip_address')
        if not isinstance(ip_address, list):
          ip_address = [ip_address]

        #prepare payload
        pre_shared_key_object_list = []
        for ip_address_iterator in ip_address:
          from servicemodel.controller.devices.device.crypto_keyrings import crypto_keyring
          pre_shared_key_object = crypto_keyring.pre_shared_key.pre_shared_key()
          pre_shared_key_object.ip_address = ip_address_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              pre_shared_key_object.netmask = mapping_dict.get('netmask', None)
            else:
              pre_shared_key_object.netmask._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('pre_shared_secret', None)) != ''):
              pre_shared_key_object.pre_shared_secret = mapping_dict.get('pre_shared_secret', None)
            else:
              pre_shared_key_object.pre_shared_secret._empty_tag = True
          except TypeError:
            pass
          pre_shared_key_object_list.append(pre_shared_key_object)

        return pre_shared_key_object_list

