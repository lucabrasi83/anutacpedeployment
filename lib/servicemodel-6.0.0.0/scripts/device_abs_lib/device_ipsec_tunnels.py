#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class ipsec_tunnels(object):
  #XPATH devices/device/ipsec-tunnels/ipsec-tunnel
  class ipsec_tunnel(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:ipsec-tunnels"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ipsec_tunnel_object_list = self.validate_inputs_form_payload(mapping_dict)

      for ipsec_tunnel_object in ipsec_tunnel_object_list:
        #fetch payload
        ipsec_tunnel_payload = ipsec_tunnel_object.getxml(filter=True)
        util.log_debug('ipsec_tunnel_payload %s'%ipsec_tunnel_payload)
        payload_list.append(ipsec_tunnel_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:ipsec-tunnels"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ipsec_tunnel_object_list = self.validate_inputs_form_payload(mapping_dict)

      for ipsec_tunnel_object in ipsec_tunnel_object_list:
        #fetch payload
        ipsec_tunnel_payload = ipsec_tunnel_object.getxml(filter=True)

        util.log_debug('ipsec_tunnel_payload %s'%ipsec_tunnel_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=ipsec_tunnel_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:ipsec-tunnels"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      ipsec_tunnel_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/ipsec-tunnel=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, ipsec_tunnel_object in enumerate(ipsec_tunnel_object_list):
        #fetch payload
        ipsec_tunnel_payload = ipsec_tunnel_object.getxml(filter=True)

        util.log_debug('update ipsec_tunnel_payload %s'%ipsec_tunnel_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=ipsec_tunnel_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:ipsec-tunnels"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/ipsec-tunnel=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      ipsec_tunnel_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import ipsec_tunnels
        ipsec_tunnel_object = ipsec_tunnels.ipsec_tunnel.ipsec_tunnel()
        ipsec_tunnel_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            ipsec_tunnel_object.description = mapping_dict.get('description', None)
          else:
            ipsec_tunnel_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            ipsec_tunnel_object.type = mapping_dict.get('type', None)
          else:
            ipsec_tunnel_object.type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('source_interface', None)) != ''):
            ipsec_tunnel_object.source_interface = mapping_dict.get('source_interface', None)
          else:
            ipsec_tunnel_object.source_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('exchange_mode', None)) != ''):
            ipsec_tunnel_object.exchange_mode = mapping_dict.get('exchange_mode', None)
          else:
            ipsec_tunnel_object.exchange_mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase1_keylifetime', None)) != ''):
            ipsec_tunnel_object.phase1_keylifetime = mapping_dict.get('phase1_keylifetime', None)
          else:
            ipsec_tunnel_object.phase1_keylifetime._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase1_enc_auth_combination', None)) != ''):
            ipsec_tunnel_object.phase1_enc_auth_combination = mapping_dict.get('phase1_enc_auth_combination', None)
          else:
            ipsec_tunnel_object.phase1_enc_auth_combination._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase1_dhgrp', None)) != ''):
            ipsec_tunnel_object.phase1_dhgrp = mapping_dict.get('phase1_dhgrp', None)
          else:
            ipsec_tunnel_object.phase1_dhgrp._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dpd', None)) != ''):
            ipsec_tunnel_object.dpd = mapping_dict.get('dpd', None)
          else:
            ipsec_tunnel_object.dpd._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dpd_max_retries', None)) != ''):
            ipsec_tunnel_object.dpd_max_retries = mapping_dict.get('dpd_max_retries', None)
          else:
            ipsec_tunnel_object.dpd_max_retries._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dpd_retry_interval', None)) != ''):
            ipsec_tunnel_object.dpd_retry_interval = mapping_dict.get('dpd_retry_interval', None)
          else:
            ipsec_tunnel_object.dpd_retry_interval._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('nat_traversal', None)) != ''):
            ipsec_tunnel_object.nat_traversal = mapping_dict.get('nat_traversal', None)
          else:
            ipsec_tunnel_object.nat_traversal._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('frequency', None)) != ''):
            ipsec_tunnel_object.frequency = mapping_dict.get('frequency', None)
          else:
            ipsec_tunnel_object.frequency._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('pre_shared_key', None)) != ''):
            ipsec_tunnel_object.pre_shared_key = mapping_dict.get('pre_shared_key', None)
          else:
            ipsec_tunnel_object.pre_shared_key._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('xauthtype', None)) != ''):
            ipsec_tunnel_object.xauthtype = mapping_dict.get('xauthtype', None)
          else:
            ipsec_tunnel_object.xauthtype._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('usergroup', None)) != ''):
            ipsec_tunnel_object.usergroup = mapping_dict.get('usergroup', None)
          else:
            ipsec_tunnel_object.usergroup._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mode_cfg', None)) != ''):
            ipsec_tunnel_object.mode_cfg = mapping_dict.get('mode_cfg', None)
          else:
            ipsec_tunnel_object.mode_cfg._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('startip', None)) != ''):
            ipsec_tunnel_object.startip = mapping_dict.get('startip', None)
          else:
            ipsec_tunnel_object.startip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('endip', None)) != ''):
            ipsec_tunnel_object.endip = mapping_dict.get('endip', None)
          else:
            ipsec_tunnel_object.endip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            ipsec_tunnel_object.netmask = mapping_dict.get('netmask', None)
          else:
            ipsec_tunnel_object.netmask._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('ipv4_split', None)) != ''):
            ipsec_tunnel_object.ipv4_split = mapping_dict.get('ipv4_split', None)
          else:
            ipsec_tunnel_object.ipv4_split._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase2_keylifetime', None)) != ''):
            ipsec_tunnel_object.phase2_keylifetime = mapping_dict.get('phase2_keylifetime', None)
          else:
            ipsec_tunnel_object.phase2_keylifetime._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase2_enc_auth_combination', None)) != ''):
            ipsec_tunnel_object.phase2_enc_auth_combination = mapping_dict.get('phase2_enc_auth_combination', None)
          else:
            ipsec_tunnel_object.phase2_enc_auth_combination._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('phase2_dhgrp', None)) != ''):
            ipsec_tunnel_object.phase2_dhgrp = mapping_dict.get('phase2_dhgrp', None)
          else:
            ipsec_tunnel_object.phase2_dhgrp._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('pfs', None)) != ''):
            ipsec_tunnel_object.pfs = mapping_dict.get('pfs', None)
          else:
            ipsec_tunnel_object.pfs._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('reply', None)) != ''):
            ipsec_tunnel_object.reply = mapping_dict.get('reply', None)
          else:
            ipsec_tunnel_object.reply._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('virtual_device_name', None)) != ''):
            ipsec_tunnel_object.virtual_device_name = mapping_dict.get('virtual_device_name', None)
          else:
            ipsec_tunnel_object.virtual_device_name._empty_tag = True
        except TypeError:
          pass
        ipsec_tunnel_object_list.append(ipsec_tunnel_object)

      return ipsec_tunnel_object_list

