#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class contexts(object):
  #XPATH devices/device/contexts/context
  class context(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "loadbalancer:contexts"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      context_object_list = self.validate_inputs_form_payload(mapping_dict)

      for context_object in context_object_list:
        #fetch payload
        context_payload = context_object.getxml(filter=True)
        util.log_debug('context_payload %s'%context_payload)
        payload_list.append(context_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "loadbalancer:contexts"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      context_object_list = self.validate_inputs_form_payload(mapping_dict)

      for context_object in context_object_list:
        #fetch payload
        context_payload = context_object.getxml(filter=True)

        util.log_debug('context_payload %s'%context_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=context_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:contexts"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      context_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/context=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, context_object in enumerate(context_object_list):
        #fetch payload
        context_payload = context_object.getxml(filter=True)

        util.log_debug('update context_payload %s'%context_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=context_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:contexts"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/context=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain_name')):
        raise Exception("'domain_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('domain_number')):
        raise Exception("'domain_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare payload
      context_object_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          from servicemodel.controller.devices.device import contexts
          context_object = contexts.context.context()
          context_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('host_name', None)) != ''):
              context_object.host_name = mapping_dict.get('host_name', None)
            else:
              context_object.host_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
              context_object.domain_name = mapping_dict.get('domain_name', None)
            else:
              context_object.domain_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('domain_number', None)) != ''):
              context_object.domain_number = mapping_dict.get('domain_number', None)
            else:
              context_object.domain_number._empty_tag = True
          except TypeError:
            pass
          context_object.partition = partition_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              context_object.netmask = mapping_dict.get('netmask', None)
            else:
              context_object.netmask._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('management_ip', None)) != ''):
              context_object.management_ip = mapping_dict.get('management_ip', None)
            else:
              context_object.management_ip._empty_tag = True
          except TypeError:
            pass
          context_object_list.append(context_object)

      return context_object_list

    #XPATH devices/device/contexts/context/vlan
    class vlan(AbstractDeviceMgr):
      key_hints = [['name','partition']]
      def getRcpathPayload(self, sdata, dev, context_name, context_partition, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( context_name, context_partition)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(context_name, list):
          context_name_list = [context_name]
        else:
          context_name_list = context_name
        if not isinstance(context_partition, list):
          context_partition_list = [context_partition]
        else:
          context_partition_list = context_partition

        for context_name in context_name_list:
          for context_partition in context_partition_list:
            ##prepare rcpath
            rcpath = "loadbalancer:contexts/context=%s,%s"%(util.make_interfacename(context_name),util.make_interfacename(context_partition))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

        for vlan_object in vlan_object_list:
          #fetch payload
          vlan_payload = vlan_object.getxml(filter=True)
          util.log_debug('vlan_payload %s'%vlan_payload)
          payload_list.append(vlan_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, context_name, context_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( context_name, context_partition)

        #convert parent keys to list
        if not isinstance(context_name, list):
          context_name_list = [context_name]
        else:
          context_name_list = context_name
        if not isinstance(context_partition, list):
          context_partition_list = [context_partition]
        else:
          context_partition_list = context_partition

        for context_name in context_name_list:
          for context_partition in context_partition_list:
            ##prepare rcpath
            rcpath = "loadbalancer:contexts/context=%s,%s"%(util.make_interfacename(context_name),util.make_interfacename(context_partition))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

        for vlan_object in vlan_object_list:
          #fetch payload
          vlan_payload = vlan_object.getxml(filter=True)

          util.log_debug('vlan_payload %s'%vlan_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, context_name, context_partition, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( context_name, context_partition)


        ##prepare rcpath
        rcpath = "loadbalancer:contexts/context=%s,%s"%(util.make_interfacename(context_name),util.make_interfacename(context_partition))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        vlan_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        vlan_name = mapping_dict.get('vlan_name')
        if not isinstance(vlan_name, list):
          vlan_name = [vlan_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for vlan_name_iterator in vlan_name:
          rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(vlan_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, vlan_object in enumerate(vlan_object_list):
          #fetch payload
          vlan_payload = vlan_object.getxml(filter=True)

          util.log_debug('update vlan_payload %s'%vlan_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, context_name, context_partition, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( context_name, context_partition)


        if not isinstance(context_name, list):
          context_name_list = [context_name]
        else:
          context_name_list = context_name
        if not isinstance(context_partition, list):
          context_partition_list = [context_partition]
        else:
          context_partition_list = context_partition

        for context_name in context_name_list:
          for context_partition in context_partition_list:
            ##prepare rcpath
            rcpath = "loadbalancer:contexts/context=%s,%s"%(util.make_interfacename(context_name),util.make_interfacename(context_partition))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('vlan_name')):
          raise Exception("'vlan_name' cannot be empty")

        #convert keys to list
        vlan_name = mapping_dict.get('vlan_name')
        if not isinstance(vlan_name, list):
          vlan_name = [vlan_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for vlan_name_iterator in vlan_name:
          rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(vlan_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, context_name, context_partition):
        #Parent Key Validations
        if util.isEmpty(context_name):
          raise Exception("'context_name' cannot be empty")
        if util.isEmpty(context_partition):
          raise Exception("'context_partition' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('vlan_name')):
          raise Exception("'vlan_name' cannot be empty")

        #convert keys to list
        vlan_name = mapping_dict.get('vlan_name')
        if not isinstance(vlan_name, list):
          vlan_name = [vlan_name]

        #prepare payload
        vlan_object_list = []
        for vlan_name_iterator in vlan_name:
          from servicemodel.controller.devices.device.contexts import context
          vlan_object = context.vlan.vlan()
          vlan_object.vlan_name = vlan_name_iterator
          vlan_object_list.append(vlan_object)

        return vlan_object_list

