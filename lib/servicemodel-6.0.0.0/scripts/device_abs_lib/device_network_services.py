#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class network_services(object):
  #XPATH devices/device/network-services/general-service-settings
  class general_service_settings(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      general_service_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

      for general_service_settings_object in general_service_settings_object_list:
        #fetch payload
        general_service_settings_payload = general_service_settings_object.getxml(filter=True)
        util.log_debug('general_service_settings_payload %s'%general_service_settings_payload)
        payload_list.append(general_service_settings_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      general_service_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

      for general_service_settings_object in general_service_settings_object_list:
        #fetch payload
        general_service_settings_payload = general_service_settings_object.getxml(filter=True)

        util.log_debug('general_service_settings_payload %s'%general_service_settings_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=general_service_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      general_service_settings_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/general-service-settings"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, general_service_settings_object in enumerate(general_service_settings_object_list):
        #fetch payload
        general_service_settings_payload = general_service_settings_object.getxml(filter=True)

        util.log_debug('update general_service_settings_payload %s'%general_service_settings_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=general_service_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/general-service-settings"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      general_service_settings_object_list = []
      from servicemodel.controller.devices.device import network_services
      general_service_settings_object = network_services.general_service_settings.general_service_settings()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('in_path_settings', None)) != ''):
          general_service_settings_object.in_path_settings = mapping_dict.get('in_path_settings', None)
        else:
          general_service_settings_object.in_path_settings._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('out_path_settings', None)) != ''):
          general_service_settings_object.out_path_settings = mapping_dict.get('out_path_settings', None)
        else:
          general_service_settings_object.out_path_settings._empty_tag = True
      except TypeError:
        pass
      try:
        if (update == False) or (update == True and str(mapping_dict.get('packet_mode_optimization_settings', None)) != ''):
          general_service_settings_object.packet_mode_optimization_settings = mapping_dict.get('packet_mode_optimization_settings', None)
        else:
          general_service_settings_object.packet_mode_optimization_settings._empty_tag = True
      except TypeError:
        pass
      general_service_settings_object_list.append(general_service_settings_object)

      return general_service_settings_object_list

    #XPATH devices/device/network-services/general-service-settings/connection-settings
    class connection_settings(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/general-service-settings"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        connection_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

        for connection_settings_object in connection_settings_object_list:
          #fetch payload
          connection_settings_payload = connection_settings_object.getxml(filter=True)
          util.log_debug('connection_settings_payload %s'%connection_settings_payload)
          payload_list.append(connection_settings_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/general-service-settings"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        connection_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

        for connection_settings_object in connection_settings_object_list:
          #fetch payload
          connection_settings_payload = connection_settings_object.getxml(filter=True)

          util.log_debug('connection_settings_payload %s'%connection_settings_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=connection_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/general-service-settings"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        connection_settings_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/connection-settings"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, connection_settings_object in enumerate(connection_settings_object_list):
          #fetch payload
          connection_settings_payload = connection_settings_object.getxml(filter=True)

          util.log_debug('update connection_settings_payload %s'%connection_settings_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=connection_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/general-service-settings"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/connection-settings"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        connection_settings_object_list = []
        from servicemodel.controller.devices.device.network_services import general_service_settings
        connection_settings_object = general_service_settings.connection_settings.connection_settings()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('half_Open_connection_limit_per_source_ip', None)) != ''):
            connection_settings_object.half_Open_connection_limit_per_source_ip = mapping_dict.get('half_Open_connection_limit_per_source_ip', None)
          else:
            connection_settings_object.half_Open_connection_limit_per_source_ip._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('maximum_connection_pool_size', None)) != ''):
            connection_settings_object.maximum_connection_pool_size = mapping_dict.get('maximum_connection_pool_size', None)
          else:
            connection_settings_object.maximum_connection_pool_size._empty_tag = True
        except TypeError:
          pass
        connection_settings_object_list.append(connection_settings_object)

        return connection_settings_object_list

  class peering_rules(object):
    #XPATH devices/device/network-services/peering-rules/peering-rule
    class peering_rule(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        peering_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

        for peering_rule_object in peering_rule_object_list:
          #fetch payload
          peering_rule_payload = peering_rule_object.getxml(filter=True)
          util.log_debug('peering_rule_payload %s'%peering_rule_payload)
          payload_list.append(peering_rule_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        peering_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

        for peering_rule_object in peering_rule_object_list:
          #fetch payload
          peering_rule_payload = peering_rule_object.getxml(filter=True)

          util.log_debug('peering_rule_payload %s'%peering_rule_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=peering_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        peering_rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        rule_number = mapping_dict.get('rule_number')
        if not isinstance(rule_number, list):
          rule_number = [rule_number]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for rule_number_iterator in rule_number:
          rcpath_tmp =  rcpath+"/peering-rule=%s"%(util.make_interfacename(rule_number_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, peering_rule_object in enumerate(peering_rule_object_list):
          #fetch payload
          peering_rule_payload = peering_rule_object.getxml(filter=True)

          util.log_debug('update peering_rule_payload %s'%peering_rule_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=peering_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('rule_number')):
          raise Exception("'rule_number' cannot be empty")

        #convert keys to list
        rule_number = mapping_dict.get('rule_number')
        if not isinstance(rule_number, list):
          rule_number = [rule_number]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for rule_number_iterator in rule_number:
          rcpath_tmp =  rcpath+"/peering-rule=%s"%(util.make_interfacename(rule_number_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('rule_number')):
          raise Exception("'rule_number' cannot be empty")

        #convert keys to list
        rule_number = mapping_dict.get('rule_number')
        if not isinstance(rule_number, list):
          rule_number = [rule_number]

        #prepare payload
        peering_rule_object_list = []
        for rule_number_iterator in rule_number:
          from servicemodel.controller.devices.device.network_services import peering_rules
          peering_rule_object = peering_rules.peering_rule.peering_rule()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('rule_type', None)) != ''):
              peering_rule_object.rule_type = mapping_dict.get('rule_type', None)
            else:
              peering_rule_object.rule_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('peer_ip_address', None)) != ''):
              peering_rule_object.peer_ip_address = mapping_dict.get('peer_ip_address', None)
            else:
              peering_rule_object.peer_ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ssl_capability', None)) != ''):
              peering_rule_object.ssl_capability = mapping_dict.get('ssl_capability', None)
            else:
              peering_rule_object.ssl_capability._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('srcaddr', None)) != ''):
              peering_rule_object.srcaddr = mapping_dict.get('srcaddr', None)
            else:
              peering_rule_object.srcaddr._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('destaddr', None)) != ''):
              peering_rule_object.destaddr = mapping_dict.get('destaddr', None)
            else:
              peering_rule_object.destaddr._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('dest_port', None)) != ''):
              peering_rule_object.dest_port = mapping_dict.get('dest_port', None)
            else:
              peering_rule_object.dest_port._empty_tag = True
          except TypeError:
            pass
          peering_rule_object.rule_number = rule_number_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              peering_rule_object.description = mapping_dict.get('description', None)
            else:
              peering_rule_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('cloud_accel', None)) != ''):
              peering_rule_object.cloud_accel = mapping_dict.get('cloud_accel', None)
            else:
              peering_rule_object.cloud_accel._empty_tag = True
          except TypeError:
            pass
          peering_rule_object_list.append(peering_rule_object)

        return peering_rule_object_list

    #XPATH devices/device/network-services/peering-rules/move-rule
    class move_rule(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        move_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

        for move_rule_object in move_rule_object_list:
          #fetch payload
          move_rule_payload = move_rule_object.getxml(filter=True)
          util.log_debug('move_rule_payload %s'%move_rule_payload)
          payload_list.append(move_rule_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        move_rule_object_list = self.validate_inputs_form_payload(mapping_dict)

        for move_rule_object in move_rule_object_list:
          #fetch payload
          move_rule_payload = move_rule_object.getxml(filter=True)

          util.log_debug('move_rule_payload %s'%move_rule_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=move_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        move_rule_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for id_iterator in id:
          rcpath_tmp =  rcpath+"/move-rule=%s"%(util.make_interfacename(id_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, move_rule_object in enumerate(move_rule_object_list):
          #fetch payload
          move_rule_payload = move_rule_object.getxml(filter=True)

          util.log_debug('update move_rule_payload %s'%move_rule_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=move_rule_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/peering-rules"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('id')):
          raise Exception("'id' cannot be empty")

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for id_iterator in id:
          rcpath_tmp =  rcpath+"/move-rule=%s"%(util.make_interfacename(id_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('id')):
          raise Exception("'id' cannot be empty")
        if util.isEmpty(mapping_dict.get('from_rule_num')):
          raise Exception("'from_rule_num' cannot be empty")
        if util.isEmpty(mapping_dict.get('to_rule_num')):
          raise Exception("'to_rule_num' cannot be empty")

        #convert keys to list
        id = mapping_dict.get('id')
        if not isinstance(id, list):
          id = [id]

        #prepare payload
        move_rule_object_list = []
        for id_iterator in id:
          from servicemodel.controller.devices.device.network_services import peering_rules
          move_rule_object = peering_rules.move_rule.move_rule()
          move_rule_object.id = id_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('from_rule_num', None)) != ''):
              move_rule_object.from_rule_num = mapping_dict.get('from_rule_num', None)
            else:
              move_rule_object.from_rule_num._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('to_rule_num', None)) != ''):
              move_rule_object.to_rule_num = mapping_dict.get('to_rule_num', None)
            else:
              move_rule_object.to_rule_num._empty_tag = True
          except TypeError:
            pass
          move_rule_object_list.append(move_rule_object)

        return move_rule_object_list

  #XPATH devices/device/network-services/transport-settings
  class transport_settings(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      transport_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

      for transport_settings_object in transport_settings_object_list:
        #fetch payload
        transport_settings_payload = transport_settings_object.getxml(filter=True)
        util.log_debug('transport_settings_payload %s'%transport_settings_payload)
        payload_list.append(transport_settings_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      transport_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

      for transport_settings_object in transport_settings_object_list:
        #fetch payload
        transport_settings_payload = transport_settings_object.getxml(filter=True)

        util.log_debug('transport_settings_payload %s'%transport_settings_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=transport_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      transport_settings_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/transport-settings"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, transport_settings_object in enumerate(transport_settings_object_list):
        #fetch payload
        transport_settings_payload = transport_settings_object.getxml(filter=True)

        util.log_debug('update transport_settings_payload %s'%transport_settings_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=transport_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/transport-settings"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      transport_settings_object_list = []
      from servicemodel.controller.devices.device import network_services
      transport_settings_object = network_services.transport_settings.transport_settings()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('congestion_control_algorithm', None)) != ''):
          transport_settings_object.congestion_control_algorithm = mapping_dict.get('congestion_control_algorithm', None)
        else:
          transport_settings_object.congestion_control_algorithm._empty_tag = True
      except TypeError:
        pass
      transport_settings_object_list.append(transport_settings_object)

      return transport_settings_object_list

    #XPATH devices/device/network-services/transport-settings/buffer-settings
    class buffer_settings(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/transport-settings"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        buffer_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

        for buffer_settings_object in buffer_settings_object_list:
          #fetch payload
          buffer_settings_payload = buffer_settings_object.getxml(filter=True)
          util.log_debug('buffer_settings_payload %s'%buffer_settings_payload)
          payload_list.append(buffer_settings_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/transport-settings"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        buffer_settings_object_list = self.validate_inputs_form_payload(mapping_dict)

        for buffer_settings_object in buffer_settings_object_list:
          #fetch payload
          buffer_settings_payload = buffer_settings_object.getxml(filter=True)

          util.log_debug('buffer_settings_payload %s'%buffer_settings_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=buffer_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/transport-settings"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        buffer_settings_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/buffer-settings"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, buffer_settings_object in enumerate(buffer_settings_object_list):
          #fetch payload
          buffer_settings_payload = buffer_settings_object.getxml(filter=True)

          util.log_debug('update buffer_settings_payload %s'%buffer_settings_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=buffer_settings_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/transport-settings"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/buffer-settings"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        buffer_settings_object_list = []
        from servicemodel.controller.devices.device.network_services import transport_settings
        buffer_settings_object = transport_settings.buffer_settings.buffer_settings()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('lan_send_buffer_size', None)) != ''):
            buffer_settings_object.lan_send_buffer_size = mapping_dict.get('lan_send_buffer_size', None)
          else:
            buffer_settings_object.lan_send_buffer_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('lan_receive_buffer_size', None)) != ''):
            buffer_settings_object.lan_receive_buffer_size = mapping_dict.get('lan_receive_buffer_size', None)
          else:
            buffer_settings_object.lan_receive_buffer_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('wan_default_send_buffer_size', None)) != ''):
            buffer_settings_object.wan_default_send_buffer_size = mapping_dict.get('wan_default_send_buffer_size', None)
          else:
            buffer_settings_object.wan_default_send_buffer_size._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('wan_default_receive_buffer_size', None)) != ''):
            buffer_settings_object.wan_default_receive_buffer_size = mapping_dict.get('wan_default_receive_buffer_size', None)
          else:
            buffer_settings_object.wan_default_receive_buffer_size._empty_tag = True
        except TypeError:
          pass
        buffer_settings_object_list.append(buffer_settings_object)

        return buffer_settings_object_list

  #XPATH devices/device/network-services/service-ports
  class service_ports(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      service_ports_object_list = self.validate_inputs_form_payload(mapping_dict)

      for service_ports_object in service_ports_object_list:
        #fetch payload
        service_ports_payload = service_ports_object.getxml(filter=True)
        util.log_debug('service_ports_payload %s'%service_ports_payload)
        payload_list.append(service_ports_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      service_ports_object_list = self.validate_inputs_form_payload(mapping_dict)

      for service_ports_object in service_ports_object_list:
        #fetch payload
        service_ports_payload = service_ports_object.getxml(filter=True)

        util.log_debug('service_ports_payload %s'%service_ports_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      service_ports_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/service-ports"
      rcpath_list.append(rcpath_tmp)
      for rc_counter, service_ports_object in enumerate(service_ports_object_list):
        #fetch payload
        service_ports_payload = service_ports_object.getxml(filter=True)

        util.log_debug('update service_ports_payload %s'%service_ports_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "wanoptimizer:network-services"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs

      #convert keys to list

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      rcpath_tmp =  rcpath+"/service-ports"
      rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs

      #convert keys to list

      #prepare payload
      service_ports_object_list = []
      from servicemodel.controller.devices.device import network_services
      service_ports_object = network_services.service_ports.service_ports()
      try:
        if (update == False) or (update == True and str(mapping_dict.get('default_port', None)) != ''):
          service_ports_object.default_port = mapping_dict.get('default_port', None)
        else:
          service_ports_object.default_port._empty_tag = True
      except TypeError:
        pass
      service_ports_object_list.append(service_ports_object)

      return service_ports_object_list

    #XPATH devices/device/network-services/service-ports/service-port
    class service_port(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_port_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_port_object in service_port_object_list:
          #fetch payload
          service_port_payload = service_port_object.getxml(filter=True)
          util.log_debug('service_port_payload %s'%service_port_payload)
          payload_list.append(service_port_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_port_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_port_object in service_port_object_list:
          #fetch payload
          service_port_payload = service_port_object.getxml(filter=True)

          util.log_debug('service_port_payload %s'%service_port_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_port_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_port_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        port = mapping_dict.get('port')
        if not isinstance(port, list):
          port = [port]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for port_iterator in port:
          rcpath_tmp =  rcpath+"/service-port=%s"%(util.make_interfacename(port_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, service_port_object in enumerate(service_port_object_list):
          #fetch payload
          service_port_payload = service_port_object.getxml(filter=True)

          util.log_debug('update service_port_payload %s'%service_port_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_port_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('port')):
          raise Exception("'port' cannot be empty")

        #convert keys to list
        port = mapping_dict.get('port')
        if not isinstance(port, list):
          port = [port]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for port_iterator in port:
          rcpath_tmp =  rcpath+"/service-port=%s"%(util.make_interfacename(port_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('port')):
          raise Exception("'port' cannot be empty")

        #convert keys to list
        port = mapping_dict.get('port')
        if not isinstance(port, list):
          port = [port]

        #prepare payload
        service_port_object_list = []
        for port_iterator in port:
          from servicemodel.controller.devices.device.network_services import service_ports
          service_port_object = service_ports.service_port.service_port()
          service_port_object.port = port_iterator
          service_port_object_list.append(service_port_object)

        return service_port_object_list

    #XPATH devices/device/network-services/service-ports/map-ports
    class map_ports(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        map_ports_object_list = self.validate_inputs_form_payload(mapping_dict)

        for map_ports_object in map_ports_object_list:
          #fetch payload
          map_ports_payload = map_ports_object.getxml(filter=True)
          util.log_debug('map_ports_payload %s'%map_ports_payload)
          payload_list.append(map_ports_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        map_ports_object_list = self.validate_inputs_form_payload(mapping_dict)

        for map_ports_object in map_ports_object_list:
          #fetch payload
          map_ports_payload = map_ports_object.getxml(filter=True)

          util.log_debug('map_ports_payload %s'%map_ports_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=map_ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        map_ports_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        dest_port = mapping_dict.get('dest_port')
        if not isinstance(dest_port, list):
          dest_port = [dest_port]
        service_port = mapping_dict.get('service_port')
        if not isinstance(service_port, list):
          service_port = [service_port]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for dest_port_iterator in dest_port:
          for service_port_iterator in service_port:
            rcpath_tmp =  rcpath+"/map-ports=%s,%s"%(util.make_interfacename(dest_port_iterator),util.make_interfacename(service_port_iterator))
            rcpath_list.append(rcpath_tmp)
        for rc_counter, map_ports_object in enumerate(map_ports_object_list):
          #fetch payload
          map_ports_payload = map_ports_object.getxml(filter=True)

          util.log_debug('update map_ports_payload %s'%map_ports_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=map_ports_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "wanoptimizer:network-services/service-ports"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('dest_port')):
          raise Exception("'dest_port' cannot be empty")
        if util.isEmpty(mapping_dict.get('service_port')):
          raise Exception("'service_port' cannot be empty")

        #convert keys to list
        dest_port = mapping_dict.get('dest_port')
        if not isinstance(dest_port, list):
          dest_port = [dest_port]
        service_port = mapping_dict.get('service_port')
        if not isinstance(service_port, list):
          service_port = [service_port]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for dest_port_iterator in dest_port:
          for service_port_iterator in service_port:
            rcpath_tmp =  rcpath+"/map-ports=%s,%s"%(util.make_interfacename(dest_port_iterator),util.make_interfacename(service_port_iterator))
            rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('dest_port')):
          raise Exception("'dest_port' cannot be empty")
        if util.isEmpty(mapping_dict.get('service_port')):
          raise Exception("'service_port' cannot be empty")

        #convert keys to list
        dest_port = mapping_dict.get('dest_port')
        if not isinstance(dest_port, list):
          dest_port = [dest_port]
        service_port = mapping_dict.get('service_port')
        if not isinstance(service_port, list):
          service_port = [service_port]

        #prepare payload
        map_ports_object_list = []
        for dest_port_iterator in dest_port:
          for service_port_iterator in service_port:
            from servicemodel.controller.devices.device.network_services import service_ports
            map_ports_object = service_ports.map_ports.map_ports()
            map_ports_object.dest_port = dest_port_iterator
            map_ports_object.service_port = service_port_iterator
            map_ports_object_list.append(map_ports_object)

        return map_ports_object_list

