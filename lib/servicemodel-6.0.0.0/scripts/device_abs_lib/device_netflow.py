#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class netflow(object):
  class flow_exports(object):
    #XPATH devices/device/netflow/flow-exports/flow-export
    class flow_export(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-exports"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_export_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_export_object in flow_export_object_list:
          #fetch payload
          flow_export_payload = flow_export_object.getxml(filter=True)
          util.log_debug('flow_export_payload %s'%flow_export_payload)
          payload_list.append(flow_export_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-exports"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_export_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_export_object in flow_export_object_list:
          #fetch payload
          flow_export_payload = flow_export_object.getxml(filter=True)

          util.log_debug('flow_export_payload %s'%flow_export_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=flow_export_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-exports"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_export_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-export=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, flow_export_object in enumerate(flow_export_object_list):
          #fetch payload
          flow_export_payload = flow_export_object.getxml(filter=True)

          util.log_debug('update flow_export_payload %s'%flow_export_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=flow_export_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-exports"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-export=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")
        if util.isEmpty(mapping_dict.get('destination')):
          raise Exception("'destination' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        flow_export_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.netflow import flow_exports
          flow_export_object = flow_exports.flow_export.flow_export()
          flow_export_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              flow_export_object.description = mapping_dict.get('description', None)
            else:
              flow_export_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('destination', None)) != ''):
              flow_export_object.destination = mapping_dict.get('destination', None)
            else:
              flow_export_object.destination._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('source', None)) != ''):
              flow_export_object.source = mapping_dict.get('source', None)
            else:
              flow_export_object.source._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
              flow_export_object.vrf = mapping_dict.get('vrf', None)
            else:
              flow_export_object.vrf._empty_tag = True
          except TypeError:
            pass
          flow_export_object_list.append(flow_export_object)

        return flow_export_object_list

      #XPATH devices/device/netflow/flow-exports/flow-export/options
      class options(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, flow_export_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( flow_export_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(flow_export_name, list):
            flow_export_name_list = [flow_export_name]
          else:
            flow_export_name_list = flow_export_name

          for flow_export_name in flow_export_name_list:
            ##prepare rcpath
            rcpath = "l3features:netflow/flow-exports/flow-export=%s"%(util.make_interfacename(flow_export_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          options_object_list = self.validate_inputs_form_payload(mapping_dict)

          for options_object in options_object_list:
            #fetch payload
            options_payload = options_object.getxml(filter=True)
            util.log_debug('options_payload %s'%options_payload)
            payload_list.append(options_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, flow_export_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( flow_export_name)

          #convert parent keys to list
          if not isinstance(flow_export_name, list):
            flow_export_name_list = [flow_export_name]
          else:
            flow_export_name_list = flow_export_name

          for flow_export_name in flow_export_name_list:
            ##prepare rcpath
            rcpath = "l3features:netflow/flow-exports/flow-export=%s"%(util.make_interfacename(flow_export_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          options_object_list = self.validate_inputs_form_payload(mapping_dict)

          for options_object in options_object_list:
            #fetch payload
            options_payload = options_object.getxml(filter=True)

            util.log_debug('options_payload %s'%options_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, flow_export_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( flow_export_name)


          ##prepare rcpath
          rcpath = "l3features:netflow/flow-exports/flow-export=%s"%(util.make_interfacename(flow_export_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          options_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          option = mapping_dict.get('option')
          if not isinstance(option, list):
            option = [option]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for option_iterator in option:
            rcpath_tmp =  rcpath+"/options=%s"%(util.make_interfacename(option_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, options_object in enumerate(options_object_list):
            #fetch payload
            options_payload = options_object.getxml(filter=True)

            util.log_debug('update options_payload %s'%options_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=options_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, flow_export_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( flow_export_name)


          if not isinstance(flow_export_name, list):
            flow_export_name_list = [flow_export_name]
          else:
            flow_export_name_list = flow_export_name

          for flow_export_name in flow_export_name_list:
            ##prepare rcpath
            rcpath = "l3features:netflow/flow-exports/flow-export=%s"%(util.make_interfacename(flow_export_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('option')):
            raise Exception("'option' cannot be empty")

          #convert keys to list
          option = mapping_dict.get('option')
          if not isinstance(option, list):
            option = [option]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for option_iterator in option:
            rcpath_tmp =  rcpath+"/options=%s"%(util.make_interfacename(option_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, flow_export_name):
          #Parent Key Validations
          if util.isEmpty(flow_export_name):
            raise Exception("'flow_export_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('option')):
            raise Exception("'option' cannot be empty")

          #convert keys to list
          option = mapping_dict.get('option')
          if not isinstance(option, list):
            option = [option]

          #prepare payload
          options_object_list = []
          for option_iterator in option:
            from servicemodel.controller.devices.device.netflow.flow_exports import flow_export
            options_object = flow_export.options.options()
            options_object.option = option_iterator
            options_object_list.append(options_object)

          return options_object_list

  class flow_records(object):
    #XPATH devices/device/netflow/flow-records/flow-record
    class flow_record(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-records"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_record_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_record_object in flow_record_object_list:
          #fetch payload
          flow_record_payload = flow_record_object.getxml(filter=True)
          util.log_debug('flow_record_payload %s'%flow_record_payload)
          payload_list.append(flow_record_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-records"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_record_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_record_object in flow_record_object_list:
          #fetch payload
          flow_record_payload = flow_record_object.getxml(filter=True)

          util.log_debug('flow_record_payload %s'%flow_record_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=flow_record_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-records"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_record_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-record=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, flow_record_object in enumerate(flow_record_object_list):
          #fetch payload
          flow_record_payload = flow_record_object.getxml(filter=True)

          util.log_debug('update flow_record_payload %s'%flow_record_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=flow_record_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-records"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-record=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        flow_record_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.netflow import flow_records
          flow_record_object = flow_records.flow_record.flow_record()
          flow_record_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              flow_record_object.description = mapping_dict.get('description', None)
            else:
              flow_record_object.description._empty_tag = True
          except TypeError:
            pass
          flow_record_object_list.append(flow_record_object)

        return flow_record_object_list

  class flow_monitors(object):
    #XPATH devices/device/netflow/flow-monitors/flow-monitor
    class flow_monitor(AbstractDeviceMgr):
      key_hints = [[]]
      def getRcpathPayload(self, sdata, dev, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-monitors"
        rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_monitor_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_monitor_object in flow_monitor_object_list:
          #fetch payload
          flow_monitor_payload = flow_monitor_object.getxml(filter=True)
          util.log_debug('flow_monitor_payload %s'%flow_monitor_payload)
          payload_list.append(flow_monitor_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #convert parent keys to list
        ##prepare rcpath
        rcpath = "l3features:netflow/flow-monitors"
        self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_monitor_object_list = self.validate_inputs_form_payload(mapping_dict)

        for flow_monitor_object in flow_monitor_object_list:
          #fetch payload
          flow_monitor_payload = flow_monitor_object.getxml(filter=True)

          util.log_debug('flow_monitor_payload %s'%flow_monitor_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=flow_monitor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-monitors"
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        flow_monitor_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-monitor=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, flow_monitor_object in enumerate(flow_monitor_object_list):
          #fetch payload
          flow_monitor_payload = flow_monitor_object.getxml(filter=True)

          util.log_debug('update flow_monitor_payload %s'%flow_monitor_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=flow_monitor_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return

        ##prepare rcpath
        rcpath = "l3features:netflow/flow-monitors"
        self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/flow-monitor=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        flow_monitor_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.netflow import flow_monitors
          flow_monitor_object = flow_monitors.flow_monitor.flow_monitor()
          flow_monitor_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              flow_monitor_object.description = mapping_dict.get('description', None)
            else:
              flow_monitor_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('record', None)) != ''):
              flow_monitor_object.record = mapping_dict.get('record', None)
            else:
              flow_monitor_object.record._empty_tag = True
          except TypeError:
            pass
          flow_monitor_object_list.append(flow_monitor_object)

        return flow_monitor_object_list

      class exporters(object):
        #XPATH devices/device/netflow/flow-monitors/flow-monitor/exporters/exporter
        class exporter(AbstractDeviceMgr):
          key_hints = [['name']]
          def getRcpathPayload(self, sdata, dev, flow_monitor_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/exporters"%(util.make_interfacename(flow_monitor_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            exporter_object_list = self.validate_inputs_form_payload(mapping_dict)

            for exporter_object in exporter_object_list:
              #fetch payload
              exporter_payload = exporter_object.getxml(filter=True)
              util.log_debug('exporter_payload %s'%exporter_payload)
              payload_list.append(exporter_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, flow_monitor_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)

            #convert parent keys to list
            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/exporters"%(util.make_interfacename(flow_monitor_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            exporter_object_list = self.validate_inputs_form_payload(mapping_dict)

            for exporter_object in exporter_object_list:
              #fetch payload
              exporter_payload = exporter_object.getxml(filter=True)

              util.log_debug('exporter_payload %s'%exporter_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=exporter_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, flow_monitor_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)


            ##prepare rcpath
            rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/exporters"%(util.make_interfacename(flow_monitor_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            exporter_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            exporter = mapping_dict.get('exporter')
            if not isinstance(exporter, list):
              exporter = [exporter]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for exporter_iterator in exporter:
              rcpath_tmp =  rcpath+"/exporter=%s"%(util.make_interfacename(exporter_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, exporter_object in enumerate(exporter_object_list):
              #fetch payload
              exporter_payload = exporter_object.getxml(filter=True)

              util.log_debug('update exporter_payload %s'%exporter_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=exporter_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, flow_monitor_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)


            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/exporters"%(util.make_interfacename(flow_monitor_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('exporter')):
              raise Exception("'exporter' cannot be empty")

            #convert keys to list
            exporter = mapping_dict.get('exporter')
            if not isinstance(exporter, list):
              exporter = [exporter]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for exporter_iterator in exporter:
              rcpath_tmp =  rcpath+"/exporter=%s"%(util.make_interfacename(exporter_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, flow_monitor_name):
            #Parent Key Validations
            if util.isEmpty(flow_monitor_name):
              raise Exception("'flow_monitor_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('exporter')):
              raise Exception("'exporter' cannot be empty")

            #convert keys to list
            exporter = mapping_dict.get('exporter')
            if not isinstance(exporter, list):
              exporter = [exporter]

            #prepare payload
            exporter_object_list = []
            for exporter_iterator in exporter:
              from servicemodel.controller.devices.device.netflow.flow_monitors.flow_monitor import exporters
              exporter_object = exporters.exporter.exporter()
              exporter_object.exporter = exporter_iterator
              exporter_object_list.append(exporter_object)

            return exporter_object_list

      class interfaces(object):
        #XPATH devices/device/netflow/flow-monitors/flow-monitor/interfaces/interface
        class interface(AbstractDeviceMgr):
          key_hints = [['name']]
          def getRcpathPayload(self, sdata, dev, flow_monitor_name, mapping_dict):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)

            #convert parent keys to list
            rcpath_list = []
            payload_list = []
            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/interfaces"%(util.make_interfacename(flow_monitor_name))
              rcpath_list.append(rcpath)
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)
              util.log_debug('interface_payload %s'%interface_payload)
              payload_list.append(interface_payload)

            return rcpath_list, payload_list

          def create(self, sdata, dev, flow_monitor_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)

            #convert parent keys to list
            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/interfaces"%(util.make_interfacename(flow_monitor_name))
              self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def create_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict)

            for interface_object in interface_object_list:
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('interface_payload %s'%interface_payload)

              #call the base abstract class for createData
              super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def update(self, sdata, dev, flow_monitor_name, mapping_dict, addref=True, autocommit=True):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)


            ##prepare rcpath
            rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/interfaces"%(util.make_interfacename(flow_monitor_name))
            self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

          def update_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs and get payload object
            interface_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

            #convert keys to list
            interface = mapping_dict.get('interface')
            if not isinstance(interface, list):
              interface = [interface]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_iterator in interface:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_iterator))
              rcpath_list.append(rcpath_tmp)
            for rc_counter, interface_object in enumerate(interface_object_list):
              #fetch payload
              interface_payload = interface_object.getxml(filter=True)

              util.log_debug('update interface_payload %s'%interface_payload)

              rcpath = rcpath_list[rc_counter]
              #call the base abstract class for createData
              super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

          def delete(self, sdata, dev, flow_monitor_name, mapping_dict, fail_silently=False, remove_reference=False):
            dev = get_valid_devices(dev)
            if len(dev) == 0:
              return
            #Input Key Validations
            self.validate_parent_keys( flow_monitor_name)


            if not isinstance(flow_monitor_name, list):
              flow_monitor_name_list = [flow_monitor_name]
            else:
              flow_monitor_name_list = flow_monitor_name

            for flow_monitor_name in flow_monitor_name_list:
              ##prepare rcpath
              rcpath = "l3features:netflow/flow-monitors/flow-monitor=%s/interfaces"%(util.make_interfacename(flow_monitor_name))
              self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

          def delete_(self, sdata, dev, **kwargs):
            mapping_dict = kwargs.get('mapping_dict')

            #validating inputs
            if util.isEmpty(mapping_dict.get('interface')):
              raise Exception("'interface' cannot be empty")

            #convert keys to list
            interface = mapping_dict.get('interface')
            if not isinstance(interface, list):
              interface = [interface]

            #prepare rcpath
            rcpath = kwargs.get('rcpath')
            rcpath_list = []
            for interface_iterator in interface:
              rcpath_tmp =  rcpath+"/interface=%s"%(util.make_interfacename(interface_iterator))
              rcpath_list.append(rcpath_tmp)
            payload = ''

            for rcpath in rcpath_list:
              #call the base abstract class for deleteData
              super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

          def validate_parent_keys(self, flow_monitor_name):
            #Parent Key Validations
            if util.isEmpty(flow_monitor_name):
              raise Exception("'flow_monitor_name' cannot be empty")

          def validate_inputs_form_payload(self, mapping_dict, update=False):
            #validating inputs
            if util.isEmpty(mapping_dict.get('interface')):
              raise Exception("'interface' cannot be empty")

            #convert keys to list
            interface = mapping_dict.get('interface')
            if not isinstance(interface, list):
              interface = [interface]

            #prepare payload
            interface_object_list = []
            for interface_iterator in interface:
              from servicemodel.controller.devices.device.netflow.flow_monitors.flow_monitor import interfaces
              interface_object = interfaces.interface.interface()
              interface_object.interface = interface_iterator
              interface_object_list.append(interface_object)

            return interface_object_list

