#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class interface_ranges(object):
  #XPATH devices/device/interface-ranges/interface-range
  class interface_range(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "interface:interface-ranges"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_range_object_list = self.validate_inputs_form_payload(mapping_dict)

      for interface_range_object in interface_range_object_list:
        #fetch payload
        interface_range_payload = interface_range_object.getxml(filter=True)
        util.log_debug('interface_range_payload %s'%interface_range_payload)
        payload_list.append(interface_range_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "interface:interface-ranges"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_range_object_list = self.validate_inputs_form_payload(mapping_dict)

      for interface_range_object in interface_range_object_list:
        #fetch payload
        interface_range_payload = interface_range_object.getxml(filter=True)

        util.log_debug('interface_range_payload %s'%interface_range_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=interface_range_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "interface:interface-ranges"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      interface_range_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/interface-range=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, interface_range_object in enumerate(interface_range_object_list):
        #fetch payload
        interface_range_payload = interface_range_object.getxml(filter=True)

        util.log_debug('update interface_range_payload %s'%interface_range_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=interface_range_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "interface:interface-ranges"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/interface-range=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('long_name')):
        raise Exception("'long_name' cannot be empty")
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      interface_range_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import interface_ranges
        interface_range_object = interface_ranges.interface_range.interface_range()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('long_name', None)) != ''):
            interface_range_object.long_name = mapping_dict.get('long_name', None)
          else:
            interface_range_object.long_name._empty_tag = True
        except TypeError:
          pass
        interface_range_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('if_index', None)) != ''):
            interface_range_object.if_index = mapping_dict.get('if_index', None)
          else:
            interface_range_object.if_index._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            interface_range_object.description = mapping_dict.get('description', None)
          else:
            interface_range_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mode', None)) != ''):
            interface_range_object.mode = mapping_dict.get('mode', None)
          else:
            interface_range_object.mode._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('mtu', None)) != ''):
            interface_range_object.mtu = mapping_dict.get('mtu', None)
          else:
            interface_range_object.mtu._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hold_time_up', None)) != ''):
            interface_range_object.hold_time_up = mapping_dict.get('hold_time_up', None)
          else:
            interface_range_object.hold_time_up._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('hold_time_down', None)) != ''):
            interface_range_object.hold_time_down = mapping_dict.get('hold_time_down', None)
          else:
            interface_range_object.hold_time_down._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('physical_address', None)) != ''):
            interface_range_object.physical_address = mapping_dict.get('physical_address', None)
          else:
            interface_range_object.physical_address._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('start_interface', None)) != ''):
            interface_range_object.start_interface = mapping_dict.get('start_interface', None)
          else:
            interface_range_object.start_interface._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('end_interface', None)) != ''):
            interface_range_object.end_interface = mapping_dict.get('end_interface', None)
          else:
            interface_range_object.end_interface._empty_tag = True
        except TypeError:
          pass
        interface_range_object_list.append(interface_range_object)

      return interface_range_object_list

    #XPATH devices/device/interface-ranges/interface-range/allowed-vlans
    class allowed_vlans(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, interface_range_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_range_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(interface_range_name, list):
          interface_range_name_list = [interface_range_name]
        else:
          interface_range_name_list = interface_range_name

        for interface_range_name in interface_range_name_list:
          ##prepare rcpath
          rcpath = "interface:interface-ranges/interface-range=%s"%(util.make_interfacename(interface_range_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict)

        for allowed_vlans_object in allowed_vlans_object_list:
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)
          util.log_debug('allowed_vlans_payload %s'%allowed_vlans_payload)
          payload_list.append(allowed_vlans_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, interface_range_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_range_name)

        #convert parent keys to list
        if not isinstance(interface_range_name, list):
          interface_range_name_list = [interface_range_name]
        else:
          interface_range_name_list = interface_range_name

        for interface_range_name in interface_range_name_list:
          ##prepare rcpath
          rcpath = "interface:interface-ranges/interface-range=%s"%(util.make_interfacename(interface_range_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict)

        for allowed_vlans_object in allowed_vlans_object_list:
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)

          util.log_debug('allowed_vlans_payload %s'%allowed_vlans_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=allowed_vlans_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, interface_range_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_range_name)


        ##prepare rcpath
        rcpath = "interface:interface-ranges/interface-range=%s"%(util.make_interfacename(interface_range_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        allowed_vlans_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/allowed-vlans"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, allowed_vlans_object in enumerate(allowed_vlans_object_list):
          #fetch payload
          allowed_vlans_payload = allowed_vlans_object.getxml(filter=True)

          util.log_debug('update allowed_vlans_payload %s'%allowed_vlans_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=allowed_vlans_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, interface_range_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( interface_range_name)


        if not isinstance(interface_range_name, list):
          interface_range_name_list = [interface_range_name]
        else:
          interface_range_name_list = interface_range_name

        for interface_range_name in interface_range_name_list:
          ##prepare rcpath
          rcpath = "interface:interface-ranges/interface-range=%s"%(util.make_interfacename(interface_range_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/allowed-vlans"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, interface_range_name):
        #Parent Key Validations
        if util.isEmpty(interface_range_name):
          raise Exception("'interface_range_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        allowed_vlans_object_list = []
        from servicemodel.controller.devices.device.interface_ranges import interface_range
        allowed_vlans_object = interface_range.allowed_vlans.allowed_vlans()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vlan_range', None)) != ''):
            allowed_vlans_object.vlan_range = mapping_dict.get('vlan_range', None)
          else:
            allowed_vlans_object.vlan_range._empty_tag = True
        except TypeError:
          pass
        allowed_vlans_object_list.append(allowed_vlans_object)

        return allowed_vlans_object_list

      #XPATH devices/device/interface-ranges/interface-range/allowed-vlans/vlan
      class vlan(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, interface_range_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_range_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(interface_range_name, list):
            interface_range_name_list = [interface_range_name]
          else:
            interface_range_name_list = interface_range_name

          for interface_range_name in interface_range_name_list:
            ##prepare rcpath
            rcpath = "interface:interface-ranges/interface-range=%s/allowed-vlans"%(util.make_interfacename(interface_range_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)
            util.log_debug('vlan_payload %s'%vlan_payload)
            payload_list.append(vlan_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, interface_range_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_range_name)

          #convert parent keys to list
          if not isinstance(interface_range_name, list):
            interface_range_name_list = [interface_range_name]
          else:
            interface_range_name_list = interface_range_name

          for interface_range_name in interface_range_name_list:
            ##prepare rcpath
            rcpath = "interface:interface-ranges/interface-range=%s/allowed-vlans"%(util.make_interfacename(interface_range_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict)

          for vlan_object in vlan_object_list:
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('vlan_payload %s'%vlan_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, interface_range_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_range_name)


          ##prepare rcpath
          rcpath = "interface:interface-ranges/interface-range=%s/allowed-vlans"%(util.make_interfacename(interface_range_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          vlan_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for id_iterator in id:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(id_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, vlan_object in enumerate(vlan_object_list):
            #fetch payload
            vlan_payload = vlan_object.getxml(filter=True)

            util.log_debug('update vlan_payload %s'%vlan_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=vlan_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, interface_range_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( interface_range_name)


          if not isinstance(interface_range_name, list):
            interface_range_name_list = [interface_range_name]
          else:
            interface_range_name_list = interface_range_name

          for interface_range_name in interface_range_name_list:
            ##prepare rcpath
            rcpath = "interface:interface-ranges/interface-range=%s/allowed-vlans"%(util.make_interfacename(interface_range_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('id')):
            raise Exception("'id' cannot be empty")

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for id_iterator in id:
            rcpath_tmp =  rcpath+"/vlan=%s"%(util.make_interfacename(id_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, interface_range_name):
          #Parent Key Validations
          if util.isEmpty(interface_range_name):
            raise Exception("'interface_range_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('id')):
            raise Exception("'id' cannot be empty")

          #convert keys to list
          id = mapping_dict.get('id')
          if not isinstance(id, list):
            id = [id]

          #prepare payload
          vlan_object_list = []
          for id_iterator in id:
            from servicemodel.controller.devices.device.interface_ranges.interface_range import allowed_vlans
            vlan_object = allowed_vlans.vlan.vlan()
            vlan_object.id = id_iterator
            vlan_object_list.append(vlan_object)

          return vlan_object_list

