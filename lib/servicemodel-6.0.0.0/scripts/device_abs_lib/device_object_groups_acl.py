#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class object_groups_acl(object):
  #XPATH devices/device/object-groups-acl/object-group
  class object_group(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "acl:object-groups-acl"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

      for object_group_object in object_group_object_list:
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)
        util.log_debug('object_group_payload %s'%object_group_payload)
        payload_list.append(object_group_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "acl:object-groups-acl"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

      for object_group_object in object_group_object_list:
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)

        util.log_debug('object_group_payload %s'%object_group_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:object-groups-acl"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/object-group=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, object_group_object in enumerate(object_group_object_list):
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)

        util.log_debug('update object_group_payload %s'%object_group_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "acl:object-groups-acl"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/object-group=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      object_group_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import object_groups_acl
        object_group_object = object_groups_acl.object_group.object_group()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
            object_group_object.type = mapping_dict.get('type', None)
          else:
            object_group_object.type._empty_tag = True
        except TypeError:
          pass
        object_group_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            object_group_object.description = mapping_dict.get('description', None)
          else:
            object_group_object.description._empty_tag = True
        except TypeError:
          pass
        object_group_object_list.append(object_group_object)

      return object_group_object_list

    class networks(object):
      #XPATH devices/device/object-groups-acl/object-group/networks/network
      class network(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, object_group_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/networks"%(util.make_interfacename(object_group_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)
            util.log_debug('network_payload %s'%network_payload)
            payload_list.append(network_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/networks"%(util.make_interfacename(object_group_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict)

          for network_object in network_object_list:
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('network_payload %s'%network_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          ##prepare rcpath
          rcpath = "acl:object-groups-acl/object-group=%s/networks"%(util.make_interfacename(object_group_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          network_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, network_object in enumerate(network_object_list):
            #fetch payload
            network_payload = network_object.getxml(filter=True)

            util.log_debug('update network_payload %s'%network_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/networks"%(util.make_interfacename(object_group_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/network=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, object_group_name):
          #Parent Key Validations
          if util.isEmpty(object_group_name):
            raise Exception("'object_group_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          network_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.object_groups_acl.object_group import networks
            network_object = networks.network.network()
            network_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                network_object._set_description(mapping_dict.get('description', None))
              else:
                network_object._unset_description()
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('group_object', None)) != ''):
                network_object.group_object = mapping_dict.get('group_object', None)
              else:
                network_object.group_object._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('host', None)) != ''):
                network_object.host = mapping_dict.get('host', None)
              else:
                network_object.host._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
                network_object.ip_address = mapping_dict.get('ip_address', None)
              else:
                network_object.ip_address._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
                network_object.netmask = mapping_dict.get('netmask', None)
              else:
                network_object.netmask._empty_tag = True
            except TypeError:
              pass
            network_object_list.append(network_object)

          return network_object_list

    class securities(object):
      #XPATH devices/device/object-groups-acl/object-group/securities/security
      class security(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, object_group_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/securities"%(util.make_interfacename(object_group_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          security_object_list = self.validate_inputs_form_payload(mapping_dict)

          for security_object in security_object_list:
            #fetch payload
            security_payload = security_object.getxml(filter=True)
            util.log_debug('security_payload %s'%security_payload)
            payload_list.append(security_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/securities"%(util.make_interfacename(object_group_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          security_object_list = self.validate_inputs_form_payload(mapping_dict)

          for security_object in security_object_list:
            #fetch payload
            security_payload = security_object.getxml(filter=True)

            util.log_debug('security_payload %s'%security_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=security_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          ##prepare rcpath
          rcpath = "acl:object-groups-acl/object-group=%s/securities"%(util.make_interfacename(object_group_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          security_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/security=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, security_object in enumerate(security_object_list):
            #fetch payload
            security_payload = security_object.getxml(filter=True)

            util.log_debug('update security_payload %s'%security_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=security_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/securities"%(util.make_interfacename(object_group_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/security=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, object_group_name):
          #Parent Key Validations
          if util.isEmpty(object_group_name):
            raise Exception("'object_group_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          security_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.object_groups_acl.object_group import securities
            security_object = securities.security.security()
            security_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                security_object._set_description(mapping_dict.get('description', None))
              else:
                security_object._unset_description()
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('group_object', None)) != ''):
                security_object.group_object = mapping_dict.get('group_object', None)
              else:
                security_object.group_object._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('security_group_tag', None)) != ''):
                security_object.security_group_tag = mapping_dict.get('security_group_tag', None)
              else:
                security_object.security_group_tag._empty_tag = True
            except TypeError:
              pass
            security_object_list.append(security_object)

          return security_object_list

    class services(object):
      #XPATH devices/device/object-groups-acl/object-group/services/service
      class service(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, object_group_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/services"%(util.make_interfacename(object_group_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          service_object_list = self.validate_inputs_form_payload(mapping_dict)

          for service_object in service_object_list:
            #fetch payload
            service_payload = service_object.getxml(filter=True)
            util.log_debug('service_payload %s'%service_payload)
            payload_list.append(service_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)

          #convert parent keys to list
          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/services"%(util.make_interfacename(object_group_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          service_object_list = self.validate_inputs_form_payload(mapping_dict)

          for service_object in service_object_list:
            #fetch payload
            service_payload = service_object.getxml(filter=True)

            util.log_debug('service_payload %s'%service_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, object_group_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          ##prepare rcpath
          rcpath = "acl:object-groups-acl/object-group=%s/services"%(util.make_interfacename(object_group_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          service_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, service_object in enumerate(service_object_list):
            #fetch payload
            service_payload = service_object.getxml(filter=True)

            util.log_debug('update service_payload %s'%service_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, object_group_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( object_group_name)


          if not isinstance(object_group_name, list):
            object_group_name_list = [object_group_name]
          else:
            object_group_name_list = object_group_name

          for object_group_name in object_group_name_list:
            ##prepare rcpath
            rcpath = "acl:object-groups-acl/object-group=%s/services"%(util.make_interfacename(object_group_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for name_iterator in name:
            rcpath_tmp =  rcpath+"/service=%s"%(util.make_interfacename(name_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, object_group_name):
          #Parent Key Validations
          if util.isEmpty(object_group_name):
            raise Exception("'object_group_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('name')):
            raise Exception("'name' cannot be empty")

          #convert keys to list
          name = mapping_dict.get('name')
          if not isinstance(name, list):
            name = [name]

          #prepare payload
          service_object_list = []
          for name_iterator in name:
            from servicemodel.controller.devices.device.object_groups_acl.object_group import services
            service_object = services.service.service()
            service_object.name = name_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
                service_object._set_description(mapping_dict.get('description', None))
              else:
                service_object._unset_description()
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('group_object', None)) != ''):
                service_object.group_object = mapping_dict.get('group_object', None)
              else:
                service_object.group_object._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('ip_protocol', None)) != ''):
                service_object.ip_protocol = mapping_dict.get('ip_protocol', None)
              else:
                service_object.ip_protocol._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('protocol', None)) != ''):
                service_object.protocol = mapping_dict.get('protocol', None)
              else:
                service_object.protocol._empty_tag = True
            except TypeError:
              pass
            service_object_list.append(service_object)

          return service_object_list

