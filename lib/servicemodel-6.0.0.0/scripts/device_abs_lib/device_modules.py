#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class modules(object):
  #XPATH devices/device/modules/module
  class module(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "devicemodule:modules"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      module_object_list = self.validate_inputs_form_payload(mapping_dict)

      for module_object in module_object_list:
        #fetch payload
        module_payload = module_object.getxml(filter=True)
        util.log_debug('module_payload %s'%module_payload)
        payload_list.append(module_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "devicemodule:modules"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      module_object_list = self.validate_inputs_form_payload(mapping_dict)

      for module_object in module_object_list:
        #fetch payload
        module_payload = module_object.getxml(filter=True)

        util.log_debug('module_payload %s'%module_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=module_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "devicemodule:modules"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      module_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      switch_number = mapping_dict.get('switch_number')
      if not isinstance(switch_number, list):
        switch_number = [switch_number]
      module_number = mapping_dict.get('module_number')
      if not isinstance(module_number, list):
        module_number = [module_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for switch_number_iterator in switch_number:
        for module_number_iterator in module_number:
          rcpath_tmp =  rcpath+"/module=%s,%s"%(util.make_interfacename(switch_number_iterator),util.make_interfacename(module_number_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, module_object in enumerate(module_object_list):
        #fetch payload
        module_payload = module_object.getxml(filter=True)

        util.log_debug('update module_payload %s'%module_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=module_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "devicemodule:modules"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('switch_number')):
        raise Exception("'switch_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('module_number')):
        raise Exception("'module_number' cannot be empty")

      #convert keys to list
      switch_number = mapping_dict.get('switch_number')
      if not isinstance(switch_number, list):
        switch_number = [switch_number]
      module_number = mapping_dict.get('module_number')
      if not isinstance(module_number, list):
        module_number = [module_number]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for switch_number_iterator in switch_number:
        for module_number_iterator in module_number:
          rcpath_tmp =  rcpath+"/module=%s,%s"%(util.make_interfacename(switch_number_iterator),util.make_interfacename(module_number_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('id')):
        raise Exception("'id' cannot be empty")
      if util.isEmpty(mapping_dict.get('switch_number')):
        raise Exception("'switch_number' cannot be empty")
      if util.isEmpty(mapping_dict.get('module_number')):
        raise Exception("'module_number' cannot be empty")

      #convert keys to list
      switch_number = mapping_dict.get('switch_number')
      if not isinstance(switch_number, list):
        switch_number = [switch_number]
      module_number = mapping_dict.get('module_number')
      if not isinstance(module_number, list):
        module_number = [module_number]

      #prepare payload
      module_object_list = []
      for switch_number_iterator in switch_number:
        for module_number_iterator in module_number:
          from servicemodel.controller.devices.device import modules
          module_object = modules.module.module()
          try:
            if (update == False) or (update == True and str(mapping_dict.get('id', None)) != ''):
              module_object.id = mapping_dict.get('id', None)
            else:
              module_object.id._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('module_device', None)) != ''):
              module_object.module_device = mapping_dict.get('module_device', None)
            else:
              module_object.module_device._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('module_type', None)) != ''):
              module_object.module_type = mapping_dict.get('module_type', None)
            else:
              module_object.module_type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('module_status', None)) != ''):
              module_object.module_status = mapping_dict.get('module_status', None)
            else:
              module_object.module_status._empty_tag = True
          except TypeError:
            pass
          module_object.switch_number = switch_number_iterator
          module_object.module_number = module_number_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('module_model', None)) != ''):
              module_object.module_model = mapping_dict.get('module_model', None)
            else:
              module_object.module_model._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
              module_object.ip_address = mapping_dict.get('ip_address', None)
            else:
              module_object.ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('serial_number', None)) != ''):
              module_object.serial_number = mapping_dict.get('serial_number', None)
            else:
              module_object.serial_number._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('credential_set', None)) != ''):
              module_object.credential_set = mapping_dict.get('credential_set', None)
            else:
              module_object.credential_set._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('device_type', None)) != ''):
              module_object.device_type = mapping_dict.get('device_type', None)
            else:
              module_object.device_type._empty_tag = True
          except TypeError:
            pass
          module_object_list.append(module_object)

      return module_object_list

