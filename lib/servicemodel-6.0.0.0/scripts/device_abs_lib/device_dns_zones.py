#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class dns_zones(object):
  #XPATH devices/device/dns-zones/dns-zone
  class dns_zone(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "dns:dns-zones"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dns_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

      for dns_zone_object in dns_zone_object_list:
        #fetch payload
        dns_zone_payload = dns_zone_object.getxml(filter=True)
        util.log_debug('dns_zone_payload %s'%dns_zone_payload)
        payload_list.append(dns_zone_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "dns:dns-zones"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dns_zone_object_list = self.validate_inputs_form_payload(mapping_dict)

      for dns_zone_object in dns_zone_object_list:
        #fetch payload
        dns_zone_payload = dns_zone_object.getxml(filter=True)

        util.log_debug('dns_zone_payload %s'%dns_zone_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=dns_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dns:dns-zones"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      dns_zone_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/dns-zone=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, dns_zone_object in enumerate(dns_zone_object_list):
        #fetch payload
        dns_zone_payload = dns_zone_object.getxml(filter=True)

        util.log_debug('update dns_zone_payload %s'%dns_zone_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=dns_zone_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dns:dns-zones"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/dns-zone=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      dns_zone_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import dns_zones
        dns_zone_object = dns_zones.dns_zone.dns_zone()
        dns_zone_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('alias_name', None)) != ''):
            dns_zone_object.alias_name = mapping_dict.get('alias_name', None)
          else:
            dns_zone_object.alias_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('account_name', None)) != ''):
            dns_zone_object.account_name = mapping_dict.get('account_name', None)
          else:
            dns_zone_object.account_name._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('vrf', None)) != ''):
            dns_zone_object.vrf = mapping_dict.get('vrf', None)
          else:
            dns_zone_object.vrf._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('record_count', None)) != ''):
            dns_zone_object.record_count = mapping_dict.get('record_count', None)
          else:
            dns_zone_object.record_count._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('last_modified_time', None)) != ''):
            dns_zone_object.last_modified_time = mapping_dict.get('last_modified_time', None)
          else:
            dns_zone_object.last_modified_time._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('dns_sec_status', None)) != ''):
            dns_zone_object.dns_sec_status = mapping_dict.get('dns_sec_status', None)
          else:
            dns_zone_object.dns_sec_status._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('domain_type', None)) != ''):
            dns_zone_object.domain_type = mapping_dict.get('domain_type', None)
          else:
            dns_zone_object.domain_type._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('view', None)) != ''):
            dns_zone_object.view = mapping_dict.get('view', None)
          else:
            dns_zone_object.view._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('zone_type', None)) != ''):
            dns_zone_object.zone_type = mapping_dict.get('zone_type', None)
          else:
            dns_zone_object.zone_type._empty_tag = True
        except TypeError:
          pass
        dns_zone_object_list.append(dns_zone_object)

      return dns_zone_object_list

    #XPATH devices/device/dns-zones/dns-zone/name-server
    class name_server(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dns_zone_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        name_server_object_list = self.validate_inputs_form_payload(mapping_dict)

        for name_server_object in name_server_object_list:
          #fetch payload
          name_server_payload = name_server_object.getxml(filter=True)
          util.log_debug('name_server_payload %s'%name_server_payload)
          payload_list.append(name_server_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dns_zone_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)

        #convert parent keys to list
        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        name_server_object_list = self.validate_inputs_form_payload(mapping_dict)

        for name_server_object in name_server_object_list:
          #fetch payload
          name_server_payload = name_server_object.getxml(filter=True)

          util.log_debug('name_server_payload %s'%name_server_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=name_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dns_zone_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)


        ##prepare rcpath
        rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        name_server_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        server = mapping_dict.get('server')
        if not isinstance(server, list):
          server = [server]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_iterator in server:
          rcpath_tmp =  rcpath+"/name-server=%s"%(util.make_interfacename(server_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, name_server_object in enumerate(name_server_object_list):
          #fetch payload
          name_server_payload = name_server_object.getxml(filter=True)

          util.log_debug('update name_server_payload %s'%name_server_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=name_server_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dns_zone_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)


        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('server')):
          raise Exception("'server' cannot be empty")

        #convert keys to list
        server = mapping_dict.get('server')
        if not isinstance(server, list):
          server = [server]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for server_iterator in server:
          rcpath_tmp =  rcpath+"/name-server=%s"%(util.make_interfacename(server_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dns_zone_name):
        #Parent Key Validations
        if util.isEmpty(dns_zone_name):
          raise Exception("'dns_zone_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('server')):
          raise Exception("'server' cannot be empty")

        #convert keys to list
        server = mapping_dict.get('server')
        if not isinstance(server, list):
          server = [server]

        #prepare payload
        name_server_object_list = []
        for server_iterator in server:
          from servicemodel.controller.devices.device.dns_zones import dns_zone
          name_server_object = dns_zone.name_server.name_server()
          name_server_object.server = server_iterator
          name_server_object_list.append(name_server_object)

        return name_server_object_list

    #XPATH devices/device/dns-zones/dns-zone/forward-to
    class forward_to(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, dns_zone_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        forward_to_object_list = self.validate_inputs_form_payload(mapping_dict)

        for forward_to_object in forward_to_object_list:
          #fetch payload
          forward_to_payload = forward_to_object.getxml(filter=True)
          util.log_debug('forward_to_payload %s'%forward_to_payload)
          payload_list.append(forward_to_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, dns_zone_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)

        #convert parent keys to list
        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        forward_to_object_list = self.validate_inputs_form_payload(mapping_dict)

        for forward_to_object in forward_to_object_list:
          #fetch payload
          forward_to_payload = forward_to_object.getxml(filter=True)

          util.log_debug('forward_to_payload %s'%forward_to_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=forward_to_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, dns_zone_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)


        ##prepare rcpath
        rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        forward_to_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/forward-to=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, forward_to_object in enumerate(forward_to_object_list):
          #fetch payload
          forward_to_payload = forward_to_object.getxml(filter=True)

          util.log_debug('update forward_to_payload %s'%forward_to_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=forward_to_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, dns_zone_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( dns_zone_name)


        if not isinstance(dns_zone_name, list):
          dns_zone_name_list = [dns_zone_name]
        else:
          dns_zone_name_list = dns_zone_name

        for dns_zone_name in dns_zone_name_list:
          ##prepare rcpath
          rcpath = "dns:dns-zones/dns-zone=%s"%(util.make_interfacename(dns_zone_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for name_iterator in name:
          rcpath_tmp =  rcpath+"/forward-to=%s"%(util.make_interfacename(name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, dns_zone_name):
        #Parent Key Validations
        if util.isEmpty(dns_zone_name):
          raise Exception("'dns_zone_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('name')):
          raise Exception("'name' cannot be empty")

        #convert keys to list
        name = mapping_dict.get('name')
        if not isinstance(name, list):
          name = [name]

        #prepare payload
        forward_to_object_list = []
        for name_iterator in name:
          from servicemodel.controller.devices.device.dns_zones import dns_zone
          forward_to_object = dns_zone.forward_to.forward_to()
          forward_to_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('address', None)) != ''):
              forward_to_object.address = mapping_dict.get('address', None)
            else:
              forward_to_object.address._empty_tag = True
          except TypeError:
            pass
          forward_to_object_list.append(forward_to_object)

        return forward_to_object_list

