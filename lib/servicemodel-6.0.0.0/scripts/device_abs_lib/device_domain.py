#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

#XPATH devices/device/domain
class domain(AbstractDeviceMgr):
  key_hints = [[]]
  def getRcpathPayload(self, sdata, dev, mapping_dict):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    rcpath_list = []
    payload_list = []
    ##prepare rcpath
    rcpath = ""
    rcpath_list.append(rcpath)
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    domain_object_list = self.validate_inputs_form_payload(mapping_dict)

    for domain_object in domain_object_list:
      #fetch payload
      domain_payload = domain_object.getxml(filter=True)
      util.log_debug('domain_payload %s'%domain_payload)
      payload_list.append(domain_payload)

    return rcpath_list, payload_list

  def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return
    #convert parent keys to list
    ##prepare rcpath
    rcpath = ""
    self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def create_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    domain_object_list = self.validate_inputs_form_payload(mapping_dict)

    for domain_object in domain_object_list:
      #fetch payload
      domain_payload = domain_object.getxml(filter=True)

      util.log_debug('domain_payload %s'%domain_payload)

      #call the base abstract class for createData
      super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=domain_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

  def update_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs and get payload object
    domain_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/domain"
    rcpath_list.append(rcpath_tmp)
    for rc_counter, domain_object in enumerate(domain_object_list):
      #fetch payload
      domain_payload = domain_object.getxml(filter=True)

      util.log_debug('update domain_payload %s'%domain_payload)

      rcpath = rcpath_list[rc_counter]
      #call the base abstract class for createData
      super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=domain_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

  def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
    dev = get_valid_devices(dev)
    if len(dev) == 0:
      return

    ##prepare rcpath
    rcpath = ""
    self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

  def delete_(self, sdata, dev, **kwargs):
    mapping_dict = kwargs.get('mapping_dict')

    #validating inputs

    #convert keys to list

    #prepare rcpath
    rcpath = kwargs.get('rcpath')
    rcpath_list = []
    rcpath_tmp =  rcpath+"/domain"
    rcpath_list.append(rcpath_tmp)
    payload = ''

    for rcpath in rcpath_list:
      #call the base abstract class for deleteData
      super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

  def validate_inputs_form_payload(self, mapping_dict, update=False):
    #validating inputs

    #convert keys to list

    #prepare payload
    domain_object_list = []
    from servicemodel.controller.devices import device
    domain_object = device.domain.domain()
    try:
      if (update == False) or (update == True and str(mapping_dict.get('role', None)) != ''):
        domain_object.role = mapping_dict.get('role', None)
      else:
        domain_object.role._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('domain_name', None)) != ''):
        domain_object.domain_name = mapping_dict.get('domain_name', None)
      else:
        domain_object.domain_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('vrf_name', None)) != ''):
        domain_object.vrf_name = mapping_dict.get('vrf_name', None)
      else:
        domain_object.vrf_name._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('transit_id', None)) != ''):
        domain_object.transit_id = mapping_dict.get('transit_id', None)
      else:
        domain_object.transit_id._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('source_interface', None)) != ''):
        domain_object.source_interface = mapping_dict.get('source_interface', None)
      else:
        domain_object.source_interface._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('site_prefix_list', None)) != ''):
        domain_object.site_prefix_list = mapping_dict.get('site_prefix_list', None)
      else:
        domain_object.site_prefix_list._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('load_balance', None)) != ''):
        domain_object.load_balance = mapping_dict.get('load_balance', None)
      else:
        domain_object.load_balance._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('advanced', None)) != ''):
        domain_object.advanced = mapping_dict.get('advanced', None)
      else:
        domain_object.advanced._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('channel_unreachable_timer', None)) != ''):
        domain_object.channel_unreachable_timer = mapping_dict.get('channel_unreachable_timer', None)
      else:
        domain_object.channel_unreachable_timer._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('enterprise_prefix_list', None)) != ''):
        domain_object.enterprise_prefix_list = mapping_dict.get('enterprise_prefix_list', None)
      else:
        domain_object.enterprise_prefix_list._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('hub_ip', None)) != ''):
        domain_object.hub_ip = mapping_dict.get('hub_ip', None)
      else:
        domain_object.hub_ip._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('master_ip', None)) != ''):
        domain_object.master_ip = mapping_dict.get('master_ip', None)
      else:
        domain_object.master_ip._empty_tag = True
    except TypeError:
      pass
    try:
      if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
        domain_object.password = mapping_dict.get('password', None)
      else:
        domain_object.password._empty_tag = True
    except TypeError:
      pass
    domain_object_list.append(domain_object)

    return domain_object_list

  #XPATH devices/device/domain/mcbr
  class mcbr(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "dmvpn:domain"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mcbr_object_list = self.validate_inputs_form_payload(mapping_dict)

      for mcbr_object in mcbr_object_list:
        #fetch payload
        mcbr_payload = mcbr_object.getxml(filter=True)
        util.log_debug('mcbr_payload %s'%mcbr_payload)
        payload_list.append(mcbr_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mcbr_object_list = self.validate_inputs_form_payload(mapping_dict)

      for mcbr_object in mcbr_object_list:
        #fetch payload
        mcbr_payload = mcbr_object.getxml(filter=True)

        util.log_debug('mcbr_payload %s'%mcbr_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=mcbr_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      mcbr_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      source_interface_border = mapping_dict.get('source_interface_border')
      if not isinstance(source_interface_border, list):
        source_interface_border = [source_interface_border]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for source_interface_border_iterator in source_interface_border:
        rcpath_tmp =  rcpath+"/mcbr=%s"%(util.make_interfacename(source_interface_border_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, mcbr_object in enumerate(mcbr_object_list):
        #fetch payload
        mcbr_payload = mcbr_object.getxml(filter=True)

        util.log_debug('update mcbr_payload %s'%mcbr_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=mcbr_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('source_interface_border')):
        raise Exception("'source_interface_border' cannot be empty")

      #convert keys to list
      source_interface_border = mapping_dict.get('source_interface_border')
      if not isinstance(source_interface_border, list):
        source_interface_border = [source_interface_border]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for source_interface_border_iterator in source_interface_border:
        rcpath_tmp =  rcpath+"/mcbr=%s"%(util.make_interfacename(source_interface_border_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('source_interface_border')):
        raise Exception("'source_interface_border' cannot be empty")

      #convert keys to list
      source_interface_border = mapping_dict.get('source_interface_border')
      if not isinstance(source_interface_border, list):
        source_interface_border = [source_interface_border]

      #prepare payload
      mcbr_object_list = []
      for source_interface_border_iterator in source_interface_border:
        from servicemodel.controller.devices.device import domain
        mcbr_object = domain.mcbr.mcbr()
        mcbr_object.source_interface_border = source_interface_border_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('password', None)) != ''):
            mcbr_object.password = mapping_dict.get('password', None)
          else:
            mcbr_object.password._empty_tag = True
        except TypeError:
          pass
        mcbr_object_list.append(mcbr_object)

      return mcbr_object_list

  #XPATH devices/device/domain/monitor-interval-dscp
  class monitor_interval_dscp(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "dmvpn:domain"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      monitor_interval_dscp_object_list = self.validate_inputs_form_payload(mapping_dict)

      for monitor_interval_dscp_object in monitor_interval_dscp_object_list:
        #fetch payload
        monitor_interval_dscp_payload = monitor_interval_dscp_object.getxml(filter=True)
        util.log_debug('monitor_interval_dscp_payload %s'%monitor_interval_dscp_payload)
        payload_list.append(monitor_interval_dscp_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      monitor_interval_dscp_object_list = self.validate_inputs_form_payload(mapping_dict)

      for monitor_interval_dscp_object in monitor_interval_dscp_object_list:
        #fetch payload
        monitor_interval_dscp_payload = monitor_interval_dscp_object.getxml(filter=True)

        util.log_debug('monitor_interval_dscp_payload %s'%monitor_interval_dscp_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=monitor_interval_dscp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      monitor_interval_dscp_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      dscp = mapping_dict.get('dscp')
      if not isinstance(dscp, list):
        dscp = [dscp]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for dscp_iterator in dscp:
        rcpath_tmp =  rcpath+"/monitor-interval-dscp=%s"%(util.make_interfacename(dscp_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, monitor_interval_dscp_object in enumerate(monitor_interval_dscp_object_list):
        #fetch payload
        monitor_interval_dscp_payload = monitor_interval_dscp_object.getxml(filter=True)

        util.log_debug('update monitor_interval_dscp_payload %s'%monitor_interval_dscp_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=monitor_interval_dscp_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "dmvpn:domain"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('dscp')):
        raise Exception("'dscp' cannot be empty")

      #convert keys to list
      dscp = mapping_dict.get('dscp')
      if not isinstance(dscp, list):
        dscp = [dscp]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for dscp_iterator in dscp:
        rcpath_tmp =  rcpath+"/monitor-interval-dscp=%s"%(util.make_interfacename(dscp_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('dscp')):
        raise Exception("'dscp' cannot be empty")

      #convert keys to list
      dscp = mapping_dict.get('dscp')
      if not isinstance(dscp, list):
        dscp = [dscp]

      #prepare payload
      monitor_interval_dscp_object_list = []
      for dscp_iterator in dscp:
        from servicemodel.controller.devices.device import domain
        monitor_interval_dscp_object = domain.monitor_interval_dscp.monitor_interval_dscp()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('interval', None)) != ''):
            monitor_interval_dscp_object.interval = mapping_dict.get('interval', None)
          else:
            monitor_interval_dscp_object.interval._empty_tag = True
        except TypeError:
          pass
        monitor_interval_dscp_object.dscp = dscp_iterator
        monitor_interval_dscp_object_list.append(monitor_interval_dscp_object)

      return monitor_interval_dscp_object_list

