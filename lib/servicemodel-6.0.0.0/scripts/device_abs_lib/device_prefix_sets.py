#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class prefix_sets(object):
  #XPATH devices/device/prefix-sets/prefix-set
  class prefix_set(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "l3features:prefix-sets"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict)

      for prefix_set_object in prefix_set_object_list:
        #fetch payload
        prefix_set_payload = prefix_set_object.getxml(filter=True)
        util.log_debug('prefix_set_payload %s'%prefix_set_payload)
        payload_list.append(prefix_set_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "l3features:prefix-sets"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict)

      for prefix_set_object in prefix_set_object_list:
        #fetch payload
        prefix_set_payload = prefix_set_object.getxml(filter=True)

        util.log_debug('prefix_set_payload %s'%prefix_set_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=prefix_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:prefix-sets"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/prefix-set=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      for rc_counter, prefix_set_object in enumerate(prefix_set_object_list):
        #fetch payload
        prefix_set_payload = prefix_set_object.getxml(filter=True)

        util.log_debug('update prefix_set_payload %s'%prefix_set_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=prefix_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "l3features:prefix-sets"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        rcpath_tmp =  rcpath+"/prefix-set=%s"%(util.make_interfacename(name_iterator))
        rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]

      #prepare payload
      prefix_set_object_list = []
      for name_iterator in name:
        from servicemodel.controller.devices.device import prefix_sets
        prefix_set_object = prefix_sets.prefix_set.prefix_set()
        prefix_set_object.name = name_iterator
        try:
          if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
            prefix_set_object.description = mapping_dict.get('description', None)
          else:
            prefix_set_object.description._empty_tag = True
        except TypeError:
          pass
        try:
          if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
            prefix_set_object.netmask = mapping_dict.get('netmask', None)
          else:
            prefix_set_object.netmask._empty_tag = True
        except TypeError:
          pass
        prefix_set_object_list.append(prefix_set_object)

      return prefix_set_object_list

    #XPATH devices/device/prefix-sets/prefix-set/custom-prefix-set
    class custom_prefix_set(AbstractDeviceMgr):
      key_hints = [['name']]
      def getRcpathPayload(self, sdata, dev, prefix_set_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( prefix_set_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(prefix_set_name, list):
          prefix_set_name_list = [prefix_set_name]
        else:
          prefix_set_name_list = prefix_set_name

        for prefix_set_name in prefix_set_name_list:
          ##prepare rcpath
          rcpath = "l3features:prefix-sets/prefix-set=%s"%(util.make_interfacename(prefix_set_name))
          rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        custom_prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict)

        for custom_prefix_set_object in custom_prefix_set_object_list:
          #fetch payload
          custom_prefix_set_payload = custom_prefix_set_object.getxml(filter=True)
          util.log_debug('custom_prefix_set_payload %s'%custom_prefix_set_payload)
          payload_list.append(custom_prefix_set_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, prefix_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( prefix_set_name)

        #convert parent keys to list
        if not isinstance(prefix_set_name, list):
          prefix_set_name_list = [prefix_set_name]
        else:
          prefix_set_name_list = prefix_set_name

        for prefix_set_name in prefix_set_name_list:
          ##prepare rcpath
          rcpath = "l3features:prefix-sets/prefix-set=%s"%(util.make_interfacename(prefix_set_name))
          self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        custom_prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict)

        for custom_prefix_set_object in custom_prefix_set_object_list:
          #fetch payload
          custom_prefix_set_payload = custom_prefix_set_object.getxml(filter=True)

          util.log_debug('custom_prefix_set_payload %s'%custom_prefix_set_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=custom_prefix_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, prefix_set_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( prefix_set_name)


        ##prepare rcpath
        rcpath = "l3features:prefix-sets/prefix-set=%s"%(util.make_interfacename(prefix_set_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        custom_prefix_set_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/custom-prefix-set"
        rcpath_list.append(rcpath_tmp)
        for rc_counter, custom_prefix_set_object in enumerate(custom_prefix_set_object_list):
          #fetch payload
          custom_prefix_set_payload = custom_prefix_set_object.getxml(filter=True)

          util.log_debug('update custom_prefix_set_payload %s'%custom_prefix_set_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=custom_prefix_set_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, prefix_set_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( prefix_set_name)


        if not isinstance(prefix_set_name, list):
          prefix_set_name_list = [prefix_set_name]
        else:
          prefix_set_name_list = prefix_set_name

        for prefix_set_name in prefix_set_name_list:
          ##prepare rcpath
          rcpath = "l3features:prefix-sets/prefix-set=%s"%(util.make_interfacename(prefix_set_name))
          self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs

        #convert keys to list

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        rcpath_tmp =  rcpath+"/custom-prefix-set"
        rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, prefix_set_name):
        #Parent Key Validations
        if util.isEmpty(prefix_set_name):
          raise Exception("'prefix_set_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs

        #convert keys to list

        #prepare payload
        custom_prefix_set_object_list = []
        from servicemodel.controller.devices.device.prefix_sets import prefix_set
        custom_prefix_set_object = prefix_set.custom_prefix_set.custom_prefix_set()
        try:
          if (update == False) or (update == True and str(mapping_dict.get('prefix_set_buf', None)) != ''):
            custom_prefix_set_object.prefix_set_buf = mapping_dict.get('prefix_set_buf', None)
          else:
            custom_prefix_set_object.prefix_set_buf._empty_tag = True
        except TypeError:
          pass
        custom_prefix_set_object_list.append(custom_prefix_set_object)

        return custom_prefix_set_object_list

    class match_conditions(object):
      #XPATH devices/device/prefix-sets/prefix-set/match-conditions/match-condition
      class match_condition(AbstractDeviceMgr):
        key_hints = [['name']]
        def getRcpathPayload(self, sdata, dev, prefix_set_name, mapping_dict):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_set_name)

          #convert parent keys to list
          rcpath_list = []
          payload_list = []
          if not isinstance(prefix_set_name, list):
            prefix_set_name_list = [prefix_set_name]
          else:
            prefix_set_name_list = prefix_set_name

          for prefix_set_name in prefix_set_name_list:
            ##prepare rcpath
            rcpath = "l3features:prefix-sets/prefix-set=%s/match-conditions"%(util.make_interfacename(prefix_set_name))
            rcpath_list.append(rcpath)
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

          for match_condition_object in match_condition_object_list:
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)
            util.log_debug('match_condition_payload %s'%match_condition_payload)
            payload_list.append(match_condition_payload)

          return rcpath_list, payload_list

        def create(self, sdata, dev, prefix_set_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_set_name)

          #convert parent keys to list
          if not isinstance(prefix_set_name, list):
            prefix_set_name_list = [prefix_set_name]
          else:
            prefix_set_name_list = prefix_set_name

          for prefix_set_name in prefix_set_name_list:
            ##prepare rcpath
            rcpath = "l3features:prefix-sets/prefix-set=%s/match-conditions"%(util.make_interfacename(prefix_set_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def create_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict)

          for match_condition_object in match_condition_object_list:
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)

            util.log_debug('match_condition_payload %s'%match_condition_payload)

            #call the base abstract class for createData
            super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def update(self, sdata, dev, prefix_set_name, mapping_dict, addref=True, autocommit=True):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_set_name)


          ##prepare rcpath
          rcpath = "l3features:prefix-sets/prefix-set=%s/match-conditions"%(util.make_interfacename(prefix_set_name))
          self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

        def update_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs and get payload object
          match_condition_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/match-condition=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          for rc_counter, match_condition_object in enumerate(match_condition_object_list):
            #fetch payload
            match_condition_payload = match_condition_object.getxml(filter=True)

            util.log_debug('update match_condition_payload %s'%match_condition_payload)

            rcpath = rcpath_list[rc_counter]
            #call the base abstract class for createData
            super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=match_condition_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

        def delete(self, sdata, dev, prefix_set_name, mapping_dict, fail_silently=False, remove_reference=False):
          dev = get_valid_devices(dev)
          if len(dev) == 0:
            return
          #Input Key Validations
          self.validate_parent_keys( prefix_set_name)


          if not isinstance(prefix_set_name, list):
            prefix_set_name_list = [prefix_set_name]
          else:
            prefix_set_name_list = prefix_set_name

          for prefix_set_name in prefix_set_name_list:
            ##prepare rcpath
            rcpath = "l3features:prefix-sets/prefix-set=%s/match-conditions"%(util.make_interfacename(prefix_set_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

        def delete_(self, sdata, dev, **kwargs):
          mapping_dict = kwargs.get('mapping_dict')

          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare rcpath
          rcpath = kwargs.get('rcpath')
          rcpath_list = []
          for ip_address_iterator in ip_address:
            rcpath_tmp =  rcpath+"/match-condition=%s"%(util.make_interfacename(ip_address_iterator))
            rcpath_list.append(rcpath_tmp)
          payload = ''

          for rcpath in rcpath_list:
            #call the base abstract class for deleteData
            super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

        def validate_parent_keys(self, prefix_set_name):
          #Parent Key Validations
          if util.isEmpty(prefix_set_name):
            raise Exception("'prefix_set_name' cannot be empty")

        def validate_inputs_form_payload(self, mapping_dict, update=False):
          #validating inputs
          if util.isEmpty(mapping_dict.get('ip_address')):
            raise Exception("'ip_address' cannot be empty")

          #convert keys to list
          ip_address = mapping_dict.get('ip_address')
          if not isinstance(ip_address, list):
            ip_address = [ip_address]

          #prepare payload
          match_condition_object_list = []
          for ip_address_iterator in ip_address:
            from servicemodel.controller.devices.device.prefix_sets.prefix_set import match_conditions
            match_condition_object = match_conditions.match_condition.match_condition()
            match_condition_object.ip_address = ip_address_iterator
            try:
              if (update == False) or (update == True and str(mapping_dict.get('mask_length', None)) != ''):
                match_condition_object.mask_length = mapping_dict.get('mask_length', None)
              else:
                match_condition_object.mask_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('min_match_length', None)) != ''):
                match_condition_object.min_match_length = mapping_dict.get('min_match_length', None)
              else:
                match_condition_object.min_match_length._empty_tag = True
            except TypeError:
              pass
            try:
              if (update == False) or (update == True and str(mapping_dict.get('max_match_length', None)) != ''):
                match_condition_object.max_match_length = mapping_dict.get('max_match_length', None)
              else:
                match_condition_object.max_match_length._empty_tag = True
            except TypeError:
              pass
            match_condition_object_list.append(match_condition_object)

          return match_condition_object_list

