#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class object_groups(object):
  #XPATH devices/device/object-groups/object-group
  class object_group(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "firewall:object-groups"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

      for object_group_object in object_group_object_list:
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)
        util.log_debug('object_group_payload %s'%object_group_payload)
        payload_list.append(object_group_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "firewall:object-groups"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

      for object_group_object in object_group_object_list:
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)

        util.log_debug('object_group_payload %s'%object_group_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:object-groups"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      context_name = mapping_dict.get('context_name')
      if not isinstance(context_name, list):
        context_name = [context_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for context_name_iterator in context_name:
          rcpath_tmp =  rcpath+"/object-group=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(context_name_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, object_group_object in enumerate(object_group_object_list):
        #fetch payload
        object_group_payload = object_group_object.getxml(filter=True)

        util.log_debug('update object_group_payload %s'%object_group_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "firewall:object-groups"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('context_name')):
        raise Exception("'context_name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      context_name = mapping_dict.get('context_name')
      if not isinstance(context_name, list):
        context_name = [context_name]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for context_name_iterator in context_name:
          rcpath_tmp =  rcpath+"/object-group=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(context_name_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('context_name')):
        raise Exception("'context_name' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      context_name = mapping_dict.get('context_name')
      if not isinstance(context_name, list):
        context_name = [context_name]

      #prepare payload
      object_group_object_list = []
      for name_iterator in name:
        for context_name_iterator in context_name:
          from servicemodel.controller.devices.device import object_groups
          object_group_object = object_groups.object_group.object_group()
          object_group_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              object_group_object.description = mapping_dict.get('description', None)
            else:
              object_group_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('type', None)) != ''):
              object_group_object.type = mapping_dict.get('type', None)
            else:
              object_group_object.type._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('service_type', None)) != ''):
              object_group_object.service_type = mapping_dict.get('service_type', None)
            else:
              object_group_object.service_type._empty_tag = True
          except TypeError:
            pass
          object_group_object.context_name = context_name_iterator
          object_group_object_list.append(object_group_object)

      return object_group_object_list

    #XPATH devices/device/object-groups/object-group/network-object
    class network_object(AbstractDeviceMgr):
      key_hints = [['name','context_name']]
      def getRcpathPayload(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

        for network_object_object in network_object_object_list:
          #fetch payload
          network_object_payload = network_object_object.getxml(filter=True)
          util.log_debug('network_object_payload %s'%network_object_payload)
          payload_list.append(network_object_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        network_object_object_list = self.validate_inputs_form_payload(mapping_dict)

        for network_object_object in network_object_object_list:
          #fetch payload
          network_object_payload = network_object_object.getxml(filter=True)

          util.log_debug('network_object_payload %s'%network_object_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        ##prepare rcpath
        rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        network_object_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        network_object_name = mapping_dict.get('network_object_name')
        if not isinstance(network_object_name, list):
          network_object_name = [network_object_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for network_object_name_iterator in network_object_name:
          rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(network_object_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, network_object_object in enumerate(network_object_object_list):
          #fetch payload
          network_object_payload = network_object_object.getxml(filter=True)

          util.log_debug('update network_object_payload %s'%network_object_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=network_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('network_object_name')):
          raise Exception("'network_object_name' cannot be empty")

        #convert keys to list
        network_object_name = mapping_dict.get('network_object_name')
        if not isinstance(network_object_name, list):
          network_object_name = [network_object_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for network_object_name_iterator in network_object_name:
          rcpath_tmp =  rcpath+"/network-object=%s"%(util.make_interfacename(network_object_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, object_group_name, object_group_context_name):
        #Parent Key Validations
        if util.isEmpty(object_group_name):
          raise Exception("'object_group_name' cannot be empty")
        if util.isEmpty(object_group_context_name):
          raise Exception("'object_group_context_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('network_object_name')):
          raise Exception("'network_object_name' cannot be empty")

        #convert keys to list
        network_object_name = mapping_dict.get('network_object_name')
        if not isinstance(network_object_name, list):
          network_object_name = [network_object_name]

        #prepare payload
        network_object_object_list = []
        for network_object_name_iterator in network_object_name:
          from servicemodel.controller.devices.device.object_groups import object_group
          network_object_object = object_group.network_object.network_object()
          network_object_object.network_object_name = network_object_name_iterator
          network_object_object_list.append(network_object_object)

        return network_object_object_list

    #XPATH devices/device/object-groups/object-group/sub-object-group
    class sub_object_group(AbstractDeviceMgr):
      key_hints = [['name','context_name']]
      def getRcpathPayload(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sub_object_group_object in sub_object_group_object_list:
          #fetch payload
          sub_object_group_payload = sub_object_group_object.getxml(filter=True)
          util.log_debug('sub_object_group_payload %s'%sub_object_group_payload)
          payload_list.append(sub_object_group_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict)

        for sub_object_group_object in sub_object_group_object_list:
          #fetch payload
          sub_object_group_payload = sub_object_group_object.getxml(filter=True)

          util.log_debug('sub_object_group_payload %s'%sub_object_group_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=sub_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        ##prepare rcpath
        rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        sub_object_group_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        object_group_name = mapping_dict.get('object_group_name')
        if not isinstance(object_group_name, list):
          object_group_name = [object_group_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for object_group_name_iterator in object_group_name:
          rcpath_tmp =  rcpath+"/sub-object-group=%s"%(util.make_interfacename(object_group_name_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, sub_object_group_object in enumerate(sub_object_group_object_list):
          #fetch payload
          sub_object_group_payload = sub_object_group_object.getxml(filter=True)

          util.log_debug('update sub_object_group_payload %s'%sub_object_group_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=sub_object_group_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('object_group_name')):
          raise Exception("'object_group_name' cannot be empty")

        #convert keys to list
        object_group_name = mapping_dict.get('object_group_name')
        if not isinstance(object_group_name, list):
          object_group_name = [object_group_name]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for object_group_name_iterator in object_group_name:
          rcpath_tmp =  rcpath+"/sub-object-group=%s"%(util.make_interfacename(object_group_name_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, object_group_name, object_group_context_name):
        #Parent Key Validations
        if util.isEmpty(object_group_name):
          raise Exception("'object_group_name' cannot be empty")
        if util.isEmpty(object_group_context_name):
          raise Exception("'object_group_context_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('object_group_name')):
          raise Exception("'object_group_name' cannot be empty")

        #convert keys to list
        object_group_name = mapping_dict.get('object_group_name')
        if not isinstance(object_group_name, list):
          object_group_name = [object_group_name]

        #prepare payload
        sub_object_group_object_list = []
        for object_group_name_iterator in object_group_name:
          from servicemodel.controller.devices.device.object_groups import object_group
          sub_object_group_object = object_group.sub_object_group.sub_object_group()
          sub_object_group_object.object_group_name = object_group_name_iterator
          sub_object_group_object_list.append(sub_object_group_object)

        return sub_object_group_object_list

    #XPATH devices/device/object-groups/object-group/service-object
    class service_object(AbstractDeviceMgr):
      key_hints = [['name','context_name']]
      def getRcpathPayload(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        rcpath_list = []
        payload_list = []
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            rcpath_list.append(rcpath)
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_object_object in service_object_object_list:
          #fetch payload
          service_object_payload = service_object_object.getxml(filter=True)
          util.log_debug('service_object_payload %s'%service_object_payload)
          payload_list.append(service_object_payload)

        return rcpath_list, payload_list

      def create(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)

        #convert parent keys to list
        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def create_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_object_list = self.validate_inputs_form_payload(mapping_dict)

        for service_object_object in service_object_object_list:
          #fetch payload
          service_object_payload = service_object_object.getxml(filter=True)

          util.log_debug('service_object_payload %s'%service_object_payload)

          #call the base abstract class for createData
          super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=service_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def update(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, addref=True, autocommit=True):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        ##prepare rcpath
        rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
        self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

      def update_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs and get payload object
        service_object_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

        #convert keys to list
        service_object_value = mapping_dict.get('service_object_value')
        if not isinstance(service_object_value, list):
          service_object_value = [service_object_value]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for service_object_value_iterator in service_object_value:
          rcpath_tmp =  rcpath+"/service-object=%s"%(util.make_interfacename(service_object_value_iterator))
          rcpath_list.append(rcpath_tmp)
        for rc_counter, service_object_object in enumerate(service_object_object_list):
          #fetch payload
          service_object_payload = service_object_object.getxml(filter=True)

          util.log_debug('update service_object_payload %s'%service_object_payload)

          rcpath = rcpath_list[rc_counter]
          #call the base abstract class for createData
          super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=service_object_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

      def delete(self, sdata, dev, object_group_name, object_group_context_name, mapping_dict, fail_silently=False, remove_reference=False):
        dev = get_valid_devices(dev)
        if len(dev) == 0:
          return
        #Input Key Validations
        self.validate_parent_keys( object_group_name, object_group_context_name)


        if not isinstance(object_group_name, list):
          object_group_name_list = [object_group_name]
        else:
          object_group_name_list = object_group_name
        if not isinstance(object_group_context_name, list):
          object_group_context_name_list = [object_group_context_name]
        else:
          object_group_context_name_list = object_group_context_name

        for object_group_name in object_group_name_list:
          for object_group_context_name in object_group_context_name_list:
            ##prepare rcpath
            rcpath = "firewall:object-groups/object-group=%s,%s"%(util.make_interfacename(object_group_name),util.make_interfacename(object_group_context_name))
            self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

      def delete_(self, sdata, dev, **kwargs):
        mapping_dict = kwargs.get('mapping_dict')

        #validating inputs
        if util.isEmpty(mapping_dict.get('service_object_value')):
          raise Exception("'service_object_value' cannot be empty")

        #convert keys to list
        service_object_value = mapping_dict.get('service_object_value')
        if not isinstance(service_object_value, list):
          service_object_value = [service_object_value]

        #prepare rcpath
        rcpath = kwargs.get('rcpath')
        rcpath_list = []
        for service_object_value_iterator in service_object_value:
          rcpath_tmp =  rcpath+"/service-object=%s"%(util.make_interfacename(service_object_value_iterator))
          rcpath_list.append(rcpath_tmp)
        payload = ''

        for rcpath in rcpath_list:
          #call the base abstract class for deleteData
          super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

      def validate_parent_keys(self, object_group_name, object_group_context_name):
        #Parent Key Validations
        if util.isEmpty(object_group_name):
          raise Exception("'object_group_name' cannot be empty")
        if util.isEmpty(object_group_context_name):
          raise Exception("'object_group_context_name' cannot be empty")

      def validate_inputs_form_payload(self, mapping_dict, update=False):
        #validating inputs
        if util.isEmpty(mapping_dict.get('service_object_value')):
          raise Exception("'service_object_value' cannot be empty")

        #convert keys to list
        service_object_value = mapping_dict.get('service_object_value')
        if not isinstance(service_object_value, list):
          service_object_value = [service_object_value]

        #prepare payload
        service_object_object_list = []
        for service_object_value_iterator in service_object_value:
          from servicemodel.controller.devices.device.object_groups import object_group
          service_object_object = object_group.service_object.service_object()
          service_object_object.service_object_value = service_object_value_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('service_object_type', None)) != ''):
              service_object_object.service_object_type = mapping_dict.get('service_object_type', None)
            else:
              service_object_object.service_object_type._empty_tag = True
          except TypeError:
            pass
          service_object_object_list.append(service_object_object)

        return service_object_object_list

