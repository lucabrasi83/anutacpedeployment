#
# This computer program is the confidential information and proprietary trade
# secret of Anuta Networks, Inc. Possessions and use of this program must
# conform strictly to the license agreement between the user and
# Anuta Networks, Inc., and receipt or possession does not convey any rights
# to divulge, reproduce, or allow others to use this program without specific
# written authorization of Anuta Networks, Inc.
#
# Copyright (c) 2015-2016 Anuta Networks, Inc. All Rights Reserved.
#

#
#DO NOT EDIT THIS FILE ITS AUTOGENERATED ONE
#

from servicemodel import util
from servicemodel import yang
from servicemodel import devicemgr
from servicemodel.abstract_dev_mgr import AbstractDeviceMgr

def get_valid_devices(devs):
  vdevs = []
  if isinstance(devs, list):
    for dev in devs:
      drivername = dev.device.get_field_value('driver_name')
      if util.isEmpty(drivername):
        vdevs.append(dev)
  else:
    drivername = devs.device.get_field_value('driver_name')
    if util.isEmpty(drivername):
      vdevs.append(devs)

  return vdevs

class self_ips(object):
  #XPATH devices/device/self-ips/self-ip
  class self_ip(AbstractDeviceMgr):
    key_hints = [[]]
    def getRcpathPayload(self, sdata, dev, mapping_dict):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      rcpath_list = []
      payload_list = []
      ##prepare rcpath
      rcpath = "loadbalancer:self-ips"
      rcpath_list.append(rcpath)
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      self_ip_object_list = self.validate_inputs_form_payload(mapping_dict)

      for self_ip_object in self_ip_object_list:
        #fetch payload
        self_ip_payload = self_ip_object.getxml(filter=True)
        util.log_debug('self_ip_payload %s'%self_ip_payload)
        payload_list.append(self_ip_payload)

      return rcpath_list, payload_list

    def create(self, sdata, dev, mapping_dict, addref=True, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return
      #convert parent keys to list
      ##prepare rcpath
      rcpath = "loadbalancer:self-ips"
      self.create_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def create_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      self_ip_object_list = self.validate_inputs_form_payload(mapping_dict)

      for self_ip_object in self_ip_object_list:
        #fetch payload
        self_ip_payload = self_ip_object.getxml(filter=True)

        util.log_debug('self_ip_payload %s'%self_ip_payload)

        #call the base abstract class for createData
        super(self.__class__, self).create_(sdata, dev, rcpath=kwargs.get('rcpath'), payload=self_ip_payload, key_hints=self.key_hints, addref=kwargs.get('addref', True), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def update(self, sdata, dev, mapping_dict, addref=False, autocommit=True):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:self-ips"
      self.update_(sdata, dev, mapping_dict=mapping_dict, addref=addref, autocommit=autocommit, rcpath=rcpath)

    def update_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs and get payload object
      self_ip_object_list = self.validate_inputs_form_payload(mapping_dict, update=True)

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/self-ip=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      for rc_counter, self_ip_object in enumerate(self_ip_object_list):
        #fetch payload
        self_ip_payload = self_ip_object.getxml(filter=True)

        util.log_debug('update self_ip_payload %s'%self_ip_payload)

        rcpath = rcpath_list[rc_counter]
        #call the base abstract class for createData
        super(self.__class__, self).update_(sdata, dev, rcpath=rcpath, payload=self_ip_payload, key_hints=self.key_hints, addref=kwargs.get('addref', False), autocommit=kwargs.get('autocommit', True), mapping_dict=mapping_dict)

    def delete(self, sdata, dev, mapping_dict, fail_silently=False, remove_reference=False):
      dev = get_valid_devices(dev)
      if len(dev) == 0:
        return

      ##prepare rcpath
      rcpath = "loadbalancer:self-ips"
      self.delete_(sdata, dev, mapping_dict=mapping_dict, fail_silently=fail_silently, remove_reference=remove_reference, rcpath=rcpath)

    def delete_(self, sdata, dev, **kwargs):
      mapping_dict = kwargs.get('mapping_dict')

      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare rcpath
      rcpath = kwargs.get('rcpath')
      rcpath_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          rcpath_tmp =  rcpath+"/self-ip=%s,%s"%(util.make_interfacename(name_iterator),util.make_interfacename(partition_iterator))
          rcpath_list.append(rcpath_tmp)
      payload = ''

      for rcpath in rcpath_list:
        #call the base abstract class for deleteData
        super(self.__class__, self).delete_(sdata, dev, rcpath=rcpath, payload=payload, fail_silently=kwargs.get('fail_silently', False), remove_reference=kwargs.get('remove_reference', False))

    def validate_inputs_form_payload(self, mapping_dict, update=False):
      #validating inputs
      if util.isEmpty(mapping_dict.get('name')):
        raise Exception("'name' cannot be empty")
      if util.isEmpty(mapping_dict.get('partition')):
        raise Exception("'partition' cannot be empty")

      #convert keys to list
      name = mapping_dict.get('name')
      if not isinstance(name, list):
        name = [name]
      partition = mapping_dict.get('partition')
      if not isinstance(partition, list):
        partition = [partition]

      #prepare payload
      self_ip_object_list = []
      for name_iterator in name:
        for partition_iterator in partition:
          from servicemodel.controller.devices.device import self_ips
          self_ip_object = self_ips.self_ip.self_ip()
          self_ip_object.name = name_iterator
          try:
            if (update == False) or (update == True and str(mapping_dict.get('ip_address', None)) != ''):
              self_ip_object.ip_address = mapping_dict.get('ip_address', None)
            else:
              self_ip_object.ip_address._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('description', None)) != ''):
              self_ip_object.description = mapping_dict.get('description', None)
            else:
              self_ip_object.description._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('netmask', None)) != ''):
              self_ip_object.netmask = mapping_dict.get('netmask', None)
            else:
              self_ip_object.netmask._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vlan_number', None)) != ''):
              self_ip_object.vlan_number = mapping_dict.get('vlan_number', None)
            else:
              self_ip_object.vlan_number._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('vlan_name', None)) != ''):
              self_ip_object.vlan_name = mapping_dict.get('vlan_name', None)
            else:
              self_ip_object.vlan_name._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('domain_number', None)) != ''):
              self_ip_object.domain_number = mapping_dict.get('domain_number', None)
            else:
              self_ip_object.domain_number._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('floating_ip', None)) != ''):
              self_ip_object.floating_ip = mapping_dict.get('floating_ip', None)
            else:
              self_ip_object.floating_ip._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('port_lockdown', None)) != ''):
              self_ip_object.port_lockdown = mapping_dict.get('port_lockdown', None)
            else:
              self_ip_object.port_lockdown._empty_tag = True
          except TypeError:
            pass
          try:
            if (update == False) or (update == True and str(mapping_dict.get('interface_name', None)) != ''):
              self_ip_object.interface_name = mapping_dict.get('interface_name', None)
            else:
              self_ip_object.interface_name._empty_tag = True
          except TypeError:
            pass
          self_ip_object.partition = partition_iterator
          self_ip_object_list.append(self_ip_object)

      return self_ip_object_list

